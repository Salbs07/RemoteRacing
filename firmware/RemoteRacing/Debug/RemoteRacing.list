
RemoteRacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007208  08007208  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007208  08007208  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015bc  2000000c  0800721c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  0800721c  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a468  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003673  00000000  00000000  0003a49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  0003ef18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000104ba  00000000  00000000  00040178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011beb  00000000  00000000  00050632  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000544ca  00000000  00000000  0006221d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b66e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  000b6764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006fcc 	.word	0x08006fcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006fcc 	.word	0x08006fcc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	0244      	lsls	r4, r0, #9
 800022c:	b5e0      	push	{r5, r6, r7, lr}
 800022e:	0046      	lsls	r6, r0, #1
 8000230:	4688      	mov	r8, r1
 8000232:	0a64      	lsrs	r4, r4, #9
 8000234:	0e36      	lsrs	r6, r6, #24
 8000236:	0fc7      	lsrs	r7, r0, #31
 8000238:	2e00      	cmp	r6, #0
 800023a:	d063      	beq.n	8000304 <__aeabi_fdiv+0xe4>
 800023c:	2eff      	cmp	r6, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431c      	orrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469b      	mov	fp, r3
 800024e:	3e7f      	subs	r6, #127	; 0x7f
 8000250:	4643      	mov	r3, r8
 8000252:	4642      	mov	r2, r8
 8000254:	025d      	lsls	r5, r3, #9
 8000256:	0fd2      	lsrs	r2, r2, #31
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0a6d      	lsrs	r5, r5, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	4690      	mov	r8, r2
 8000260:	4692      	mov	sl, r2
 8000262:	d065      	beq.n	8000330 <__aeabi_fdiv+0x110>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d055      	beq.n	8000314 <__aeabi_fdiv+0xf4>
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	00ed      	lsls	r5, r5, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	4315      	orrs	r5, r2
 8000274:	1af6      	subs	r6, r6, r3
 8000276:	4643      	mov	r3, r8
 8000278:	464a      	mov	r2, r9
 800027a:	407b      	eors	r3, r7
 800027c:	2a0f      	cmp	r2, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e08d      	b.n	800039e <__aeabi_fdiv+0x17e>
 8000282:	486d      	ldr	r0, [pc, #436]	; (8000438 <__aeabi_fdiv+0x218>)
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	5882      	ldr	r2, [r0, r2]
 8000288:	4697      	mov	pc, r2
 800028a:	2c00      	cmp	r4, #0
 800028c:	d154      	bne.n	8000338 <__aeabi_fdiv+0x118>
 800028e:	2308      	movs	r3, #8
 8000290:	4699      	mov	r9, r3
 8000292:	3b06      	subs	r3, #6
 8000294:	26ff      	movs	r6, #255	; 0xff
 8000296:	469b      	mov	fp, r3
 8000298:	e7da      	b.n	8000250 <__aeabi_fdiv+0x30>
 800029a:	2500      	movs	r5, #0
 800029c:	4653      	mov	r3, sl
 800029e:	2902      	cmp	r1, #2
 80002a0:	d01b      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002a2:	2903      	cmp	r1, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e0bf      	b.n	8000428 <__aeabi_fdiv+0x208>
 80002a8:	2901      	cmp	r1, #1
 80002aa:	d028      	beq.n	80002fe <__aeabi_fdiv+0xde>
 80002ac:	0030      	movs	r0, r6
 80002ae:	307f      	adds	r0, #127	; 0x7f
 80002b0:	2800      	cmp	r0, #0
 80002b2:	dd20      	ble.n	80002f6 <__aeabi_fdiv+0xd6>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	0030      	movs	r0, r6
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <__aeabi_fdiv+0x21c>)
 80002ca:	3080      	adds	r0, #128	; 0x80
 80002cc:	4015      	ands	r5, r2
 80002ce:	28fe      	cmp	r0, #254	; 0xfe
 80002d0:	dc03      	bgt.n	80002da <__aeabi_fdiv+0xba>
 80002d2:	01ac      	lsls	r4, r5, #6
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	b2c2      	uxtb	r2, r0
 80002d8:	e001      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002da:	22ff      	movs	r2, #255	; 0xff
 80002dc:	2400      	movs	r4, #0
 80002de:	0264      	lsls	r4, r4, #9
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	0a60      	lsrs	r0, r4, #9
 80002e4:	07db      	lsls	r3, r3, #31
 80002e6:	4310      	orrs	r0, r2
 80002e8:	4318      	orrs	r0, r3
 80002ea:	bc3c      	pop	{r2, r3, r4, r5}
 80002ec:	4690      	mov	r8, r2
 80002ee:	4699      	mov	r9, r3
 80002f0:	46a2      	mov	sl, r4
 80002f2:	46ab      	mov	fp, r5
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	2201      	movs	r2, #1
 80002f8:	1a10      	subs	r0, r2, r0
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dd7c      	ble.n	80003f8 <__aeabi_fdiv+0x1d8>
 80002fe:	2200      	movs	r2, #0
 8000300:	2400      	movs	r4, #0
 8000302:	e7ec      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d11d      	bne.n	8000344 <__aeabi_fdiv+0x124>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2600      	movs	r6, #0
 8000310:	469b      	mov	fp, r3
 8000312:	e79d      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000314:	3eff      	subs	r6, #255	; 0xff
 8000316:	2d00      	cmp	r5, #0
 8000318:	d120      	bne.n	800035c <__aeabi_fdiv+0x13c>
 800031a:	2102      	movs	r1, #2
 800031c:	4643      	mov	r3, r8
 800031e:	464a      	mov	r2, r9
 8000320:	407b      	eors	r3, r7
 8000322:	430a      	orrs	r2, r1
 8000324:	2a0f      	cmp	r2, #15
 8000326:	d8d8      	bhi.n	80002da <__aeabi_fdiv+0xba>
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <__aeabi_fdiv+0x220>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	5882      	ldr	r2, [r0, r2]
 800032e:	4697      	mov	pc, r2
 8000330:	2d00      	cmp	r5, #0
 8000332:	d119      	bne.n	8000368 <__aeabi_fdiv+0x148>
 8000334:	2101      	movs	r1, #1
 8000336:	e7f1      	b.n	800031c <__aeabi_fdiv+0xfc>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469b      	mov	fp, r3
 8000342:	e785      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fa39 	bl	80007bc <__clzsi2>
 800034a:	2676      	movs	r6, #118	; 0x76
 800034c:	1f43      	subs	r3, r0, #5
 800034e:	409c      	lsls	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4276      	negs	r6, r6
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	4699      	mov	r9, r3
 8000358:	469b      	mov	fp, r3
 800035a:	e779      	b.n	8000250 <__aeabi_fdiv+0x30>
 800035c:	464a      	mov	r2, r9
 800035e:	2303      	movs	r3, #3
 8000360:	431a      	orrs	r2, r3
 8000362:	4691      	mov	r9, r2
 8000364:	2103      	movs	r1, #3
 8000366:	e786      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000368:	0028      	movs	r0, r5
 800036a:	f000 fa27 	bl	80007bc <__clzsi2>
 800036e:	1f43      	subs	r3, r0, #5
 8000370:	1836      	adds	r6, r6, r0
 8000372:	409d      	lsls	r5, r3
 8000374:	3676      	adds	r6, #118	; 0x76
 8000376:	2100      	movs	r1, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	2480      	movs	r4, #128	; 0x80
 800037c:	2300      	movs	r3, #0
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	e7ac      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000384:	2500      	movs	r5, #0
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421c      	tst	r4, r3
 800038c:	d028      	beq.n	80003e0 <__aeabi_fdiv+0x1c0>
 800038e:	421d      	tst	r5, r3
 8000390:	d126      	bne.n	80003e0 <__aeabi_fdiv+0x1c0>
 8000392:	432b      	orrs	r3, r5
 8000394:	025c      	lsls	r4, r3, #9
 8000396:	0a64      	lsrs	r4, r4, #9
 8000398:	4643      	mov	r3, r8
 800039a:	22ff      	movs	r2, #255	; 0xff
 800039c:	e79f      	b.n	80002de <__aeabi_fdiv+0xbe>
 800039e:	0162      	lsls	r2, r4, #5
 80003a0:	016c      	lsls	r4, r5, #5
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d224      	bcs.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003a6:	211b      	movs	r1, #27
 80003a8:	2500      	movs	r5, #0
 80003aa:	3e01      	subs	r6, #1
 80003ac:	2701      	movs	r7, #1
 80003ae:	0010      	movs	r0, r2
 80003b0:	006d      	lsls	r5, r5, #1
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2800      	cmp	r0, #0
 80003b6:	db01      	blt.n	80003bc <__aeabi_fdiv+0x19c>
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d801      	bhi.n	80003c0 <__aeabi_fdiv+0x1a0>
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	433d      	orrs	r5, r7
 80003c0:	3901      	subs	r1, #1
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d1f3      	bne.n	80003ae <__aeabi_fdiv+0x18e>
 80003c6:	0014      	movs	r4, r2
 80003c8:	1e62      	subs	r2, r4, #1
 80003ca:	4194      	sbcs	r4, r2
 80003cc:	4325      	orrs	r5, r4
 80003ce:	e76d      	b.n	80002ac <__aeabi_fdiv+0x8c>
 80003d0:	46ba      	mov	sl, r7
 80003d2:	4659      	mov	r1, fp
 80003d4:	0025      	movs	r5, r4
 80003d6:	4653      	mov	r3, sl
 80003d8:	2902      	cmp	r1, #2
 80003da:	d000      	beq.n	80003de <__aeabi_fdiv+0x1be>
 80003dc:	e761      	b.n	80002a2 <__aeabi_fdiv+0x82>
 80003de:	e77c      	b.n	80002da <__aeabi_fdiv+0xba>
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0264      	lsls	r4, r4, #9
 80003e8:	0a64      	lsrs	r4, r4, #9
 80003ea:	003b      	movs	r3, r7
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	e776      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003f0:	1b12      	subs	r2, r2, r4
 80003f2:	211a      	movs	r1, #26
 80003f4:	2501      	movs	r5, #1
 80003f6:	e7d9      	b.n	80003ac <__aeabi_fdiv+0x18c>
 80003f8:	369e      	adds	r6, #158	; 0x9e
 80003fa:	002a      	movs	r2, r5
 80003fc:	40b5      	lsls	r5, r6
 80003fe:	002c      	movs	r4, r5
 8000400:	40c2      	lsrs	r2, r0
 8000402:	1e65      	subs	r5, r4, #1
 8000404:	41ac      	sbcs	r4, r5
 8000406:	4314      	orrs	r4, r2
 8000408:	0762      	lsls	r2, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 800040c:	220f      	movs	r2, #15
 800040e:	4022      	ands	r2, r4
 8000410:	2a04      	cmp	r2, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 8000414:	3404      	adds	r4, #4
 8000416:	0162      	lsls	r2, r4, #5
 8000418:	d403      	bmi.n	8000422 <__aeabi_fdiv+0x202>
 800041a:	01a4      	lsls	r4, r4, #6
 800041c:	0a64      	lsrs	r4, r4, #9
 800041e:	2200      	movs	r2, #0
 8000420:	e75d      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000422:	2201      	movs	r2, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e75a      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	432c      	orrs	r4, r5
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e753      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	080070a8 	.word	0x080070a8
 800043c:	f7ffffff 	.word	0xf7ffffff
 8000440:	080070e8 	.word	0x080070e8

08000444 <__aeabi_fmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	464e      	mov	r6, r9
 8000448:	4657      	mov	r7, sl
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0243      	lsls	r3, r0, #9
 8000452:	0a5b      	lsrs	r3, r3, #9
 8000454:	0045      	lsls	r5, r0, #1
 8000456:	b083      	sub	sp, #12
 8000458:	1c0f      	adds	r7, r1, #0
 800045a:	4699      	mov	r9, r3
 800045c:	0e2d      	lsrs	r5, r5, #24
 800045e:	0fc6      	lsrs	r6, r0, #31
 8000460:	2d00      	cmp	r5, #0
 8000462:	d057      	beq.n	8000514 <__aeabi_fmul+0xd0>
 8000464:	2dff      	cmp	r5, #255	; 0xff
 8000466:	d024      	beq.n	80004b2 <__aeabi_fmul+0x6e>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	04c0      	lsls	r0, r0, #19
 800046e:	4318      	orrs	r0, r3
 8000470:	2300      	movs	r3, #0
 8000472:	4681      	mov	r9, r0
 8000474:	469a      	mov	sl, r3
 8000476:	469b      	mov	fp, r3
 8000478:	3d7f      	subs	r5, #127	; 0x7f
 800047a:	027c      	lsls	r4, r7, #9
 800047c:	007a      	lsls	r2, r7, #1
 800047e:	0ffb      	lsrs	r3, r7, #31
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	0e12      	lsrs	r2, r2, #24
 8000484:	4698      	mov	r8, r3
 8000486:	d023      	beq.n	80004d0 <__aeabi_fmul+0x8c>
 8000488:	2aff      	cmp	r2, #255	; 0xff
 800048a:	d04b      	beq.n	8000524 <__aeabi_fmul+0xe0>
 800048c:	00e3      	lsls	r3, r4, #3
 800048e:	2480      	movs	r4, #128	; 0x80
 8000490:	2000      	movs	r0, #0
 8000492:	04e4      	lsls	r4, r4, #19
 8000494:	3a7f      	subs	r2, #127	; 0x7f
 8000496:	431c      	orrs	r4, r3
 8000498:	18ad      	adds	r5, r5, r2
 800049a:	1c6b      	adds	r3, r5, #1
 800049c:	4647      	mov	r7, r8
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	4653      	mov	r3, sl
 80004a2:	4077      	eors	r7, r6
 80004a4:	003a      	movs	r2, r7
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d848      	bhi.n	800053c <__aeabi_fmul+0xf8>
 80004aa:	497d      	ldr	r1, [pc, #500]	; (80006a0 <__aeabi_fmul+0x25c>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	58cb      	ldr	r3, [r1, r3]
 80004b0:	469f      	mov	pc, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fmul+0x74>
 80004b6:	e085      	b.n	80005c4 <__aeabi_fmul+0x180>
 80004b8:	3308      	adds	r3, #8
 80004ba:	469a      	mov	sl, r3
 80004bc:	3b06      	subs	r3, #6
 80004be:	469b      	mov	fp, r3
 80004c0:	027c      	lsls	r4, r7, #9
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	25ff      	movs	r5, #255	; 0xff
 80004c8:	0a64      	lsrs	r4, r4, #9
 80004ca:	0e12      	lsrs	r2, r2, #24
 80004cc:	4698      	mov	r8, r3
 80004ce:	d1db      	bne.n	8000488 <__aeabi_fmul+0x44>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fmul+0x92>
 80004d4:	e090      	b.n	80005f8 <__aeabi_fmul+0x1b4>
 80004d6:	4652      	mov	r2, sl
 80004d8:	2301      	movs	r3, #1
 80004da:	431a      	orrs	r2, r3
 80004dc:	4692      	mov	sl, r2
 80004de:	2001      	movs	r0, #1
 80004e0:	e7db      	b.n	800049a <__aeabi_fmul+0x56>
 80004e2:	464c      	mov	r4, r9
 80004e4:	4658      	mov	r0, fp
 80004e6:	0017      	movs	r7, r2
 80004e8:	2802      	cmp	r0, #2
 80004ea:	d024      	beq.n	8000536 <__aeabi_fmul+0xf2>
 80004ec:	2803      	cmp	r0, #3
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fmul+0xae>
 80004f0:	e0cf      	b.n	8000692 <__aeabi_fmul+0x24e>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	2801      	cmp	r0, #1
 80004f8:	d14d      	bne.n	8000596 <__aeabi_fmul+0x152>
 80004fa:	0258      	lsls	r0, r3, #9
 80004fc:	05d2      	lsls	r2, r2, #23
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	07ff      	lsls	r7, r7, #31
 8000502:	4310      	orrs	r0, r2
 8000504:	4338      	orrs	r0, r7
 8000506:	b003      	add	sp, #12
 8000508:	bc3c      	pop	{r2, r3, r4, r5}
 800050a:	4690      	mov	r8, r2
 800050c:	4699      	mov	r9, r3
 800050e:	46a2      	mov	sl, r4
 8000510:	46ab      	mov	fp, r5
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	2b00      	cmp	r3, #0
 8000516:	d15b      	bne.n	80005d0 <__aeabi_fmul+0x18c>
 8000518:	2304      	movs	r3, #4
 800051a:	469a      	mov	sl, r3
 800051c:	3b03      	subs	r3, #3
 800051e:	2500      	movs	r5, #0
 8000520:	469b      	mov	fp, r3
 8000522:	e7aa      	b.n	800047a <__aeabi_fmul+0x36>
 8000524:	35ff      	adds	r5, #255	; 0xff
 8000526:	2c00      	cmp	r4, #0
 8000528:	d160      	bne.n	80005ec <__aeabi_fmul+0x1a8>
 800052a:	4652      	mov	r2, sl
 800052c:	2302      	movs	r3, #2
 800052e:	431a      	orrs	r2, r3
 8000530:	4692      	mov	sl, r2
 8000532:	2002      	movs	r0, #2
 8000534:	e7b1      	b.n	800049a <__aeabi_fmul+0x56>
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	2300      	movs	r3, #0
 800053a:	e7de      	b.n	80004fa <__aeabi_fmul+0xb6>
 800053c:	464b      	mov	r3, r9
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	469c      	mov	ip, r3
 8000542:	464b      	mov	r3, r9
 8000544:	0426      	lsls	r6, r4, #16
 8000546:	0c36      	lsrs	r6, r6, #16
 8000548:	0418      	lsls	r0, r3, #16
 800054a:	4661      	mov	r1, ip
 800054c:	0033      	movs	r3, r6
 800054e:	0c22      	lsrs	r2, r4, #16
 8000550:	4664      	mov	r4, ip
 8000552:	0c00      	lsrs	r0, r0, #16
 8000554:	4343      	muls	r3, r0
 8000556:	434e      	muls	r6, r1
 8000558:	4350      	muls	r0, r2
 800055a:	4354      	muls	r4, r2
 800055c:	1980      	adds	r0, r0, r6
 800055e:	0c1a      	lsrs	r2, r3, #16
 8000560:	1812      	adds	r2, r2, r0
 8000562:	4296      	cmp	r6, r2
 8000564:	d903      	bls.n	800056e <__aeabi_fmul+0x12a>
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	468c      	mov	ip, r1
 800056c:	4464      	add	r4, ip
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	0c1b      	lsrs	r3, r3, #16
 8000572:	0410      	lsls	r0, r2, #16
 8000574:	18c0      	adds	r0, r0, r3
 8000576:	0183      	lsls	r3, r0, #6
 8000578:	1e5e      	subs	r6, r3, #1
 800057a:	41b3      	sbcs	r3, r6
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	4318      	orrs	r0, r3
 8000580:	0c13      	lsrs	r3, r2, #16
 8000582:	191b      	adds	r3, r3, r4
 8000584:	019b      	lsls	r3, r3, #6
 8000586:	4303      	orrs	r3, r0
 8000588:	001c      	movs	r4, r3
 800058a:	0123      	lsls	r3, r4, #4
 800058c:	d579      	bpl.n	8000682 <__aeabi_fmul+0x23e>
 800058e:	2301      	movs	r3, #1
 8000590:	0862      	lsrs	r2, r4, #1
 8000592:	401c      	ands	r4, r3
 8000594:	4314      	orrs	r4, r2
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	2a00      	cmp	r2, #0
 800059c:	dd4d      	ble.n	800063a <__aeabi_fmul+0x1f6>
 800059e:	0763      	lsls	r3, r4, #29
 80005a0:	d004      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005a2:	230f      	movs	r3, #15
 80005a4:	4023      	ands	r3, r4
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005aa:	3404      	adds	r4, #4
 80005ac:	0123      	lsls	r3, r4, #4
 80005ae:	d503      	bpl.n	80005b8 <__aeabi_fmul+0x174>
 80005b0:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <__aeabi_fmul+0x260>)
 80005b2:	9a01      	ldr	r2, [sp, #4]
 80005b4:	401c      	ands	r4, r3
 80005b6:	3280      	adds	r2, #128	; 0x80
 80005b8:	2afe      	cmp	r2, #254	; 0xfe
 80005ba:	dcbc      	bgt.n	8000536 <__aeabi_fmul+0xf2>
 80005bc:	01a3      	lsls	r3, r4, #6
 80005be:	0a5b      	lsrs	r3, r3, #9
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	e79a      	b.n	80004fa <__aeabi_fmul+0xb6>
 80005c4:	230c      	movs	r3, #12
 80005c6:	469a      	mov	sl, r3
 80005c8:	3b09      	subs	r3, #9
 80005ca:	25ff      	movs	r5, #255	; 0xff
 80005cc:	469b      	mov	fp, r3
 80005ce:	e754      	b.n	800047a <__aeabi_fmul+0x36>
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f8f3 	bl	80007bc <__clzsi2>
 80005d6:	464a      	mov	r2, r9
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	2576      	movs	r5, #118	; 0x76
 80005dc:	409a      	lsls	r2, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	426d      	negs	r5, r5
 80005e2:	4691      	mov	r9, r2
 80005e4:	1a2d      	subs	r5, r5, r0
 80005e6:	469a      	mov	sl, r3
 80005e8:	469b      	mov	fp, r3
 80005ea:	e746      	b.n	800047a <__aeabi_fmul+0x36>
 80005ec:	4652      	mov	r2, sl
 80005ee:	2303      	movs	r3, #3
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4692      	mov	sl, r2
 80005f4:	2003      	movs	r0, #3
 80005f6:	e750      	b.n	800049a <__aeabi_fmul+0x56>
 80005f8:	0020      	movs	r0, r4
 80005fa:	f000 f8df 	bl	80007bc <__clzsi2>
 80005fe:	1f43      	subs	r3, r0, #5
 8000600:	1a2d      	subs	r5, r5, r0
 8000602:	409c      	lsls	r4, r3
 8000604:	3d76      	subs	r5, #118	; 0x76
 8000606:	2000      	movs	r0, #0
 8000608:	e747      	b.n	800049a <__aeabi_fmul+0x56>
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	2700      	movs	r7, #0
 800060e:	03db      	lsls	r3, r3, #15
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	e772      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000614:	4642      	mov	r2, r8
 8000616:	e766      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000618:	464c      	mov	r4, r9
 800061a:	0032      	movs	r2, r6
 800061c:	4658      	mov	r0, fp
 800061e:	e762      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	464a      	mov	r2, r9
 8000624:	03db      	lsls	r3, r3, #15
 8000626:	421a      	tst	r2, r3
 8000628:	d022      	beq.n	8000670 <__aeabi_fmul+0x22c>
 800062a:	421c      	tst	r4, r3
 800062c:	d120      	bne.n	8000670 <__aeabi_fmul+0x22c>
 800062e:	4323      	orrs	r3, r4
 8000630:	025b      	lsls	r3, r3, #9
 8000632:	0a5b      	lsrs	r3, r3, #9
 8000634:	4647      	mov	r7, r8
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0xb6>
 800063a:	2301      	movs	r3, #1
 800063c:	1a9a      	subs	r2, r3, r2
 800063e:	2a1b      	cmp	r2, #27
 8000640:	dc21      	bgt.n	8000686 <__aeabi_fmul+0x242>
 8000642:	0023      	movs	r3, r4
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	40d3      	lsrs	r3, r2
 8000648:	319e      	adds	r1, #158	; 0x9e
 800064a:	408c      	lsls	r4, r1
 800064c:	001a      	movs	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	1e5c      	subs	r4, r3, #1
 8000652:	41a3      	sbcs	r3, r4
 8000654:	4313      	orrs	r3, r2
 8000656:	075a      	lsls	r2, r3, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x220>
 800065a:	220f      	movs	r2, #15
 800065c:	401a      	ands	r2, r3
 800065e:	2a04      	cmp	r2, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x220>
 8000662:	3304      	adds	r3, #4
 8000664:	015a      	lsls	r2, r3, #5
 8000666:	d411      	bmi.n	800068c <__aeabi_fmul+0x248>
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	0a5b      	lsrs	r3, r3, #9
 800066c:	2200      	movs	r2, #0
 800066e:	e744      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	464a      	mov	r2, r9
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	4313      	orrs	r3, r2
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	0037      	movs	r7, r6
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	e73b      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000682:	9501      	str	r5, [sp, #4]
 8000684:	e787      	b.n	8000596 <__aeabi_fmul+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	e736      	b.n	80004fa <__aeabi_fmul+0xb6>
 800068c:	2201      	movs	r2, #1
 800068e:	2300      	movs	r3, #0
 8000690:	e733      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	03db      	lsls	r3, r3, #15
 8000696:	4323      	orrs	r3, r4
 8000698:	025b      	lsls	r3, r3, #9
 800069a:	0a5b      	lsrs	r3, r3, #9
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	e72c      	b.n	80004fa <__aeabi_fmul+0xb6>
 80006a0:	08007128 	.word	0x08007128
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_i2f>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d03d      	beq.n	800072a <__aeabi_i2f+0x82>
 80006ae:	17c3      	asrs	r3, r0, #31
 80006b0:	18c5      	adds	r5, r0, r3
 80006b2:	405d      	eors	r5, r3
 80006b4:	0fc4      	lsrs	r4, r0, #31
 80006b6:	0028      	movs	r0, r5
 80006b8:	f000 f880 	bl	80007bc <__clzsi2>
 80006bc:	229e      	movs	r2, #158	; 0x9e
 80006be:	1a12      	subs	r2, r2, r0
 80006c0:	2a96      	cmp	r2, #150	; 0x96
 80006c2:	dc07      	bgt.n	80006d4 <__aeabi_i2f+0x2c>
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	2808      	cmp	r0, #8
 80006c8:	dd33      	ble.n	8000732 <__aeabi_i2f+0x8a>
 80006ca:	3808      	subs	r0, #8
 80006cc:	4085      	lsls	r5, r0
 80006ce:	0268      	lsls	r0, r5, #9
 80006d0:	0a40      	lsrs	r0, r0, #9
 80006d2:	e023      	b.n	800071c <__aeabi_i2f+0x74>
 80006d4:	2a99      	cmp	r2, #153	; 0x99
 80006d6:	dd0b      	ble.n	80006f0 <__aeabi_i2f+0x48>
 80006d8:	2305      	movs	r3, #5
 80006da:	0029      	movs	r1, r5
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	0003      	movs	r3, r0
 80006e2:	331b      	adds	r3, #27
 80006e4:	409d      	lsls	r5, r3
 80006e6:	002b      	movs	r3, r5
 80006e8:	1e5d      	subs	r5, r3, #1
 80006ea:	41ab      	sbcs	r3, r5
 80006ec:	4319      	orrs	r1, r3
 80006ee:	000d      	movs	r5, r1
 80006f0:	2805      	cmp	r0, #5
 80006f2:	dd01      	ble.n	80006f8 <__aeabi_i2f+0x50>
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409d      	lsls	r5, r3
 80006f8:	002b      	movs	r3, r5
 80006fa:	490f      	ldr	r1, [pc, #60]	; (8000738 <__aeabi_i2f+0x90>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	076e      	lsls	r6, r5, #29
 8000700:	d009      	beq.n	8000716 <__aeabi_i2f+0x6e>
 8000702:	260f      	movs	r6, #15
 8000704:	4035      	ands	r5, r6
 8000706:	2d04      	cmp	r5, #4
 8000708:	d005      	beq.n	8000716 <__aeabi_i2f+0x6e>
 800070a:	3304      	adds	r3, #4
 800070c:	015d      	lsls	r5, r3, #5
 800070e:	d502      	bpl.n	8000716 <__aeabi_i2f+0x6e>
 8000710:	229f      	movs	r2, #159	; 0x9f
 8000712:	400b      	ands	r3, r1
 8000714:	1a12      	subs	r2, r2, r0
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	0a58      	lsrs	r0, r3, #9
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	0240      	lsls	r0, r0, #9
 800071e:	05d2      	lsls	r2, r2, #23
 8000720:	0a40      	lsrs	r0, r0, #9
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4310      	orrs	r0, r2
 8000726:	4320      	orrs	r0, r4
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	2400      	movs	r4, #0
 800072c:	2200      	movs	r2, #0
 800072e:	2000      	movs	r0, #0
 8000730:	e7f4      	b.n	800071c <__aeabi_i2f+0x74>
 8000732:	0268      	lsls	r0, r5, #9
 8000734:	0a40      	lsrs	r0, r0, #9
 8000736:	e7f1      	b.n	800071c <__aeabi_i2f+0x74>
 8000738:	fbffffff 	.word	0xfbffffff

0800073c <__aeabi_ui2f>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	1e04      	subs	r4, r0, #0
 8000740:	d034      	beq.n	80007ac <__aeabi_ui2f+0x70>
 8000742:	f000 f83b 	bl	80007bc <__clzsi2>
 8000746:	229e      	movs	r2, #158	; 0x9e
 8000748:	1a12      	subs	r2, r2, r0
 800074a:	2a96      	cmp	r2, #150	; 0x96
 800074c:	dc07      	bgt.n	800075e <__aeabi_ui2f+0x22>
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	2808      	cmp	r0, #8
 8000752:	dd2e      	ble.n	80007b2 <__aeabi_ui2f+0x76>
 8000754:	3808      	subs	r0, #8
 8000756:	4084      	lsls	r4, r0
 8000758:	0260      	lsls	r0, r4, #9
 800075a:	0a40      	lsrs	r0, r0, #9
 800075c:	e021      	b.n	80007a2 <__aeabi_ui2f+0x66>
 800075e:	2a99      	cmp	r2, #153	; 0x99
 8000760:	dd09      	ble.n	8000776 <__aeabi_ui2f+0x3a>
 8000762:	0003      	movs	r3, r0
 8000764:	0021      	movs	r1, r4
 8000766:	331b      	adds	r3, #27
 8000768:	4099      	lsls	r1, r3
 800076a:	1e4b      	subs	r3, r1, #1
 800076c:	4199      	sbcs	r1, r3
 800076e:	2305      	movs	r3, #5
 8000770:	1a1b      	subs	r3, r3, r0
 8000772:	40dc      	lsrs	r4, r3
 8000774:	430c      	orrs	r4, r1
 8000776:	2805      	cmp	r0, #5
 8000778:	dd01      	ble.n	800077e <__aeabi_ui2f+0x42>
 800077a:	1f43      	subs	r3, r0, #5
 800077c:	409c      	lsls	r4, r3
 800077e:	0023      	movs	r3, r4
 8000780:	490d      	ldr	r1, [pc, #52]	; (80007b8 <__aeabi_ui2f+0x7c>)
 8000782:	400b      	ands	r3, r1
 8000784:	0765      	lsls	r5, r4, #29
 8000786:	d009      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000788:	250f      	movs	r5, #15
 800078a:	402c      	ands	r4, r5
 800078c:	2c04      	cmp	r4, #4
 800078e:	d005      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000790:	3304      	adds	r3, #4
 8000792:	015c      	lsls	r4, r3, #5
 8000794:	d502      	bpl.n	800079c <__aeabi_ui2f+0x60>
 8000796:	229f      	movs	r2, #159	; 0x9f
 8000798:	400b      	ands	r3, r1
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	0a58      	lsrs	r0, r3, #9
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	05d2      	lsls	r2, r2, #23
 80007a6:	0a40      	lsrs	r0, r0, #9
 80007a8:	4310      	orrs	r0, r2
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	2200      	movs	r2, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	e7f7      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b2:	0260      	lsls	r0, r4, #9
 80007b4:	0a40      	lsrs	r0, r0, #9
 80007b6:	e7f4      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__clzsi2>:
 80007bc:	211c      	movs	r1, #28
 80007be:	2301      	movs	r3, #1
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d301      	bcc.n	80007ca <__clzsi2+0xe>
 80007c6:	0c00      	lsrs	r0, r0, #16
 80007c8:	3910      	subs	r1, #16
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	4298      	cmp	r0, r3
 80007ce:	d301      	bcc.n	80007d4 <__clzsi2+0x18>
 80007d0:	0a00      	lsrs	r0, r0, #8
 80007d2:	3908      	subs	r1, #8
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	4298      	cmp	r0, r3
 80007d8:	d301      	bcc.n	80007de <__clzsi2+0x22>
 80007da:	0900      	lsrs	r0, r0, #4
 80007dc:	3904      	subs	r1, #4
 80007de:	a202      	add	r2, pc, #8	; (adr r2, 80007e8 <__clzsi2+0x2c>)
 80007e0:	5c10      	ldrb	r0, [r2, r0]
 80007e2:	1840      	adds	r0, r0, r1
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	02020304 	.word	0x02020304
 80007ec:	01010101 	.word	0x01010101
	...

080007f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_Init+0x24>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_Init+0x24>)
 8000802:	2110      	movs	r1, #16
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000808:	2000      	movs	r0, #0
 800080a:	f004 feb1 	bl	8005570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080e:	f004 fd2b 	bl	8005268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	001a      	movs	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	18d2      	adds	r2, r2, r3
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_IncTick+0x20>)
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000000 	.word	0x20000000
 8000840:	20000d6c 	.word	0x20000d6c

08000844 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000d6c 	.word	0x20000d6c

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff fff0 	bl	8000844 <HAL_GetTick>
 8000864:	0003      	movs	r3, r0
 8000866:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_Delay+0x40>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	001a      	movs	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	189b      	adds	r3, r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	f7ff ffe0 	bl	8000844 <HAL_GetTick>
 8000884:	0002      	movs	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b004      	add	sp, #16
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	0002      	movs	r2, r0
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b7f      	cmp	r3, #127	; 0x7f
 80008ae:	d809      	bhi.n	80008c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	001a      	movs	r2, r3
 80008b6:	231f      	movs	r3, #31
 80008b8:	401a      	ands	r2, r3
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_EnableIRQ+0x30>)
 80008bc:	2101      	movs	r1, #1
 80008be:	4091      	lsls	r1, r2
 80008c0:	000a      	movs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
  }
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	0002      	movs	r2, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b7f      	cmp	r3, #127	; 0x7f
 80008e4:	d828      	bhi.n	8000938 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e6:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <__NVIC_SetPriority+0xd4>)
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	33c0      	adds	r3, #192	; 0xc0
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	589b      	ldr	r3, [r3, r2]
 80008f6:	1dfa      	adds	r2, r7, #7
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	0011      	movs	r1, r2
 80008fc:	2203      	movs	r2, #3
 80008fe:	400a      	ands	r2, r1
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	21ff      	movs	r1, #255	; 0xff
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	019b      	lsls	r3, r3, #6
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	401a      	ands	r2, r3
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0018      	movs	r0, r3
 800091c:	2303      	movs	r3, #3
 800091e:	4003      	ands	r3, r0
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	481f      	ldr	r0, [pc, #124]	; (80009a4 <__NVIC_SetPriority+0xd4>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b25b      	sxtb	r3, r3
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	430a      	orrs	r2, r1
 8000930:	33c0      	adds	r3, #192	; 0xc0
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000936:	e031      	b.n	800099c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <__NVIC_SetPriority+0xd8>)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	0019      	movs	r1, r3
 8000940:	230f      	movs	r3, #15
 8000942:	400b      	ands	r3, r1
 8000944:	3b08      	subs	r3, #8
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	3306      	adds	r3, #6
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	18d3      	adds	r3, r2, r3
 800094e:	3304      	adds	r3, #4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	1dfa      	adds	r2, r7, #7
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	0011      	movs	r1, r2
 8000958:	2203      	movs	r2, #3
 800095a:	400a      	ands	r2, r1
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	21ff      	movs	r1, #255	; 0xff
 8000960:	4091      	lsls	r1, r2
 8000962:	000a      	movs	r2, r1
 8000964:	43d2      	mvns	r2, r2
 8000966:	401a      	ands	r2, r3
 8000968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	22ff      	movs	r2, #255	; 0xff
 8000970:	401a      	ands	r2, r3
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0018      	movs	r0, r3
 8000978:	2303      	movs	r3, #3
 800097a:	4003      	ands	r3, r0
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <__NVIC_SetPriority+0xd8>)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	001c      	movs	r4, r3
 8000988:	230f      	movs	r3, #15
 800098a:	4023      	ands	r3, r4
 800098c:	3b08      	subs	r3, #8
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	430a      	orrs	r2, r1
 8000992:	3306      	adds	r3, #6
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	18c3      	adds	r3, r0, r3
 8000998:	3304      	adds	r3, #4
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b003      	add	sp, #12
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	210f      	movs	r1, #15
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	1c02      	adds	r2, r0, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff81 	bl	80008d0 <__NVIC_SetPriority>
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	0002      	movs	r2, r0
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ff57 	bl	800089c <__NVIC_EnableIRQ>
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e036      	b.n	8000a7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2221      	movs	r2, #33	; 0x21
 8000a12:	2102      	movs	r1, #2
 8000a14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_DMA_Init+0x8c>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f98c 	bl	8000d7c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2221      	movs	r2, #33	; 0x21
 8000a6e:	2101      	movs	r1, #1
 8000a70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2220      	movs	r2, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}  
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b004      	add	sp, #16
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	ffffc00f 	.word	0xffffc00f

08000a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a96:	2317      	movs	r3, #23
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	5c9b      	ldrb	r3, [r3, r2]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d101      	bne.n	8000aac <HAL_DMA_Start_IT+0x24>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e04f      	b.n	8000b4c <HAL_DMA_Start_IT+0xc4>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2220      	movs	r2, #32
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2221      	movs	r2, #33	; 0x21
 8000ab8:	5c9b      	ldrb	r3, [r3, r2]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d13a      	bne.n	8000b36 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	438a      	bics	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f000 f91d 	bl	8000d24 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	210e      	movs	r1, #14
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e00f      	b.n	8000b24 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	210a      	movs	r1, #10
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2104      	movs	r1, #4
 8000b20:	438a      	bics	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e007      	b.n	8000b46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2220      	movs	r2, #32
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b3e:	2317      	movs	r3, #23
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2202      	movs	r2, #2
 8000b44:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000b46:	2317      	movs	r3, #23
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	781b      	ldrb	r3, [r3, #0]
} 
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b006      	add	sp, #24
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2221      	movs	r2, #33	; 0x21
 8000b68:	5c9b      	ldrb	r3, [r3, r2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d007      	beq.n	8000b80 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e028      	b.n	8000bd2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	210e      	movs	r1, #14
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2221      	movs	r2, #33	; 0x21
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2220      	movs	r2, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	0010      	movs	r0, r2
 8000bd0:	4798      	blx	r3
    } 
  }
  return status;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4013      	ands	r3, r2
 8000c06:	d024      	beq.n	8000c52 <HAL_DMA_IRQHandler+0x72>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d020      	beq.n	8000c52 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2220      	movs	r2, #32
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d107      	bne.n	8000c2c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2104      	movs	r1, #4
 8000c28:	438a      	bics	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c34:	2104      	movs	r1, #4
 8000c36:	4091      	lsls	r1, r2
 8000c38:	000a      	movs	r2, r1
 8000c3a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d100      	bne.n	8000c46 <HAL_DMA_IRQHandler+0x66>
 8000c44:	e06a      	b.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c50:	e064      	b.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	2202      	movs	r2, #2
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d02b      	beq.n	8000cba <HAL_DMA_IRQHandler+0xda>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2202      	movs	r2, #2
 8000c66:	4013      	ands	r3, r2
 8000c68:	d027      	beq.n	8000cba <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2220      	movs	r2, #32
 8000c72:	4013      	ands	r3, r2
 8000c74:	d10b      	bne.n	8000c8e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	210a      	movs	r1, #10
 8000c82:	438a      	bics	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2221      	movs	r2, #33	; 0x21
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2102      	movs	r1, #2
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d036      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cb8:	e030      	b.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d028      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2208      	movs	r2, #8
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d024      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	210e      	movs	r1, #14
 8000cde:	438a      	bics	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2101      	movs	r1, #1
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2220      	movs	r2, #32
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	0010      	movs	r0, r2
 8000d18:	4798      	blx	r3
    }
   }
}  
 8000d1a:	e7ff      	b.n	8000d1c <HAL_DMA_IRQHandler+0x13c>
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b10      	cmp	r3, #16
 8000d50:	d108      	bne.n	8000d64 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d62:	e007      	b.n	8000d74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <DMA_CalcBaseAndBitshift+0x30>)
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	4463      	add	r3, ip
 8000d8e:	2114      	movs	r1, #20
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff f9b9 	bl	8000108 <__udivsi3>
 8000d96:	0003      	movs	r3, r0
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <DMA_CalcBaseAndBitshift+0x34>)
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	bffdfff8 	.word	0xbffdfff8
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e14f      	b.n	8001064 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x28>
 8000dda:	e140      	b.n	800105e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d00b      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df0:	2b11      	cmp	r3, #17
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b12      	cmp	r3, #18
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0xea>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	58d3      	ldr	r3, [r2, r3]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	400b      	ands	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	055b      	lsls	r3, r3, #21
 8000f22:	4013      	ands	r3, r2
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x174>
 8000f26:	e09a      	b.n	800105e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b54      	ldr	r3, [pc, #336]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f2a:	699a      	ldr	r2, [r3, #24]
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f40:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	589b      	ldr	r3, [r3, r2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	2390      	movs	r3, #144	; 0x90
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1de>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1da>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a42      	ldr	r2, [pc, #264]	; (800108c <HAL_GPIO_Init+0x2d8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x1e4>
 8000f96:	2300      	movs	r3, #0
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	035b      	lsls	r3, r3, #13
 8001022:	4013      	ands	r3, r2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	039b      	lsls	r3, r3, #14
 800104c:	4013      	ands	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	40da      	lsrs	r2, r3
 800106c:	1e13      	subs	r3, r2, #0
 800106e:	d000      	beq.n	8001072 <HAL_GPIO_Init+0x2be>
 8001070:	e6a8      	b.n	8000dc4 <HAL_GPIO_Init+0x10>
  } 
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b006      	add	sp, #24
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e082      	b.n	80011e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2241      	movs	r2, #65	; 0x41
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d107      	bne.n	80010fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	2100      	movs	r1, #0
 80010f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f004 f8d9 	bl	80052b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2241      	movs	r2, #65	; 0x41
 8001102:	2124      	movs	r1, #36	; 0x24
 8001104:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <HAL_I2C_Init+0x120>)
 8001120:	400a      	ands	r2, r1
 8001122:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <HAL_I2C_Init+0x124>)
 8001130:	400a      	ands	r2, r1
 8001132:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	0209      	lsls	r1, r1, #8
 8001148:	430a      	orrs	r2, r1
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	e007      	b.n	800115e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2184      	movs	r1, #132	; 0x84
 8001158:	0209      	lsls	r1, r1, #8
 800115a:	430a      	orrs	r2, r1
 800115c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	491f      	ldr	r1, [pc, #124]	; (80011f8 <HAL_I2C_Init+0x128>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	491a      	ldr	r1, [pc, #104]	; (80011f4 <HAL_I2C_Init+0x124>)
 800118c:	400a      	ands	r2, r1
 800118e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	431a      	orrs	r2, r3
 800119a:	0011      	movs	r1, r2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	021a      	lsls	r2, r3, #8
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69d9      	ldr	r1, [r3, #28]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2241      	movs	r2, #65	; 0x41
 80011d4:	2120      	movs	r1, #32
 80011d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2242      	movs	r2, #66	; 0x42
 80011e2:	2100      	movs	r1, #0
 80011e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	f0ffffff 	.word	0xf0ffffff
 80011f4:	ffff7fff 	.word	0xffff7fff
 80011f8:	02008000 	.word	0x02008000

080011fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	000c      	movs	r4, r1
 8001206:	0010      	movs	r0, r2
 8001208:	0019      	movs	r1, r3
 800120a:	230a      	movs	r3, #10
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	1c22      	adds	r2, r4, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	2308      	movs	r3, #8
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	1c02      	adds	r2, r0, #0
 8001218:	801a      	strh	r2, [r3, #0]
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	1c0a      	adds	r2, r1, #0
 800121e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2241      	movs	r2, #65	; 0x41
 8001224:	5c9b      	ldrb	r3, [r3, r2]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b20      	cmp	r3, #32
 800122a:	d000      	beq.n	800122e <HAL_I2C_Mem_Write+0x32>
 800122c:	e10c      	b.n	8001448 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_I2C_Mem_Write+0x42>
 8001234:	232c      	movs	r3, #44	; 0x2c
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0ff      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_I2C_Mem_Write+0x5c>
 8001254:	2302      	movs	r3, #2
 8001256:	e0f8      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	2101      	movs	r1, #1
 800125e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001260:	f7ff faf0 	bl	8000844 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	0219      	lsls	r1, r3, #8
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2319      	movs	r3, #25
 8001274:	2201      	movs	r2, #1
 8001276:	f000 fb0b 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0e3      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2241      	movs	r2, #65	; 0x41
 8001286:	2121      	movs	r1, #33	; 0x21
 8001288:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2242      	movs	r2, #66	; 0x42
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	222c      	movs	r2, #44	; 0x2c
 80012a2:	18ba      	adds	r2, r7, r2
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	881c      	ldrh	r4, [r3, #0]
 80012b2:	2308      	movs	r3, #8
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	230a      	movs	r3, #10
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	8819      	ldrh	r1, [r3, #0]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	0023      	movs	r3, r4
 80012ca:	f000 f9f9 	bl	80016c0 <I2C_RequestMemoryWrite>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d005      	beq.n	80012de <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e0b5      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d911      	bls.n	800130c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	045c      	lsls	r4, r3, #17
 80012f8:	230a      	movs	r3, #10
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	0023      	movs	r3, r4
 8001306:	f000 fbe3 	bl	8001ad0 <I2C_TransferConfig>
 800130a:	e012      	b.n	8001332 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	049c      	lsls	r4, r3, #18
 8001320:	230a      	movs	r3, #10
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	8819      	ldrh	r1, [r3, #0]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	0023      	movs	r3, r4
 800132e:	f000 fbcf 	bl	8001ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0018      	movs	r0, r3
 800133a:	f000 fae8 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e081      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001360:	b29b      	uxth	r3, r3
 8001362:	3b01      	subs	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03a      	beq.n	80013f6 <HAL_I2C_Mem_Write+0x1fa>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d136      	bne.n	80013f6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	0013      	movs	r3, r2
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	f000 fa7b 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e053      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2bff      	cmp	r3, #255	; 0xff
 80013aa:	d911      	bls.n	80013d0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	22ff      	movs	r2, #255	; 0xff
 80013b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	045c      	lsls	r4, r3, #17
 80013bc:	230a      	movs	r3, #10
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	8819      	ldrh	r1, [r3, #0]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	0023      	movs	r3, r4
 80013ca:	f000 fb81 	bl	8001ad0 <I2C_TransferConfig>
 80013ce:	e012      	b.n	80013f6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	049c      	lsls	r4, r3, #18
 80013e4:	230a      	movs	r3, #10
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	0023      	movs	r3, r4
 80013f2:	f000 fb6d 	bl	8001ad0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d198      	bne.n	8001332 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fac0 	bl	800198c <I2C_WaitOnSTOPFlagUntilTimeout>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e01a      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2220      	movs	r2, #32
 800141a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <HAL_I2C_Mem_Write+0x258>)
 8001428:	400a      	ands	r2, r1
 800142a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2241      	movs	r2, #65	; 0x41
 8001430:	2120      	movs	r1, #32
 8001432:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2242      	movs	r2, #66	; 0x42
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b007      	add	sp, #28
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	fe00e800 	.word	0xfe00e800

08001458 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	000c      	movs	r4, r1
 8001462:	0010      	movs	r0, r2
 8001464:	0019      	movs	r1, r3
 8001466:	230a      	movs	r3, #10
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	1c22      	adds	r2, r4, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	2308      	movs	r3, #8
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	1c02      	adds	r2, r0, #0
 8001474:	801a      	strh	r2, [r3, #0]
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	1c0a      	adds	r2, r1, #0
 800147a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2241      	movs	r2, #65	; 0x41
 8001480:	5c9b      	ldrb	r3, [r3, r2]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b20      	cmp	r3, #32
 8001486:	d000      	beq.n	800148a <HAL_I2C_Mem_Read+0x32>
 8001488:	e110      	b.n	80016ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_I2C_Mem_Read+0x42>
 8001490:	232c      	movs	r3, #44	; 0x2c
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e103      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	5c9b      	ldrb	r3, [r3, r2]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_I2C_Mem_Read+0x5c>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e0fc      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	2101      	movs	r1, #1
 80014ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014bc:	f7ff f9c2 	bl	8000844 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	0219      	lsls	r1, r3, #8
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2319      	movs	r3, #25
 80014d0:	2201      	movs	r2, #1
 80014d2:	f000 f9dd 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80014d6:	1e03      	subs	r3, r0, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0e7      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2241      	movs	r2, #65	; 0x41
 80014e2:	2122      	movs	r1, #34	; 0x22
 80014e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2242      	movs	r2, #66	; 0x42
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	222c      	movs	r2, #44	; 0x2c
 80014fe:	18ba      	adds	r2, r7, r2
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150a:	1dbb      	adds	r3, r7, #6
 800150c:	881c      	ldrh	r4, [r3, #0]
 800150e:	2308      	movs	r3, #8
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	230a      	movs	r3, #10
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	8819      	ldrh	r1, [r3, #0]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	0023      	movs	r3, r4
 8001526:	f000 f92f 	bl	8001788 <I2C_RequestMemoryRead>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d005      	beq.n	800153a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	2100      	movs	r1, #0
 8001534:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0b9      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d911      	bls.n	8001568 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	b2da      	uxtb	r2, r3
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	045c      	lsls	r4, r3, #17
 8001554:	230a      	movs	r3, #10
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	8819      	ldrh	r1, [r3, #0]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_I2C_Mem_Read+0x260>)
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	0023      	movs	r3, r4
 8001562:	f000 fab5 	bl	8001ad0 <I2C_TransferConfig>
 8001566:	e012      	b.n	800158e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	b2da      	uxtb	r2, r3
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	049c      	lsls	r4, r3, #18
 800157c:	230a      	movs	r3, #10
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	8819      	ldrh	r1, [r3, #0]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_I2C_Mem_Read+0x260>)
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	0023      	movs	r3, r4
 800158a:	f000 faa1 	bl	8001ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800158e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	0013      	movs	r3, r2
 8001598:	2200      	movs	r2, #0
 800159a:	2104      	movs	r1, #4
 800159c:	f000 f978 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e082      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03a      	beq.n	800165a <HAL_I2C_Mem_Read+0x202>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d136      	bne.n	800165a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	0013      	movs	r3, r2
 80015f6:	2200      	movs	r2, #0
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	f000 f949 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e053      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	d911      	bls.n	8001634 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	b2da      	uxtb	r2, r3
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	045c      	lsls	r4, r3, #17
 8001620:	230a      	movs	r3, #10
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	8819      	ldrh	r1, [r3, #0]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	0023      	movs	r3, r4
 800162e:	f000 fa4f 	bl	8001ad0 <I2C_TransferConfig>
 8001632:	e012      	b.n	800165a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	b2da      	uxtb	r2, r3
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	049c      	lsls	r4, r3, #18
 8001648:	230a      	movs	r3, #10
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	8819      	ldrh	r1, [r3, #0]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	0023      	movs	r3, r4
 8001656:	f000 fa3b 	bl	8001ad0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d194      	bne.n	800158e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f98e 	bl	800198c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e01a      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <HAL_I2C_Mem_Read+0x264>)
 800168c:	400a      	ands	r2, r1
 800168e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2241      	movs	r2, #65	; 0x41
 8001694:	2120      	movs	r1, #32
 8001696:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2242      	movs	r2, #66	; 0x42
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
  }
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b007      	add	sp, #28
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	80002400 	.word	0x80002400
 80016bc:	fe00e800 	.word	0xfe00e800

080016c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	000c      	movs	r4, r1
 80016ca:	0010      	movs	r0, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	250a      	movs	r5, #10
 80016d0:	197b      	adds	r3, r7, r5
 80016d2:	1c22      	adds	r2, r4, #0
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	2308      	movs	r3, #8
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	1c02      	adds	r2, r0, #0
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	1dbb      	adds	r3, r7, #6
 80016e0:	1c0a      	adds	r2, r1, #0
 80016e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	045c      	lsls	r4, r3, #17
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <I2C_RequestMemoryWrite+0xc4>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0023      	movs	r3, r4
 80016fa:	f000 f9e9 	bl	8001ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001700:	6a39      	ldr	r1, [r7, #32]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f902 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e033      	b.n	800177a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800171a:	2308      	movs	r3, #8
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
 8001728:	e019      	b.n	800175e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800172a:	2308      	movs	r3, #8
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 f8e3 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e014      	b.n	800177a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001750:	2308      	movs	r3, #8
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800175e:	6a3a      	ldr	r2, [r7, #32]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	0013      	movs	r3, r2
 8001768:	2200      	movs	r2, #0
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	f000 f890 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	80002000 	.word	0x80002000

08001788 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	000c      	movs	r4, r1
 8001792:	0010      	movs	r0, r2
 8001794:	0019      	movs	r1, r3
 8001796:	250a      	movs	r5, #10
 8001798:	197b      	adds	r3, r7, r5
 800179a:	1c22      	adds	r2, r4, #0
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	2308      	movs	r3, #8
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	1c0a      	adds	r2, r1, #0
 80017aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017ac:	1dbb      	adds	r3, r7, #6
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	8819      	ldrh	r1, [r3, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <I2C_RequestMemoryRead+0xc0>)
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	f000 f987 	bl	8001ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 f8a0 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e033      	b.n	800183e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017de:	2308      	movs	r3, #8
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
 80017ec:	e019      	b.n	8001822 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017ee:	2308      	movs	r3, #8
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f881 	bl	800190e <I2C_WaitOnTXISFlagUntilTimeout>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e014      	b.n	800183e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001814:	2308      	movs	r3, #8
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	0013      	movs	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	f000 f82e 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	80002000 	.word	0x80002000

0800184c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d103      	bne.n	800186a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	2b01      	cmp	r3, #1
 8001876:	d007      	beq.n	8001888 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
  }
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a0:	e021      	b.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	d01e      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7fe ffcc 	bl	8000844 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d302      	bcc.n	80018be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d113      	bne.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	2220      	movs	r2, #32
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	2120      	movs	r1, #32
 80018d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2242      	movs	r2, #66	; 0x42
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	4013      	ands	r3, r2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	425a      	negs	r2, r3
 80018f6:	4153      	adcs	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	001a      	movs	r2, r3
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d0ce      	beq.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}

0800190e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800191a:	e02b      	b.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f86e 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e029      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	d01e      	beq.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7fe ff85 	bl	8000844 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d113      	bne.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	2220      	movs	r2, #32
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2241      	movs	r2, #65	; 0x41
 800195c:	2120      	movs	r1, #32
 800195e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2242      	movs	r2, #66	; 0x42
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	2b02      	cmp	r3, #2
 8001980:	d1cc      	bne.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001998:	e028      	b.n	80019ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 f82f 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e026      	b.n	80019fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7fe ff49 	bl	8000844 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d113      	bne.n	80019ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	2220      	movs	r2, #32
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	2120      	movs	r1, #32
 80019d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2242      	movs	r2, #66	; 0x42
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2220      	movs	r2, #32
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d1cf      	bne.n	800199a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2210      	movs	r2, #16
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d151      	bne.n	8001ac2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a1e:	e021      	b.n	8001a64 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3301      	adds	r3, #1
 8001a24:	d01e      	beq.n	8001a64 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a26:	f7fe ff0d 	bl	8000844 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <I2C_IsAcknowledgeFailed+0x38>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d113      	bne.n	8001a64 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	2220      	movs	r2, #32
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2241      	movs	r2, #65	; 0x41
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2242      	movs	r2, #66	; 0x42
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e02f      	b.n	8001ac4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d1d6      	bne.n	8001a20 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fee1 	bl	800184c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	490d      	ldr	r1, [pc, #52]	; (8001acc <I2C_IsAcknowledgeFailed+0xc8>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	2120      	movs	r1, #32
 8001aac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2242      	movs	r2, #66	; 0x42
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	2100      	movs	r1, #0
 8001abc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	fe00e800 	.word	0xfe00e800

08001ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	0008      	movs	r0, r1
 8001ada:	0011      	movs	r1, r2
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	240a      	movs	r4, #10
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	1c02      	adds	r2, r0, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	1c0a      	adds	r2, r1, #0
 8001aec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	0d51      	lsrs	r1, r2, #21
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	00d2      	lsls	r2, r2, #3
 8001afc:	400a      	ands	r2, r1
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <I2C_TransferConfig+0x68>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	43d2      	mvns	r2, r2
 8001b04:	401a      	ands	r2, r3
 8001b06:	0011      	movs	r1, r2
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	059b      	lsls	r3, r3, #22
 8001b0e:	0d9a      	lsrs	r2, r3, #22
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	0418      	lsls	r0, r3, #16
 8001b16:	23ff      	movs	r3, #255	; 0xff
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	4003      	ands	r3, r0
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b005      	add	sp, #20
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	03ff63ff 	.word	0x03ff63ff

08001b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2241      	movs	r2, #65	; 0x41
 8001b4a:	5c9b      	ldrb	r3, [r3, r2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d138      	bne.n	8001bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	5c9b      	ldrb	r3, [r3, r2]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e032      	b.n	8001bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	2101      	movs	r1, #1
 8001b66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2241      	movs	r2, #65	; 0x41
 8001b6c:	2124      	movs	r1, #36	; 0x24
 8001b6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2241      	movs	r2, #65	; 0x41
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
  }
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	ffffefff 	.word	0xffffefff

08001bd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2241      	movs	r2, #65	; 0x41
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d139      	bne.n	8001c5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	5c9b      	ldrb	r3, [r3, r2]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e033      	b.n	8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2241      	movs	r2, #65	; 0x41
 8001c04:	2124      	movs	r1, #36	; 0x24
 8001c06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2241      	movs	r2, #65	; 0x41
 8001c4e:	2120      	movs	r1, #32
 8001c50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	fffff0ff 	.word	0xfffff0ff

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e303      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1e>
 8001c88:	e08d      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c8a:	4bc4      	ldr	r3, [pc, #784]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c96:	4bc1      	ldr	r3, [pc, #772]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
 8001ca2:	4bbe      	ldr	r3, [pc, #760]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	401a      	ands	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4bb9      	ldr	r3, [pc, #740]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x56>
 8001cc0:	e070      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d000      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
 8001cca:	e06b      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e2da      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x7c>
 8001cd8:	4bb0      	ldr	r3, [pc, #704]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4baf      	ldr	r3, [pc, #700]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0249      	lsls	r1, r1, #9
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e02f      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x9e>
 8001cf0:	4baa      	ldr	r3, [pc, #680]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4ba9      	ldr	r3, [pc, #676]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cf6:	49aa      	ldr	r1, [pc, #680]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4ba7      	ldr	r3, [pc, #668]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba6      	ldr	r3, [pc, #664]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d02:	49a8      	ldr	r1, [pc, #672]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e01e      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10e      	bne.n	8001d30 <HAL_RCC_OscConfig+0xc4>
 8001d12:	4ba2      	ldr	r3, [pc, #648]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba1      	ldr	r3, [pc, #644]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	02c9      	lsls	r1, r1, #11
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4b9e      	ldr	r3, [pc, #632]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b9d      	ldr	r3, [pc, #628]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0249      	lsls	r1, r1, #9
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d30:	4b9a      	ldr	r3, [pc, #616]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b99      	ldr	r3, [pc, #612]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d36:	499a      	ldr	r1, [pc, #616]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b96      	ldr	r3, [pc, #600]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d42:	4998      	ldr	r1, [pc, #608]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fd78 	bl	8000844 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fd73 	bl	8000844 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e28c      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0xee>
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fd63 	bl	8000844 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7fe fd5e 	bl	8000844 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e277      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x118>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_OscConfig+0x146>
 8001db0:	e069      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db2:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	220c      	movs	r2, #12
 8001db8:	4013      	ands	r3, r2
 8001dba:	d00b      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dbc:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
 8001dc8:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d116      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd4:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24d      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	22f8      	movs	r2, #248	; 0xf8
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00da      	lsls	r2, r3, #3
 8001dfa:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	e041      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fd15 	bl	8000844 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7fe fd10 	bl	8000844 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e229      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fcf0 	bl	8000844 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe fceb 	bl	8000844 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e204      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d036      	beq.n	8001efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7fe fcce 	bl	8000844 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7fe fcc9 	bl	8000844 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1e2      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f1      	beq.n	8001eae <HAL_RCC_OscConfig+0x242>
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fcb4 	bl	8000844 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fcaf 	bl	8000844 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1c8      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f1      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x29e>
 8001f08:	e0b6      	b.n	8002078 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d111      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fc72 	bl	8000844 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7fe fc6d 	bl	8000844 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e186      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10f      	bne.n	8001fac <HAL_RCC_OscConfig+0x340>
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
 8001f98:	e036      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	fffeffff 	.word	0xfffeffff
 8001fa4:	fffbffff 	.word	0xfffbffff
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x362>
 8001fb4:	4bb6      	ldr	r3, [pc, #728]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4bb3      	ldr	r3, [pc, #716]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	621a      	str	r2, [r3, #32]
 8001fcc:	e01c      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x384>
 8001fd6:	4bae      	ldr	r3, [pc, #696]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4bad      	ldr	r3, [pc, #692]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fdc:	2104      	movs	r1, #4
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	4bab      	ldr	r3, [pc, #684]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4baa      	ldr	r3, [pc, #680]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	621a      	str	r2, [r3, #32]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001ff0:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4ba6      	ldr	r3, [pc, #664]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002002:	2104      	movs	r1, #4
 8002004:	438a      	bics	r2, r1
 8002006:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7fe fc18 	bl	8000844 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fc13 	bl	8000844 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a9b      	ldr	r2, [pc, #620]	; (8002294 <HAL_RCC_OscConfig+0x628>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e12b      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	4b98      	ldr	r3, [pc, #608]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x3ae>
 8002038:	e013      	b.n	8002062 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fc03 	bl	8000844 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7fe fbfe 	bl	8000844 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a91      	ldr	r2, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x628>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e116      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002072:	4989      	ldr	r1, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x62c>)
 8002074:	400a      	ands	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	4013      	ands	r3, r2
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002090:	2104      	movs	r1, #4
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002096:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fbcf 	bl	8000844 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ac:	f7fe fbca 	bl	8000844 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0e3      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c8:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e034      	b.n	800214a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	3305      	adds	r3, #5
 80020e6:	d111      	bne.n	800210c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	22f8      	movs	r2, #248	; 0xf8
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	00da      	lsls	r2, r3, #3
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
 800210a:	e01e      	b.n	800214a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800210c:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002112:	2104      	movs	r1, #4
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002118:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe fb8e 	bl	8000844 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800212e:	f7fe fb89 	bl	8000844 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0a2      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x4e8>
 8002152:	e097      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002154:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	220c      	movs	r2, #12
 800215a:	4013      	ands	r3, r2
 800215c:	2b08      	cmp	r3, #8
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x4f6>
 8002160:	e06b      	b.n	800223a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d14c      	bne.n	8002204 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002170:	494a      	ldr	r1, [pc, #296]	; (800229c <HAL_RCC_OscConfig+0x630>)
 8002172:	400a      	ands	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fb65 	bl	8000844 <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7fe fb60 	bl	8000844 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e079      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	049b      	lsls	r3, r3, #18
 800219a:	4013      	ands	r3, r2
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	220f      	movs	r2, #15
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x634>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	0449      	lsls	r1, r1, #17
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fb33 	bl	8000844 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fb2e 	bl	8000844 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e047      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	4013      	ands	r3, r2
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x578>
 8002202:	e03f      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800220a:	4924      	ldr	r1, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x630>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fb18 	bl	8000844 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fb13 	bl	8000844 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e02c      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	049b      	lsls	r3, r3, #18
 8002234:	4013      	ands	r3, r2
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x5ae>
 8002238:	e024      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e01f      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	401a      	ands	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	429a      	cmp	r2, r3
 8002260:	d10e      	bne.n	8002280 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	220f      	movs	r2, #15
 8002266:	401a      	ands	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	23f0      	movs	r3, #240	; 0xf0
 8002274:	039b      	lsls	r3, r3, #14
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b008      	add	sp, #32
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	efffffff 	.word	0xefffffff
 800229c:	feffffff 	.word	0xfeffffff
 80022a0:	ffc2ffff 	.word	0xffc2ffff

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b3      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d911      	bls.n	80022ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e09a      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d015      	beq.n	8002320 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2204      	movs	r2, #4
 80022fa:	4013      	ands	r3, r2
 80022fc:	d006      	beq.n	800230c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022fe:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002304:	21e0      	movs	r1, #224	; 0xe0
 8002306:	00c9      	lsls	r1, r1, #3
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	22f0      	movs	r2, #240	; 0xf0
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	4013      	ands	r3, r2
 800233c:	d114      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06e      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	049b      	lsls	r3, r3, #18
 8002352:	4013      	ands	r3, r2
 8002354:	d108      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e062      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e05b      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fa62 	bl	8000844 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002384:	e009      	b.n	800239a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002386:	f7fe fa5d 	bl	8000844 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <HAL_RCC_ClockConfig+0x18c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e042      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	220c      	movs	r2, #12
 80023a0:	401a      	ands	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1ec      	bne.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d211      	bcs.n	80023de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e020      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_RCC_ClockConfig+0x190>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023fc:	f000 f820 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8002400:	0001      	movs	r1, r0
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	220f      	movs	r2, #15
 800240a:	4013      	ands	r3, r2
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x194>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	000a      	movs	r2, r1
 8002412:	40da      	lsrs	r2, r3
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x198>)
 8002416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002418:	2000      	movs	r0, #0
 800241a:	f003 f8a9 	bl	8005570 <HAL_InitTick>
  
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	00001388 	.word	0x00001388
 8002434:	fffff8ff 	.word	0xfffff8ff
 8002438:	080071f0 	.word	0x080071f0
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b08f      	sub	sp, #60	; 0x3c
 8002444:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002446:	2314      	movs	r3, #20
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800244e:	c313      	stmia	r3!, {r0, r1, r4}
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002458:	ca13      	ldmia	r2!, {r0, r1, r4}
 800245a:	c313      	stmia	r3!, {r0, r1, r4}
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	220c      	movs	r2, #12
 800247e:	4013      	ands	r3, r2
 8002480:	2b04      	cmp	r3, #4
 8002482:	d002      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x4a>
 8002484:	2b08      	cmp	r3, #8
 8002486:	d003      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800248e:	e02d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	220f      	movs	r2, #15
 8002496:	4013      	ands	r3, r2
 8002498:	2214      	movs	r2, #20
 800249a:	18ba      	adds	r2, r7, r2
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	1d3a      	adds	r2, r7, #4
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	025b      	lsls	r3, r3, #9
 80024b4:	4013      	ands	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ba:	4812      	ldr	r0, [pc, #72]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024bc:	f7fd fe24 	bl	8000108 <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	4353      	muls	r3, r2
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ce:	000a      	movs	r2, r1
 80024d0:	0152      	lsls	r2, r2, #5
 80024d2:	1a52      	subs	r2, r2, r1
 80024d4:	0193      	lsls	r3, r2, #6
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	185b      	adds	r3, r3, r1
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80024e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024e4:	e002      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b00f      	add	sp, #60	; 0x3c
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	08006fe4 	.word	0x08006fe4
 80024fc:	08006ff4 	.word	0x08006ff4
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	0001      	movs	r1, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	40d9      	lsrs	r1, r3
 8002536:	000b      	movs	r3, r1
}    
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	08007200 	.word	0x08007200

08002548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_RCC_GetClockConfig+0x4c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetClockConfig+0x4c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	22f0      	movs	r2, #240	; 0xf0
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_RCC_GetClockConfig+0x4c>)
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	23e0      	movs	r3, #224	; 0xe0
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetClockConfig+0x50>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	401a      	ands	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	40022000 	.word	0x40022000

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025b8:	e08f      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2317      	movs	r3, #23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	055b      	lsls	r3, r3, #21
 80025ca:	4013      	ands	r3, r2
 80025cc:	d111      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0549      	lsls	r1, r1, #21
 80025d8:	430a      	orrs	r2, r1
 80025da:	61da      	str	r2, [r3, #28]
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2317      	movs	r3, #23
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	d11a      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b49      	ldr	r3, [pc, #292]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0049      	lsls	r1, r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7fe f91a 	bl	8000844 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe f915 	bl	8000844 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e077      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d0f0      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002634:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	23c0      	movs	r3, #192	; 0xc0
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d034      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4013      	ands	r3, r2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	429a      	cmp	r2, r3
 8002654:	d02c      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a33      	ldr	r2, [pc, #204]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	0249      	lsls	r1, r1, #9
 800266a:	430a      	orrs	r2, r1
 800266c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002674:	492d      	ldr	r1, [pc, #180]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002676:	400a      	ands	r2, r1
 8002678:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	4013      	ands	r3, r2
 8002686:	d013      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe f8dc 	bl	8000844 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	e009      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe f8d7 	bl	8000844 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a24      	ldr	r2, [pc, #144]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e038      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026c4:	2317      	movs	r3, #23
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026d4:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	2203      	movs	r2, #3
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2220      	movs	r2, #32
 80026fe:	4013      	ands	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	2210      	movs	r2, #16
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002712:	430a      	orrs	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b006      	add	sp, #24
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	fffffcff 	.word	0xfffffcff
 800272c:	fffeffff 	.word	0xfffeffff
 8002730:	00001388 	.word	0x00001388
 8002734:	efffffff 	.word	0xefffffff

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e01e      	b.n	8002788 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223d      	movs	r2, #61	; 0x3d
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223c      	movs	r2, #60	; 0x3c
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f815 	bl	8002790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223d      	movs	r2, #61	; 0x3d
 800276a:	2102      	movs	r1, #2
 800276c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f000 f969 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223d      	movs	r2, #61	; 0x3d
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2207      	movs	r2, #7
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d007      	beq.n	80027da <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d124      	bne.n	8002844 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2202      	movs	r2, #2
 8002802:	4013      	ands	r3, r2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d11d      	bne.n	8002844 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2203      	movs	r2, #3
 800280e:	4252      	negs	r2, r2
 8002810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2203      	movs	r2, #3
 8002820:	4013      	ands	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f8fa 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 800282c:	e007      	b.n	800283e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f8ed 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 f8f9 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2204      	movs	r2, #4
 800284c:	4013      	ands	r3, r2
 800284e:	2b04      	cmp	r3, #4
 8002850:	d125      	bne.n	800289e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2204      	movs	r2, #4
 800285a:	4013      	ands	r3, r2
 800285c:	2b04      	cmp	r3, #4
 800285e:	d11e      	bne.n	800289e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2205      	movs	r2, #5
 8002866:	4252      	negs	r2, r2
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	23c0      	movs	r3, #192	; 0xc0
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f000 f8cd 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 8002886:	e007      	b.n	8002898 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f8c0 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f8cc 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d124      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2208      	movs	r2, #8
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11d      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2209      	movs	r2, #9
 80028c0:	4252      	negs	r2, r2
 80028c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2203      	movs	r2, #3
 80028d2:	4013      	ands	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f8a1 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 80028de:	e007      	b.n	80028f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f894 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f8a0 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2210      	movs	r2, #16
 80028fe:	4013      	ands	r3, r2
 8002900:	2b10      	cmp	r3, #16
 8002902:	d125      	bne.n	8002950 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2210      	movs	r2, #16
 800290c:	4013      	ands	r3, r2
 800290e:	2b10      	cmp	r3, #16
 8002910:	d11e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2211      	movs	r2, #17
 8002918:	4252      	negs	r2, r2
 800291a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2208      	movs	r2, #8
 8002920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f874 	bl	8002a20 <HAL_TIM_IC_CaptureCallback>
 8002938:	e007      	b.n	800294a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f867 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f873 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10f      	bne.n	800297e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2202      	movs	r2, #2
 8002972:	4252      	negs	r2, r2
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f002 fad3 	bl	8004f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	4013      	ands	r3, r2
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d10f      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	4013      	ands	r3, r2
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d108      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2281      	movs	r2, #129	; 0x81
 80029a0:	4252      	negs	r2, r2
 80029a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 f8d0 	bl	8002b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d10f      	bne.n	80029da <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2240      	movs	r2, #64	; 0x40
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d108      	bne.n	80029da <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2241      	movs	r2, #65	; 0x41
 80029ce:	4252      	negs	r2, r2
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f833 	bl	8002a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2220      	movs	r2, #32
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d10f      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d108      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2221      	movs	r2, #33	; 0x21
 80029fc:	4252      	negs	r2, r2
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f89a 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b002      	add	sp, #8
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <TIM_Base_SetConfig+0xd0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0x20>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <TIM_Base_SetConfig+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d108      	bne.n	8002a82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2270      	movs	r2, #112	; 0x70
 8002a74:	4393      	bics	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <TIM_Base_SetConfig+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <TIM_Base_SetConfig+0x62>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <TIM_Base_SetConfig+0xd4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00f      	beq.n	8002ab2 <TIM_Base_SetConfig+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <TIM_Base_SetConfig+0xd8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <TIM_Base_SetConfig+0x62>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <TIM_Base_SetConfig+0xdc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <TIM_Base_SetConfig+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <TIM_Base_SetConfig+0xe0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <TIM_Base_SetConfig+0x62>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	4393      	bics	r3, r2
 8002aca:	001a      	movs	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <TIM_Base_SetConfig+0xd0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <TIM_Base_SetConfig+0xba>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <TIM_Base_SetConfig+0xdc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <TIM_Base_SetConfig+0xba>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <TIM_Base_SetConfig+0xe0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d003      	beq.n	8002b0a <TIM_Base_SetConfig+0xba>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d103      	bne.n	8002b12 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	615a      	str	r2, [r3, #20]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b004      	add	sp, #16
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40002000 	.word	0x40002000
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800
 8002b38:	fffffcff 	.word	0xfffffcff

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e044      	b.n	8002bf8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2270      	movs	r2, #112	; 0x70
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f002 fbe3 	bl	800534c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2224      	movs	r2, #36	; 0x24
 8002b8a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fb40 	bl	8003224 <UART_SetConfig>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e024      	b.n	8002bf8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fcb9 	bl	8003530 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	490d      	ldr	r1, [pc, #52]	; (8002c00 <HAL_UART_Init+0xa4>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2108      	movs	r1, #8
 8002bda:	438a      	bics	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 fd51 	bl	8003698 <UART_CheckIdleState>
 8002bf6:	0003      	movs	r3, r0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	fffff7ff 	.word	0xfffff7ff

08002c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d000      	beq.n	8002c1e <HAL_UART_Transmit+0x1a>
 8002c1c:	e095      	b.n	8002d4a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_UART_Transmit+0x28>
 8002c24:	1dbb      	adds	r3, r7, #6
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e08d      	b.n	8002d4c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	015b      	lsls	r3, r3, #5
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d109      	bne.n	8002c50 <HAL_UART_Transmit+0x4c>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e07d      	b.n	8002d4c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2270      	movs	r2, #112	; 0x70
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Transmit+0x5a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e076      	b.n	8002d4c <HAL_UART_Transmit+0x148>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2270      	movs	r2, #112	; 0x70
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2221      	movs	r2, #33	; 0x21
 8002c70:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c72:	f7fd fde7 	bl	8000844 <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1dba      	adds	r2, r7, #6
 8002c7e:	2150      	movs	r1, #80	; 0x50
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1dba      	adds	r2, r7, #6
 8002c88:	2152      	movs	r1, #82	; 0x52
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	015b      	lsls	r3, r3, #5
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d108      	bne.n	8002cac <HAL_UART_Transmit+0xa8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e003      	b.n	8002cb4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cb4:	e02d      	b.n	8002d12 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	0013      	movs	r3, r2
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	f000 fd2e 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03d      	b.n	8002d4c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	05d2      	lsls	r2, r2, #23
 8002ce0:	0dd2      	lsrs	r2, r2, #23
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e008      	b.n	8002d00 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2252      	movs	r2, #82	; 0x52
 8002d04:	5a9b      	ldrh	r3, [r3, r2]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2252      	movs	r2, #82	; 0x52
 8002d10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2252      	movs	r2, #82	; 0x52
 8002d16:	5a9b      	ldrh	r3, [r3, r2]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1cb      	bne.n	8002cb6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	0013      	movs	r3, r2
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	f000 fcfa 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e009      	b.n	8002d4c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2270      	movs	r2, #112	; 0x70
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b008      	add	sp, #32
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	1dbb      	adds	r3, r7, #6
 8002d60:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d000      	beq.n	8002d6c <HAL_UART_Transmit_DMA+0x18>
 8002d6a:	e077      	b.n	8002e5c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_Transmit_DMA+0x26>
 8002d72:	1dbb      	adds	r3, r7, #6
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_UART_Transmit_DMA+0x4a>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d001      	beq.n	8002d9e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e05f      	b.n	8002e5e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2270      	movs	r2, #112	; 0x70
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit_DMA+0x58>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e058      	b.n	8002e5e <HAL_UART_Transmit_DMA+0x10a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2270      	movs	r2, #112	; 0x70
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1dba      	adds	r2, r7, #6
 8002dbe:	2150      	movs	r1, #80	; 0x50
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1dba      	adds	r2, r7, #6
 8002dc8:	2152      	movs	r1, #82	; 0x52
 8002dca:	8812      	ldrh	r2, [r2, #0]
 8002dcc:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02a      	beq.n	8002e38 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de6:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <HAL_UART_Transmit_DMA+0x114>)
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dee:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_UART_Transmit_DMA+0x118>)
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_UART_Transmit_DMA+0x11c>)
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3328      	adds	r3, #40	; 0x28
 8002e12:	001a      	movs	r2, r3
 8002e14:	1dbb      	adds	r3, r7, #6
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	f7fd fe36 	bl	8000a88 <HAL_DMA_Start_IT>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2210      	movs	r2, #16
 8002e24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2270      	movs	r2, #112	; 0x70
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e012      	b.n	8002e5e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2240      	movs	r2, #64	; 0x40
 8002e3e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2270      	movs	r2, #112	; 0x70
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	08003889 	.word	0x08003889
 8002e6c:	080038d9 	.word	0x080038d9
 8002e70:	0800397f 	.word	0x0800397f

08002e74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d000      	beq.n	8002e8c <HAL_UART_Receive_DMA+0x18>
 8002e8a:	e07f      	b.n	8002f8c <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_UART_Receive_DMA+0x26>
 8002e92:	1dbb      	adds	r3, r7, #6
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e077      	b.n	8002f8e <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d109      	bne.n	8002ebe <HAL_UART_Receive_DMA+0x4a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e067      	b.n	8002f8e <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2270      	movs	r2, #112	; 0x70
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive_DMA+0x58>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e060      	b.n	8002f8e <HAL_UART_Receive_DMA+0x11a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2270      	movs	r2, #112	; 0x70
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1dba      	adds	r2, r7, #6
 8002ede:	2158      	movs	r1, #88	; 0x58
 8002ee0:	8812      	ldrh	r2, [r2, #0]
 8002ee2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2222      	movs	r2, #34	; 0x22
 8002eee:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02a      	beq.n	8002f4e <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <HAL_UART_Receive_DMA+0x124>)
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <HAL_UART_Receive_DMA+0x128>)
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <HAL_UART_Receive_DMA+0x12c>)
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3324      	adds	r3, #36	; 0x24
 8002f22:	0019      	movs	r1, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	001a      	movs	r2, r3
 8002f2a:	1dbb      	adds	r3, r7, #6
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	f7fd fdab 	bl	8000a88 <HAL_DMA_Start_IT>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2270      	movs	r2, #112	; 0x70
 8002f40:	2100      	movs	r1, #0
 8002f42:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01f      	b.n	8002f8e <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2270      	movs	r2, #112	; 0x70
 8002f52:	2100      	movs	r1, #0
 8002f54:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	0049      	lsls	r1, r1, #1
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	080038f9 	.word	0x080038f9
 8002f9c:	08003961 	.word	0x08003961
 8002fa0:	0800397f 	.word	0x0800397f

08002fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4a89      	ldr	r2, [pc, #548]	; (80031ec <HAL_UART_IRQHandler+0x248>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d112      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d100      	bne.n	8002fec <HAL_UART_IRQHandler+0x48>
 8002fea:	e0f7      	b.n	80031dc <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	0010      	movs	r0, r2
 8002ff4:	4798      	blx	r3
      }
      return;
 8002ff6:	e0f1      	b.n	80031dc <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d100      	bne.n	8003000 <HAL_UART_IRQHandler+0x5c>
 8002ffe:	e0cd      	b.n	800319c <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d105      	bne.n	8003014 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	2390      	movs	r3, #144	; 0x90
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d100      	bne.n	8003014 <HAL_UART_IRQHandler+0x70>
 8003012:	e0c3      	b.n	800319c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2201      	movs	r2, #1
 8003018:	4013      	ands	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_UART_IRQHandler+0x96>
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003032:	2201      	movs	r2, #1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_UART_IRQHandler+0xba>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2202      	movs	r2, #2
 8003050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003056:	2204      	movs	r2, #4
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2204      	movs	r2, #4
 8003062:	4013      	ands	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_UART_IRQHandler+0xde>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2201      	movs	r2, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2204      	movs	r2, #4
 8003074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307a:	2202      	movs	r2, #2
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2208      	movs	r2, #8
 8003086:	4013      	ands	r3, r2
 8003088:	d011      	beq.n	80030ae <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2220      	movs	r2, #32
 800308e:	4013      	ands	r3, r2
 8003090:	d103      	bne.n	800309a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003098:	d009      	beq.n	80030ae <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a6:	2208      	movs	r2, #8
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00f      	beq.n	80030d8 <HAL_UART_IRQHandler+0x134>
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	04db      	lsls	r3, r3, #19
 80030be:	4013      	ands	r3, r2
 80030c0:	d00a      	beq.n	80030d8 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	2220      	movs	r2, #32
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <HAL_UART_IRQHandler+0x13e>
 80030e0:	e07e      	b.n	80031e0 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2220      	movs	r2, #32
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00c      	beq.n	8003104 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2220      	movs	r2, #32
 80030ee:	4013      	ands	r3, r2
 80030f0:	d008      	beq.n	8003104 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	0010      	movs	r0, r2
 8003102:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003108:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2240      	movs	r2, #64	; 0x40
 8003112:	4013      	ands	r3, r2
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d003      	beq.n	8003120 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2228      	movs	r2, #40	; 0x28
 800311c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800311e:	d033      	beq.n	8003188 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fb90 	bl	8003848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	4013      	ands	r3, r2
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d123      	bne.n	800317e <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	438a      	bics	r2, r1
 8003144:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003152:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_UART_IRQHandler+0x24c>)
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315a:	0018      	movs	r0, r3
 800315c:	f7fd fcfa 	bl	8000b54 <HAL_DMA_Abort_IT>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d019      	beq.n	8003198 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316e:	0018      	movs	r0, r3
 8003170:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003172:	e011      	b.n	8003198 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f84c 	bl	8003214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e00c      	b.n	8003198 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 f847 	bl	8003214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003186:	e007      	b.n	8003198 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f000 f842 	bl	8003214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003196:	e023      	b.n	80031e0 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	46c0      	nop			; (mov r8, r8)
    return;
 800319a:	e021      	b.n	80031e0 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00d      	beq.n	80031c0 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	4013      	ands	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d017      	beq.n	80031e4 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	0010      	movs	r0, r2
 80031bc:	4798      	blx	r3
    }
    return;
 80031be:	e011      	b.n	80031e4 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	4013      	ands	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_UART_IRQHandler+0x242>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00a      	beq.n	80031e6 <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 fc29 	bl	8003a2a <UART_EndTransmit_IT>
    return;
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	e004      	b.n	80031e6 <HAL_UART_IRQHandler+0x242>
      return;
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	e002      	b.n	80031e6 <HAL_UART_IRQHandler+0x242>
    return;
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	e000      	b.n	80031e6 <HAL_UART_IRQHandler+0x242>
    return;
 80031e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b008      	add	sp, #32
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	0000080f 	.word	0x0000080f
 80031f0:	080039fd 	.word	0x080039fd

080031f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003230:	2317      	movs	r3, #23
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4aad      	ldr	r2, [pc, #692]	; (800350c <UART_SetConfig+0x2e8>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4aa8      	ldr	r2, [pc, #672]	; (8003510 <UART_SetConfig+0x2ec>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a9f      	ldr	r2, [pc, #636]	; (8003514 <UART_SetConfig+0x2f0>)
 8003296:	4013      	ands	r3, r2
 8003298:	0019      	movs	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a9b      	ldr	r2, [pc, #620]	; (8003518 <UART_SetConfig+0x2f4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d125      	bne.n	80032fa <UART_SetConfig+0xd6>
 80032ae:	4b9b      	ldr	r3, [pc, #620]	; (800351c <UART_SetConfig+0x2f8>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d00f      	beq.n	80032da <UART_SetConfig+0xb6>
 80032ba:	d304      	bcc.n	80032c6 <UART_SetConfig+0xa2>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d011      	beq.n	80032e4 <UART_SetConfig+0xc0>
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d005      	beq.n	80032d0 <UART_SetConfig+0xac>
 80032c4:	e013      	b.n	80032ee <UART_SetConfig+0xca>
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e022      	b.n	8003316 <UART_SetConfig+0xf2>
 80032d0:	231f      	movs	r3, #31
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e01d      	b.n	8003316 <UART_SetConfig+0xf2>
 80032da:	231f      	movs	r3, #31
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2204      	movs	r2, #4
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e018      	b.n	8003316 <UART_SetConfig+0xf2>
 80032e4:	231f      	movs	r3, #31
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2208      	movs	r2, #8
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e013      	b.n	8003316 <UART_SetConfig+0xf2>
 80032ee:	231f      	movs	r3, #31
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2210      	movs	r2, #16
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	e00d      	b.n	8003316 <UART_SetConfig+0xf2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a88      	ldr	r2, [pc, #544]	; (8003520 <UART_SetConfig+0x2fc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d104      	bne.n	800330e <UART_SetConfig+0xea>
 8003304:	231f      	movs	r3, #31
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e003      	b.n	8003316 <UART_SetConfig+0xf2>
 800330e:	231f      	movs	r3, #31
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2210      	movs	r2, #16
 8003314:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	429a      	cmp	r2, r3
 8003320:	d000      	beq.n	8003324 <UART_SetConfig+0x100>
 8003322:	e07d      	b.n	8003420 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003324:	231f      	movs	r3, #31
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d01c      	beq.n	8003368 <UART_SetConfig+0x144>
 800332e:	dc02      	bgt.n	8003336 <UART_SetConfig+0x112>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <UART_SetConfig+0x11c>
 8003334:	e04b      	b.n	80033ce <UART_SetConfig+0x1aa>
 8003336:	2b04      	cmp	r3, #4
 8003338:	d025      	beq.n	8003386 <UART_SetConfig+0x162>
 800333a:	2b08      	cmp	r3, #8
 800333c:	d037      	beq.n	80033ae <UART_SetConfig+0x18a>
 800333e:	e046      	b.n	80033ce <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003340:	f7ff f8ec 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003344:	0003      	movs	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	005a      	lsls	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	18d2      	adds	r2, r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0019      	movs	r1, r3
 800335a:	0010      	movs	r0, r2
 800335c:	f7fc fed4 	bl	8000108 <__udivsi3>
 8003360:	0003      	movs	r3, r0
 8003362:	b29b      	uxth	r3, r3
 8003364:	61bb      	str	r3, [r7, #24]
        break;
 8003366:	e037      	b.n	80033d8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <UART_SetConfig+0x300>)
 8003370:	189a      	adds	r2, r3, r2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0019      	movs	r1, r3
 8003378:	0010      	movs	r0, r2
 800337a:	f7fc fec5 	bl	8000108 <__udivsi3>
 800337e:	0003      	movs	r3, r0
 8003380:	b29b      	uxth	r3, r3
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e028      	b.n	80033d8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7ff f85b 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 800338a:	0003      	movs	r3, r0
 800338c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	005a      	lsls	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	18d2      	adds	r2, r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0019      	movs	r1, r3
 80033a0:	0010      	movs	r0, r2
 80033a2:	f7fc feb1 	bl	8000108 <__udivsi3>
 80033a6:	0003      	movs	r3, r0
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	61bb      	str	r3, [r7, #24]
        break;
 80033ac:	e014      	b.n	80033d8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	0252      	lsls	r2, r2, #9
 80033b8:	189a      	adds	r2, r3, r2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	0019      	movs	r1, r3
 80033c0:	0010      	movs	r0, r2
 80033c2:	f7fc fea1 	bl	8000108 <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e004      	b.n	80033d8 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80033ce:	2317      	movs	r3, #23
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
        break;
 80033d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d91b      	bls.n	8003416 <UART_SetConfig+0x1f2>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4a51      	ldr	r2, [pc, #324]	; (8003528 <UART_SetConfig+0x304>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d817      	bhi.n	8003416 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	200a      	movs	r0, #10
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	210f      	movs	r1, #15
 80033f0:	438a      	bics	r2, r1
 80033f2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2207      	movs	r2, #7
 80033fc:	4013      	ands	r3, r2
 80033fe:	b299      	uxth	r1, r3
 8003400:	183b      	adds	r3, r7, r0
 8003402:	183a      	adds	r2, r7, r0
 8003404:	8812      	ldrh	r2, [r2, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	183a      	adds	r2, r7, r0
 8003410:	8812      	ldrh	r2, [r2, #0]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e06c      	b.n	80034f0 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003416:	2317      	movs	r3, #23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e067      	b.n	80034f0 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003420:	231f      	movs	r3, #31
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d01b      	beq.n	8003462 <UART_SetConfig+0x23e>
 800342a:	dc02      	bgt.n	8003432 <UART_SetConfig+0x20e>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <UART_SetConfig+0x218>
 8003430:	e049      	b.n	80034c6 <UART_SetConfig+0x2a2>
 8003432:	2b04      	cmp	r3, #4
 8003434:	d024      	beq.n	8003480 <UART_SetConfig+0x25c>
 8003436:	2b08      	cmp	r3, #8
 8003438:	d035      	beq.n	80034a6 <UART_SetConfig+0x282>
 800343a:	e044      	b.n	80034c6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7ff f86e 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003440:	0003      	movs	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085a      	lsrs	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	18d2      	adds	r2, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0019      	movs	r1, r3
 8003454:	0010      	movs	r0, r2
 8003456:	f7fc fe57 	bl	8000108 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	b29b      	uxth	r3, r3
 800345e:	61bb      	str	r3, [r7, #24]
        break;
 8003460:	e036      	b.n	80034d0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <UART_SetConfig+0x308>)
 800346a:	189a      	adds	r2, r3, r2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0019      	movs	r1, r3
 8003472:	0010      	movs	r0, r2
 8003474:	f7fc fe48 	bl	8000108 <__udivsi3>
 8003478:	0003      	movs	r3, r0
 800347a:	b29b      	uxth	r3, r3
 800347c:	61bb      	str	r3, [r7, #24]
        break;
 800347e:	e027      	b.n	80034d0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003480:	f7fe ffde 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	085a      	lsrs	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	18d2      	adds	r2, r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0019      	movs	r1, r3
 8003498:	0010      	movs	r0, r2
 800349a:	f7fc fe35 	bl	8000108 <__udivsi3>
 800349e:	0003      	movs	r3, r0
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	61bb      	str	r3, [r7, #24]
        break;
 80034a4:	e014      	b.n	80034d0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	0212      	lsls	r2, r2, #8
 80034b0:	189a      	adds	r2, r3, r2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0019      	movs	r1, r3
 80034b8:	0010      	movs	r0, r2
 80034ba:	f7fc fe25 	bl	8000108 <__udivsi3>
 80034be:	0003      	movs	r3, r0
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e004      	b.n	80034d0 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80034c6:	2317      	movs	r3, #23
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
        break;
 80034ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	d908      	bls.n	80034e8 <UART_SetConfig+0x2c4>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	4a13      	ldr	r2, [pc, #76]	; (8003528 <UART_SetConfig+0x304>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d804      	bhi.n	80034e8 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e003      	b.n	80034f0 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80034e8:	2317      	movs	r3, #23
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034fc:	2317      	movs	r3, #23
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b008      	add	sp, #32
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	ffff69f3 	.word	0xffff69f3
 8003510:	ffffcfff 	.word	0xffffcfff
 8003514:	fffff4ff 	.word	0xfffff4ff
 8003518:	40013800 	.word	0x40013800
 800351c:	40021000 	.word	0x40021000
 8003520:	40004400 	.word	0x40004400
 8003524:	00f42400 	.word	0x00f42400
 8003528:	0000ffff 	.word	0x0000ffff
 800352c:	007a1200 	.word	0x007a1200

08003530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2201      	movs	r2, #1
 800353e:	4013      	ands	r3, r2
 8003540:	d00b      	beq.n	800355a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <UART_AdvFeatureConfig+0x144>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d00b      	beq.n	800357c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a43      	ldr	r2, [pc, #268]	; (8003678 <UART_AdvFeatureConfig+0x148>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2204      	movs	r2, #4
 8003582:	4013      	ands	r3, r2
 8003584:	d00b      	beq.n	800359e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a3b      	ldr	r2, [pc, #236]	; (800367c <UART_AdvFeatureConfig+0x14c>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2208      	movs	r2, #8
 80035a4:	4013      	ands	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <UART_AdvFeatureConfig+0x150>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	0019      	movs	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2210      	movs	r2, #16
 80035c6:	4013      	ands	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <UART_AdvFeatureConfig+0x154>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2220      	movs	r2, #32
 80035e8:	4013      	ands	r3, r2
 80035ea:	d00b      	beq.n	8003604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <UART_AdvFeatureConfig+0x158>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	4013      	ands	r3, r2
 800360c:	d01d      	beq.n	800364a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <UART_AdvFeatureConfig+0x15c>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	035b      	lsls	r3, r3, #13
 800362e:	429a      	cmp	r2, r3
 8003630:	d10b      	bne.n	800364a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <UART_AdvFeatureConfig+0x160>)
 800363a:	4013      	ands	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	4013      	ands	r3, r2
 8003652:	d00b      	beq.n	800366c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <UART_AdvFeatureConfig+0x164>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fffdffff 	.word	0xfffdffff
 8003678:	fffeffff 	.word	0xfffeffff
 800367c:	fffbffff 	.word	0xfffbffff
 8003680:	ffff7fff 	.word	0xffff7fff
 8003684:	ffffefff 	.word	0xffffefff
 8003688:	ffffdfff 	.word	0xffffdfff
 800368c:	ffefffff 	.word	0xffefffff
 8003690:	ff9fffff 	.word	0xff9fffff
 8003694:	fff7ffff 	.word	0xfff7ffff

08003698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036a6:	f7fd f8cd 	bl	8000844 <HAL_GetTick>
 80036aa:	0003      	movs	r3, r0
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d10d      	bne.n	80036d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	0399      	lsls	r1, r3, #14
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <UART_CheckIdleState+0x88>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	0013      	movs	r3, r2
 80036ca:	2200      	movs	r2, #0
 80036cc:	f000 f82a 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d001      	beq.n	80036d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e01f      	b.n	8003718 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d10d      	bne.n	8003702 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	03d9      	lsls	r1, r3, #15
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <UART_CheckIdleState+0x88>)
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	0013      	movs	r3, r2
 80036f4:	2200      	movs	r2, #0
 80036f6:	f000 f815 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00a      	b.n	8003718 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2270      	movs	r2, #112	; 0x70
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	01ffffff 	.word	0x01ffffff

08003724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	e05d      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3301      	adds	r3, #1
 800373a:	d05a      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7fd f882 	bl	8000844 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <UART_WaitOnFlagUntilTimeout+0x2e>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11b      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	492f      	ldr	r1, [pc, #188]	; (800381c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800375e:	400a      	ands	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	438a      	bics	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2270      	movs	r2, #112	; 0x70
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e043      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d02d      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	401a      	ands	r2, r3
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d123      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4917      	ldr	r1, [pc, #92]	; (800381c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2270      	movs	r2, #112	; 0x70
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e00f      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	425a      	negs	r2, r3
 8003802:	4153      	adcs	r3, r2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	001a      	movs	r2, r3
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d092      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	fffffe5f 	.word	0xfffffe5f

08003820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	21c0      	movs	r1, #192	; 0xc0
 8003834:	438a      	bics	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	490a      	ldr	r1, [pc, #40]	; (8003884 <UART_EndRxTransfer+0x3c>)
 800385c:	400a      	ands	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	438a      	bics	r2, r1
 800386e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	fffffedf 	.word	0xfffffedf

08003888 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b20      	cmp	r3, #32
 800389c:	d014      	beq.n	80038c8 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2252      	movs	r2, #82	; 0x52
 80038a2:	2100      	movs	r1, #0
 80038a4:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	438a      	bics	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038c6:	e003      	b.n	80038d0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff fc92 	bl	80031f4 <HAL_UART_TxCpltCallback>
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff fc8b 	bl	8003204 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b20      	cmp	r3, #32
 800390c:	d01e      	beq.n	800394c <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	225a      	movs	r2, #90	; 0x5a
 8003912:	2100      	movs	r1, #0
 8003914:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	490e      	ldr	r1, [pc, #56]	; (800395c <UART_DMAReceiveCplt+0x64>)
 8003922:	400a      	ands	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	438a      	bics	r2, r1
 8003944:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	0018      	movs	r0, r3
 8003950:	f001 fab8 	bl	8004ec4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffffeff 	.word	0xfffffeff

08003960 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	0018      	movs	r0, r3
 8003972:	f001 fac7 	bl	8004f04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d10a      	bne.n	80039bc <UART_DMAError+0x3e>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b21      	cmp	r3, #33	; 0x21
 80039aa:	d107      	bne.n	80039bc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2252      	movs	r2, #82	; 0x52
 80039b0:	2100      	movs	r1, #0
 80039b2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff ff32 	bl	8003820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d10a      	bne.n	80039e0 <UART_DMAError+0x62>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b22      	cmp	r3, #34	; 0x22
 80039ce:	d107      	bne.n	80039e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	225a      	movs	r2, #90	; 0x5a
 80039d4:	2100      	movs	r1, #0
 80039d6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff ff34 	bl	8003848 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e4:	2210      	movs	r2, #16
 80039e6:	431a      	orrs	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff fc10 	bl	8003214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b006      	add	sp, #24
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	225a      	movs	r2, #90	; 0x5a
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2252      	movs	r2, #82	; 0x52
 8003a16:	2100      	movs	r1, #0
 8003a18:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7ff fbf9 	bl	8003214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b004      	add	sp, #16
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	; 0x40
 8003a3e:	438a      	bics	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff fbcf 	bl	80031f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <ble_init>:
#include "BLE.h"
#include "racing_tasks.h"

void ble_init(UART_HandleTypeDef *BLE_UART) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	HAL_UART_MspInit(BLE_UART);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f001 fc6e 	bl	800534c <HAL_UART_MspInit>
	HAL_UART_Receive_DMA(BLE_UART, (uint8_t *) &RX_BUFFER, sizeof(RX_BUFFER));
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <ble_init+0x24>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2279      	movs	r2, #121	; 0x79
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff f9fc 	bl	8002e74 <HAL_UART_Receive_DMA>
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000d78 	.word	0x20000d78

08003a88 <ble_send>:

void ble_send(UART_HandleTypeDef *BLE_UART, ble_data_packet_tx_t *packet) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(BLE_UART, (uint8_t *) packet, sizeof(*packet));
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	22ed      	movs	r2, #237	; 0xed
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff f95b 	bl	8002d54 <HAL_UART_Transmit_DMA>
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <gps_init>:
uint8_t rxBuffer[GPS_RX_BUFFER_SIZE]; // incoming data buffer to be filled by DMA

/*
 * Initialize the GPS module to a higher baud rate (9600 -> 57600), to only output GPRMC data, and to output at 10Hz rate
 */
uint8_t gps_init(UART_HandleTypeDef *GPS_UART) {
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	b09f      	sub	sp, #124	; 0x7c
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	f7fc fed1 	bl	8000858 <HAL_Delay>
	uint8_t command_baud_57600[GPS_BAUD_57600_SIZE] = GPS_BAUD_57600;
 8003ab6:	2564      	movs	r5, #100	; 0x64
 8003ab8:	197b      	adds	r3, r7, r5
 8003aba:	4a4c      	ldr	r2, [pc, #304]	; (8003bec <gps_init+0x144>)
 8003abc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003abe:	c313      	stmia	r3!, {r0, r1, r4}
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	8891      	ldrh	r1, [r2, #4]
 8003ac6:	8099      	strh	r1, [r3, #4]
 8003ac8:	7992      	ldrb	r2, [r2, #6]
 8003aca:	719a      	strb	r2, [r3, #6]
	uint8_t command_gprmc[GPS_GPRMC_ONLY_SIZE] = GPS_GPRMC_ONLY;
 8003acc:	2330      	movs	r3, #48	; 0x30
 8003ace:	18fa      	adds	r2, r7, r3
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <gps_init+0x148>)
 8003ad2:	0010      	movs	r0, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	2333      	movs	r3, #51	; 0x33
 8003ad8:	001a      	movs	r2, r3
 8003ada:	f003 fa65 	bl	8006fa8 <memcpy>
	uint8_t command_pqtxt[GPS_PQTXT_SIZE] = GPS_PQTXT;
 8003ade:	231c      	movs	r3, #28
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	4a44      	ldr	r2, [pc, #272]	; (8003bf4 <gps_init+0x14c>)
 8003ae4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ae6:	c313      	stmia	r3!, {r0, r1, r4}
 8003ae8:	6811      	ldr	r1, [r2, #0]
 8003aea:	6019      	str	r1, [r3, #0]
 8003aec:	7912      	ldrb	r2, [r2, #4]
 8003aee:	711a      	strb	r2, [r3, #4]
	uint8_t command_10hz[GPS_10HZ_SIZE] = GPS_10HZ;
 8003af0:	2308      	movs	r3, #8
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	4a40      	ldr	r2, [pc, #256]	; (8003bf8 <gps_init+0x150>)
 8003af6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003af8:	c313      	stmia	r3!, {r0, r1, r4}
 8003afa:	6811      	ldr	r1, [r2, #0]
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	7912      	ldrb	r2, [r2, #4]
 8003b00:	711a      	strb	r2, [r3, #4]
	txBufferInsertIndex = txBuffer;
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <gps_init+0x154>)
 8003b04:	4a3e      	ldr	r2, [pc, #248]	; (8003c00 <gps_init+0x158>)
 8003b06:	601a      	str	r2, [r3, #0]
	txBufferReadIndex = txBuffer;
 8003b08:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <gps_init+0x15c>)
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <gps_init+0x158>)
 8003b0c:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef result = HAL_UART_Transmit(GPS_UART, command_baud_57600, GPS_BAUD_57600_SIZE, GPS_UART_TIMEOUT);
 8003b0e:	2677      	movs	r6, #119	; 0x77
 8003b10:	19bc      	adds	r4, r7, r6
 8003b12:	23fa      	movs	r3, #250	; 0xfa
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1979      	adds	r1, r7, r5
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	2213      	movs	r2, #19
 8003b1c:	f7ff f872 	bl	8002c04 <HAL_UART_Transmit>
 8003b20:	0003      	movs	r3, r0
 8003b22:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003b24:	19bb      	adds	r3, r7, r6
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <gps_init+0x88>
		return 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e058      	b.n	8003be2 <gps_init+0x13a>
	}

	GPS_UART->Init.BaudRate = 57600;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	22e1      	movs	r2, #225	; 0xe1
 8003b34:	0212      	lsls	r2, r2, #8
 8003b36:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(GPS_UART) != HAL_OK) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff f80e 	bl	8002b5c <HAL_UART_Init>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <gps_init+0xa0>
		return 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e04c      	b.n	8003be2 <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003b48:	2064      	movs	r0, #100	; 0x64
 8003b4a:	f7fc fe85 	bl	8000858 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_gprmc, GPS_GPRMC_ONLY_SIZE, GPS_UART_TIMEOUT);
 8003b4e:	2577      	movs	r5, #119	; 0x77
 8003b50:	197c      	adds	r4, r7, r5
 8003b52:	23fa      	movs	r3, #250	; 0xfa
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	2230      	movs	r2, #48	; 0x30
 8003b58:	18b9      	adds	r1, r7, r2
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	2233      	movs	r2, #51	; 0x33
 8003b5e:	f7ff f851 	bl	8002c04 <HAL_UART_Transmit>
 8003b62:	0003      	movs	r3, r0
 8003b64:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <gps_init+0xca>
		return 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e037      	b.n	8003be2 <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003b72:	2064      	movs	r0, #100	; 0x64
 8003b74:	f7fc fe70 	bl	8000858 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_pqtxt, GPS_PQTXT_SIZE, GPS_UART_TIMEOUT);
 8003b78:	2577      	movs	r5, #119	; 0x77
 8003b7a:	197c      	adds	r4, r7, r5
 8003b7c:	23fa      	movs	r3, #250	; 0xfa
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	221c      	movs	r2, #28
 8003b82:	18b9      	adds	r1, r7, r2
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	2211      	movs	r2, #17
 8003b88:	f7ff f83c 	bl	8002c04 <HAL_UART_Transmit>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003b90:	197b      	adds	r3, r7, r5
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <gps_init+0xf4>
		return 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e022      	b.n	8003be2 <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	f7fc fe5b 	bl	8000858 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_10hz, GPS_10HZ_SIZE, GPS_UART_TIMEOUT);
 8003ba2:	2577      	movs	r5, #119	; 0x77
 8003ba4:	197c      	adds	r4, r7, r5
 8003ba6:	23fa      	movs	r3, #250	; 0xfa
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	2208      	movs	r2, #8
 8003bac:	18b9      	adds	r1, r7, r2
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	2211      	movs	r2, #17
 8003bb2:	f7ff f827 	bl	8002c04 <HAL_UART_Transmit>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003bba:	197b      	adds	r3, r7, r5
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <gps_init+0x11e>
		return 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e00d      	b.n	8003be2 <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003bc6:	2064      	movs	r0, #100	; 0x64
 8003bc8:	f7fc fe46 	bl	8000858 <HAL_Delay>

	// Initialize DMA for GPS_UART
	HAL_UART_MspInit(GPS_UART);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f001 fbbc 	bl	800534c <HAL_UART_MspInit>

	// Begin Receiving DMA for GPS_UART
	HAL_UART_Receive_DMA(GPS_UART, rxBuffer, GPS_RX_BUFFER_SIZE);
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <gps_init+0x160>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff f94a 	bl	8002e74 <HAL_UART_Receive_DMA>
	return 1;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b01f      	add	sp, #124	; 0x7c
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	08007004 	.word	0x08007004
 8003bf0:	08007018 	.word	0x08007018
 8003bf4:	0800704c 	.word	0x0800704c
 8003bf8:	08007060 	.word	0x08007060
 8003bfc:	20000f00 	.word	0x20000f00
 8003c00:	20000f4c 	.word	0x20000f4c
 8003c04:	20000eec 	.word	0x20000eec
 8003c08:	20000f0c 	.word	0x20000f0c

08003c0c <gps_recieve_full>:

void gps_recieve_full() {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer + GPS_RX_BUFFER_HALF_SIZE, GPS_RX_BUFFER_HALF_SIZE);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <gps_recieve_full+0x34>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	490b      	ldr	r1, [pc, #44]	; (8003c44 <gps_recieve_full+0x38>)
 8003c16:	2220      	movs	r2, #32
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f003 f9c5 	bl	8006fa8 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <gps_recieve_full+0x34>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <gps_recieve_full+0x3c>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d004      	beq.n	8003c32 <gps_recieve_full+0x26>
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <gps_recieve_full+0x34>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3320      	adds	r3, #32
 8003c2e:	001a      	movs	r2, r3
 8003c30:	e000      	b.n	8003c34 <gps_recieve_full+0x28>
 8003c32:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <gps_recieve_full+0x40>)
 8003c34:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <gps_recieve_full+0x34>)
 8003c36:	601a      	str	r2, [r3, #0]
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000f00 	.word	0x20000f00
 8003c44:	20000f2c 	.word	0x20000f2c
 8003c48:	2000130c 	.word	0x2000130c
 8003c4c:	20000f4c 	.word	0x20000f4c

08003c50 <gps_recieve_half>:

void gps_recieve_half() {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer, GPS_RX_BUFFER_HALF_SIZE);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <gps_recieve_half+0x34>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <gps_recieve_half+0x38>)
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f003 f9a3 	bl	8006fa8 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <gps_recieve_half+0x34>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <gps_recieve_half+0x3c>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d004      	beq.n	8003c76 <gps_recieve_half+0x26>
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <gps_recieve_half+0x34>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3320      	adds	r3, #32
 8003c72:	001a      	movs	r2, r3
 8003c74:	e000      	b.n	8003c78 <gps_recieve_half+0x28>
 8003c76:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <gps_recieve_half+0x40>)
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <gps_recieve_half+0x34>)
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	20000f00 	.word	0x20000f00
 8003c88:	20000f0c 	.word	0x20000f0c
 8003c8c:	2000130c 	.word	0x2000130c
 8003c90:	20000f4c 	.word	0x20000f4c

08003c94 <gps_get_data>:

uint8_t ** gps_get_data(){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
	read_params[0] = NULL;
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <gps_get_data+0xa4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
	read_params[1] = NULL;
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <gps_get_data+0xa4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
	txBufferReadIndex = txBufferReadIndex == txBuffer + GPS_TX_BUFFER_SIZE ? txBuffer : txBufferReadIndex;
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <gps_get_data+0xa8>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <gps_get_data+0xac>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d002      	beq.n	8003cb6 <gps_get_data+0x22>
 8003cb0:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <gps_get_data+0xa8>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	e000      	b.n	8003cb8 <gps_get_data+0x24>
 8003cb6:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <gps_get_data+0xb0>)
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <gps_get_data+0xa8>)
 8003cba:	601a      	str	r2, [r3, #0]
	uint8_t * tmp = txBufferReadIndex;
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <gps_get_data+0xa8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 8003cc2:	e023      	b.n	8003d0c <gps_get_data+0x78>
		if(*tmp == '$') {
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b24      	cmp	r3, #36	; 0x24
 8003cca:	d103      	bne.n	8003cd4 <gps_get_data+0x40>
			read_params[0] = tmp;
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <gps_get_data+0xa4>)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e012      	b.n	8003cfa <gps_get_data+0x66>
		} else if (*tmp == '\n') {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b0a      	cmp	r3, #10
 8003cda:	d10e      	bne.n	8003cfa <gps_get_data+0x66>
			if (read_params[0] == NULL) {
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <gps_get_data+0xa4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <gps_get_data+0x5c>
				txBufferReadIndex = tmp + 1; // if txBufferReadIndex is somehow in the middle of a command, reset it here -- this may happen on startup
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <gps_get_data+0xa8>)
 8003cea:	601a      	str	r2, [r3, #0]
				return read_params;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <gps_get_data+0xa4>)
 8003cee:	e01f      	b.n	8003d30 <gps_get_data+0x9c>
			}
			read_params[1] = tmp + 1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <gps_get_data+0xa4>)
 8003cf6:	605a      	str	r2, [r3, #4]
			break;
 8003cf8:	e00d      	b.n	8003d16 <gps_get_data+0x82>
		}
		tmp = (tmp == txBuffer + (GPS_TX_BUFFER_SIZE - 1)) ? txBuffer : tmp + 1;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <gps_get_data+0xb4>)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d002      	beq.n	8003d08 <gps_get_data+0x74>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e000      	b.n	8003d0a <gps_get_data+0x76>
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <gps_get_data+0xb0>)
 8003d0a:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <gps_get_data+0xb8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d1d6      	bne.n	8003cc4 <gps_get_data+0x30>
	}

	if (read_params[0] != NULL && read_params[1] != NULL) {
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <gps_get_data+0xa4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <gps_get_data+0x9a>
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <gps_get_data+0xa4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <gps_get_data+0x9a>
		txBufferReadIndex = read_params[1];
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <gps_get_data+0xa4>)
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <gps_get_data+0xa8>)
 8003d2c:	601a      	str	r2, [r3, #0]
	}

	return read_params;
 8003d2e:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <gps_get_data+0xa4>)
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	2000135c 	.word	0x2000135c
 8003d3c:	20000eec 	.word	0x20000eec
 8003d40:	2000134c 	.word	0x2000134c
 8003d44:	20000f4c 	.word	0x20000f4c
 8003d48:	2000134b 	.word	0x2000134b
 8003d4c:	20000f00 	.word	0x20000f00

08003d50 <LCD_Init>:
/*
   brief:    Initializes the LCD screen - once called, the LCD is ready
   	   	   	   to be used
*/
/**************************************************************************/
void LCD_Init(void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
	  uint8_t cmd, x, numArgs;
	  const uint8_t *addr = initcmd;
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <LCD_Init+0xd8>)
 8003d58:	607b      	str	r3, [r7, #4]

	  _width = ILI9341_TFTWIDTH;
 8003d5a:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <LCD_Init+0xdc>)
 8003d5c:	22f0      	movs	r2, #240	; 0xf0
 8003d5e:	801a      	strh	r2, [r3, #0]
	  _height = ILI9341_TFTHEIGHT;
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <LCD_Init+0xe0>)
 8003d62:	22a0      	movs	r2, #160	; 0xa0
 8003d64:	0052      	lsls	r2, r2, #1
 8003d66:	801a      	strh	r2, [r3, #0]
	  cursor_y = cursor_x = 0;
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <LCD_Init+0xe4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <LCD_Init+0xe4>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	5e9a      	ldrsh	r2, [r3, r2]
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <LCD_Init+0xe8>)
 8003d76:	801a      	strh	r2, [r3, #0]
	  textsize_x = textsize_y = 1;
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <LCD_Init+0xec>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <LCD_Init+0xec>)
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <LCD_Init+0xf0>)
 8003d84:	701a      	strb	r2, [r3, #0]
	  textcolor = textbgcolor = bgcolor = 0xFFFF;
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <LCD_Init+0xf4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4252      	negs	r2, r2
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <LCD_Init+0xf4>)
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <LCD_Init+0xf8>)
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <LCD_Init+0xf8>)
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <LCD_Init+0xfc>)
 8003d9c:	801a      	strh	r2, [r3, #0]
	  wrap = 1;
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <LCD_Init+0x100>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
	  _cp437 = 0;
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <LCD_Init+0x104>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
	  text = NULL;
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <LCD_Init+0x108>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
	  textlength = 0;
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <LCD_Init+0x10c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]

	    // Resets the LCD
	    sendCommand(ILI9341_SWRESET);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f000 f984 	bl	80040c4 <sendCommand>
	    HAL_Delay(150);
 8003dbc:	2096      	movs	r0, #150	; 0x96
 8003dbe:	f7fc fd4b 	bl	8000858 <HAL_Delay>

	    // Sends the init command to the LCD
	    while ((cmd = pgm_read_byte(addr++)) > 0) {
 8003dc2:	e020      	b.n	8003e06 <LCD_Init+0xb6>
	      x = pgm_read_byte(addr++);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	1cba      	adds	r2, r7, #2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	7013      	strb	r3, [r2, #0]
	      numArgs = x & 0x7F;
 8003dd0:	1c7b      	adds	r3, r7, #1
 8003dd2:	1cba      	adds	r2, r7, #2
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	217f      	movs	r1, #127	; 0x7f
 8003dd8:	400a      	ands	r2, r1
 8003dda:	701a      	strb	r2, [r3, #0]
	      sendCommands(cmd, addr, numArgs);
 8003ddc:	1c7b      	adds	r3, r7, #1
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	1cfb      	adds	r3, r7, #3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f99e 	bl	8004128 <sendCommands>
	      addr += numArgs;
 8003dec:	1c7b      	adds	r3, r7, #1
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	607b      	str	r3, [r7, #4]
	      if (x & 0x80)
 8003df6:	1cbb      	adds	r3, r7, #2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da02      	bge.n	8003e06 <LCD_Init+0xb6>
	     	 HAL_Delay(150);
 8003e00:	2096      	movs	r0, #150	; 0x96
 8003e02:	f7fc fd29 	bl	8000858 <HAL_Delay>
	    while ((cmd = pgm_read_byte(addr++)) > 0) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	1cfa      	adds	r2, r7, #3
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	7013      	strb	r3, [r2, #0]
 8003e12:	1cfb      	adds	r3, r7, #3
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1d4      	bne.n	8003dc4 <LCD_Init+0x74>
	    }

	    // sets the screen to display text in landscape mode
	 	 setRotation(1);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f000 fb9e 	bl	800455c <setRotation>

}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	08007168 	.word	0x08007168
 8003e2c:	20001350 	.word	0x20001350
 8003e30:	20001356 	.word	0x20001356
 8003e34:	20001352 	.word	0x20001352
 8003e38:	20000ee8 	.word	0x20000ee8
 8003e3c:	20001366 	.word	0x20001366
 8003e40:	20000efc 	.word	0x20000efc
 8003e44:	20000ef4 	.word	0x20000ef4
 8003e48:	20001364 	.word	0x20001364
 8003e4c:	20001368 	.word	0x20001368
 8003e50:	20001354 	.word	0x20001354
 8003e54:	20000f08 	.word	0x20000f08
 8003e58:	20000ef8 	.word	0x20000ef8
 8003e5c:	20000d74 	.word	0x20000d74

08003e60 <fillScreen>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void fillScreen(uint16_t color) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	0002      	movs	r2, r0
 8003e68:	1dbb      	adds	r3, r7, #6
 8003e6a:	801a      	strh	r2, [r3, #0]
	bgcolor = color;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <fillScreen+0x38>)
 8003e6e:	1dba      	adds	r2, r7, #6
 8003e70:	8812      	ldrh	r2, [r2, #0]
 8003e72:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, _width, _height, color);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <fillScreen+0x3c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	5e9a      	ldrsh	r2, [r3, r2]
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <fillScreen+0x40>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5e59      	ldrsh	r1, [r3, r1]
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	000b      	movs	r3, r1
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f000 f80a 	bl	8003ea4 <fillRect>
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000ef4 	.word	0x20000ef4
 8003e9c:	20001350 	.word	0x20001350
 8003ea0:	20001356 	.word	0x20001356

08003ea4 <fillRect>:
    @param    w   Width in pixels
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8003ea4:	b5b0      	push	{r4, r5, r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	0005      	movs	r5, r0
 8003eac:	000c      	movs	r4, r1
 8003eae:	0010      	movs	r0, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	1dbb      	adds	r3, r7, #6
 8003eb4:	1c2a      	adds	r2, r5, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	1c22      	adds	r2, r4, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
 8003ebe:	1cbb      	adds	r3, r7, #2
 8003ec0:	1c02      	adds	r2, r0, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
 8003ec4:	003b      	movs	r3, r7
 8003ec6:	1c0a      	adds	r2, r1, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
	if (w && h) {   // Nonzero width and height?
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	2200      	movs	r2, #0
 8003ece:	5e9b      	ldrsh	r3, [r3, r2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d100      	bne.n	8003ed6 <fillRect+0x32>
 8003ed4:	e0ee      	b.n	80040b4 <fillRect+0x210>
 8003ed6:	003b      	movs	r3, r7
 8003ed8:	2200      	movs	r2, #0
 8003eda:	5e9b      	ldrsh	r3, [r3, r2]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d100      	bne.n	8003ee2 <fillRect+0x3e>
 8003ee0:	e0e8      	b.n	80040b4 <fillRect+0x210>
	    if (w < 0) {  // If negative width...
 8003ee2:	1cbb      	adds	r3, r7, #2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da0f      	bge.n	8003f0c <fillRect+0x68>
	      x += w + 1; //   Move X to left edge
 8003eec:	1cbb      	adds	r3, r7, #2
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	1dbb      	adds	r3, r7, #6
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	1dbb      	adds	r3, r7, #6
 8003efe:	801a      	strh	r2, [r3, #0]
	      w = -w;     //   Use positive width
 8003f00:	1cbb      	adds	r3, r7, #2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	425b      	negs	r3, r3
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	1cbb      	adds	r3, r7, #2
 8003f0a:	801a      	strh	r2, [r3, #0]
	    }
	    if (x < _width) { // Not off right
 8003f0c:	4b6b      	ldr	r3, [pc, #428]	; (80040bc <fillRect+0x218>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	5e9b      	ldrsh	r3, [r3, r2]
 8003f12:	1dba      	adds	r2, r7, #6
 8003f14:	2100      	movs	r1, #0
 8003f16:	5e52      	ldrsh	r2, [r2, r1]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	db00      	blt.n	8003f1e <fillRect+0x7a>
 8003f1c:	e0ca      	b.n	80040b4 <fillRect+0x210>
	      if (h < 0) {    // If negative height...
 8003f1e:	003b      	movs	r3, r7
 8003f20:	2200      	movs	r2, #0
 8003f22:	5e9b      	ldrsh	r3, [r3, r2]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da0f      	bge.n	8003f48 <fillRect+0xa4>
	        y += h + 1;   //   Move Y to top edge
 8003f28:	003b      	movs	r3, r7
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	18d3      	adds	r3, r2, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	801a      	strh	r2, [r3, #0]
	        h = -h;       //   Use positive height
 8003f3c:	003b      	movs	r3, r7
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	425b      	negs	r3, r3
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	003b      	movs	r3, r7
 8003f46:	801a      	strh	r2, [r3, #0]
	      }
	      if (y < _height) { // Not off bottom
 8003f48:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <fillRect+0x21c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8003f4e:	1d3a      	adds	r2, r7, #4
 8003f50:	2100      	movs	r1, #0
 8003f52:	5e52      	ldrsh	r2, [r2, r1]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	db00      	blt.n	8003f5a <fillRect+0xb6>
 8003f58:	e0ac      	b.n	80040b4 <fillRect+0x210>
	        int16_t x2 = x + w - 1;
 8003f5a:	1dbb      	adds	r3, r7, #6
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	1cbb      	adds	r3, r7, #2
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	18d3      	adds	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	210a      	movs	r1, #10
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	801a      	strh	r2, [r3, #0]
	        if (x2 >= 0) { // Not off left
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2200      	movs	r2, #0
 8003f74:	5e9b      	ldrsh	r3, [r3, r2]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da00      	bge.n	8003f7c <fillRect+0xd8>
 8003f7a:	e09b      	b.n	80040b4 <fillRect+0x210>
	          int16_t y2 = y + h - 1;
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	003b      	movs	r3, r7
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	18d3      	adds	r3, r2, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	801a      	strh	r2, [r3, #0]
	          if (y2 >= 0) { // Not off top
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	2200      	movs	r2, #0
 8003f96:	5e9b      	ldrsh	r3, [r3, r2]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da00      	bge.n	8003f9e <fillRect+0xfa>
 8003f9c:	e08a      	b.n	80040b4 <fillRect+0x210>
	        	  int16_t i, j;
	            // Rectangle partly or fully overlaps screen
	            if (x < 0) {
 8003f9e:	1dbb      	adds	r3, r7, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	5e9b      	ldrsh	r3, [r3, r2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	da09      	bge.n	8003fbc <fillRect+0x118>
	              x = 0;
 8003fa8:	1dbb      	adds	r3, r7, #6
 8003faa:	2200      	movs	r2, #0
 8003fac:	801a      	strh	r2, [r3, #0]
	              w = x2 + 1;
 8003fae:	230a      	movs	r3, #10
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	801a      	strh	r2, [r3, #0]
	            } // Clip left
	            if (y < 0) {
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da09      	bge.n	8003fda <fillRect+0x136>
	              y = 0;
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	801a      	strh	r2, [r3, #0]
	              h = y2 + 1;
 8003fcc:	2308      	movs	r3, #8
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	003b      	movs	r3, r7
 8003fd8:	801a      	strh	r2, [r3, #0]
	            } // Clip top
	            if (x2 >= _width) {
 8003fda:	4b38      	ldr	r3, [pc, #224]	; (80040bc <fillRect+0x218>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	5e9b      	ldrsh	r3, [r3, r2]
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5e52      	ldrsh	r2, [r2, r1]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	db09      	blt.n	8004000 <fillRect+0x15c>
	              w = _width - x;
 8003fec:	4b33      	ldr	r3, [pc, #204]	; (80040bc <fillRect+0x218>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	5e9b      	ldrsh	r3, [r3, r2]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	1cbb      	adds	r3, r7, #2
 8003ffe:	801a      	strh	r2, [r3, #0]
	            } // Clip right
	            if (y2 >= _height) {
 8004000:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <fillRect+0x21c>)
 8004002:	2200      	movs	r2, #0
 8004004:	5e9b      	ldrsh	r3, [r3, r2]
 8004006:	2208      	movs	r2, #8
 8004008:	18ba      	adds	r2, r7, r2
 800400a:	2100      	movs	r1, #0
 800400c:	5e52      	ldrsh	r2, [r2, r1]
 800400e:	429a      	cmp	r2, r3
 8004010:	db09      	blt.n	8004026 <fillRect+0x182>
	              h = _height - y;
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <fillRect+0x21c>)
 8004014:	2200      	movs	r2, #0
 8004016:	5e9b      	ldrsh	r3, [r3, r2]
 8004018:	b29a      	uxth	r2, r3
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	b29a      	uxth	r2, r3
 8004022:	003b      	movs	r3, r7
 8004024:	801a      	strh	r2, [r3, #0]
	            } // Clip bottom
	            	for (i = x; i < x + w; i++) {
 8004026:	230e      	movs	r3, #14
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	1dba      	adds	r2, r7, #6
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	e033      	b.n	800409a <fillRect+0x1f6>
	            		for (j = y; j < y + h; j++) {
 8004032:	230c      	movs	r3, #12
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	1d3a      	adds	r2, r7, #4
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	e017      	b.n	800406e <fillRect+0x1ca>
	            			writePixel(i, j, color);
 800403e:	2320      	movs	r3, #32
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	210c      	movs	r1, #12
 8004046:	000c      	movs	r4, r1
 8004048:	187b      	adds	r3, r7, r1
 800404a:	2100      	movs	r1, #0
 800404c:	5e59      	ldrsh	r1, [r3, r1]
 800404e:	230e      	movs	r3, #14
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2000      	movs	r0, #0
 8004054:	5e1b      	ldrsh	r3, [r3, r0]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f9c4 	bl	80043e4 <writePixel>
	            		for (j = y; j < y + h; j++) {
 800405c:	0021      	movs	r1, r4
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2200      	movs	r2, #0
 8004062:	5e9b      	ldrsh	r3, [r3, r2]
 8004064:	b29b      	uxth	r3, r3
 8004066:	3301      	adds	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	187b      	adds	r3, r7, r1
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	230c      	movs	r3, #12
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	5e9a      	ldrsh	r2, [r3, r2]
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2100      	movs	r1, #0
 800407a:	5e59      	ldrsh	r1, [r3, r1]
 800407c:	003b      	movs	r3, r7
 800407e:	2000      	movs	r0, #0
 8004080:	5e1b      	ldrsh	r3, [r3, r0]
 8004082:	18cb      	adds	r3, r1, r3
 8004084:	429a      	cmp	r2, r3
 8004086:	dbda      	blt.n	800403e <fillRect+0x19a>
	            	for (i = x; i < x + w; i++) {
 8004088:	210e      	movs	r1, #14
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2200      	movs	r2, #0
 800408e:	5e9b      	ldrsh	r3, [r3, r2]
 8004090:	b29b      	uxth	r3, r3
 8004092:	3301      	adds	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	187b      	adds	r3, r7, r1
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	230e      	movs	r3, #14
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	5e9a      	ldrsh	r2, [r3, r2]
 80040a2:	1dbb      	adds	r3, r7, #6
 80040a4:	2100      	movs	r1, #0
 80040a6:	5e59      	ldrsh	r1, [r3, r1]
 80040a8:	1cbb      	adds	r3, r7, #2
 80040aa:	2000      	movs	r0, #0
 80040ac:	5e1b      	ldrsh	r3, [r3, r0]
 80040ae:	18cb      	adds	r3, r1, r3
 80040b0:	429a      	cmp	r2, r3
 80040b2:	dbbe      	blt.n	8004032 <fillRect+0x18e>
	          }
	        }
	      }
	    }
	}
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bdb0      	pop	{r4, r5, r7, pc}
 80040bc:	20001350 	.word	0x20001350
 80040c0:	20001356 	.word	0x20001356

080040c4 <sendCommand>:

/*
   brief:    Sends the command byte (no data bytes) to the LCD
   param:    commandByte	The command to be sent
*/
void sendCommand(uint8_t commandByte) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	0002      	movs	r2, r0
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80040d0:	2390      	movs	r3, #144	; 0x90
 80040d2:	05db      	lsls	r3, r3, #23
 80040d4:	2200      	movs	r2, #0
 80040d6:	2110      	movs	r1, #16
 80040d8:	0018      	movs	r0, r3
 80040da:	f7fc ffdb 	bl	8001094 <HAL_GPIO_WritePin>
    // Command mode
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80040de:	2390      	movs	r3, #144	; 0x90
 80040e0:	05db      	lsls	r3, r3, #23
 80040e2:	2200      	movs	r2, #0
 80040e4:	2120      	movs	r1, #32
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fc ffd4 	bl	8001094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <sendCommand+0x60>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	2110      	movs	r1, #16
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7fc ffce 	bl	8001094 <HAL_GPIO_WritePin>
    // Send the command byte
    write8Bit(commandByte);
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f8fd 	bl	80042fc <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <sendCommand+0x60>)
 8004104:	2201      	movs	r2, #1
 8004106:	2110      	movs	r1, #16
 8004108:	0018      	movs	r0, r3
 800410a:	f7fc ffc3 	bl	8001094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800410e:	2390      	movs	r3, #144	; 0x90
 8004110:	05db      	lsls	r3, r3, #23
 8004112:	2201      	movs	r2, #1
 8004114:	2110      	movs	r1, #16
 8004116:	0018      	movs	r0, r3
 8004118:	f7fc ffbc 	bl	8001094 <HAL_GPIO_WritePin>
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	48000800 	.word	0x48000800

08004128 <sendCommands>:
   @brief    Sends the command byte and data bytes to the LCD
   @param    commandByte	The command to be sent
   @param    dataBytes		The data bytes to be sent
   @param    numDataBytes	The number of data bytes
*/
void sendCommands(uint8_t commandByte, const uint8_t *dataBytes, uint8_t numDataBytes) {
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6039      	str	r1, [r7, #0]
 8004130:	0011      	movs	r1, r2
 8004132:	1dfb      	adds	r3, r7, #7
 8004134:	1c02      	adds	r2, r0, #0
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	1dbb      	adds	r3, r7, #6
 800413a:	1c0a      	adds	r2, r1, #0
 800413c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800413e:	2390      	movs	r3, #144	; 0x90
 8004140:	05db      	lsls	r3, r3, #23
 8004142:	2200      	movs	r2, #0
 8004144:	2110      	movs	r1, #16
 8004146:	0018      	movs	r0, r3
 8004148:	f7fc ffa4 	bl	8001094 <HAL_GPIO_WritePin>
    // Command mode
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800414c:	2390      	movs	r3, #144	; 0x90
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	2200      	movs	r2, #0
 8004152:	2120      	movs	r1, #32
 8004154:	0018      	movs	r0, r3
 8004156:	f7fc ff9d 	bl	8001094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <sendCommands+0xcc>)
 800415c:	2200      	movs	r2, #0
 800415e:	2110      	movs	r1, #16
 8004160:	0018      	movs	r0, r3
 8004162:	f7fc ff97 	bl	8001094 <HAL_GPIO_WritePin>
    // Send the command byte
    write8Bit(commandByte);
 8004166:	1dfb      	adds	r3, r7, #7
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	0018      	movs	r0, r3
 800416c:	f000 f8c6 	bl	80042fc <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <sendCommands+0xcc>)
 8004172:	2201      	movs	r2, #1
 8004174:	2110      	movs	r1, #16
 8004176:	0018      	movs	r0, r3
 8004178:	f7fc ff8c 	bl	8001094 <HAL_GPIO_WritePin>

	  if (numDataBytes > 0) {
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02c      	beq.n	80041de <sendCommands+0xb6>
		  uint8_t i;
		  // Data mode
		  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004184:	2390      	movs	r3, #144	; 0x90
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	2201      	movs	r2, #1
 800418a:	2120      	movs	r1, #32
 800418c:	0018      	movs	r0, r3
 800418e:	f7fc ff81 	bl	8001094 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataBytes; i++) {
 8004192:	230f      	movs	r3, #15
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e019      	b.n	80041d0 <sendCommands+0xa8>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <sendCommands+0xcc>)
 800419e:	2200      	movs	r2, #0
 80041a0:	2110      	movs	r1, #16
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fc ff76 	bl	8001094 <HAL_GPIO_WritePin>
			    // Send the data byte
			    write8Bit(*(dataBytes + i));
 80041a8:	240f      	movs	r4, #15
 80041aa:	193b      	adds	r3, r7, r4
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f8a1 	bl	80042fc <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <sendCommands+0xcc>)
 80041bc:	2201      	movs	r2, #1
 80041be:	2110      	movs	r1, #16
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fc ff67 	bl	8001094 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataBytes; i++) {
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	193b      	adds	r3, r7, r4
 80041cc:	3201      	adds	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	230f      	movs	r3, #15
 80041d2:	18fa      	adds	r2, r7, r3
 80041d4:	1dbb      	adds	r3, r7, #6
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3de      	bcc.n	800419c <sendCommands+0x74>
		  }
	  }
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80041de:	2390      	movs	r3, #144	; 0x90
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	2201      	movs	r2, #1
 80041e4:	2110      	movs	r1, #16
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fc ff54 	bl	8001094 <HAL_GPIO_WritePin>
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b005      	add	sp, #20
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	48000800 	.word	0x48000800

080041f8 <sendCommands16>:
   @brief    Sends the command byte and 16-bit data bytes to the LCD
   @param    commandByte	The command to be sent
   @param    dataHalfWords		The data half-words to be sent
   @param    numDataHalfWords	The number of data half-words
*/
void sendCommands16(uint8_t commandByte, const uint16_t *dataHalfWords, uint8_t numDataHalfWords) {
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6039      	str	r1, [r7, #0]
 8004200:	0011      	movs	r1, r2
 8004202:	1dfb      	adds	r3, r7, #7
 8004204:	1c02      	adds	r2, r0, #0
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	1dbb      	adds	r3, r7, #6
 800420a:	1c0a      	adds	r2, r1, #0
 800420c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800420e:	2390      	movs	r3, #144	; 0x90
 8004210:	05db      	lsls	r3, r3, #23
 8004212:	2200      	movs	r2, #0
 8004214:	2110      	movs	r1, #16
 8004216:	0018      	movs	r0, r3
 8004218:	f7fc ff3c 	bl	8001094 <HAL_GPIO_WritePin>
    // Command mode
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800421c:	2390      	movs	r3, #144	; 0x90
 800421e:	05db      	lsls	r3, r3, #23
 8004220:	2200      	movs	r2, #0
 8004222:	2120      	movs	r1, #32
 8004224:	0018      	movs	r0, r3
 8004226:	f7fc ff35 	bl	8001094 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <sendCommands16+0x100>)
 800422c:	2200      	movs	r2, #0
 800422e:	2110      	movs	r1, #16
 8004230:	0018      	movs	r0, r3
 8004232:	f7fc ff2f 	bl	8001094 <HAL_GPIO_WritePin>
	// Send the command byte
	write8Bit(commandByte);
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	0018      	movs	r0, r3
 800423c:	f000 f85e 	bl	80042fc <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004240:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <sendCommands16+0x100>)
 8004242:	2201      	movs	r2, #1
 8004244:	2110      	movs	r1, #16
 8004246:	0018      	movs	r0, r3
 8004248:	f7fc ff24 	bl	8001094 <HAL_GPIO_WritePin>

	  if (numDataHalfWords > 0) {
 800424c:	1dbb      	adds	r3, r7, #6
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d046      	beq.n	80042e2 <sendCommands16+0xea>
			uint8_t i;
		  // Data mode
		  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004254:	2390      	movs	r3, #144	; 0x90
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	2201      	movs	r2, #1
 800425a:	2120      	movs	r1, #32
 800425c:	0018      	movs	r0, r3
 800425e:	f7fc ff19 	bl	8001094 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataHalfWords; i++) {
 8004262:	230f      	movs	r3, #15
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e033      	b.n	80042d4 <sendCommands16+0xdc>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800426c:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <sendCommands16+0x100>)
 800426e:	2200      	movs	r2, #0
 8004270:	2110      	movs	r1, #16
 8004272:	0018      	movs	r0, r3
 8004274:	f7fc ff0e 	bl	8001094 <HAL_GPIO_WritePin>
				write8Bit((uint8_t)((*(dataHalfWords + i)) >> 8));
 8004278:	240f      	movs	r4, #15
 800427a:	193b      	adds	r3, r7, r4
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	18d3      	adds	r3, r2, r3
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	b29b      	uxth	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	0018      	movs	r0, r3
 800428e:	f000 f835 	bl	80042fc <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <sendCommands16+0x100>)
 8004294:	2201      	movs	r2, #1
 8004296:	2110      	movs	r1, #16
 8004298:	0018      	movs	r0, r3
 800429a:	f7fc fefb 	bl	8001094 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <sendCommands16+0x100>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	2110      	movs	r1, #16
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fc fef5 	bl	8001094 <HAL_GPIO_WritePin>
				write8Bit((uint8_t)((*(dataHalfWords + i)) & 0xFF));
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 f81f 	bl	80042fc <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <sendCommands16+0x100>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	2110      	movs	r1, #16
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fc fee5 	bl	8001094 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataHalfWords; i++) {
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	193b      	adds	r3, r7, r4
 80042d0:	3201      	adds	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	230f      	movs	r3, #15
 80042d6:	18fa      	adds	r2, r7, r3
 80042d8:	1dbb      	adds	r3, r7, #6
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3c4      	bcc.n	800426c <sendCommands16+0x74>
		  }
	  }
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80042e2:	2390      	movs	r3, #144	; 0x90
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	2201      	movs	r2, #1
 80042e8:	2110      	movs	r1, #16
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fc fed2 	bl	8001094 <HAL_GPIO_WritePin>
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b005      	add	sp, #20
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	48000800 	.word	0x48000800

080042fc <write8Bit>:

/*
    @brief  Writes data to LCD
    @param    d		The data to be sent
*/
void write8Bit(uint8_t d) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	0002      	movs	r2, r0
 8004304:	1dfb      	adds	r3, r7, #7
 8004306:	701a      	strb	r2, [r3, #0]
	// A bit slower than before - about 1 sec difference for fillScreen()
	GPIOB->BRR = 0xf000;
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <write8Bit+0xe0>)
 800430a:	22f0      	movs	r2, #240	; 0xf0
 800430c:	0212      	lsls	r2, r2, #8
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BRR = 0x03c0;
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <write8Bit+0xe4>)
 8004312:	22f0      	movs	r2, #240	; 0xf0
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BSRR  |= ((d & 0x01)<<8);
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <write8Bit+0xe4>)
 800431a:	6999      	ldr	r1, [r3, #24]
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	001a      	movs	r2, r3
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	401a      	ands	r2, r3
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <write8Bit+0xe4>)
 800432c:	430a      	orrs	r2, r1
 800432e:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR  |= ((d & 0x02)<<5);
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <write8Bit+0xe4>)
 8004332:	6999      	ldr	r1, [r3, #24]
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	015b      	lsls	r3, r3, #5
 800433a:	001a      	movs	r2, r3
 800433c:	2340      	movs	r3, #64	; 0x40
 800433e:	401a      	ands	r2, r3
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <write8Bit+0xe4>)
 8004342:	430a      	orrs	r2, r1
 8004344:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x04)<<12);
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <write8Bit+0xe0>)
 8004348:	6999      	ldr	r1, [r3, #24]
 800434a:	1dfb      	adds	r3, r7, #7
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	001a      	movs	r2, r3
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	01db      	lsls	r3, r3, #7
 8004356:	401a      	ands	r2, r3
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <write8Bit+0xe0>)
 800435a:	430a      	orrs	r2, r1
 800435c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x08)<<9);
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <write8Bit+0xe0>)
 8004360:	6999      	ldr	r1, [r3, #24]
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	025b      	lsls	r3, r3, #9
 8004368:	001a      	movs	r2, r3
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	401a      	ands	r2, r3
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <write8Bit+0xe0>)
 8004372:	430a      	orrs	r2, r1
 8004374:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR  |= ((d & 0x10)<<5);
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <write8Bit+0xe4>)
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	015b      	lsls	r3, r3, #5
 8004380:	001a      	movs	r2, r3
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	401a      	ands	r2, r3
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <write8Bit+0xe4>)
 800438a:	430a      	orrs	r2, r1
 800438c:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR  |= ((d & 0x20)<<2);
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <write8Bit+0xe4>)
 8004390:	6999      	ldr	r1, [r3, #24]
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	001a      	movs	r2, r3
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	401a      	ands	r2, r3
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <write8Bit+0xe4>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x40)<<9);
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <write8Bit+0xe0>)
 80043a6:	6999      	ldr	r1, [r3, #24]
 80043a8:	1dfb      	adds	r3, r7, #7
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	025b      	lsls	r3, r3, #9
 80043ae:	001a      	movs	r2, r3
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	401a      	ands	r2, r3
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <write8Bit+0xe0>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x80)<<6);
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <write8Bit+0xe0>)
 80043be:	6999      	ldr	r1, [r3, #24]
 80043c0:	1dfb      	adds	r3, r7, #7
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	019b      	lsls	r3, r3, #6
 80043c6:	001a      	movs	r2, r3
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	019b      	lsls	r3, r3, #6
 80043cc:	401a      	ands	r2, r3
 80043ce:	4b03      	ldr	r3, [pc, #12]	; (80043dc <write8Bit+0xe0>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800

080043e4 <writePixel>:
            Not self-contained; should follow a startWrite() call.
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void writePixel(int16_t x, int16_t y, uint16_t color) {
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	0004      	movs	r4, r0
 80043ec:	0008      	movs	r0, r1
 80043ee:	0011      	movs	r1, r2
 80043f0:	1dbb      	adds	r3, r7, #6
 80043f2:	1c22      	adds	r2, r4, #0
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	1c02      	adds	r2, r0, #0
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	1cbb      	adds	r3, r7, #2
 80043fe:	1c0a      	adds	r2, r1, #0
 8004400:	801a      	strh	r2, [r3, #0]
	  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004402:	1dbb      	adds	r3, r7, #6
 8004404:	2200      	movs	r2, #0
 8004406:	5e9b      	ldrsh	r3, [r3, r2]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db57      	blt.n	80044bc <writePixel+0xd8>
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <writePixel+0xe0>)
 800440e:	2200      	movs	r2, #0
 8004410:	5e9b      	ldrsh	r3, [r3, r2]
 8004412:	1dba      	adds	r2, r7, #6
 8004414:	2100      	movs	r1, #0
 8004416:	5e52      	ldrsh	r2, [r2, r1]
 8004418:	429a      	cmp	r2, r3
 800441a:	da4f      	bge.n	80044bc <writePixel+0xd8>
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	2200      	movs	r2, #0
 8004420:	5e9b      	ldrsh	r3, [r3, r2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db4a      	blt.n	80044bc <writePixel+0xd8>
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <writePixel+0xe4>)
 8004428:	2200      	movs	r2, #0
 800442a:	5e9b      	ldrsh	r3, [r3, r2]
 800442c:	1d3a      	adds	r2, r7, #4
 800442e:	2100      	movs	r1, #0
 8004430:	5e52      	ldrsh	r2, [r2, r1]
 8004432:	429a      	cmp	r2, r3
 8004434:	da42      	bge.n	80044bc <writePixel+0xd8>
		  //uint8_t data[] = {color >> 8, color & 0xFF};
	    // THEN set up transaction (if needed) and draw...
	    setAddrWindow(x, y, 1, 1);
 8004436:	1dbb      	adds	r3, r7, #6
 8004438:	8818      	ldrh	r0, [r3, #0]
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	8819      	ldrh	r1, [r3, #0]
 800443e:	2301      	movs	r3, #1
 8004440:	2201      	movs	r2, #1
 8004442:	f000 f845 	bl	80044d0 <setAddrWindow>

	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004446:	2390      	movs	r3, #144	; 0x90
 8004448:	05db      	lsls	r3, r3, #23
 800444a:	2200      	movs	r2, #0
 800444c:	2110      	movs	r1, #16
 800444e:	0018      	movs	r0, r3
 8004450:	f7fc fe20 	bl	8001094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004454:	2390      	movs	r3, #144	; 0x90
 8004456:	05db      	lsls	r3, r3, #23
 8004458:	2201      	movs	r2, #1
 800445a:	2120      	movs	r1, #32
 800445c:	0018      	movs	r0, r3
 800445e:	f7fc fe19 	bl	8001094 <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <writePixel+0xe8>)
 8004464:	2200      	movs	r2, #0
 8004466:	2110      	movs	r1, #16
 8004468:	0018      	movs	r0, r3
 800446a:	f7fc fe13 	bl	8001094 <HAL_GPIO_WritePin>
	    write8Bit((color >> 8));
 800446e:	1cbb      	adds	r3, r7, #2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	b29b      	uxth	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	0018      	movs	r0, r3
 800447a:	f7ff ff3f 	bl	80042fc <write8Bit>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <writePixel+0xe8>)
 8004480:	2201      	movs	r2, #1
 8004482:	2110      	movs	r1, #16
 8004484:	0018      	movs	r0, r3
 8004486:	f7fc fe05 	bl	8001094 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <writePixel+0xe8>)
 800448c:	2200      	movs	r2, #0
 800448e:	2110      	movs	r1, #16
 8004490:	0018      	movs	r0, r3
 8004492:	f7fc fdff 	bl	8001094 <HAL_GPIO_WritePin>
	    write8Bit((color & 0xFF));
 8004496:	1cbb      	adds	r3, r7, #2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	0018      	movs	r0, r3
 800449e:	f7ff ff2d 	bl	80042fc <write8Bit>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <writePixel+0xe8>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	2110      	movs	r1, #16
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7fc fdf3 	bl	8001094 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80044ae:	2390      	movs	r3, #144	; 0x90
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	2201      	movs	r2, #1
 80044b4:	2110      	movs	r1, #16
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7fc fdec 	bl	8001094 <HAL_GPIO_WritePin>
	  }
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b003      	add	sp, #12
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	20001350 	.word	0x20001350
 80044c8:	20001356 	.word	0x20001356
 80044cc:	48000800 	.word	0x48000800

080044d0 <setAddrWindow>:
    @param   x1  TFT memory 'x' origin
    @param   y1  TFT memory 'y' origin
    @param   w   Width of rectangle
    @param   h   Height of rectangle
*/
void setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	0005      	movs	r5, r0
 80044d8:	000c      	movs	r4, r1
 80044da:	0010      	movs	r0, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	1dbb      	adds	r3, r7, #6
 80044e0:	1c2a      	adds	r2, r5, #0
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	1c22      	adds	r2, r4, #0
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	1c02      	adds	r2, r0, #0
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	003b      	movs	r3, r7
 80044f2:	1c0a      	adds	r2, r1, #0
 80044f4:	801a      	strh	r2, [r3, #0]
	  uint16_t x[2] = {x1, x1 + w - 1}, y[2] = {y1, y1 + h - 1};
 80044f6:	210c      	movs	r1, #12
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	1dba      	adds	r2, r7, #6
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	1dba      	adds	r2, r7, #6
 8004502:	1cbb      	adds	r3, r7, #2
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	18d3      	adds	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	187b      	adds	r3, r7, r1
 8004512:	805a      	strh	r2, [r3, #2]
 8004514:	2008      	movs	r0, #8
 8004516:	183b      	adds	r3, r7, r0
 8004518:	1d3a      	adds	r2, r7, #4
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	1d3a      	adds	r2, r7, #4
 8004520:	003b      	movs	r3, r7
 8004522:	8812      	ldrh	r2, [r2, #0]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	0004      	movs	r4, r0
 8004530:	183b      	adds	r3, r7, r0
 8004532:	805a      	strh	r2, [r3, #2]
	  sendCommands16(ILI9341_CASET, x, 2);
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2202      	movs	r2, #2
 8004538:	0019      	movs	r1, r3
 800453a:	202a      	movs	r0, #42	; 0x2a
 800453c:	f7ff fe5c 	bl	80041f8 <sendCommands16>
	  sendCommands16(ILI9341_PASET, y, 2);
 8004540:	0020      	movs	r0, r4
 8004542:	183b      	adds	r3, r7, r0
 8004544:	2202      	movs	r2, #2
 8004546:	0019      	movs	r1, r3
 8004548:	202b      	movs	r0, #43	; 0x2b
 800454a:	f7ff fe55 	bl	80041f8 <sendCommands16>
	  sendCommand(ILI9341_RAMWR); // Write to RAM
 800454e:	202c      	movs	r0, #44	; 0x2c
 8004550:	f7ff fdb8 	bl	80040c4 <sendCommand>
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bdb0      	pop	{r4, r5, r7, pc}

0800455c <setRotation>:
   param:	m	m == 0: 8 bit interface is at the bottom of the screen
   	   	   	   	m == 1: 8 bit interface is to the left of the screen
   	   	   	    m == 2: 8 bit interface is at the top of the screen
   	   	   	    m == 3: 8 bit interface is to the right of the screen
*/
void setRotation(uint8_t m) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	0002      	movs	r2, r0
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	701a      	strb	r2, [r3, #0]
  rotation = m % 4; // can't be higher than 3
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2203      	movs	r2, #3
 800456e:	4013      	ands	r3, r2
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <setRotation+0xa0>)
 8004574:	701a      	strb	r2, [r3, #0]
  switch (rotation) {
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <setRotation+0xa0>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d013      	beq.n	80045a6 <setRotation+0x4a>
 800457e:	dc02      	bgt.n	8004586 <setRotation+0x2a>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <setRotation+0x34>
 8004584:	e030      	b.n	80045e8 <setRotation+0x8c>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d018      	beq.n	80045bc <setRotation+0x60>
 800458a:	2b03      	cmp	r3, #3
 800458c:	d021      	beq.n	80045d2 <setRotation+0x76>
 800458e:	e02b      	b.n	80045e8 <setRotation+0x8c>
  case 0:
    m = (MADCTL_MX | MADCTL_BGR);
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	2248      	movs	r2, #72	; 0x48
 8004594:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTWIDTH;
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <setRotation+0xa4>)
 8004598:	22f0      	movs	r2, #240	; 0xf0
 800459a:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTHEIGHT;
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <setRotation+0xa8>)
 800459e:	22a0      	movs	r2, #160	; 0xa0
 80045a0:	0052      	lsls	r2, r2, #1
 80045a2:	801a      	strh	r2, [r3, #0]
    break;
 80045a4:	e020      	b.n	80045e8 <setRotation+0x8c>
  case 1:
    m = (MADCTL_MV | MADCTL_BGR);
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	2228      	movs	r2, #40	; 0x28
 80045aa:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTHEIGHT;
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <setRotation+0xa4>)
 80045ae:	22a0      	movs	r2, #160	; 0xa0
 80045b0:	0052      	lsls	r2, r2, #1
 80045b2:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTWIDTH;
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <setRotation+0xa8>)
 80045b6:	22f0      	movs	r2, #240	; 0xf0
 80045b8:	801a      	strh	r2, [r3, #0]
    break;
 80045ba:	e015      	b.n	80045e8 <setRotation+0x8c>
  case 2:
    m = (MADCTL_MY | MADCTL_BGR);
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	2288      	movs	r2, #136	; 0x88
 80045c0:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTWIDTH;
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <setRotation+0xa4>)
 80045c4:	22f0      	movs	r2, #240	; 0xf0
 80045c6:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTHEIGHT;
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <setRotation+0xa8>)
 80045ca:	22a0      	movs	r2, #160	; 0xa0
 80045cc:	0052      	lsls	r2, r2, #1
 80045ce:	801a      	strh	r2, [r3, #0]
    break;
 80045d0:	e00a      	b.n	80045e8 <setRotation+0x8c>
  case 3:
    m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	22e8      	movs	r2, #232	; 0xe8
 80045d6:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTHEIGHT;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <setRotation+0xa4>)
 80045da:	22a0      	movs	r2, #160	; 0xa0
 80045dc:	0052      	lsls	r2, r2, #1
 80045de:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTWIDTH;
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <setRotation+0xa8>)
 80045e2:	22f0      	movs	r2, #240	; 0xf0
 80045e4:	801a      	strh	r2, [r3, #0]
    break;
 80045e6:	46c0      	nop			; (mov r8, r8)
  }
  sendCommands(ILI9341_MADCTL, &m, 1);
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	2201      	movs	r2, #1
 80045ec:	0019      	movs	r1, r3
 80045ee:	2036      	movs	r0, #54	; 0x36
 80045f0:	f7ff fd9a 	bl	8004128 <sendCommands>
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000efd 	.word	0x20000efd
 8004600:	20001350 	.word	0x20001350
 8004604:	20001356 	.word	0x20001356

08004608 <initMMA8452Q>:
#include <MMA8452Q.h>


// Initializes accelerometer
// returns 1 if successful else 0
uint8_t initMMA8452Q(uint8_t addr, MMA8452Q_Scale scale, MMA8452Q_Data_Rate rate){
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	0004      	movs	r4, r0
 8004610:	0008      	movs	r0, r1
 8004612:	0011      	movs	r1, r2
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	1c22      	adds	r2, r4, #0
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	1c02      	adds	r2, r0, #0
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	1c0a      	adds	r2, r1, #0
 8004624:	701a      	strb	r2, [r3, #0]

	// verify device identity
	if (readRegister(WHO_AM_I) != 0x2A){
 8004626:	200d      	movs	r0, #13
 8004628:	f000 f8fe 	bl	8004828 <readRegister>
 800462c:	0003      	movs	r3, r0
 800462e:	2b2a      	cmp	r3, #42	; 0x2a
 8004630:	d001      	beq.n	8004636 <initMMA8452Q+0x2e>
		return 0;
 8004632:	2300      	movs	r3, #0
 8004634:	e00e      	b.n	8004654 <initMMA8452Q+0x4c>
	}

	// switch to standby to change registers
	standby();
 8004636:	f000 f87c 	bl	8004732 <standby>

	// set the scale and data rate
	setScale(scale);
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f80c 	bl	800465c <setScale>
	setDataRate(rate);
 8004644:	1d7b      	adds	r3, r7, #5
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 f83f 	bl	80046cc <setDataRate>

	// set the device to active state and return successfully
	active();
 800464e:	f000 f886 	bl	800475e <active>
	return 1;
 8004652:	2301      	movs	r3, #1
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b003      	add	sp, #12
 800465a:	bd90      	pop	{r4, r7, pc}

0800465c <setScale>:

// sets the full-scale range of the accelerometers
// possible values for scale are SCALE_2G, SCALE_4G, SCALE_8G
void setScale(MMA8452Q_Scale scale){
 800465c:	b5b0      	push	{r4, r5, r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	0002      	movs	r2, r0
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	701a      	strb	r2, [r3, #0]
	// set the global scale variable (used to calculate measured data)
	SCALE = scale;
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <setScale+0x6c>)
 800466a:	1dfa      	adds	r2, r7, #7
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]

	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8004670:	f000 f88b 	bl	800478a <isActive>
 8004674:	0003      	movs	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <setScale+0x22>
		standby();
 800467a:	f000 f85a 	bl	8004732 <standby>
	}

	// read config, change scale bits, then re-write register
	uint8_t config = readRegister(XYZ_DATA_CFG);	// read current config
 800467e:	200f      	movs	r0, #15
 8004680:	0005      	movs	r5, r0
 8004682:	183c      	adds	r4, r7, r0
 8004684:	200e      	movs	r0, #14
 8004686:	f000 f8cf 	bl	8004828 <readRegister>
 800468a:	0003      	movs	r3, r0
 800468c:	7023      	strb	r3, [r4, #0]
	config &= 0xFC;									// mask out the scale bits
 800468e:	0028      	movs	r0, r5
 8004690:	183b      	adds	r3, r7, r0
 8004692:	183a      	adds	r2, r7, r0
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	2103      	movs	r1, #3
 8004698:	438a      	bics	r2, r1
 800469a:	701a      	strb	r2, [r3, #0]
	config |= (scale >> 2);							// 00 = 2G, 01 = 4G, 10 = 8G
 800469c:	1dfb      	adds	r3, r7, #7
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	b2d9      	uxtb	r1, r3
 80046a4:	183b      	adds	r3, r7, r0
 80046a6:	183a      	adds	r2, r7, r0
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	701a      	strb	r2, [r3, #0]
	writeRegister(XYZ_DATA_CFG, config);			// write config with new scale
 80046ae:	183b      	adds	r3, r7, r0
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0019      	movs	r1, r3
 80046b4:	200e      	movs	r0, #14
 80046b6:	f000 f8a3 	bl	8004800 <writeRegister>

	// return to active state once complete
	active();
 80046ba:	f000 f850 	bl	800475e <active>
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b004      	add	sp, #16
 80046c4:	bdb0      	pop	{r4, r5, r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20001358 	.word	0x20001358

080046cc <setDataRate>:

// sets the data rate
void setDataRate(MMA8452Q_Data_Rate data_rate){
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	0002      	movs	r2, r0
 80046d4:	1dfb      	adds	r3, r7, #7
 80046d6:	701a      	strb	r2, [r3, #0]
	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 80046d8:	f000 f857 	bl	800478a <isActive>
 80046dc:	0003      	movs	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <setDataRate+0x1a>
		standby();
 80046e2:	f000 f826 	bl	8004732 <standby>
	}

	// read control, change rate bits, then re-write register
	uint8_t control = readRegister(CTRL_REG1);		// read current settings
 80046e6:	200f      	movs	r0, #15
 80046e8:	0005      	movs	r5, r0
 80046ea:	183c      	adds	r4, r7, r0
 80046ec:	202a      	movs	r0, #42	; 0x2a
 80046ee:	f000 f89b 	bl	8004828 <readRegister>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
	control &= 0xC7;								// mask out the data rate bits
 80046f6:	0028      	movs	r0, r5
 80046f8:	183b      	adds	r3, r7, r0
 80046fa:	183a      	adds	r2, r7, r0
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	2138      	movs	r1, #56	; 0x38
 8004700:	438a      	bics	r2, r1
 8004702:	701a      	strb	r2, [r3, #0]
	control |= (data_rate << 3);					// shift data rate bits
 8004704:	1dfb      	adds	r3, r7, #7
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	b25a      	sxtb	r2, r3
 800470c:	183b      	adds	r3, r7, r0
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b25b      	sxtb	r3, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	b25a      	sxtb	r2, r3
 8004716:	183b      	adds	r3, r7, r0
 8004718:	701a      	strb	r2, [r3, #0]
	writeRegister(CTRL_REG1, control);				// write settings with new data rate
 800471a:	183b      	adds	r3, r7, r0
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	0019      	movs	r1, r3
 8004720:	202a      	movs	r0, #42	; 0x2a
 8004722:	f000 f86d 	bl	8004800 <writeRegister>

	// return to active state once complete
	active();
 8004726:	f000 f81a 	bl	800475e <active>
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bdb0      	pop	{r4, r5, r7, pc}

08004732 <standby>:

// sets the MMA8452 to standby mode
void standby(void){
 8004732:	b590      	push	{r4, r7, lr}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
	// clear the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8004738:	1dfc      	adds	r4, r7, #7
 800473a:	202a      	movs	r0, #42	; 0x2a
 800473c:	f000 f874 	bl	8004828 <readRegister>
 8004740:	0003      	movs	r3, r0
 8004742:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control & ~(0x01)));
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	4393      	bics	r3, r2
 800474c:	b2db      	uxtb	r3, r3
 800474e:	0019      	movs	r1, r3
 8004750:	202a      	movs	r0, #42	; 0x2a
 8004752:	f000 f855 	bl	8004800 <writeRegister>
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b003      	add	sp, #12
 800475c:	bd90      	pop	{r4, r7, pc}

0800475e <active>:

// sets the MMA8452 to active mode
void active(void){
 800475e:	b590      	push	{r4, r7, lr}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
	// set the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8004764:	1dfc      	adds	r4, r7, #7
 8004766:	202a      	movs	r0, #42	; 0x2a
 8004768:	f000 f85e 	bl	8004828 <readRegister>
 800476c:	0003      	movs	r3, r0
 800476e:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control | 0x01));
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4313      	orrs	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	0019      	movs	r1, r3
 800477c:	202a      	movs	r0, #42	; 0x2a
 800477e:	f000 f83f 	bl	8004800 <writeRegister>
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b003      	add	sp, #12
 8004788:	bd90      	pop	{r4, r7, pc}

0800478a <isActive>:

// returns 1 if in Active state, otherwise returns 0
uint8_t isActive(void){
 800478a:	b590      	push	{r4, r7, lr}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
	uint8_t currentState = readRegister(SYSMOD);
 8004790:	1dfc      	adds	r4, r7, #7
 8004792:	200b      	movs	r0, #11
 8004794:	f000 f848 	bl	8004828 <readRegister>
 8004798:	0003      	movs	r3, r0
 800479a:	7023      	strb	r3, [r4, #0]
	currentState &= 0x03;
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	1dfa      	adds	r2, r7, #7
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	2103      	movs	r1, #3
 80047a4:	400a      	ands	r2, r1
 80047a6:	701a      	strb	r2, [r3, #0]

	// Wake and Sleep are both active SYSMOD states
	if (currentState == SYSMOD_STANDBY)
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <isActive+0x2a>
		return 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <isActive+0x2c>
	return 1;
 80047b4:	2301      	movs	r3, #1
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b003      	add	sp, #12
 80047bc:	bd90      	pop	{r4, r7, pc}
	...

080047c0 <writeRegisters>:
	Y = (float)y / (float)(1 << 11) * (float)(SCALE);
	Z = (float)z / (float)(1 << 11) * (float)(SCALE);
}

// write an array of "len" bytes ("buffer")
void writeRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	6039      	str	r1, [r7, #0]
 80047c8:	0011      	movs	r1, r2
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	1c02      	adds	r2, r0, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	1c0a      	adds	r2, r1, #0
 80047d4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 80047d6:	1dfb      	adds	r3, r7, #7
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4807      	ldr	r0, [pc, #28]	; (80047fc <writeRegisters+0x3c>)
 80047de:	230a      	movs	r3, #10
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2301      	movs	r3, #1
 80047ee:	213a      	movs	r1, #58	; 0x3a
 80047f0:	f7fc fd04 	bl	80011fc <HAL_I2C_Mem_Write>
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200013b4 	.word	0x200013b4

08004800 <writeRegister>:

// write a single byte of data to a register in the MMA8452Q
void writeRegister(MMA8452Q_Register reg, uint8_t data){
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	0002      	movs	r2, r0
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	1dbb      	adds	r3, r7, #6
 800480e:	1c0a      	adds	r2, r1, #0
 8004810:	701a      	strb	r2, [r3, #0]
	writeRegisters(reg, &data, 1);
 8004812:	1db9      	adds	r1, r7, #6
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff ffd0 	bl	80047c0 <writeRegisters>
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <readRegister>:

uint8_t readRegister(MMA8452Q_Register reg){
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	0002      	movs	r2, r0
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	readRegisters(reg, &buffer, 1);
 8004834:	240f      	movs	r4, #15
 8004836:	1939      	adds	r1, r7, r4
 8004838:	1dfb      	adds	r3, r7, #7
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	0018      	movs	r0, r3
 8004840:	f000 f806 	bl	8004850 <readRegisters>
	return buffer;
 8004844:	193b      	adds	r3, r7, r4
 8004846:	781b      	ldrb	r3, [r3, #0]
}
 8004848:	0018      	movs	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	b005      	add	sp, #20
 800484e:	bd90      	pop	{r4, r7, pc}

08004850 <readRegisters>:

void readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af04      	add	r7, sp, #16
 8004856:	6039      	str	r1, [r7, #0]
 8004858:	0011      	movs	r1, r2
 800485a:	1dfb      	adds	r3, r7, #7
 800485c:	1c02      	adds	r2, r0, #0
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	1c0a      	adds	r2, r1, #0
 8004864:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8004866:	1dfb      	adds	r3, r7, #7
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b29a      	uxth	r2, r3
 800486c:	4807      	ldr	r0, [pc, #28]	; (800488c <readRegisters+0x3c>)
 800486e:	230a      	movs	r3, #10
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2301      	movs	r3, #1
 800487e:	213a      	movs	r1, #58	; 0x3a
 8004880:	f7fc fdea 	bl	8001458 <HAL_I2C_Mem_Read>
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200013b4 	.word	0x200013b4

08004890 <getRawX>:

// Returns raw X acceleration data
short getRawX(void){
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_X_MSB, rawData, 2);
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	2202      	movs	r2, #2
 800489a:	0019      	movs	r1, r3
 800489c:	2001      	movs	r0, #1
 800489e:	f7ff ffd7 	bl	8004850 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	b21a      	sxth	r2, r3
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	4313      	orrs	r3, r2
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	111b      	asrs	r3, r3, #4
 80048b6:	b21b      	sxth	r3, r3
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <getRawY>:

// Returns raw Y acceleration data
short getRawY(void){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Y_MSB, rawData, 2);
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2202      	movs	r2, #2
 80048ca:	0019      	movs	r1, r3
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7ff ffbf 	bl	8004850 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	b21a      	sxth	r2, r3
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	b21b      	sxth	r3, r3
 80048e0:	4313      	orrs	r3, r2
 80048e2:	b21b      	sxth	r3, r3
 80048e4:	111b      	asrs	r3, r3, #4
 80048e6:	b21b      	sxth	r3, r3
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b002      	add	sp, #8
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <getRawZ>:

// Returns raw Z acceleration data
short getRawZ(void){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Z_MSB, rawData, 2);
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	2202      	movs	r2, #2
 80048fa:	0019      	movs	r1, r3
 80048fc:	2005      	movs	r0, #5
 80048fe:	f7ff ffa7 	bl	8004850 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	b21a      	sxth	r2, r3
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	b21b      	sxth	r3, r3
 8004910:	4313      	orrs	r3, r2
 8004912:	b21b      	sxth	r3, r3
 8004914:	111b      	asrs	r3, r3, #4
 8004916:	b21b      	sxth	r3, r3
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <getX>:

// Returns calculated X acceleration data
float getX(void){
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
	short x = getRawX();
 8004926:	1dbc      	adds	r4, r7, #6
 8004928:	f7ff ffb2 	bl	8004890 <getRawX>
 800492c:	0003      	movs	r3, r0
 800492e:	8023      	strh	r3, [r4, #0]
	return (float)x / (float)(1 << 11) * (float)(SCALE);
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	2200      	movs	r2, #0
 8004934:	5e9b      	ldrsh	r3, [r3, r2]
 8004936:	0018      	movs	r0, r3
 8004938:	f7fb feb6 	bl	80006a8 <__aeabi_i2f>
 800493c:	1c03      	adds	r3, r0, #0
 800493e:	218a      	movs	r1, #138	; 0x8a
 8004940:	05c9      	lsls	r1, r1, #23
 8004942:	1c18      	adds	r0, r3, #0
 8004944:	f7fb fc6c 	bl	8000220 <__aeabi_fdiv>
 8004948:	1c03      	adds	r3, r0, #0
 800494a:	1c1c      	adds	r4, r3, #0
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <getX+0x4c>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	0018      	movs	r0, r3
 8004952:	f7fb fef3 	bl	800073c <__aeabi_ui2f>
 8004956:	1c03      	adds	r3, r0, #0
 8004958:	1c19      	adds	r1, r3, #0
 800495a:	1c20      	adds	r0, r4, #0
 800495c:	f7fb fd72 	bl	8000444 <__aeabi_fmul>
 8004960:	1c03      	adds	r3, r0, #0
}
 8004962:	1c18      	adds	r0, r3, #0
 8004964:	46bd      	mov	sp, r7
 8004966:	b003      	add	sp, #12
 8004968:	bd90      	pop	{r4, r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	20001358 	.word	0x20001358

08004970 <getY>:

// Returns calculated X acceleration data
float getY(void){
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
	short Y = getRawY();
 8004976:	1dbc      	adds	r4, r7, #6
 8004978:	f7ff ffa2 	bl	80048c0 <getRawY>
 800497c:	0003      	movs	r3, r0
 800497e:	8023      	strh	r3, [r4, #0]
	return (float)Y / (float)(1 << 11) * (float)(SCALE);
 8004980:	1dbb      	adds	r3, r7, #6
 8004982:	2200      	movs	r2, #0
 8004984:	5e9b      	ldrsh	r3, [r3, r2]
 8004986:	0018      	movs	r0, r3
 8004988:	f7fb fe8e 	bl	80006a8 <__aeabi_i2f>
 800498c:	1c03      	adds	r3, r0, #0
 800498e:	218a      	movs	r1, #138	; 0x8a
 8004990:	05c9      	lsls	r1, r1, #23
 8004992:	1c18      	adds	r0, r3, #0
 8004994:	f7fb fc44 	bl	8000220 <__aeabi_fdiv>
 8004998:	1c03      	adds	r3, r0, #0
 800499a:	1c1c      	adds	r4, r3, #0
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <getY+0x4c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fb fecb 	bl	800073c <__aeabi_ui2f>
 80049a6:	1c03      	adds	r3, r0, #0
 80049a8:	1c19      	adds	r1, r3, #0
 80049aa:	1c20      	adds	r0, r4, #0
 80049ac:	f7fb fd4a 	bl	8000444 <__aeabi_fmul>
 80049b0:	1c03      	adds	r3, r0, #0
}
 80049b2:	1c18      	adds	r0, r3, #0
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b003      	add	sp, #12
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20001358 	.word	0x20001358

080049c0 <getZ>:

// Returns calculated X acceleration data
float getZ(void){
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
	short z = getRawZ();
 80049c6:	1dbc      	adds	r4, r7, #6
 80049c8:	f7ff ff92 	bl	80048f0 <getRawZ>
 80049cc:	0003      	movs	r3, r0
 80049ce:	8023      	strh	r3, [r4, #0]
	return (float)z / (float)(1 << 11) * (float)(SCALE);
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	2200      	movs	r2, #0
 80049d4:	5e9b      	ldrsh	r3, [r3, r2]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7fb fe66 	bl	80006a8 <__aeabi_i2f>
 80049dc:	1c03      	adds	r3, r0, #0
 80049de:	218a      	movs	r1, #138	; 0x8a
 80049e0:	05c9      	lsls	r1, r1, #23
 80049e2:	1c18      	adds	r0, r3, #0
 80049e4:	f7fb fc1c 	bl	8000220 <__aeabi_fdiv>
 80049e8:	1c03      	adds	r3, r0, #0
 80049ea:	1c1c      	adds	r4, r3, #0
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <getZ+0x4c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fb fea3 	bl	800073c <__aeabi_ui2f>
 80049f6:	1c03      	adds	r3, r0, #0
 80049f8:	1c19      	adds	r1, r3, #0
 80049fa:	1c20      	adds	r0, r4, #0
 80049fc:	f7fb fd22 	bl	8000444 <__aeabi_fmul>
 8004a00:	1c03      	adds	r3, r0, #0
}
 8004a02:	1c18      	adds	r0, r3, #0
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b003      	add	sp, #12
 8004a08:	bd90      	pop	{r4, r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	20001358 	.word	0x20001358

08004a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char greeting[] = "Hello!";
 8004a16:	003b      	movs	r3, r7
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <main+0x5c>)
 8004a1a:	6811      	ldr	r1, [r2, #0]
 8004a1c:	6019      	str	r1, [r3, #0]
 8004a1e:	8891      	ldrh	r1, [r2, #4]
 8004a20:	8099      	strh	r1, [r3, #4]
 8004a22:	7992      	ldrb	r2, [r2, #6]
 8004a24:	719a      	strb	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a26:	f7fb fee7 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a2a:	f000 f825 	bl	8004a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a2e:	f000 f94b 	bl	8004cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a32:	f000 f923 	bl	8004c7c <MX_DMA_Init>
  MX_I2C1_Init();
 8004a36:	f000 f879 	bl	8004b2c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004a3a:	f000 f8b7 	bl	8004bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004a3e:	f000 f8e9 	bl	8004c14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initMMA8452Q(MMA8452Q_Address, SCALE_2G, DR_800_Hz);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2102      	movs	r1, #2
 8004a46:	201d      	movs	r0, #29
 8004a48:	f7ff fdde 	bl	8004608 <initMMA8452Q>
  ble_init(&huart1);
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <main+0x60>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7ff f806 	bl	8003a60 <ble_init>
  gps_init(&huart2);
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <main+0x64>)
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff f826 	bl	8003aa8 <gps_init>
  LCD_Init();
 8004a5c:	f7ff f978 	bl	8003d50 <LCD_Init>
  //fillScreen(ILI9341_BLACK);
  // LCD_draw_text erases all text on screen (if any)
  //LCD_draw_text(greeting, 7, 0, 0, 6, ILI9341_WHITE);
  RTOS_INIT_TASKS();
 8004a60:	f000 fa8a 	bl	8004f78 <RTOS_INIT_TASKS>
  RTOS_INIT();
 8004a64:	f000 fa76 	bl	8004f54 <RTOS_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <main+0x58>
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	08007074 	.word	0x08007074
 8004a70:	20001488 	.word	0x20001488
 8004a74:	20001508 	.word	0x20001508

08004a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b095      	sub	sp, #84	; 0x54
 8004a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a7e:	2420      	movs	r4, #32
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	0018      	movs	r0, r3
 8004a84:	2330      	movs	r3, #48	; 0x30
 8004a86:	001a      	movs	r2, r3
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f002 fa96 	bl	8006fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a8e:	2310      	movs	r3, #16
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	0018      	movs	r0, r3
 8004a94:	2310      	movs	r3, #16
 8004a96:	001a      	movs	r2, r3
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f002 fa8e 	bl	8006fba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a9e:	003b      	movs	r3, r7
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	f002 fa87 	bl	8006fba <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004aac:	0021      	movs	r1, r4
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004aba:	187b      	adds	r3, r7, r1
 8004abc:	2210      	movs	r2, #16
 8004abe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004ac0:	187b      	adds	r3, r7, r1
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ac6:	187b      	adds	r3, r7, r1
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fd f8cf 	bl	8001c6c <HAL_RCC_OscConfig>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d001      	beq.n	8004ad6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004ad2:	f000 fa39 	bl	8004f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ad6:	2110      	movs	r1, #16
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	2207      	movs	r2, #7
 8004adc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004ade:	187b      	adds	r3, r7, r1
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	2200      	movs	r2, #0
 8004aee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2100      	movs	r1, #0
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fd fbd5 	bl	80022a4 <HAL_RCC_ClockConfig>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d001      	beq.n	8004b02 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004afe:	f000 fa23 	bl	8004f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004b02:	003b      	movs	r3, r7
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004b08:	003b      	movs	r3, r7
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004b0e:	003b      	movs	r3, r7
 8004b10:	2200      	movs	r2, #0
 8004b12:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b14:	003b      	movs	r3, r7
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fd fd40 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8004b1c:	1e03      	subs	r3, r0, #0
 8004b1e:	d001      	beq.n	8004b24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004b20:	f000 fa12 	bl	8004f48 <Error_Handler>
  }
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b015      	add	sp, #84	; 0x54
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b32:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <MX_I2C1_Init+0x78>)
 8004b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <MX_I2C1_Init+0x7c>)
 8004b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fc fab1 	bl	80010d0 <HAL_I2C_Init>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d001      	beq.n	8004b76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b72:	f000 f9e9 	bl	8004f48 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b78:	2100      	movs	r1, #0
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fc ffde 	bl	8001b3c <HAL_I2CEx_ConfigAnalogFilter>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d001      	beq.n	8004b88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b84:	f000 f9e0 	bl	8004f48 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fd f821 	bl	8001bd4 <HAL_I2CEx_ConfigDigitalFilter>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d001      	beq.n	8004b9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b96:	f000 f9d7 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200013b4 	.word	0x200013b4
 8004ba4:	40005400 	.word	0x40005400
 8004ba8:	2000090e 	.word	0x2000090e

08004bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <MX_USART1_UART_Init+0x64>)
 8004bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bb8:	2296      	movs	r2, #150	; 0x96
 8004bba:	0212      	lsls	r2, r2, #8
 8004bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bea:	2210      	movs	r2, #16
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	0152      	lsls	r2, r2, #5
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <MX_USART1_UART_Init+0x60>)
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7fd ffaf 	bl	8002b5c <HAL_UART_Init>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d001      	beq.n	8004c06 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004c02:	f000 f9a1 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20001488 	.word	0x20001488
 8004c10:	40013800 	.word	0x40013800

08004c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <MX_USART2_UART_Init+0x64>)
 8004c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c20:	2296      	movs	r2, #150	; 0x96
 8004c22:	0192      	lsls	r2, r2, #6
 8004c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c3a:	220c      	movs	r2, #12
 8004c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c52:	2210      	movs	r2, #16
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c58:	2280      	movs	r2, #128	; 0x80
 8004c5a:	0152      	lsls	r2, r2, #5
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <MX_USART2_UART_Init+0x60>)
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fd ff7b 	bl	8002b5c <HAL_UART_Init>
 8004c66:	1e03      	subs	r3, r0, #0
 8004c68:	d001      	beq.n	8004c6e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8004c6a:	f000 f96d 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20001508 	.word	0x20001508
 8004c78:	40004400 	.word	0x40004400

08004c7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <MX_DMA_Init+0x48>)
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <MX_DMA_Init+0x48>)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	615a      	str	r2, [r3, #20]
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <MX_DMA_Init+0x48>)
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	200a      	movs	r0, #10
 8004ca0:	f7fb fe84 	bl	80009ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004ca4:	200a      	movs	r0, #10
 8004ca6:	f7fb fe96 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	200b      	movs	r0, #11
 8004cb0:	f7fb fe7c 	bl	80009ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8004cb4:	200b      	movs	r0, #11
 8004cb6:	f7fb fe8e 	bl	80009d6 <HAL_NVIC_EnableIRQ>

}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08b      	sub	sp, #44	; 0x2c
 8004ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	2414      	movs	r4, #20
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	2314      	movs	r3, #20
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f002 f96e 	bl	8006fba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	0309      	lsls	r1, r1, #12
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	615a      	str	r2, [r3, #20]
 8004cec:	4b6b      	ldr	r3, [pc, #428]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cfa:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	4b67      	ldr	r3, [pc, #412]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	03c9      	lsls	r1, r1, #15
 8004d04:	430a      	orrs	r2, r1
 8004d06:	615a      	str	r2, [r3, #20]
 8004d08:	4b64      	ldr	r3, [pc, #400]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	03db      	lsls	r3, r3, #15
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d16:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0289      	lsls	r1, r1, #10
 8004d20:	430a      	orrs	r2, r1
 8004d22:	615a      	str	r2, [r3, #20]
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d32:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	02c9      	lsls	r1, r1, #11
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	615a      	str	r2, [r3, #20]
 8004d40:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <MX_GPIO_Init+0x1d4>)
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	02db      	lsls	r3, r3, #11
 8004d48:	4013      	ands	r3, r2
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_CCS_Pin 
 8004d4e:	4954      	ldr	r1, [pc, #336]	; (8004ea0 <MX_GPIO_Init+0x1d8>)
 8004d50:	4b54      	ldr	r3, [pc, #336]	; (8004ea4 <MX_GPIO_Init+0x1dc>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fc f99d 	bl	8001094 <HAL_GPIO_WritePin>
                          |LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin|LCD_8BIT_4_Pin 
                          |LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE_GPIO_3_GPIO_Port, SPARE_GPIO_3_Pin, GPIO_PIN_RESET);
 8004d5a:	4b53      	ldr	r3, [pc, #332]	; (8004ea8 <MX_GPIO_Init+0x1e0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2101      	movs	r1, #1
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fc f997 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_FORCE_ON_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8004d66:	4951      	ldr	r1, [pc, #324]	; (8004eac <MX_GPIO_Init+0x1e4>)
 8004d68:	2390      	movs	r3, #144	; 0x90
 8004d6a:	05db      	lsls	r3, r3, #23
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7fc f990 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RD_Pin, GPIO_PIN_SET);
 8004d74:	2390      	movs	r3, #144	; 0x90
 8004d76:	05db      	lsls	r3, r3, #23
 8004d78:	2201      	movs	r2, #1
 8004d7a:	21b0      	movs	r1, #176	; 0xb0
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7fc f989 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004d82:	4b48      	ldr	r3, [pc, #288]	; (8004ea4 <MX_GPIO_Init+0x1dc>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	2110      	movs	r1, #16
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fc f983 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin, GPIO_PIN_RESET);
 8004d8e:	23f0      	movs	r3, #240	; 0xf0
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4847      	ldr	r0, [pc, #284]	; (8004eb0 <MX_GPIO_Init+0x1e8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	0019      	movs	r1, r3
 8004d98:	f7fc f97c 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPARE_GPIO_0_Pin SPARE_GPIO_1_Pin SPARE_GPIO_2_Pin LCD_WR_Pin 
                           LCD_CCS_Pin LCD_8BIT_1_Pin LCD_8BIT_5_Pin LCD_8BIT_0_Pin 
                           LCD_8BIT_4_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_WR_Pin 
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	4a45      	ldr	r2, [pc, #276]	; (8004eb4 <MX_GPIO_Init+0x1ec>)
 8004da0:	601a      	str	r2, [r3, #0]
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	2201      	movs	r2, #1
 8004da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	2200      	movs	r2, #0
 8004db2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <MX_GPIO_Init+0x1dc>)
 8004db8:	0019      	movs	r1, r3
 8004dba:	0010      	movs	r0, r2
 8004dbc:	f7fb fffa 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_GPIO_3_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_3_Pin;
 8004dc0:	193b      	adds	r3, r7, r4
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc6:	193b      	adds	r3, r7, r4
 8004dc8:	2201      	movs	r2, #1
 8004dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dcc:	193b      	adds	r3, r7, r4
 8004dce:	2200      	movs	r2, #0
 8004dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd2:	193b      	adds	r3, r7, r4
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPARE_GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8004dd8:	193b      	adds	r3, r7, r4
 8004dda:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <MX_GPIO_Init+0x1e0>)
 8004ddc:	0019      	movs	r1, r3
 8004dde:	0010      	movs	r0, r2
 8004de0:	f7fb ffe8 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_1PPS_Pin */
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8004de4:	193b      	adds	r3, r7, r4
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dea:	193b      	adds	r3, r7, r4
 8004dec:	2200      	movs	r2, #0
 8004dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8004df6:	193a      	adds	r2, r7, r4
 8004df8:	2390      	movs	r3, #144	; 0x90
 8004dfa:	05db      	lsls	r3, r3, #23
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fb ffd8 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_FORCE_ON_Pin LCD_CS_Pin LCD_DC_Pin LCD_RD_Pin 
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPS_FORCE_ON_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RD_Pin 
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	4a2c      	ldr	r2, [pc, #176]	; (8004eb8 <MX_GPIO_Init+0x1f0>)
 8004e08:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e0a:	193b      	adds	r3, r7, r4
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	193b      	adds	r3, r7, r4
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e16:	193b      	adds	r3, r7, r4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	193a      	adds	r2, r7, r4
 8004e1e:	2390      	movs	r3, #144	; 0x90
 8004e20:	05db      	lsls	r3, r3, #23
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7fb ffc5 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_YP_Pin LCD_XM_Pin LCD_YM_Pin LCD_XP_Pin */
  GPIO_InitStruct.Pin = LCD_YP_Pin|LCD_XM_Pin|LCD_YM_Pin|LCD_XP_Pin;
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <MX_GPIO_Init+0x1f4>)
 8004e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	2203      	movs	r2, #3
 8004e34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	193b      	adds	r3, r7, r4
 8004e38:	2200      	movs	r2, #0
 8004e3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3c:	193b      	adds	r3, r7, r4
 8004e3e:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <MX_GPIO_Init+0x1e8>)
 8004e40:	0019      	movs	r1, r3
 8004e42:	0010      	movs	r0, r2
 8004e44:	f7fb ffb6 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_8BIT_3_Pin LCD_8BIT_7_Pin LCD_8BIT_2_Pin LCD_8BIT_6_Pin */
  GPIO_InitStruct.Pin = LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin;
 8004e48:	0021      	movs	r1, r4
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	22f0      	movs	r2, #240	; 0xf0
 8004e4e:	0212      	lsls	r2, r2, #8
 8004e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	2201      	movs	r2, #1
 8004e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	2200      	movs	r2, #0
 8004e62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	000c      	movs	r4, r1
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <MX_GPIO_Init+0x1e8>)
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f7fb ffa1 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8004e72:	0021      	movs	r1, r4
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2260      	movs	r2, #96	; 0x60
 8004e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <MX_GPIO_Init+0x1f8>)
 8004e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <MX_GPIO_Init+0x1e8>)
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	0010      	movs	r0, r2
 8004e8e:	f7fb ff91 	bl	8000db4 <HAL_GPIO_Init>

}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b00b      	add	sp, #44	; 0x2c
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0000efe0 	.word	0x0000efe0
 8004ea4:	48000800 	.word	0x48000800
 8004ea8:	48001400 	.word	0x48001400
 8004eac:	00008002 	.word	0x00008002
 8004eb0:	48000400 	.word	0x48000400
 8004eb4:	0000eff0 	.word	0x0000eff0
 8004eb8:	000080b2 	.word	0x000080b2
 8004ebc:	00000407 	.word	0x00000407
 8004ec0:	10110000 	.word	0x10110000

08004ec4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_UART_RxCpltCallback+0x34>)
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d102      	bne.n	8004eda <HAL_UART_RxCpltCallback+0x16>
		gps_recieve_full();
 8004ed4:	f7fe fe9a 	bl	8003c0c <gps_recieve_full>
	}
	else if (huart == &huart1) {
		xSemaphoreGiveFromISR(ble_receive_ready, NULL);
	}

}
 8004ed8:	e009      	b.n	8004eee <HAL_UART_RxCpltCallback+0x2a>
	else if (huart == &huart1) {
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4b07      	ldr	r3, [pc, #28]	; (8004efc <HAL_UART_RxCpltCallback+0x38>)
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d105      	bne.n	8004eee <HAL_UART_RxCpltCallback+0x2a>
		xSemaphoreGiveFromISR(ble_receive_ready, NULL);
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <HAL_UART_RxCpltCallback+0x3c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fd72 	bl	80059d2 <xQueueGiveFromISR>
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b002      	add	sp, #8
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	20001508 	.word	0x20001508
 8004efc:	20001488 	.word	0x20001488
 8004f00:	20000d70 	.word	0x20000d70

08004f04 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_RxHalfCpltCallback+0x14>
		gps_recieve_half();
 8004f14:	f7fe fe9c 	bl	8003c50 <gps_recieve_half>
	}
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20001508 	.word	0x20001508

08004f24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f36:	f7fb fc73 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40012c00 	.word	0x40012c00

08004f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <RTOS_INIT>:
#include "racing_tasks.h"

void RTOS_INIT() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	ble_receive_ready = xSemaphoreCreateBinary();
 8004f58:	2203      	movs	r2, #3
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f000 fce4 	bl	800592a <xQueueGenericCreate>
 8004f62:	0002      	movs	r2, r0
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <RTOS_INIT+0x20>)
 8004f66:	601a      	str	r2, [r3, #0]
	vTaskStartScheduler();
 8004f68:	f001 f898 	bl	800609c <vTaskStartScheduler>
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	20000d70 	.word	0x20000d70

08004f78 <RTOS_INIT_TASKS>:

void RTOS_INIT_TASKS() {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af02      	add	r7, sp, #8
	xTaskCreate(task_send_ble_packet, "send_ble_packet", 256, NULL, 0, task_send_ble_packet_handle);
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <RTOS_INIT_TASKS+0x3c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2280      	movs	r2, #128	; 0x80
 8004f84:	0052      	lsls	r2, r2, #1
 8004f86:	490c      	ldr	r1, [pc, #48]	; (8004fb8 <RTOS_INIT_TASKS+0x40>)
 8004f88:	480c      	ldr	r0, [pc, #48]	; (8004fbc <RTOS_INIT_TASKS+0x44>)
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	2300      	movs	r3, #0
 8004f92:	f000 ff01 	bl	8005d98 <xTaskCreate>
	xTaskCreate(task_receive_ble_packet, "receive_ble_packet", 256, NULL, 1, task_receive_ble_packet_handle);
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <RTOS_INIT_TASKS+0x48>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	0052      	lsls	r2, r2, #1
 8004f9e:	4909      	ldr	r1, [pc, #36]	; (8004fc4 <RTOS_INIT_TASKS+0x4c>)
 8004fa0:	4809      	ldr	r0, [pc, #36]	; (8004fc8 <RTOS_INIT_TASKS+0x50>)
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f000 fef5 	bl	8005d98 <xTaskCreate>
}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000ee4 	.word	0x20000ee4
 8004fb8:	0800707c 	.word	0x0800707c
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	20000f04 	.word	0x20000f04
 8004fc4:	0800708c 	.word	0x0800708c
 8004fc8:	08005209 	.word	0x08005209

08004fcc <task_send_ble_packet>:

void task_send_ble_packet() {
 8004fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8004fd2:	2332      	movs	r3, #50	; 0x32
 8004fd4:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8004fd6:	f001 f92f 	bl	8006238 <xTaskGetTickCount>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	607b      	str	r3, [r7, #4]
	for(;;) {
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	0011      	movs	r1, r2
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fffd 	bl	8005fe4 <vTaskDelayUntil>
		uint8_t ** gps_read_data = gps_get_data();
 8004fea:	f7fe fe53 	bl	8003c94 <gps_get_data>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	613b      	str	r3, [r7, #16]
        if (gps_read_data[0] != NULL && gps_read_data[1] != NULL) {
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f1      	beq.n	8004fde <task_send_ble_packet+0x12>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ec      	beq.n	8004fde <task_send_ble_packet+0x12>
        	if ( gps_read_data[1] >  gps_read_data[0]) {
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	3304      	adds	r3, #4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d919      	bls.n	8005046 <task_send_ble_packet+0x7a>
        		unsigned int size = gps_read_data[1] - gps_read_data[0];
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3304      	adds	r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	001a      	movs	r2, r3
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	60bb      	str	r3, [r7, #8]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4b73      	ldr	r3, [pc, #460]	; (80051f8 <task_send_ble_packet+0x22c>)
 800502a:	0018      	movs	r0, r3
 800502c:	f001 ffbc 	bl	8006fa8 <memcpy>
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4b71      	ldr	r3, [pc, #452]	; (80051f8 <task_send_ble_packet+0x22c>)
 8005034:	18d0      	adds	r0, r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	22dc      	movs	r2, #220	; 0xdc
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	001a      	movs	r2, r3
 800503e:	2100      	movs	r1, #0
 8005040:	f001 ffbb 	bl	8006fba <memset>
 8005044:	e02d      	b.n	80050a2 <task_send_ble_packet+0xd6>
        	} else {
        		unsigned int size = (txBuffer + GPS_TX_BUFFER_SIZE) - gps_read_data[0];
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <task_send_ble_packet+0x230>)
 8005048:	001a      	movs	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	60fb      	str	r3, [r7, #12]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <task_send_ble_packet+0x22c>)
 800505a:	0018      	movs	r0, r3
 800505c:	f001 ffa4 	bl	8006fa8 <memcpy>
        		memcpy(ble_tx_packet.gps_data + size, txBuffer, gps_read_data[1] - txBuffer);
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <task_send_ble_packet+0x22c>)
 8005064:	18d0      	adds	r0, r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3304      	adds	r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	001a      	movs	r2, r3
 800506e:	4b64      	ldr	r3, [pc, #400]	; (8005200 <task_send_ble_packet+0x234>)
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	001a      	movs	r2, r3
 8005074:	4b62      	ldr	r3, [pc, #392]	; (8005200 <task_send_ble_packet+0x234>)
 8005076:	0019      	movs	r1, r3
 8005078:	f001 ff96 	bl	8006fa8 <memcpy>
        		size += (gps_read_data[1] - txBuffer);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	3304      	adds	r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	001a      	movs	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	18d2      	adds	r2, r2, r3
 8005088:	4b5d      	ldr	r3, [pc, #372]	; (8005200 <task_send_ble_packet+0x234>)
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	60fb      	str	r3, [r7, #12]
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <task_send_ble_packet+0x22c>)
 8005092:	18d0      	adds	r0, r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	22dc      	movs	r2, #220	; 0xdc
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	001a      	movs	r2, r3
 800509c:	2100      	movs	r1, #0
 800509e:	f001 ff8c 	bl	8006fba <memset>
        	}
        	ble_tx_packet.imu_data[0] = getX();
 80050a2:	f7ff fc3d 	bl	8004920 <getX>
 80050a6:	1c01      	adds	r1, r0, #0
 80050a8:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <task_send_ble_packet+0x22c>)
 80050aa:	22dc      	movs	r2, #220	; 0xdc
 80050ac:	20ff      	movs	r0, #255	; 0xff
 80050ae:	4008      	ands	r0, r1
 80050b0:	0005      	movs	r5, r0
 80050b2:	5c98      	ldrb	r0, [r3, r2]
 80050b4:	2400      	movs	r4, #0
 80050b6:	4020      	ands	r0, r4
 80050b8:	1c04      	adds	r4, r0, #0
 80050ba:	1c28      	adds	r0, r5, #0
 80050bc:	4320      	orrs	r0, r4
 80050be:	5498      	strb	r0, [r3, r2]
 80050c0:	0a08      	lsrs	r0, r1, #8
 80050c2:	24ff      	movs	r4, #255	; 0xff
 80050c4:	4020      	ands	r0, r4
 80050c6:	0006      	movs	r6, r0
 80050c8:	1898      	adds	r0, r3, r2
 80050ca:	7844      	ldrb	r4, [r0, #1]
 80050cc:	2500      	movs	r5, #0
 80050ce:	402c      	ands	r4, r5
 80050d0:	1c25      	adds	r5, r4, #0
 80050d2:	1c34      	adds	r4, r6, #0
 80050d4:	432c      	orrs	r4, r5
 80050d6:	7044      	strb	r4, [r0, #1]
 80050d8:	0c08      	lsrs	r0, r1, #16
 80050da:	24ff      	movs	r4, #255	; 0xff
 80050dc:	4020      	ands	r0, r4
 80050de:	0006      	movs	r6, r0
 80050e0:	1898      	adds	r0, r3, r2
 80050e2:	7884      	ldrb	r4, [r0, #2]
 80050e4:	2500      	movs	r5, #0
 80050e6:	402c      	ands	r4, r5
 80050e8:	1c25      	adds	r5, r4, #0
 80050ea:	1c34      	adds	r4, r6, #0
 80050ec:	432c      	orrs	r4, r5
 80050ee:	7084      	strb	r4, [r0, #2]
 80050f0:	0e08      	lsrs	r0, r1, #24
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	78da      	ldrb	r2, [r3, #3]
 80050f6:	2100      	movs	r1, #0
 80050f8:	400a      	ands	r2, r1
 80050fa:	1c11      	adds	r1, r2, #0
 80050fc:	1c02      	adds	r2, r0, #0
 80050fe:	430a      	orrs	r2, r1
 8005100:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[0] = getY();
 8005102:	f7ff fc35 	bl	8004970 <getY>
 8005106:	1c01      	adds	r1, r0, #0
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <task_send_ble_packet+0x22c>)
 800510a:	22dc      	movs	r2, #220	; 0xdc
 800510c:	20ff      	movs	r0, #255	; 0xff
 800510e:	4008      	ands	r0, r1
 8005110:	0005      	movs	r5, r0
 8005112:	5c98      	ldrb	r0, [r3, r2]
 8005114:	2400      	movs	r4, #0
 8005116:	4020      	ands	r0, r4
 8005118:	1c04      	adds	r4, r0, #0
 800511a:	1c28      	adds	r0, r5, #0
 800511c:	4320      	orrs	r0, r4
 800511e:	5498      	strb	r0, [r3, r2]
 8005120:	0a08      	lsrs	r0, r1, #8
 8005122:	24ff      	movs	r4, #255	; 0xff
 8005124:	4020      	ands	r0, r4
 8005126:	0006      	movs	r6, r0
 8005128:	1898      	adds	r0, r3, r2
 800512a:	7844      	ldrb	r4, [r0, #1]
 800512c:	2500      	movs	r5, #0
 800512e:	402c      	ands	r4, r5
 8005130:	1c25      	adds	r5, r4, #0
 8005132:	1c34      	adds	r4, r6, #0
 8005134:	432c      	orrs	r4, r5
 8005136:	7044      	strb	r4, [r0, #1]
 8005138:	0c08      	lsrs	r0, r1, #16
 800513a:	24ff      	movs	r4, #255	; 0xff
 800513c:	4020      	ands	r0, r4
 800513e:	0006      	movs	r6, r0
 8005140:	1898      	adds	r0, r3, r2
 8005142:	7884      	ldrb	r4, [r0, #2]
 8005144:	2500      	movs	r5, #0
 8005146:	402c      	ands	r4, r5
 8005148:	1c25      	adds	r5, r4, #0
 800514a:	1c34      	adds	r4, r6, #0
 800514c:	432c      	orrs	r4, r5
 800514e:	7084      	strb	r4, [r0, #2]
 8005150:	0e08      	lsrs	r0, r1, #24
 8005152:	189b      	adds	r3, r3, r2
 8005154:	78da      	ldrb	r2, [r3, #3]
 8005156:	2100      	movs	r1, #0
 8005158:	400a      	ands	r2, r1
 800515a:	1c11      	adds	r1, r2, #0
 800515c:	1c02      	adds	r2, r0, #0
 800515e:	430a      	orrs	r2, r1
 8005160:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[0] = getZ();
 8005162:	f7ff fc2d 	bl	80049c0 <getZ>
 8005166:	1c01      	adds	r1, r0, #0
 8005168:	4b23      	ldr	r3, [pc, #140]	; (80051f8 <task_send_ble_packet+0x22c>)
 800516a:	22dc      	movs	r2, #220	; 0xdc
 800516c:	20ff      	movs	r0, #255	; 0xff
 800516e:	4008      	ands	r0, r1
 8005170:	0005      	movs	r5, r0
 8005172:	5c98      	ldrb	r0, [r3, r2]
 8005174:	2400      	movs	r4, #0
 8005176:	4020      	ands	r0, r4
 8005178:	1c04      	adds	r4, r0, #0
 800517a:	1c28      	adds	r0, r5, #0
 800517c:	4320      	orrs	r0, r4
 800517e:	5498      	strb	r0, [r3, r2]
 8005180:	0a08      	lsrs	r0, r1, #8
 8005182:	24ff      	movs	r4, #255	; 0xff
 8005184:	4020      	ands	r0, r4
 8005186:	0006      	movs	r6, r0
 8005188:	1898      	adds	r0, r3, r2
 800518a:	7844      	ldrb	r4, [r0, #1]
 800518c:	2500      	movs	r5, #0
 800518e:	402c      	ands	r4, r5
 8005190:	1c25      	adds	r5, r4, #0
 8005192:	1c34      	adds	r4, r6, #0
 8005194:	432c      	orrs	r4, r5
 8005196:	7044      	strb	r4, [r0, #1]
 8005198:	0c08      	lsrs	r0, r1, #16
 800519a:	24ff      	movs	r4, #255	; 0xff
 800519c:	4020      	ands	r0, r4
 800519e:	0006      	movs	r6, r0
 80051a0:	1898      	adds	r0, r3, r2
 80051a2:	7884      	ldrb	r4, [r0, #2]
 80051a4:	2500      	movs	r5, #0
 80051a6:	402c      	ands	r4, r5
 80051a8:	1c25      	adds	r5, r4, #0
 80051aa:	1c34      	adds	r4, r6, #0
 80051ac:	432c      	orrs	r4, r5
 80051ae:	7084      	strb	r4, [r0, #2]
 80051b0:	0e08      	lsrs	r0, r1, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	78da      	ldrb	r2, [r3, #3]
 80051b6:	2100      	movs	r1, #0
 80051b8:	400a      	ands	r2, r1
 80051ba:	1c11      	adds	r1, r2, #0
 80051bc:	1c02      	adds	r2, r0, #0
 80051be:	430a      	orrs	r2, r1
 80051c0:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.ending[0] = '-';
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051c4:	22e8      	movs	r2, #232	; 0xe8
 80051c6:	212d      	movs	r1, #45	; 0x2d
 80051c8:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[1] = '-';
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051cc:	22e9      	movs	r2, #233	; 0xe9
 80051ce:	212d      	movs	r1, #45	; 0x2d
 80051d0:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[2] = '-';
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051d4:	22ea      	movs	r2, #234	; 0xea
 80051d6:	212d      	movs	r1, #45	; 0x2d
 80051d8:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[3] = '\r';
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051dc:	22eb      	movs	r2, #235	; 0xeb
 80051de:	210d      	movs	r1, #13
 80051e0:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[4] = '\n';
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051e4:	22ec      	movs	r2, #236	; 0xec
 80051e6:	210a      	movs	r1, #10
 80051e8:	5499      	strb	r1, [r3, r2]

        	ble_send(&huart1, &ble_tx_packet);
 80051ea:	4a03      	ldr	r2, [pc, #12]	; (80051f8 <task_send_ble_packet+0x22c>)
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <task_send_ble_packet+0x238>)
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7fe fc49 	bl	8003a88 <ble_send>
	for(;;) {
 80051f6:	e6f2      	b.n	8004fde <task_send_ble_packet+0x12>
 80051f8:	20000df4 	.word	0x20000df4
 80051fc:	2000134c 	.word	0x2000134c
 8005200:	20000f4c 	.word	0x20000f4c
 8005204:	20001488 	.word	0x20001488

08005208 <task_receive_ble_packet>:
        }
	}
}
void task_receive_ble_packet() {
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
	for(;;) {
		if( xSemaphoreTake(ble_receive_ready, portMAX_DELAY) == pdTRUE ) {
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <task_receive_ble_packet+0x50>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	2301      	movs	r3, #1
 8005212:	425a      	negs	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	2100      	movs	r1, #0
 8005218:	f000 fc40 	bl	8005a9c <xQueueGenericReceive>
 800521c:	0003      	movs	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d113      	bne.n	800524a <task_receive_ble_packet+0x42>
		//xSemaphoreTake(ble_receive_ready, portMAX_DELAY);
		switch(RX_BUFFER.command - 64) {
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <task_receive_ble_packet+0x54>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	3b40      	subs	r3, #64	; 0x40
 8005228:	3b40      	subs	r3, #64	; 0x40
 800522a:	2b05      	cmp	r3, #5
 800522c:	d80f      	bhi.n	800524e <task_receive_ble_packet+0x46>
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <task_receive_ble_packet+0x58>)
 8005232:	18d3      	adds	r3, r2, r3
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	469f      	mov	pc, r3
		case GPS_RIP_2020NOV:
			// display messsage that the GPS has moved onto the next life
			 fillScreen(ILI9341_LIGHTGREY);
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <task_receive_ble_packet+0x5c>)
 800523a:	0018      	movs	r0, r3
 800523c:	f7fe fe10 	bl	8003e60 <fillScreen>
			break;
 8005240:	e008      	b.n	8005254 <task_receive_ble_packet+0x4c>
		case IDLE:
			// "use the app to start a race"
			 fillScreen(ILI9341_BLACK);
 8005242:	2000      	movs	r0, #0
 8005244:	f7fe fe0c 	bl	8003e60 <fillScreen>
			break;
 8005248:	e004      	b.n	8005254 <task_receive_ble_packet+0x4c>
			// Positions of each racer
			break;
		default:
			break;
		}
	}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	e7de      	b.n	800520c <task_receive_ble_packet+0x4>
			break;
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	e7dc      	b.n	800520c <task_receive_ble_packet+0x4>
			break;
 8005252:	46c0      	nop			; (mov r8, r8)
		if( xSemaphoreTake(ble_receive_ready, portMAX_DELAY) == pdTRUE ) {
 8005254:	e7da      	b.n	800520c <task_receive_ble_packet+0x4>
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	20000d70 	.word	0x20000d70
 800525c:	20000d78 	.word	0x20000d78
 8005260:	080071d8 	.word	0x080071d8
 8005264:	0000c618 	.word	0x0000c618

08005268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <HAL_MspInit+0x44>)
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_MspInit+0x44>)
 8005274:	2101      	movs	r1, #1
 8005276:	430a      	orrs	r2, r1
 8005278:	619a      	str	r2, [r3, #24]
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_MspInit+0x44>)
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2201      	movs	r2, #1
 8005280:	4013      	ands	r3, r2
 8005282:	607b      	str	r3, [r7, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_MspInit+0x44>)
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	4b08      	ldr	r3, [pc, #32]	; (80052ac <HAL_MspInit+0x44>)
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	0549      	lsls	r1, r1, #21
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_MspInit+0x44>)
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	055b      	lsls	r3, r3, #21
 800529c:	4013      	ands	r3, r2
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b002      	add	sp, #8
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b8:	2314      	movs	r3, #20
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	0018      	movs	r0, r3
 80052be:	2314      	movs	r3, #20
 80052c0:	001a      	movs	r2, r3
 80052c2:	2100      	movs	r1, #0
 80052c4:	f001 fe79 	bl	8006fba <memset>
  if(hi2c->Instance==I2C1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_I2C_MspInit+0x90>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d132      	bne.n	8005338 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <HAL_I2C_MspInit+0x94>)
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <HAL_I2C_MspInit+0x94>)
 80052d8:	2180      	movs	r1, #128	; 0x80
 80052da:	02c9      	lsls	r1, r1, #11
 80052dc:	430a      	orrs	r2, r1
 80052de:	615a      	str	r2, [r3, #20]
 80052e0:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_I2C_MspInit+0x94>)
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	02db      	lsls	r3, r3, #11
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin|IMU_SCL_Pin;
 80052ee:	2114      	movs	r1, #20
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	22c0      	movs	r2, #192	; 0xc0
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052f8:	187b      	adds	r3, r7, r1
 80052fa:	2212      	movs	r2, #18
 80052fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	2201      	movs	r2, #1
 8005302:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005304:	187b      	adds	r3, r7, r1
 8005306:	2203      	movs	r2, #3
 8005308:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800530a:	187b      	adds	r3, r7, r1
 800530c:	2201      	movs	r2, #1
 800530e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005310:	187b      	adds	r3, r7, r1
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_I2C_MspInit+0x98>)
 8005314:	0019      	movs	r1, r3
 8005316:	0010      	movs	r0, r2
 8005318:	f7fb fd4c 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_I2C_MspInit+0x94>)
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_I2C_MspInit+0x94>)
 8005322:	2180      	movs	r1, #128	; 0x80
 8005324:	0389      	lsls	r1, r1, #14
 8005326:	430a      	orrs	r2, r1
 8005328:	61da      	str	r2, [r3, #28]
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_I2C_MspInit+0x94>)
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	039b      	lsls	r3, r3, #14
 8005332:	4013      	ands	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b00a      	add	sp, #40	; 0x28
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40005400 	.word	0x40005400
 8005344:	40021000 	.word	0x40021000
 8005348:	48000400 	.word	0x48000400

0800534c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	; 0x30
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005354:	231c      	movs	r3, #28
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	0018      	movs	r0, r3
 800535a:	2314      	movs	r3, #20
 800535c:	001a      	movs	r2, r3
 800535e:	2100      	movs	r1, #0
 8005360:	f001 fe2b 	bl	8006fba <memset>
  if(huart->Instance==USART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a78      	ldr	r2, [pc, #480]	; (800554c <HAL_UART_MspInit+0x200>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d000      	beq.n	8005370 <HAL_UART_MspInit+0x24>
 800536e:	e08a      	b.n	8005486 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005370:	4b77      	ldr	r3, [pc, #476]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	4b76      	ldr	r3, [pc, #472]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	01c9      	lsls	r1, r1, #7
 800537a:	430a      	orrs	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
 800537e:	4b74      	ldr	r3, [pc, #464]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	01db      	lsls	r3, r3, #7
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538c:	4b70      	ldr	r3, [pc, #448]	; (8005550 <HAL_UART_MspInit+0x204>)
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	0289      	lsls	r1, r1, #10
 8005396:	430a      	orrs	r2, r1
 8005398:	615a      	str	r2, [r3, #20]
 800539a:	4b6d      	ldr	r3, [pc, #436]	; (8005550 <HAL_UART_MspInit+0x204>)
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	4013      	ands	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 80053a8:	211c      	movs	r1, #28
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	22c0      	movs	r2, #192	; 0xc0
 80053ae:	00d2      	lsls	r2, r2, #3
 80053b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	2202      	movs	r2, #2
 80053b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053be:	187b      	adds	r3, r7, r1
 80053c0:	2203      	movs	r2, #3
 80053c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	2201      	movs	r2, #1
 80053c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	187a      	adds	r2, r7, r1
 80053cc:	2390      	movs	r3, #144	; 0x90
 80053ce:	05db      	lsls	r3, r3, #23
 80053d0:	0011      	movs	r1, r2
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7fb fcee 	bl	8000db4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80053d8:	4b5e      	ldr	r3, [pc, #376]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053da:	4a5f      	ldr	r2, [pc, #380]	; (8005558 <HAL_UART_MspInit+0x20c>)
 80053dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053e0:	2210      	movs	r2, #16
 80053e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e4:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ea:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053f0:	4b58      	ldr	r3, [pc, #352]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053f6:	4b57      	ldr	r3, [pc, #348]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80053fc:	4b55      	ldr	r3, [pc, #340]	; (8005554 <HAL_UART_MspInit+0x208>)
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005402:	4b54      	ldr	r3, [pc, #336]	; (8005554 <HAL_UART_MspInit+0x208>)
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	0192      	lsls	r2, r2, #6
 8005408:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800540a:	4b52      	ldr	r3, [pc, #328]	; (8005554 <HAL_UART_MspInit+0x208>)
 800540c:	0018      	movs	r0, r3
 800540e:	f7fb faf3 	bl	80009f8 <HAL_DMA_Init>
 8005412:	1e03      	subs	r3, r0, #0
 8005414:	d001      	beq.n	800541a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005416:	f7ff fd97 	bl	8004f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a4d      	ldr	r2, [pc, #308]	; (8005554 <HAL_UART_MspInit+0x208>)
 800541e:	669a      	str	r2, [r3, #104]	; 0x68
 8005420:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_UART_MspInit+0x208>)
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8005426:	4b4d      	ldr	r3, [pc, #308]	; (800555c <HAL_UART_MspInit+0x210>)
 8005428:	4a4d      	ldr	r2, [pc, #308]	; (8005560 <HAL_UART_MspInit+0x214>)
 800542a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800542c:	4b4b      	ldr	r3, [pc, #300]	; (800555c <HAL_UART_MspInit+0x210>)
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005432:	4b4a      	ldr	r3, [pc, #296]	; (800555c <HAL_UART_MspInit+0x210>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005438:	4b48      	ldr	r3, [pc, #288]	; (800555c <HAL_UART_MspInit+0x210>)
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800543e:	4b47      	ldr	r3, [pc, #284]	; (800555c <HAL_UART_MspInit+0x210>)
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005444:	4b45      	ldr	r3, [pc, #276]	; (800555c <HAL_UART_MspInit+0x210>)
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800544a:	4b44      	ldr	r3, [pc, #272]	; (800555c <HAL_UART_MspInit+0x210>)
 800544c:	2220      	movs	r2, #32
 800544e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_UART_MspInit+0x210>)
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	0152      	lsls	r2, r2, #5
 8005456:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005458:	4b40      	ldr	r3, [pc, #256]	; (800555c <HAL_UART_MspInit+0x210>)
 800545a:	0018      	movs	r0, r3
 800545c:	f7fb facc 	bl	80009f8 <HAL_DMA_Init>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d001      	beq.n	8005468 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8005464:	f7ff fd70 	bl	8004f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3c      	ldr	r2, [pc, #240]	; (800555c <HAL_UART_MspInit+0x210>)
 800546c:	66da      	str	r2, [r3, #108]	; 0x6c
 800546e:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_UART_MspInit+0x210>)
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	201b      	movs	r0, #27
 800547a:	f7fb fa97 	bl	80009ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800547e:	201b      	movs	r0, #27
 8005480:	f7fb faa9 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005484:	e05e      	b.n	8005544 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a36      	ldr	r2, [pc, #216]	; (8005564 <HAL_UART_MspInit+0x218>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d159      	bne.n	8005544 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005490:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_UART_MspInit+0x204>)
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	0289      	lsls	r1, r1, #10
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
 800549e:	4b2c      	ldr	r3, [pc, #176]	; (8005550 <HAL_UART_MspInit+0x204>)
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_UART_MspInit+0x204>)
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_UART_MspInit+0x204>)
 80054b2:	2180      	movs	r1, #128	; 0x80
 80054b4:	0289      	lsls	r1, r1, #10
 80054b6:	430a      	orrs	r2, r1
 80054b8:	615a      	str	r2, [r3, #20]
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_UART_MspInit+0x204>)
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	4013      	ands	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80054c8:	211c      	movs	r1, #28
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	220c      	movs	r2, #12
 80054ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2202      	movs	r2, #2
 80054d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	2200      	movs	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	2203      	movs	r2, #3
 80054e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	2201      	movs	r2, #1
 80054e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e8:	187a      	adds	r2, r7, r1
 80054ea:	2390      	movs	r3, #144	; 0x90
 80054ec:	05db      	lsls	r3, r3, #23
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fb fc5f 	bl	8000db4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80054f6:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_UART_MspInit+0x21c>)
 80054f8:	4a1c      	ldr	r2, [pc, #112]	; (800556c <HAL_UART_MspInit+0x220>)
 80054fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_UART_MspInit+0x21c>)
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005502:	4b19      	ldr	r3, [pc, #100]	; (8005568 <HAL_UART_MspInit+0x21c>)
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <HAL_UART_MspInit+0x21c>)
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_UART_MspInit+0x21c>)
 8005510:	2200      	movs	r2, #0
 8005512:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_UART_MspInit+0x21c>)
 8005516:	2200      	movs	r2, #0
 8005518:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <HAL_UART_MspInit+0x21c>)
 800551c:	2220      	movs	r2, #32
 800551e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_UART_MspInit+0x21c>)
 8005522:	22c0      	movs	r2, #192	; 0xc0
 8005524:	0192      	lsls	r2, r2, #6
 8005526:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <HAL_UART_MspInit+0x21c>)
 800552a:	0018      	movs	r0, r3
 800552c:	f7fb fa64 	bl	80009f8 <HAL_DMA_Init>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d001      	beq.n	8005538 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8005534:	f7ff fd08 	bl	8004f48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <HAL_UART_MspInit+0x21c>)
 800553c:	66da      	str	r2, [r3, #108]	; 0x6c
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <HAL_UART_MspInit+0x21c>)
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b00c      	add	sp, #48	; 0x30
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40013800 	.word	0x40013800
 8005550:	40021000 	.word	0x40021000
 8005554:	20001400 	.word	0x20001400
 8005558:	4002001c 	.word	0x4002001c
 800555c:	20001444 	.word	0x20001444
 8005560:	40020030 	.word	0x40020030
 8005564:	40004400 	.word	0x40004400
 8005568:	20001370 	.word	0x20001370
 800556c:	40020058 	.word	0x40020058

08005570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	0019      	movs	r1, r3
 8005586:	200d      	movs	r0, #13
 8005588:	f7fb fa10 	bl	80009ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 800558c:	200d      	movs	r0, #13
 800558e:	f7fb fa22 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <HAL_InitTick+0xa8>)
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_InitTick+0xa8>)
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	0109      	lsls	r1, r1, #4
 800559c:	430a      	orrs	r2, r1
 800559e:	619a      	str	r2, [r3, #24]
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <HAL_InitTick+0xa8>)
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055ae:	230c      	movs	r3, #12
 80055b0:	18fa      	adds	r2, r7, r3
 80055b2:	2310      	movs	r3, #16
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	0011      	movs	r1, r2
 80055b8:	0018      	movs	r0, r3
 80055ba:	f7fc ffc5 	bl	8002548 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80055be:	f7fc ffad 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80055c2:	0003      	movs	r3, r0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	4914      	ldr	r1, [pc, #80]	; (800561c <HAL_InitTick+0xac>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fa fd9c 	bl	8000108 <__udivsi3>
 80055d0:	0003      	movs	r3, r0
 80055d2:	3b01      	subs	r3, #1
 80055d4:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_InitTick+0xb0>)
 80055d8:	4a12      	ldr	r2, [pc, #72]	; (8005624 <HAL_InitTick+0xb4>)
 80055da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <HAL_InitTick+0xb0>)
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <HAL_InitTick+0xb8>)
 80055e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <HAL_InitTick+0xb0>)
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <HAL_InitTick+0xb0>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <HAL_InitTick+0xb0>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <HAL_InitTick+0xb0>)
 80055f6:	0018      	movs	r0, r3
 80055f8:	f7fd f89e 	bl	8002738 <HAL_TIM_Base_Init>
 80055fc:	1e03      	subs	r3, r0, #0
 80055fe:	d105      	bne.n	800560c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_InitTick+0xb0>)
 8005602:	0018      	movs	r0, r3
 8005604:	f7fd f8cc 	bl	80027a0 <HAL_TIM_Base_Start_IT>
 8005608:	0003      	movs	r3, r0
 800560a:	e000      	b.n	800560e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
}
 800560e:	0018      	movs	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	b00a      	add	sp, #40	; 0x28
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	40021000 	.word	0x40021000
 800561c:	000f4240 	.word	0x000f4240
 8005620:	20001588 	.word	0x20001588
 8005624:	40012c00 	.word	0x40012c00
 8005628:	000003e7 	.word	0x000003e7

0800562c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800563a:	e7fe      	b.n	800563a <HardFault_Handler+0x4>

0800563c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005642:	0018      	movs	r0, r3
 8005644:	f7fb facc 	bl	8000be0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <DMA1_Channel2_3_IRQHandler+0x20>)
 800564a:	0018      	movs	r0, r3
 800564c:	f7fb fac8 	bl	8000be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	20001400 	.word	0x20001400
 800565c:	20001444 	.word	0x20001444

08005660 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <DMA1_Channel4_5_IRQHandler+0x14>)
 8005666:	0018      	movs	r0, r3
 8005668:	f7fb faba 	bl	8000be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20001370 	.word	0x20001370

08005678 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800567c:	4b03      	ldr	r3, [pc, #12]	; (800568c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800567e:	0018      	movs	r0, r3
 8005680:	f7fd f8b0 	bl	80027e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	20001588 	.word	0x20001588

08005690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <USART1_IRQHandler+0x14>)
 8005696:	0018      	movs	r0, r3
 8005698:	f7fd fc84 	bl	8002fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	20001488 	.word	0x20001488

080056a8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <SystemInit+0x70>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <SystemInit+0x70>)
 80056b2:	2101      	movs	r1, #1
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80056b8:	4b17      	ldr	r3, [pc, #92]	; (8005718 <SystemInit+0x70>)
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <SystemInit+0x70>)
 80056be:	4917      	ldr	r1, [pc, #92]	; (800571c <SystemInit+0x74>)
 80056c0:	400a      	ands	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <SystemInit+0x70>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <SystemInit+0x70>)
 80056ca:	4915      	ldr	r1, [pc, #84]	; (8005720 <SystemInit+0x78>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <SystemInit+0x70>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <SystemInit+0x70>)
 80056d6:	4913      	ldr	r1, [pc, #76]	; (8005724 <SystemInit+0x7c>)
 80056d8:	400a      	ands	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <SystemInit+0x70>)
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <SystemInit+0x70>)
 80056e2:	4911      	ldr	r1, [pc, #68]	; (8005728 <SystemInit+0x80>)
 80056e4:	400a      	ands	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <SystemInit+0x70>)
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <SystemInit+0x70>)
 80056ee:	210f      	movs	r1, #15
 80056f0:	438a      	bics	r2, r1
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <SystemInit+0x70>)
 80056f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <SystemInit+0x70>)
 80056fa:	490c      	ldr	r1, [pc, #48]	; (800572c <SystemInit+0x84>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <SystemInit+0x70>)
 8005702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <SystemInit+0x70>)
 8005706:	2101      	movs	r1, #1
 8005708:	438a      	bics	r2, r1
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <SystemInit+0x70>)
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]

}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	08ffb80c 	.word	0x08ffb80c
 8005720:	fef6ffff 	.word	0xfef6ffff
 8005724:	fffbffff 	.word	0xfffbffff
 8005728:	ffc0ffff 	.word	0xffc0ffff
 800572c:	fffffeec 	.word	0xfffffeec

08005730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3308      	adds	r3, #8
 800573c:	001a      	movs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	4252      	negs	r2, r2
 8005748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3308      	adds	r3, #8
 800574e:	001a      	movs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3308      	adds	r3, #8
 8005758:	001a      	movs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b002      	add	sp, #8
 800576a:	bd80      	pop	{r7, pc}

0800576c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b002      	add	sp, #8
 8005780:	bd80      	pop	{r7, pc}

08005782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b004      	add	sp, #16
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	d103      	bne.n	80057e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e00c      	b.n	80057fe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3308      	adds	r3, #8
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e002      	b.n	80057f2 <vListInsert+0x2c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d2f6      	bcs.n	80057ec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	b004      	add	sp, #16
 8005830:	bd80      	pop	{r7, pc}

08005832 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6852      	ldr	r2, [r2, #4]
 8005852:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d103      	bne.n	8005866 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1e5a      	subs	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b004      	add	sp, #16
 8005880:	bd80      	pop	{r7, pc}

08005882 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <xQueueGenericReset+0x18>
 8005896:	b672      	cpsid	i
 8005898:	e7fe      	b.n	8005898 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800589a:	f001 f8ff 	bl	8006a9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	434b      	muls	r3, r1
 80058ac:	18d2      	adds	r2, r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	1e59      	subs	r1, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	434b      	muls	r3, r1
 80058d0:	18d2      	adds	r2, r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2244      	movs	r2, #68	; 0x44
 80058da:	21ff      	movs	r1, #255	; 0xff
 80058dc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2245      	movs	r2, #69	; 0x45
 80058e2:	21ff      	movs	r1, #255	; 0xff
 80058e4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3310      	adds	r3, #16
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 fdcf 	bl	800649c <xTaskRemoveFromEventList>
 80058fe:	1e03      	subs	r3, r0, #0
 8005900:	d00c      	beq.n	800591c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005902:	f001 f8bb 	bl	8006a7c <vPortYield>
 8005906:	e009      	b.n	800591c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3310      	adds	r3, #16
 800590c:	0018      	movs	r0, r3
 800590e:	f7ff ff0f 	bl	8005730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3324      	adds	r3, #36	; 0x24
 8005916:	0018      	movs	r0, r3
 8005918:	f7ff ff0a 	bl	8005730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800591c:	f001 f8d0 	bl	8006ac0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005920:	2301      	movs	r3, #1
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}

0800592a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800592a:	b590      	push	{r4, r7, lr}
 800592c:	b08b      	sub	sp, #44	; 0x2c
 800592e:	af02      	add	r7, sp, #8
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	1dfb      	adds	r3, r7, #7
 8005936:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xQueueGenericCreate+0x18>
 800593e:	b672      	cpsid	i
 8005940:	e7fe      	b.n	8005940 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e003      	b.n	8005956 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	4353      	muls	r3, r2
 8005954:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3348      	adds	r3, #72	; 0x48
 800595a:	0018      	movs	r0, r3
 800595c:	f001 f930 	bl	8006bc0 <pvPortMalloc>
 8005960:	0003      	movs	r3, r0
 8005962:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3348      	adds	r3, #72	; 0x48
 800596e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	781c      	ldrb	r4, [r3, #0]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	0023      	movs	r3, r4
 8005980:	f000 f805 	bl	800598e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8005984:	69bb      	ldr	r3, [r7, #24]
	}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b009      	add	sp, #36	; 0x24
 800598c:	bd90      	pop	{r4, r7, pc}

0800598e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	001a      	movs	r2, r3
 800599c:	1cfb      	adds	r3, r7, #3
 800599e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e002      	b.n	80059b4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2101      	movs	r1, #1
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7ff ff5c 	bl	8005882 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b004      	add	sp, #16
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueGiveFromISR+0x18>
 80059e6:	b672      	cpsid	i
 80059e8:	e7fe      	b.n	80059e8 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <xQueueGiveFromISR+0x24>
 80059f2:	b672      	cpsid	i
 80059f4:	e7fe      	b.n	80059f4 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <xQueueGiveFromISR+0x34>
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <xQueueGiveFromISR+0x38>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <xQueueGiveFromISR+0x3a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <xQueueGiveFromISR+0x42>
 8005a10:	b672      	cpsid	i
 8005a12:	e7fe      	b.n	8005a12 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a14:	f001 f86c 	bl	8006af0 <ulSetInterruptMaskFromISR>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d22c      	bcs.n	8005a86 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a2c:	200f      	movs	r0, #15
 8005a2e:	183b      	adds	r3, r7, r0
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	2145      	movs	r1, #69	; 0x45
 8005a34:	5c52      	ldrb	r2, [r2, r1]
 8005a36:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a40:	183b      	adds	r3, r7, r0
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	d111      	bne.n	8005a6e <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fd20 	bl	800649c <xTaskRemoveFromEventList>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d00f      	beq.n	8005a80 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e008      	b.n	8005a80 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6e:	230f      	movs	r3, #15
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	b259      	sxtb	r1, r3
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2245      	movs	r2, #69	; 0x45
 8005a7e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	e001      	b.n	8005a8a <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f001 f835 	bl	8006afc <vClearInterruptMaskFromISR>

	return xReturn;
 8005a92:	69fb      	ldr	r3, [r7, #28]
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b008      	add	sp, #32
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueGenericReceive+0x20>
 8005ab8:	b672      	cpsid	i
 8005aba:	e7fe      	b.n	8005aba <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericReceive+0x2e>
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericReceive+0x32>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericReceive+0x34>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <xQueueGenericReceive+0x3c>
 8005ad4:	b672      	cpsid	i
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ad8:	f000 fe72 	bl	80067c0 <xTaskGetSchedulerState>
 8005adc:	1e03      	subs	r3, r0, #0
 8005ade:	d102      	bne.n	8005ae6 <xQueueGenericReceive+0x4a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <xQueueGenericReceive+0x4e>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericReceive+0x50>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <xQueueGenericReceive+0x58>
 8005af0:	b672      	cpsid	i
 8005af2:	e7fe      	b.n	8005af2 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005af4:	f000 ffd2 	bl	8006a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d03a      	beq.n	8005b7a <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	0011      	movs	r1, r2
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f8a7 	bl	8005c64 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11a      	bne.n	8005b52 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	1e5a      	subs	r2, r3, #1
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005b2c:	f000 fec2 	bl	80068b4 <pvTaskIncrementMutexHeldCount>
 8005b30:	0002      	movs	r2, r0
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d019      	beq.n	8005b72 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	3310      	adds	r3, #16
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 fcaa 	bl	800649c <xTaskRemoveFromEventList>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d012      	beq.n	8005b72 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005b4c:	f000 ff96 	bl	8006a7c <vPortYield>
 8005b50:	e00f      	b.n	8005b72 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 fc99 	bl	800649c <xTaskRemoveFromEventList>
 8005b6a:	1e03      	subs	r3, r0, #0
 8005b6c:	d001      	beq.n	8005b72 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b6e:	f000 ff85 	bl	8006a7c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005b72:	f000 ffa5 	bl	8006ac0 <vPortExitCritical>
				return pdPASS;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e070      	b.n	8005c5c <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d103      	bne.n	8005b88 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b80:	f000 ff9e 	bl	8006ac0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e069      	b.n	8005c5c <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005b8e:	2310      	movs	r3, #16
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	0018      	movs	r0, r3
 8005b94:	f000 fcde 	bl	8006554 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b9c:	f000 ff90 	bl	8006ac0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba0:	f000 fab2 	bl	8006108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba4:	f000 ff7a 	bl	8006a9c <vPortEnterCritical>
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	2244      	movs	r2, #68	; 0x44
 8005bac:	5c9b      	ldrb	r3, [r3, r2]
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	d103      	bne.n	8005bbc <xQueueGenericReceive+0x120>
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2244      	movs	r2, #68	; 0x44
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2245      	movs	r2, #69	; 0x45
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	d103      	bne.n	8005bd0 <xQueueGenericReceive+0x134>
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2245      	movs	r2, #69	; 0x45
 8005bcc:	2100      	movs	r1, #0
 8005bce:	5499      	strb	r1, [r3, r2]
 8005bd0:	f000 ff76 	bl	8006ac0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bd4:	1d3a      	adds	r2, r7, #4
 8005bd6:	2310      	movs	r3, #16
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	0011      	movs	r1, r2
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fcd3 	bl	8006588 <xTaskCheckForTimeOut>
 8005be2:	1e03      	subs	r3, r0, #0
 8005be4:	d12c      	bne.n	8005c40 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f000 f8bf 	bl	8005d6c <prvIsQueueEmpty>
 8005bee:	1e03      	subs	r3, r0, #0
 8005bf0:	d01f      	beq.n	8005c32 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 8005bfa:	f000 ff4f 	bl	8006a9c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 fdf8 	bl	80067f8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005c08:	f000 ff5a 	bl	8006ac0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	0011      	movs	r1, r2
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fc23 	bl	8006460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f000 f847 	bl	8005cb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c22:	f000 fa7d 	bl	8006120 <xTaskResumeAll>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d000      	beq.n	8005c2c <xQueueGenericReceive+0x190>
 8005c2a:	e763      	b.n	8005af4 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8005c2c:	f000 ff26 	bl	8006a7c <vPortYield>
 8005c30:	e760      	b.n	8005af4 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f83b 	bl	8005cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c3a:	f000 fa71 	bl	8006120 <xTaskResumeAll>
 8005c3e:	e759      	b.n	8005af4 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 f834 	bl	8005cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c48:	f000 fa6a 	bl	8006120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f88c 	bl	8005d6c <prvIsQueueEmpty>
 8005c54:	1e03      	subs	r3, r0, #0
 8005c56:	d100      	bne.n	8005c5a <xQueueGenericReceive+0x1be>
 8005c58:	e74c      	b.n	8005af4 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b00a      	add	sp, #40	; 0x28
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	18d2      	adds	r2, r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d303      	bcc.n	8005c98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68d9      	ldr	r1, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f001 f980 	bl	8006fa8 <memcpy>
	}
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cb8:	f000 fef0 	bl	8006a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	2145      	movs	r1, #69	; 0x45
 8005cc4:	5c52      	ldrb	r2, [r2, r1]
 8005cc6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cc8:	e013      	b.n	8005cf2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 fbe0 	bl	800649c <xTaskRemoveFromEventList>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d001      	beq.n	8005ce4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce0:	f000 fca0 	bl	8006624 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ce4:	210f      	movs	r1, #15
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf2:	230f      	movs	r3, #15
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dce5      	bgt.n	8005cca <prvUnlockQueue+0x1a>
 8005cfe:	e000      	b.n	8005d02 <prvUnlockQueue+0x52>
					break;
 8005d00:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2245      	movs	r2, #69	; 0x45
 8005d06:	21ff      	movs	r1, #255	; 0xff
 8005d08:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 fed9 	bl	8006ac0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d0e:	f000 fec5 	bl	8006a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d12:	230e      	movs	r3, #14
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	2144      	movs	r1, #68	; 0x44
 8005d1a:	5c52      	ldrb	r2, [r2, r1]
 8005d1c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d1e:	e013      	b.n	8005d48 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3310      	adds	r3, #16
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fbb5 	bl	800649c <xTaskRemoveFromEventList>
 8005d32:	1e03      	subs	r3, r0, #0
 8005d34:	d001      	beq.n	8005d3a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005d36:	f000 fc75 	bl	8006624 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d3a:	210e      	movs	r1, #14
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d48:	230e      	movs	r3, #14
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	dce5      	bgt.n	8005d20 <prvUnlockQueue+0x70>
 8005d54:	e000      	b.n	8005d58 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005d56:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2244      	movs	r2, #68	; 0x44
 8005d5c:	21ff      	movs	r1, #255	; 0xff
 8005d5e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005d60:	f000 feae 	bl	8006ac0 <vPortExitCritical>
}
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b004      	add	sp, #16
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d74:	f000 fe92 	bl	8006a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e001      	b.n	8005d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d8a:	f000 fe99 	bl	8006ac0 <vPortExitCritical>

	return xReturn;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b08d      	sub	sp, #52	; 0x34
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	1dbb      	adds	r3, r7, #6
 8005da6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da8:	1dbb      	adds	r3, r7, #6
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 ff06 	bl	8006bc0 <pvPortMalloc>
 8005db4:	0003      	movs	r3, r0
 8005db6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d010      	beq.n	8005de0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005dbe:	2054      	movs	r0, #84	; 0x54
 8005dc0:	f000 fefe 	bl	8006bc0 <pvPortMalloc>
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd4:	e006      	b.n	8005de4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 ff97 	bl	8006d0c <vPortFree>
 8005dde:	e001      	b.n	8005de4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dea:	1dbb      	adds	r3, r7, #6
 8005dec:	881a      	ldrh	r2, [r3, #0]
 8005dee:	683c      	ldr	r4, [r7, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9303      	str	r3, [sp, #12]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	0023      	movs	r3, r4
 8005e06:	f000 f80f 	bl	8005e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f885 	bl	8005f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e12:	2301      	movs	r3, #1
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e002      	b.n	8005e1e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b009      	add	sp, #36	; 0x24
 8005e26:	bd90      	pop	{r4, r7, pc}

08005e28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4936      	ldr	r1, [pc, #216]	; (8005f18 <prvInitialiseNewTask+0xf0>)
 8005e3e:	468c      	mov	ip, r1
 8005e40:	4463      	add	r3, ip
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	18d3      	adds	r3, r2, r3
 8005e46:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	4393      	bics	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2207      	movs	r2, #7
 8005e54:	4013      	ands	r3, r2
 8005e56:	d001      	beq.n	8005e5c <prvInitialiseNewTask+0x34>
 8005e58:	b672      	cpsid	i
 8005e5a:	e7fe      	b.n	8005e5a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e013      	b.n	8005e8a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	18d3      	adds	r3, r2, r3
 8005e68:	7818      	ldrb	r0, [r3, #0]
 8005e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6c:	2134      	movs	r1, #52	; 0x34
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	185b      	adds	r3, r3, r1
 8005e74:	1c02      	adds	r2, r0, #0
 8005e76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	18d3      	adds	r3, r2, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3301      	adds	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d9e8      	bls.n	8005e62 <prvInitialiseNewTask+0x3a>
 8005e90:	e000      	b.n	8005e94 <prvInitialiseNewTask+0x6c>
		{
			break;
 8005e92:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	2243      	movs	r2, #67	; 0x43
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d901      	bls.n	8005ea6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ea2:	2306      	movs	r3, #6
 8005ea4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	6a3a      	ldr	r2, [r7, #32]
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	3304      	adds	r3, #4
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff fc55 	bl	800576c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7ff fc50 	bl	800576c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	2250      	movs	r2, #80	; 0x50
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f000 fd42 	bl	8006980 <pxPortInitialiseStack>
 8005efc:	0002      	movs	r2, r0
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b006      	add	sp, #24
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	3fffffff 	.word	0x3fffffff

08005f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f24:	f000 fdba 	bl	8006a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f28:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <prvAddNewTaskToReadyList+0xb0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <prvAddNewTaskToReadyList+0xb0>)
 8005f30:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005f32:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <prvAddNewTaskToReadyList+0xb4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f3a:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <prvAddNewTaskToReadyList+0xb4>)
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <prvAddNewTaskToReadyList+0xb0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d110      	bne.n	8005f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f48:	f000 fb86 	bl	8006658 <prvInitialiseTaskLists>
 8005f4c:	e00d      	b.n	8005f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <prvAddNewTaskToReadyList+0xb8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <prvAddNewTaskToReadyList+0xb4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d802      	bhi.n	8005f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <prvAddNewTaskToReadyList+0xb4>)
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <prvAddNewTaskToReadyList+0xbc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <prvAddNewTaskToReadyList+0xbc>)
 8005f72:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <prvAddNewTaskToReadyList+0xc0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <prvAddNewTaskToReadyList+0x6c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <prvAddNewTaskToReadyList+0xc0>)
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <prvAddNewTaskToReadyList+0xc4>)
 8005f96:	189a      	adds	r2, r3, r2
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	0010      	movs	r0, r2
 8005fa0:	f7ff fbef 	bl	8005782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa4:	f000 fd8c 	bl	8006ac0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvAddNewTaskToReadyList+0xb8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <prvAddNewTaskToReadyList+0xb4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d201      	bcs.n	8005fc2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fbe:	f000 fd5d 	bl	8006a7c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	20000128 	.word	0x20000128
 8005fd0:	20000028 	.word	0x20000028
 8005fd4:	20000134 	.word	0x20000134
 8005fd8:	20000144 	.word	0x20000144
 8005fdc:	20000130 	.word	0x20000130
 8005fe0:	2000002c 	.word	0x2000002c

08005fe4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <vTaskDelayUntil+0x18>
 8005ff8:	b672      	cpsid	i
 8005ffa:	e7fe      	b.n	8005ffa <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <vTaskDelayUntil+0x22>
 8006002:	b672      	cpsid	i
 8006004:	e7fe      	b.n	8006004 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <vTaskDelayUntil+0xb0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <vTaskDelayUntil+0x2e>
 800600e:	b672      	cpsid	i
 8006010:	e7fe      	b.n	8006010 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8006012:	f000 f879 	bl	8006108 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006016:	4b20      	ldr	r3, [pc, #128]	; (8006098 <vTaskDelayUntil+0xb4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d20b      	bcs.n	8006048 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	429a      	cmp	r2, r3
 8006038:	d211      	bcs.n	800605e <vTaskDelayUntil+0x7a>
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	429a      	cmp	r2, r3
 8006040:	d90d      	bls.n	800605e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e00a      	b.n	800605e <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	429a      	cmp	r2, r3
 8006050:	d303      	bcc.n	800605a <vTaskDelayUntil+0x76>
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	d901      	bls.n	800605e <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2100      	movs	r1, #0
 8006072:	0018      	movs	r0, r3
 8006074:	f000 fc30 	bl	80068d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006078:	f000 f852 	bl	8006120 <xTaskResumeAll>
 800607c:	0003      	movs	r3, r0
 800607e:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8006086:	f000 fcf9 	bl	8006a7c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b006      	add	sp, #24
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20000150 	.word	0x20000150
 8006098:	2000012c 	.word	0x2000012c

0800609c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80060a2:	4913      	ldr	r1, [pc, #76]	; (80060f0 <vTaskStartScheduler+0x54>)
 80060a4:	4813      	ldr	r0, [pc, #76]	; (80060f4 <vTaskStartScheduler+0x58>)
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <vTaskStartScheduler+0x5c>)
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	2300      	movs	r3, #0
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	f7ff fe71 	bl	8005d98 <xTaskCreate>
 80060b6:	0003      	movs	r3, r0
 80060b8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10d      	bne.n	80060dc <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80060c0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060c2:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <vTaskStartScheduler+0x60>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	4252      	negs	r2, r2
 80060c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <vTaskStartScheduler+0x64>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <vTaskStartScheduler+0x68>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060d6:	f000 fcaf 	bl	8006a38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060da:	e004      	b.n	80060e6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3301      	adds	r3, #1
 80060e0:	d101      	bne.n	80060e6 <vTaskStartScheduler+0x4a>
 80060e2:	b672      	cpsid	i
 80060e4:	e7fe      	b.n	80060e4 <vTaskStartScheduler+0x48>
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	080070a0 	.word	0x080070a0
 80060f4:	08006639 	.word	0x08006639
 80060f8:	2000014c 	.word	0x2000014c
 80060fc:	20000148 	.word	0x20000148
 8006100:	20000134 	.word	0x20000134
 8006104:	2000012c 	.word	0x2000012c

08006108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <vTaskSuspendAll+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	4b02      	ldr	r3, [pc, #8]	; (800611c <vTaskSuspendAll+0x14>)
 8006114:	601a      	str	r2, [r3, #0]
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000150 	.word	0x20000150

08006120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800612e:	4b3a      	ldr	r3, [pc, #232]	; (8006218 <xTaskResumeAll+0xf8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <xTaskResumeAll+0x1a>
 8006136:	b672      	cpsid	i
 8006138:	e7fe      	b.n	8006138 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800613a:	f000 fcaf 	bl	8006a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <xTaskResumeAll+0xf8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	4b34      	ldr	r3, [pc, #208]	; (8006218 <xTaskResumeAll+0xf8>)
 8006146:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006148:	4b33      	ldr	r3, [pc, #204]	; (8006218 <xTaskResumeAll+0xf8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d15b      	bne.n	8006208 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006150:	4b32      	ldr	r3, [pc, #200]	; (800621c <xTaskResumeAll+0xfc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d057      	beq.n	8006208 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006158:	e02f      	b.n	80061ba <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800615a:	4b31      	ldr	r3, [pc, #196]	; (8006220 <xTaskResumeAll+0x100>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3318      	adds	r3, #24
 8006166:	0018      	movs	r0, r3
 8006168:	f7ff fb63 	bl	8005832 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3304      	adds	r3, #4
 8006170:	0018      	movs	r0, r3
 8006172:	f7ff fb5e 	bl	8005832 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <xTaskResumeAll+0x104>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d903      	bls.n	800618a <xTaskResumeAll+0x6a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <xTaskResumeAll+0x104>)
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618e:	0013      	movs	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	189b      	adds	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a24      	ldr	r2, [pc, #144]	; (8006228 <xTaskResumeAll+0x108>)
 8006198:	189a      	adds	r2, r3, r2
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3304      	adds	r3, #4
 800619e:	0019      	movs	r1, r3
 80061a0:	0010      	movs	r0, r2
 80061a2:	f7ff faee 	bl	8005782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	4b20      	ldr	r3, [pc, #128]	; (800622c <xTaskResumeAll+0x10c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80061b4:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <xTaskResumeAll+0x110>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ba:	4b19      	ldr	r3, [pc, #100]	; (8006220 <xTaskResumeAll+0x100>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1cb      	bne.n	800615a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061c8:	f000 fad6 	bl	8006778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80061cc:	4b19      	ldr	r3, [pc, #100]	; (8006234 <xTaskResumeAll+0x114>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061d8:	f000 f83c 	bl	8006254 <xTaskIncrementTick>
 80061dc:	1e03      	subs	r3, r0, #0
 80061de:	d002      	beq.n	80061e6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <xTaskResumeAll+0x110>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f2      	bne.n	80061d8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <xTaskResumeAll+0x114>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <xTaskResumeAll+0x110>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006204:	f000 fc3a 	bl	8006a7c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006208:	f000 fc5a 	bl	8006ac0 <vPortExitCritical>

	return xAlreadyYielded;
 800620c:	68bb      	ldr	r3, [r7, #8]
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b004      	add	sp, #16
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	20000150 	.word	0x20000150
 800621c:	20000128 	.word	0x20000128
 8006220:	200000e8 	.word	0x200000e8
 8006224:	20000130 	.word	0x20000130
 8006228:	2000002c 	.word	0x2000002c
 800622c:	20000028 	.word	0x20000028
 8006230:	2000013c 	.word	0x2000013c
 8006234:	20000138 	.word	0x20000138

08006238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <xTaskGetTickCount+0x18>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006244:	687b      	ldr	r3, [r7, #4]
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	2000012c 	.word	0x2000012c

08006254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625e:	4b4c      	ldr	r3, [pc, #304]	; (8006390 <xTaskIncrementTick+0x13c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d000      	beq.n	8006268 <xTaskIncrementTick+0x14>
 8006266:	e083      	b.n	8006370 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006268:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <xTaskIncrementTick+0x140>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006270:	4b48      	ldr	r3, [pc, #288]	; (8006394 <xTaskIncrementTick+0x140>)
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d117      	bne.n	80062ac <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800627c:	4b46      	ldr	r3, [pc, #280]	; (8006398 <xTaskIncrementTick+0x144>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <xTaskIncrementTick+0x36>
 8006286:	b672      	cpsid	i
 8006288:	e7fe      	b.n	8006288 <xTaskIncrementTick+0x34>
 800628a:	4b43      	ldr	r3, [pc, #268]	; (8006398 <xTaskIncrementTick+0x144>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <xTaskIncrementTick+0x148>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b40      	ldr	r3, [pc, #256]	; (8006398 <xTaskIncrementTick+0x144>)
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	4b40      	ldr	r3, [pc, #256]	; (800639c <xTaskIncrementTick+0x148>)
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <xTaskIncrementTick+0x14c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	4b3e      	ldr	r3, [pc, #248]	; (80063a0 <xTaskIncrementTick+0x14c>)
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f000 fa66 	bl	8006778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ac:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <xTaskIncrementTick+0x150>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d34e      	bcc.n	8006354 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b6:	4b38      	ldr	r3, [pc, #224]	; (8006398 <xTaskIncrementTick+0x144>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <xTaskIncrementTick+0x70>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <xTaskIncrementTick+0x72>
 80062c4:	2300      	movs	r3, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ca:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <xTaskIncrementTick+0x150>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	4252      	negs	r2, r2
 80062d0:	601a      	str	r2, [r3, #0]
					break;
 80062d2:	e03f      	b.n	8006354 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062d4:	4b30      	ldr	r3, [pc, #192]	; (8006398 <xTaskIncrementTick+0x144>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d203      	bcs.n	80062f4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062ec:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <xTaskIncrementTick+0x150>)
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
						break;
 80062f2:	e02f      	b.n	8006354 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	3304      	adds	r3, #4
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7ff fa9a 	bl	8005832 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3318      	adds	r3, #24
 800630a:	0018      	movs	r0, r3
 800630c:	f7ff fa91 	bl	8005832 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <xTaskIncrementTick+0x154>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d903      	bls.n	8006324 <xTaskIncrementTick+0xd0>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <xTaskIncrementTick+0x154>)
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	0013      	movs	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	189b      	adds	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <xTaskIncrementTick+0x158>)
 8006332:	189a      	adds	r2, r3, r2
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	3304      	adds	r3, #4
 8006338:	0019      	movs	r1, r3
 800633a:	0010      	movs	r0, r2
 800633c:	f7ff fa21 	bl	8005782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <xTaskIncrementTick+0x15c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	429a      	cmp	r2, r3
 800634c:	d3b3      	bcc.n	80062b6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006352:	e7b0      	b.n	80062b6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006354:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <xTaskIncrementTick+0x15c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4914      	ldr	r1, [pc, #80]	; (80063ac <xTaskIncrementTick+0x158>)
 800635c:	0013      	movs	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	189b      	adds	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	585b      	ldr	r3, [r3, r1]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d907      	bls.n	800637a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e004      	b.n	800637a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006370:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <xTaskIncrementTick+0x160>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <xTaskIncrementTick+0x160>)
 8006378:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <xTaskIncrementTick+0x164>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006386:	697b      	ldr	r3, [r7, #20]
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b006      	add	sp, #24
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20000150 	.word	0x20000150
 8006394:	2000012c 	.word	0x2000012c
 8006398:	200000e0 	.word	0x200000e0
 800639c:	200000e4 	.word	0x200000e4
 80063a0:	20000140 	.word	0x20000140
 80063a4:	20000148 	.word	0x20000148
 80063a8:	20000130 	.word	0x20000130
 80063ac:	2000002c 	.word	0x2000002c
 80063b0:	20000028 	.word	0x20000028
 80063b4:	20000138 	.word	0x20000138
 80063b8:	2000013c 	.word	0x2000013c

080063bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <vTaskSwitchContext+0x90>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ca:	4b21      	ldr	r3, [pc, #132]	; (8006450 <vTaskSwitchContext+0x94>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063d0:	e037      	b.n	8006442 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80063d2:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <vTaskSwitchContext+0x94>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <vTaskSwitchContext+0x98>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	e007      	b.n	80063f0 <vTaskSwitchContext+0x34>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <vTaskSwitchContext+0x2e>
 80063e6:	b672      	cpsid	i
 80063e8:	e7fe      	b.n	80063e8 <vTaskSwitchContext+0x2c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	4919      	ldr	r1, [pc, #100]	; (8006458 <vTaskSwitchContext+0x9c>)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	0013      	movs	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	585b      	ldr	r3, [r3, r1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0ee      	beq.n	80063e0 <vTaskSwitchContext+0x24>
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	0013      	movs	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	189b      	adds	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a12      	ldr	r2, [pc, #72]	; (8006458 <vTaskSwitchContext+0x9c>)
 800640e:	189b      	adds	r3, r3, r2
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	429a      	cmp	r2, r3
 8006426:	d104      	bne.n	8006432 <vTaskSwitchContext+0x76>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	4b08      	ldr	r3, [pc, #32]	; (800645c <vTaskSwitchContext+0xa0>)
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <vTaskSwitchContext+0x98>)
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	46bd      	mov	sp, r7
 8006446:	b002      	add	sp, #8
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	20000150 	.word	0x20000150
 8006450:	2000013c 	.word	0x2000013c
 8006454:	20000130 	.word	0x20000130
 8006458:	2000002c 	.word	0x2000002c
 800645c:	20000028 	.word	0x20000028

08006460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <vTaskPlaceOnEventList+0x14>
 8006470:	b672      	cpsid	i
 8006472:	e7fe      	b.n	8006472 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <vTaskPlaceOnEventList+0x38>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3318      	adds	r3, #24
 800647a:	001a      	movs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	0011      	movs	r1, r2
 8006480:	0018      	movs	r0, r3
 8006482:	f7ff f9a0 	bl	80057c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2101      	movs	r1, #1
 800648a:	0018      	movs	r0, r3
 800648c:	f000 fa24 	bl	80068d8 <prvAddCurrentTaskToDelayedList>
}
 8006490:	46c0      	nop			; (mov r8, r8)
 8006492:	46bd      	mov	sp, r7
 8006494:	b002      	add	sp, #8
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000028 	.word	0x20000028

0800649c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xTaskRemoveFromEventList+0x1a>
 80064b2:	b672      	cpsid	i
 80064b4:	e7fe      	b.n	80064b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3318      	adds	r3, #24
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7ff f9b9 	bl	8005832 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c0:	4b1e      	ldr	r3, [pc, #120]	; (800653c <xTaskRemoveFromEventList+0xa0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11d      	bne.n	8006504 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	3304      	adds	r3, #4
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7ff f9b0 	bl	8005832 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <xTaskRemoveFromEventList+0xa4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d903      	bls.n	80064e6 <xTaskRemoveFromEventList+0x4a>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <xTaskRemoveFromEventList+0xa4>)
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	0013      	movs	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4a14      	ldr	r2, [pc, #80]	; (8006544 <xTaskRemoveFromEventList+0xa8>)
 80064f4:	189a      	adds	r2, r3, r2
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3304      	adds	r3, #4
 80064fa:	0019      	movs	r1, r3
 80064fc:	0010      	movs	r0, r2
 80064fe:	f7ff f940 	bl	8005782 <vListInsertEnd>
 8006502:	e007      	b.n	8006514 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	3318      	adds	r3, #24
 8006508:	001a      	movs	r2, r3
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <xTaskRemoveFromEventList+0xac>)
 800650c:	0011      	movs	r1, r2
 800650e:	0018      	movs	r0, r3
 8006510:	f7ff f937 	bl	8005782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <xTaskRemoveFromEventList+0xb0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	429a      	cmp	r2, r3
 8006520:	d905      	bls.n	800652e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <xTaskRemoveFromEventList+0xb4>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e001      	b.n	8006532 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b004      	add	sp, #16
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000150 	.word	0x20000150
 8006540:	20000130 	.word	0x20000130
 8006544:	2000002c 	.word	0x2000002c
 8006548:	200000e8 	.word	0x200000e8
 800654c:	20000028 	.word	0x20000028
 8006550:	2000013c 	.word	0x2000013c

08006554 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <vTaskSetTimeOutState+0x12>
 8006562:	b672      	cpsid	i
 8006564:	e7fe      	b.n	8006564 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006566:	4b06      	ldr	r3, [pc, #24]	; (8006580 <vTaskSetTimeOutState+0x2c>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <vTaskSetTimeOutState+0x30>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	605a      	str	r2, [r3, #4]
}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	b002      	add	sp, #8
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	20000140 	.word	0x20000140
 8006584:	2000012c 	.word	0x2000012c

08006588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <xTaskCheckForTimeOut+0x14>
 8006598:	b672      	cpsid	i
 800659a:	e7fe      	b.n	800659a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <xTaskCheckForTimeOut+0x1e>
 80065a2:	b672      	cpsid	i
 80065a4:	e7fe      	b.n	80065a4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80065a6:	f000 fa79 	bl	8006a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065aa:	4b1c      	ldr	r3, [pc, #112]	; (800661c <xTaskCheckForTimeOut+0x94>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	d102      	bne.n	80065be <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e027      	b.n	800660e <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <xTaskCheckForTimeOut+0x98>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d007      	beq.n	80065da <xTaskCheckForTimeOut+0x52>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d302      	bcc.n	80065da <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e019      	b.n	800660e <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d20f      	bcs.n	800660a <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6859      	ldr	r1, [r3, #4]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1acb      	subs	r3, r1, r3
 80065f6:	18d2      	adds	r2, r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	0018      	movs	r0, r3
 8006600:	f7ff ffa8 	bl	8006554 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e001      	b.n	800660e <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 800660a:	2301      	movs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800660e:	f000 fa57 	bl	8006ac0 <vPortExitCritical>

	return xReturn;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	b004      	add	sp, #16
 800661a:	bd80      	pop	{r7, pc}
 800661c:	2000012c 	.word	0x2000012c
 8006620:	20000140 	.word	0x20000140

08006624 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <vTaskMissedYield+0x10>)
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000013c 	.word	0x2000013c

08006638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006640:	f000 f84e 	bl	80066e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <prvIdleTask+0x1c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d9f9      	bls.n	8006640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800664c:	f000 fa16 	bl	8006a7c <vPortYield>
		prvCheckTasksWaitingTermination();
 8006650:	e7f6      	b.n	8006640 <prvIdleTask+0x8>
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	2000002c 	.word	0x2000002c

08006658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	e00c      	b.n	800667e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	0013      	movs	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	189b      	adds	r3, r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <prvInitialiseTaskLists+0x68>)
 8006670:	189b      	adds	r3, r3, r2
 8006672:	0018      	movs	r0, r3
 8006674:	f7ff f85c 	bl	8005730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3301      	adds	r3, #1
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b06      	cmp	r3, #6
 8006682:	d9ef      	bls.n	8006664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <prvInitialiseTaskLists+0x6c>)
 8006686:	0018      	movs	r0, r3
 8006688:	f7ff f852 	bl	8005730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <prvInitialiseTaskLists+0x70>)
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff f84e 	bl	8005730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006694:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <prvInitialiseTaskLists+0x74>)
 8006696:	0018      	movs	r0, r3
 8006698:	f7ff f84a 	bl	8005730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <prvInitialiseTaskLists+0x78>)
 800669e:	0018      	movs	r0, r3
 80066a0:	f7ff f846 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvInitialiseTaskLists+0x7c>)
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7ff f842 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <prvInitialiseTaskLists+0x80>)
 80066ae:	4a05      	ldr	r2, [pc, #20]	; (80066c4 <prvInitialiseTaskLists+0x6c>)
 80066b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <prvInitialiseTaskLists+0x84>)
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <prvInitialiseTaskLists+0x70>)
 80066b6:	601a      	str	r2, [r3, #0]
}
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	2000002c 	.word	0x2000002c
 80066c4:	200000b8 	.word	0x200000b8
 80066c8:	200000cc 	.word	0x200000cc
 80066cc:	200000e8 	.word	0x200000e8
 80066d0:	200000fc 	.word	0x200000fc
 80066d4:	20000114 	.word	0x20000114
 80066d8:	200000e0 	.word	0x200000e0
 80066dc:	200000e4 	.word	0x200000e4

080066e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066e6:	e027      	b.n	8006738 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 80066e8:	f7ff fd0e 	bl	8006108 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80066ec:	4b16      	ldr	r3, [pc, #88]	; (8006748 <prvCheckTasksWaitingTermination+0x68>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	425a      	negs	r2, r3
 80066f2:	4153      	adcs	r3, r2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80066f8:	f7ff fd12 	bl	8006120 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11a      	bne.n	8006738 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006702:	f000 f9cb 	bl	8006a9c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006706:	4b10      	ldr	r3, [pc, #64]	; (8006748 <prvCheckTasksWaitingTermination+0x68>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3304      	adds	r3, #4
 8006712:	0018      	movs	r0, r3
 8006714:	f7ff f88d 	bl	8005832 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <prvCheckTasksWaitingTermination+0x6c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	1e5a      	subs	r2, r3, #1
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <prvCheckTasksWaitingTermination+0x6c>)
 8006720:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <prvCheckTasksWaitingTermination+0x70>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <prvCheckTasksWaitingTermination+0x70>)
 800672a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800672c:	f000 f9c8 	bl	8006ac0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	0018      	movs	r0, r3
 8006734:	f000 f80e 	bl	8006754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <prvCheckTasksWaitingTermination+0x70>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1d3      	bne.n	80066e8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200000fc 	.word	0x200000fc
 800674c:	20000128 	.word	0x20000128
 8006750:	20000110 	.word	0x20000110

08006754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fad3 	bl	8006d0c <vPortFree>
			vPortFree( pxTCB );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0018      	movs	r0, r3
 800676a:	f000 facf 	bl	8006d0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b002      	add	sp, #8
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <prvResetNextTaskUnblockTime+0x14>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <prvResetNextTaskUnblockTime+0x16>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 8006794:	2201      	movs	r2, #1
 8006796:	4252      	negs	r2, r2
 8006798:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800679a:	e008      	b.n	80067ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	4b04      	ldr	r3, [pc, #16]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b002      	add	sp, #8
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	200000e0 	.word	0x200000e0
 80067bc:	20000148 	.word	0x20000148

080067c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <xTaskGetSchedulerState+0x30>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ce:	2301      	movs	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	e008      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d4:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <xTaskGetSchedulerState+0x34>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067dc:	2302      	movs	r3, #2
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e001      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067e2:	2300      	movs	r3, #0
 80067e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067e6:	687b      	ldr	r3, [r7, #4]
	}
 80067e8:	0018      	movs	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000134 	.word	0x20000134
 80067f4:	20000150 	.word	0x20000150

080067f8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04a      	beq.n	80068a0 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <vTaskPriorityInherit+0xb0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	429a      	cmp	r2, r3
 8006816:	d243      	bcs.n	80068a0 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db06      	blt.n	800682e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006820:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <vTaskPriorityInherit+0xb0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	2207      	movs	r2, #7
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6959      	ldr	r1, [r3, #20]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	0013      	movs	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	189b      	adds	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4a1b      	ldr	r2, [pc, #108]	; (80068ac <vTaskPriorityInherit+0xb4>)
 8006840:	189b      	adds	r3, r3, r2
 8006842:	4299      	cmp	r1, r3
 8006844:	d101      	bne.n	800684a <vTaskPriorityInherit+0x52>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <vTaskPriorityInherit+0x54>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d022      	beq.n	8006896 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3304      	adds	r3, #4
 8006854:	0018      	movs	r0, r3
 8006856:	f7fe ffec 	bl	8005832 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800685a:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <vTaskPriorityInherit+0xb0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <vTaskPriorityInherit+0xb8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d903      	bls.n	8006878 <vTaskPriorityInherit+0x80>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <vTaskPriorityInherit+0xb8>)
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687c:	0013      	movs	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	189b      	adds	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4a09      	ldr	r2, [pc, #36]	; (80068ac <vTaskPriorityInherit+0xb4>)
 8006886:	189a      	adds	r2, r3, r2
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3304      	adds	r3, #4
 800688c:	0019      	movs	r1, r3
 800688e:	0010      	movs	r0, r2
 8006890:	f7fe ff77 	bl	8005782 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006894:	e004      	b.n	80068a0 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <vTaskPriorityInherit+0xb0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80068a0:	46c0      	nop			; (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b004      	add	sp, #16
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000028 	.word	0x20000028
 80068ac:	2000002c 	.word	0x2000002c
 80068b0:	20000130 	.word	0x20000130

080068b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x20>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068c0:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x20>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068c6:	3201      	adds	r2, #1
 80068c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068ca:	4b02      	ldr	r3, [pc, #8]	; (80068d4 <pvTaskIncrementMutexHeldCount+0x20>)
 80068cc:	681b      	ldr	r3, [r3, #0]
	}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000028 	.word	0x20000028

080068d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068e2:	4b21      	ldr	r3, [pc, #132]	; (8006968 <prvAddCurrentTaskToDelayedList+0x90>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e8:	4b20      	ldr	r3, [pc, #128]	; (800696c <prvAddCurrentTaskToDelayedList+0x94>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3304      	adds	r3, #4
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7fe ff9f 	bl	8005832 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	d10b      	bne.n	8006912 <prvAddCurrentTaskToDelayedList+0x3a>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006900:	4b1a      	ldr	r3, [pc, #104]	; (800696c <prvAddCurrentTaskToDelayedList+0x94>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1d1a      	adds	r2, r3, #4
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <prvAddCurrentTaskToDelayedList+0x98>)
 8006908:	0011      	movs	r1, r2
 800690a:	0018      	movs	r0, r3
 800690c:	f7fe ff39 	bl	8005782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006910:	e026      	b.n	8006960 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <prvAddCurrentTaskToDelayedList+0x94>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d209      	bcs.n	800693e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <prvAddCurrentTaskToDelayedList+0x9c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <prvAddCurrentTaskToDelayedList+0x94>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3304      	adds	r3, #4
 8006934:	0019      	movs	r1, r3
 8006936:	0010      	movs	r0, r2
 8006938:	f7fe ff45 	bl	80057c6 <vListInsert>
}
 800693c:	e010      	b.n	8006960 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <prvAddCurrentTaskToDelayedList+0x94>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3304      	adds	r3, #4
 8006948:	0019      	movs	r1, r3
 800694a:	0010      	movs	r0, r2
 800694c:	f7fe ff3b 	bl	80057c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	d202      	bcs.n	8006960 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <prvAddCurrentTaskToDelayedList+0xa4>)
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	601a      	str	r2, [r3, #0]
}
 8006960:	46c0      	nop			; (mov r8, r8)
 8006962:	46bd      	mov	sp, r7
 8006964:	b004      	add	sp, #16
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000012c 	.word	0x2000012c
 800696c:	20000028 	.word	0x20000028
 8006970:	20000114 	.word	0x20000114
 8006974:	200000e4 	.word	0x200000e4
 8006978:	200000e0 	.word	0x200000e0
 800697c:	20000148 	.word	0x20000148

08006980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3b04      	subs	r3, #4
 8006990:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	0452      	lsls	r2, r2, #17
 8006998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b04      	subs	r3, #4
 800699e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069ac:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <pxPortInitialiseStack+0x50>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3b14      	subs	r3, #20
 80069b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b20      	subs	r3, #32
 80069c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	0018      	movs	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b004      	add	sp, #16
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	080069d5 	.word	0x080069d5

080069d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <prvTaskExitError+0x14>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	d001      	beq.n	80069e4 <prvTaskExitError+0x10>
 80069e0:	b672      	cpsid	i
 80069e2:	e7fe      	b.n	80069e2 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 80069e4:	b672      	cpsid	i
	for( ;; );
 80069e6:	e7fe      	b.n	80069e6 <prvTaskExitError+0x12>
 80069e8:	20000008 	.word	0x20000008

080069ec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

08006a00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <pxCurrentTCBConst2>)
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	3020      	adds	r0, #32
 8006a08:	f380 8809 	msr	PSP, r0
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	f380 8814 	msr	CONTROL, r0
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006a18:	46ae      	mov	lr, r5
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	bc04      	pop	{r2}
 8006a1e:	b662      	cpsie	i
 8006a20:	4718      	bx	r3
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46c0      	nop			; (mov r8, r8)

08006a30 <pxCurrentTCBConst2>:
 8006a30:	20000028 	.word	0x20000028
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46c0      	nop			; (mov r8, r8)

08006a38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <xPortStartScheduler+0x3c>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <xPortStartScheduler+0x3c>)
 8006a42:	21ff      	movs	r1, #255	; 0xff
 8006a44:	0409      	lsls	r1, r1, #16
 8006a46:	430a      	orrs	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <xPortStartScheduler+0x3c>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <xPortStartScheduler+0x3c>)
 8006a50:	21ff      	movs	r1, #255	; 0xff
 8006a52:	0609      	lsls	r1, r1, #24
 8006a54:	430a      	orrs	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a58:	f000 f898 	bl	8006b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <xPortStartScheduler+0x40>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006a62:	f7ff ffcd 	bl	8006a00 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006a66:	f7ff ffb5 	bl	80069d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	e000ed20 	.word	0xe000ed20
 8006a78:	20000008 	.word	0x20000008

08006a7c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <vPortYield+0x1c>)
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	0552      	lsls	r2, r2, #21
 8006a86:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8006a88:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006a8c:	f3bf 8f6f 	isb	sy
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006aa0:	b672      	cpsid	i
    uxCriticalNesting++;
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <vPortEnterCritical+0x20>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <vPortEnterCritical+0x20>)
 8006aaa:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8006aac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ab0:	f3bf 8f6f 	isb	sy
}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	20000008 	.word	0x20000008

08006ac0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <vPortExitCritical+0x2c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <vPortExitCritical+0x10>
 8006acc:	b672      	cpsid	i
 8006ace:	e7fe      	b.n	8006ace <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <vPortExitCritical+0x2c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1e5a      	subs	r2, r3, #1
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <vPortExitCritical+0x2c>)
 8006ad8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <vPortExitCritical+0x2c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d100      	bne.n	8006ae4 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006ae2:	b662      	cpsie	i
    }
}
 8006ae4:	46c0      	nop			; (mov r8, r8)
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	20000008 	.word	0x20000008

08006af0 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006af0:	f3ef 8010 	mrs	r0, PRIMASK
 8006af4:	b672      	cpsid	i
 8006af6:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	0018      	movs	r0, r3

08006afc <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8006afc:	f380 8810 	msr	PRIMASK, r0
 8006b00:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8006b02:	46c0      	nop			; (mov r8, r8)
	...

08006b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b10:	f3ef 8009 	mrs	r0, PSP
 8006b14:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <pxCurrentTCBConst>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	3820      	subs	r0, #32
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006b1e:	4644      	mov	r4, r8
 8006b20:	464d      	mov	r5, r9
 8006b22:	4656      	mov	r6, sl
 8006b24:	465f      	mov	r7, fp
 8006b26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	b672      	cpsid	i
 8006b2c:	f7ff fc46 	bl	80063bc <vTaskSwitchContext>
 8006b30:	b662      	cpsie	i
 8006b32:	bc0c      	pop	{r2, r3}
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	6808      	ldr	r0, [r1, #0]
 8006b38:	3010      	adds	r0, #16
 8006b3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006b3c:	46a0      	mov	r8, r4
 8006b3e:	46a9      	mov	r9, r5
 8006b40:	46b2      	mov	sl, r6
 8006b42:	46bb      	mov	fp, r7
 8006b44:	f380 8809 	msr	PSP, r0
 8006b48:	3820      	subs	r0, #32
 8006b4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006b4c:	4718      	bx	r3
 8006b4e:	46c0      	nop			; (mov r8, r8)

08006b50 <pxCurrentTCBConst>:
 8006b50:	20000028 	.word	0x20000028
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46c0      	nop			; (mov r8, r8)

08006b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b5e:	f7ff ffc7 	bl	8006af0 <ulSetInterruptMaskFromISR>
 8006b62:	0003      	movs	r3, r0
 8006b64:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b66:	f7ff fb75 	bl	8006254 <xTaskIncrementTick>
 8006b6a:	1e03      	subs	r3, r0, #0
 8006b6c:	d003      	beq.n	8006b76 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <SysTick_Handler+0x30>)
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	0552      	lsls	r2, r2, #21
 8006b74:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7ff ffbf 	bl	8006afc <vClearInterruptMaskFromISR>
}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b002      	add	sp, #8
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b90:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <vPortSetupTimerInterrupt+0x28>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	23fa      	movs	r3, #250	; 0xfa
 8006b96:	0099      	lsls	r1, r3, #2
 8006b98:	0010      	movs	r0, r2
 8006b9a:	f7f9 fab5 	bl	8000108 <__udivsi3>
 8006b9e:	0003      	movs	r3, r0
 8006ba0:	001a      	movs	r2, r3
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <vPortSetupTimerInterrupt+0x2c>)
 8006ba4:	3a01      	subs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <vPortSetupTimerInterrupt+0x30>)
 8006baa:	2207      	movs	r2, #7
 8006bac:	601a      	str	r2, [r3, #0]
}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000004 	.word	0x20000004
 8006bb8:	e000e014 	.word	0xe000e014
 8006bbc:	e000e010 	.word	0xe000e010

08006bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006bcc:	f7ff fa9c 	bl	8006108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bd0:	4b49      	ldr	r3, [pc, #292]	; (8006cf8 <pvPortMalloc+0x138>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bd8:	f000 f8e0 	bl	8006d9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bdc:	4b47      	ldr	r3, [pc, #284]	; (8006cfc <pvPortMalloc+0x13c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4013      	ands	r3, r2
 8006be4:	d000      	beq.n	8006be8 <pvPortMalloc+0x28>
 8006be6:	e079      	b.n	8006cdc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d012      	beq.n	8006c14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006bee:	2208      	movs	r2, #8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d00a      	beq.n	8006c14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2207      	movs	r2, #7
 8006c02:	4393      	bics	r3, r2
 8006c04:	3308      	adds	r3, #8
 8006c06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2207      	movs	r2, #7
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d001      	beq.n	8006c14 <pvPortMalloc+0x54>
 8006c10:	b672      	cpsid	i
 8006c12:	e7fe      	b.n	8006c12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d060      	beq.n	8006cdc <pvPortMalloc+0x11c>
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <pvPortMalloc+0x140>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d85b      	bhi.n	8006cdc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <pvPortMalloc+0x144>)
 8006c26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006c28:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <pvPortMalloc+0x144>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2e:	e004      	b.n	8006c3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <pvPortMalloc+0x8c>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f1      	bne.n	8006c30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <pvPortMalloc+0x138>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d042      	beq.n	8006cdc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	2308      	movs	r3, #8
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d916      	bls.n	8006ca6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	18d3      	adds	r3, r2, r3
 8006c7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2207      	movs	r2, #7
 8006c84:	4013      	ands	r3, r2
 8006c86:	d001      	beq.n	8006c8c <pvPortMalloc+0xcc>
 8006c88:	b672      	cpsid	i
 8006c8a:	e7fe      	b.n	8006c8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 f8db 	bl	8006e5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ca6:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <pvPortMalloc+0x140>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <pvPortMalloc+0x140>)
 8006cb2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cb4:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <pvPortMalloc+0x140>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <pvPortMalloc+0x148>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d203      	bcs.n	8006cc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc0:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <pvPortMalloc+0x140>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <pvPortMalloc+0x148>)
 8006cc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <pvPortMalloc+0x13c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cdc:	f7ff fa20 	bl	8006120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2207      	movs	r2, #7
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d001      	beq.n	8006cec <pvPortMalloc+0x12c>
 8006ce8:	b672      	cpsid	i
 8006cea:	e7fe      	b.n	8006cea <pvPortMalloc+0x12a>
	return pvReturn;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	0018      	movs	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b006      	add	sp, #24
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	20000d5c 	.word	0x20000d5c
 8006cfc:	20000d68 	.word	0x20000d68
 8006d00:	20000d60 	.word	0x20000d60
 8006d04:	20000d54 	.word	0x20000d54
 8006d08:	20000d64 	.word	0x20000d64

08006d0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d035      	beq.n	8006d8a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d1e:	2308      	movs	r3, #8
 8006d20:	425b      	negs	r3, r3
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <vPortFree+0x88>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	d101      	bne.n	8006d3c <vPortFree+0x30>
 8006d38:	b672      	cpsid	i
 8006d3a:	e7fe      	b.n	8006d3a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <vPortFree+0x3c>
 8006d44:	b672      	cpsid	i
 8006d46:	e7fe      	b.n	8006d46 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <vPortFree+0x88>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4013      	ands	r3, r2
 8006d52:	d01a      	beq.n	8006d8a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d116      	bne.n	8006d8a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <vPortFree+0x88>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	401a      	ands	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d6c:	f7ff f9cc 	bl	8006108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <vPortFree+0x8c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	18d2      	adds	r2, r2, r3
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <vPortFree+0x8c>)
 8006d7c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f86b 	bl	8006e5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d86:	f7ff f9cb 	bl	8006120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b004      	add	sp, #16
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	20000d68 	.word	0x20000d68
 8006d98:	20000d60 	.word	0x20000d60

08006d9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006da2:	23c0      	movs	r3, #192	; 0xc0
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006da8:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <prvHeapInit+0xa8>)
 8006daa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2207      	movs	r2, #7
 8006db0:	4013      	ands	r3, r2
 8006db2:	d00c      	beq.n	8006dce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3307      	adds	r3, #7
 8006db8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	4393      	bics	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <prvHeapInit+0xa8>)
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dd2:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <prvHeapInit+0xac>)
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <prvHeapInit+0xac>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	18d3      	adds	r3, r2, r3
 8006de4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006de6:	2208      	movs	r2, #8
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2207      	movs	r2, #7
 8006df2:	4393      	bics	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <prvHeapInit+0xb0>)
 8006dfa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006dfc:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <prvHeapInit+0xb0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2200      	movs	r2, #0
 8006e02:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e04:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <prvHeapInit+0xb0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	1ad2      	subs	r2, r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <prvHeapInit+0xb0>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvHeapInit+0xb4>)
 8006e28:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <prvHeapInit+0xb8>)
 8006e30:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <prvHeapInit+0xbc>)
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	0612      	lsls	r2, r2, #24
 8006e38:	601a      	str	r2, [r3, #0]
}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b004      	add	sp, #16
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	20000154 	.word	0x20000154
 8006e48:	20000d54 	.word	0x20000d54
 8006e4c:	20000d5c 	.word	0x20000d5c
 8006e50:	20000d64 	.word	0x20000d64
 8006e54:	20000d60 	.word	0x20000d60
 8006e58:	20000d68 	.word	0x20000d68

08006e5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <prvInsertBlockIntoFreeList+0xa8>)
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e002      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x14>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d8f7      	bhi.n	8006e6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	18d3      	adds	r3, r2, r3
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d108      	bne.n	8006e9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	18d2      	adds	r2, r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	18d2      	adds	r2, r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d118      	bne.n	8006ee4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <prvInsertBlockIntoFreeList+0xac>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d00d      	beq.n	8006eda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	18d2      	adds	r2, r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e008      	b.n	8006eec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <prvInsertBlockIntoFreeList+0xac>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e003      	b.n	8006eec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b004      	add	sp, #16
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	20000d54 	.word	0x20000d54
 8006f08:	20000d5c 	.word	0x20000d5c

08006f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f0c:	480d      	ldr	r0, [pc, #52]	; (8006f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f10:	480d      	ldr	r0, [pc, #52]	; (8006f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f12:	490e      	ldr	r1, [pc, #56]	; (8006f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f14:	4a0e      	ldr	r2, [pc, #56]	; (8006f50 <LoopForever+0xe>)
  movs r3, #0
 8006f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f18:	e002      	b.n	8006f20 <LoopCopyDataInit>

08006f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f1e:	3304      	adds	r3, #4

08006f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f24:	d3f9      	bcc.n	8006f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f26:	4a0b      	ldr	r2, [pc, #44]	; (8006f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f28:	4c0b      	ldr	r4, [pc, #44]	; (8006f58 <LoopForever+0x16>)
  movs r3, #0
 8006f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f2c:	e001      	b.n	8006f32 <LoopFillZerobss>

08006f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f30:	3204      	adds	r2, #4

08006f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f34:	d3fb      	bcc.n	8006f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006f36:	f7fe fbb7 	bl	80056a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006f3a:	f000 f811 	bl	8006f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f3e:	f7fd fd67 	bl	8004a10 <main>

08006f42 <LoopForever>:

LoopForever:
    b LoopForever
 8006f42:	e7fe      	b.n	8006f42 <LoopForever>
  ldr   r0, =_estack
 8006f44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006f50:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 8006f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006f58:	200015c8 	.word	0x200015c8

08006f5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f5c:	e7fe      	b.n	8006f5c <ADC1_IRQHandler>
	...

08006f60 <__libc_init_array>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	2600      	movs	r6, #0
 8006f64:	4d0c      	ldr	r5, [pc, #48]	; (8006f98 <__libc_init_array+0x38>)
 8006f66:	4c0d      	ldr	r4, [pc, #52]	; (8006f9c <__libc_init_array+0x3c>)
 8006f68:	1b64      	subs	r4, r4, r5
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	d109      	bne.n	8006f84 <__libc_init_array+0x24>
 8006f70:	2600      	movs	r6, #0
 8006f72:	f000 f82b 	bl	8006fcc <_init>
 8006f76:	4d0a      	ldr	r5, [pc, #40]	; (8006fa0 <__libc_init_array+0x40>)
 8006f78:	4c0a      	ldr	r4, [pc, #40]	; (8006fa4 <__libc_init_array+0x44>)
 8006f7a:	1b64      	subs	r4, r4, r5
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	42a6      	cmp	r6, r4
 8006f80:	d105      	bne.n	8006f8e <__libc_init_array+0x2e>
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	00b3      	lsls	r3, r6, #2
 8006f86:	58eb      	ldr	r3, [r5, r3]
 8006f88:	4798      	blx	r3
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7ee      	b.n	8006f6c <__libc_init_array+0xc>
 8006f8e:	00b3      	lsls	r3, r6, #2
 8006f90:	58eb      	ldr	r3, [r5, r3]
 8006f92:	4798      	blx	r3
 8006f94:	3601      	adds	r6, #1
 8006f96:	e7f2      	b.n	8006f7e <__libc_init_array+0x1e>
 8006f98:	08007208 	.word	0x08007208
 8006f9c:	08007208 	.word	0x08007208
 8006fa0:	08007208 	.word	0x08007208
 8006fa4:	0800720c 	.word	0x0800720c

08006fa8 <memcpy>:
 8006fa8:	2300      	movs	r3, #0
 8006faa:	b510      	push	{r4, lr}
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d100      	bne.n	8006fb2 <memcpy+0xa>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	5ccc      	ldrb	r4, [r1, r3]
 8006fb4:	54c4      	strb	r4, [r0, r3]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	e7f8      	b.n	8006fac <memcpy+0x4>

08006fba <memset>:
 8006fba:	0003      	movs	r3, r0
 8006fbc:	1812      	adds	r2, r2, r0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d100      	bne.n	8006fc4 <memset+0xa>
 8006fc2:	4770      	bx	lr
 8006fc4:	7019      	strb	r1, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	e7f9      	b.n	8006fbe <memset+0x4>
	...

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
