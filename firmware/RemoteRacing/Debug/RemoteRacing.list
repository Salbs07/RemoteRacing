
RemoteRacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003774  08003774  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003774  08003774  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003774  08003774  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800377c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000004  08003780  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003780  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a15  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a5  00000000  00000000  00030a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  00032ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  00033590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000da83  00000000  00000000  00033f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a55a  00000000  00000000  000419d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000460f2  00000000  00000000  0004bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009201f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  0009209c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003664 	.word	0x08003664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003664 	.word	0x08003664

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	0244      	lsls	r4, r0, #9
 800022c:	b5e0      	push	{r5, r6, r7, lr}
 800022e:	0046      	lsls	r6, r0, #1
 8000230:	4688      	mov	r8, r1
 8000232:	0a64      	lsrs	r4, r4, #9
 8000234:	0e36      	lsrs	r6, r6, #24
 8000236:	0fc7      	lsrs	r7, r0, #31
 8000238:	2e00      	cmp	r6, #0
 800023a:	d063      	beq.n	8000304 <__aeabi_fdiv+0xe4>
 800023c:	2eff      	cmp	r6, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431c      	orrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469b      	mov	fp, r3
 800024e:	3e7f      	subs	r6, #127	; 0x7f
 8000250:	4643      	mov	r3, r8
 8000252:	4642      	mov	r2, r8
 8000254:	025d      	lsls	r5, r3, #9
 8000256:	0fd2      	lsrs	r2, r2, #31
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0a6d      	lsrs	r5, r5, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	4690      	mov	r8, r2
 8000260:	4692      	mov	sl, r2
 8000262:	d065      	beq.n	8000330 <__aeabi_fdiv+0x110>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d055      	beq.n	8000314 <__aeabi_fdiv+0xf4>
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	00ed      	lsls	r5, r5, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	4315      	orrs	r5, r2
 8000274:	1af6      	subs	r6, r6, r3
 8000276:	4643      	mov	r3, r8
 8000278:	464a      	mov	r2, r9
 800027a:	407b      	eors	r3, r7
 800027c:	2a0f      	cmp	r2, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e08d      	b.n	800039e <__aeabi_fdiv+0x17e>
 8000282:	486d      	ldr	r0, [pc, #436]	; (8000438 <__aeabi_fdiv+0x218>)
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	5882      	ldr	r2, [r0, r2]
 8000288:	4697      	mov	pc, r2
 800028a:	2c00      	cmp	r4, #0
 800028c:	d154      	bne.n	8000338 <__aeabi_fdiv+0x118>
 800028e:	2308      	movs	r3, #8
 8000290:	4699      	mov	r9, r3
 8000292:	3b06      	subs	r3, #6
 8000294:	26ff      	movs	r6, #255	; 0xff
 8000296:	469b      	mov	fp, r3
 8000298:	e7da      	b.n	8000250 <__aeabi_fdiv+0x30>
 800029a:	2500      	movs	r5, #0
 800029c:	4653      	mov	r3, sl
 800029e:	2902      	cmp	r1, #2
 80002a0:	d01b      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002a2:	2903      	cmp	r1, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e0bf      	b.n	8000428 <__aeabi_fdiv+0x208>
 80002a8:	2901      	cmp	r1, #1
 80002aa:	d028      	beq.n	80002fe <__aeabi_fdiv+0xde>
 80002ac:	0030      	movs	r0, r6
 80002ae:	307f      	adds	r0, #127	; 0x7f
 80002b0:	2800      	cmp	r0, #0
 80002b2:	dd20      	ble.n	80002f6 <__aeabi_fdiv+0xd6>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	0030      	movs	r0, r6
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <__aeabi_fdiv+0x21c>)
 80002ca:	3080      	adds	r0, #128	; 0x80
 80002cc:	4015      	ands	r5, r2
 80002ce:	28fe      	cmp	r0, #254	; 0xfe
 80002d0:	dc03      	bgt.n	80002da <__aeabi_fdiv+0xba>
 80002d2:	01ac      	lsls	r4, r5, #6
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	b2c2      	uxtb	r2, r0
 80002d8:	e001      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002da:	22ff      	movs	r2, #255	; 0xff
 80002dc:	2400      	movs	r4, #0
 80002de:	0264      	lsls	r4, r4, #9
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	0a60      	lsrs	r0, r4, #9
 80002e4:	07db      	lsls	r3, r3, #31
 80002e6:	4310      	orrs	r0, r2
 80002e8:	4318      	orrs	r0, r3
 80002ea:	bc3c      	pop	{r2, r3, r4, r5}
 80002ec:	4690      	mov	r8, r2
 80002ee:	4699      	mov	r9, r3
 80002f0:	46a2      	mov	sl, r4
 80002f2:	46ab      	mov	fp, r5
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	2201      	movs	r2, #1
 80002f8:	1a10      	subs	r0, r2, r0
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dd7c      	ble.n	80003f8 <__aeabi_fdiv+0x1d8>
 80002fe:	2200      	movs	r2, #0
 8000300:	2400      	movs	r4, #0
 8000302:	e7ec      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d11d      	bne.n	8000344 <__aeabi_fdiv+0x124>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2600      	movs	r6, #0
 8000310:	469b      	mov	fp, r3
 8000312:	e79d      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000314:	3eff      	subs	r6, #255	; 0xff
 8000316:	2d00      	cmp	r5, #0
 8000318:	d120      	bne.n	800035c <__aeabi_fdiv+0x13c>
 800031a:	2102      	movs	r1, #2
 800031c:	4643      	mov	r3, r8
 800031e:	464a      	mov	r2, r9
 8000320:	407b      	eors	r3, r7
 8000322:	430a      	orrs	r2, r1
 8000324:	2a0f      	cmp	r2, #15
 8000326:	d8d8      	bhi.n	80002da <__aeabi_fdiv+0xba>
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <__aeabi_fdiv+0x220>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	5882      	ldr	r2, [r0, r2]
 800032e:	4697      	mov	pc, r2
 8000330:	2d00      	cmp	r5, #0
 8000332:	d119      	bne.n	8000368 <__aeabi_fdiv+0x148>
 8000334:	2101      	movs	r1, #1
 8000336:	e7f1      	b.n	800031c <__aeabi_fdiv+0xfc>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469b      	mov	fp, r3
 8000342:	e785      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fa39 	bl	80007bc <__clzsi2>
 800034a:	2676      	movs	r6, #118	; 0x76
 800034c:	1f43      	subs	r3, r0, #5
 800034e:	409c      	lsls	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4276      	negs	r6, r6
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	4699      	mov	r9, r3
 8000358:	469b      	mov	fp, r3
 800035a:	e779      	b.n	8000250 <__aeabi_fdiv+0x30>
 800035c:	464a      	mov	r2, r9
 800035e:	2303      	movs	r3, #3
 8000360:	431a      	orrs	r2, r3
 8000362:	4691      	mov	r9, r2
 8000364:	2103      	movs	r1, #3
 8000366:	e786      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000368:	0028      	movs	r0, r5
 800036a:	f000 fa27 	bl	80007bc <__clzsi2>
 800036e:	1f43      	subs	r3, r0, #5
 8000370:	1836      	adds	r6, r6, r0
 8000372:	409d      	lsls	r5, r3
 8000374:	3676      	adds	r6, #118	; 0x76
 8000376:	2100      	movs	r1, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	2480      	movs	r4, #128	; 0x80
 800037c:	2300      	movs	r3, #0
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	e7ac      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000384:	2500      	movs	r5, #0
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421c      	tst	r4, r3
 800038c:	d028      	beq.n	80003e0 <__aeabi_fdiv+0x1c0>
 800038e:	421d      	tst	r5, r3
 8000390:	d126      	bne.n	80003e0 <__aeabi_fdiv+0x1c0>
 8000392:	432b      	orrs	r3, r5
 8000394:	025c      	lsls	r4, r3, #9
 8000396:	0a64      	lsrs	r4, r4, #9
 8000398:	4643      	mov	r3, r8
 800039a:	22ff      	movs	r2, #255	; 0xff
 800039c:	e79f      	b.n	80002de <__aeabi_fdiv+0xbe>
 800039e:	0162      	lsls	r2, r4, #5
 80003a0:	016c      	lsls	r4, r5, #5
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d224      	bcs.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003a6:	211b      	movs	r1, #27
 80003a8:	2500      	movs	r5, #0
 80003aa:	3e01      	subs	r6, #1
 80003ac:	2701      	movs	r7, #1
 80003ae:	0010      	movs	r0, r2
 80003b0:	006d      	lsls	r5, r5, #1
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2800      	cmp	r0, #0
 80003b6:	db01      	blt.n	80003bc <__aeabi_fdiv+0x19c>
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d801      	bhi.n	80003c0 <__aeabi_fdiv+0x1a0>
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	433d      	orrs	r5, r7
 80003c0:	3901      	subs	r1, #1
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d1f3      	bne.n	80003ae <__aeabi_fdiv+0x18e>
 80003c6:	0014      	movs	r4, r2
 80003c8:	1e62      	subs	r2, r4, #1
 80003ca:	4194      	sbcs	r4, r2
 80003cc:	4325      	orrs	r5, r4
 80003ce:	e76d      	b.n	80002ac <__aeabi_fdiv+0x8c>
 80003d0:	46ba      	mov	sl, r7
 80003d2:	4659      	mov	r1, fp
 80003d4:	0025      	movs	r5, r4
 80003d6:	4653      	mov	r3, sl
 80003d8:	2902      	cmp	r1, #2
 80003da:	d000      	beq.n	80003de <__aeabi_fdiv+0x1be>
 80003dc:	e761      	b.n	80002a2 <__aeabi_fdiv+0x82>
 80003de:	e77c      	b.n	80002da <__aeabi_fdiv+0xba>
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0264      	lsls	r4, r4, #9
 80003e8:	0a64      	lsrs	r4, r4, #9
 80003ea:	003b      	movs	r3, r7
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	e776      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003f0:	1b12      	subs	r2, r2, r4
 80003f2:	211a      	movs	r1, #26
 80003f4:	2501      	movs	r5, #1
 80003f6:	e7d9      	b.n	80003ac <__aeabi_fdiv+0x18c>
 80003f8:	369e      	adds	r6, #158	; 0x9e
 80003fa:	002a      	movs	r2, r5
 80003fc:	40b5      	lsls	r5, r6
 80003fe:	002c      	movs	r4, r5
 8000400:	40c2      	lsrs	r2, r0
 8000402:	1e65      	subs	r5, r4, #1
 8000404:	41ac      	sbcs	r4, r5
 8000406:	4314      	orrs	r4, r2
 8000408:	0762      	lsls	r2, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 800040c:	220f      	movs	r2, #15
 800040e:	4022      	ands	r2, r4
 8000410:	2a04      	cmp	r2, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 8000414:	3404      	adds	r4, #4
 8000416:	0162      	lsls	r2, r4, #5
 8000418:	d403      	bmi.n	8000422 <__aeabi_fdiv+0x202>
 800041a:	01a4      	lsls	r4, r4, #6
 800041c:	0a64      	lsrs	r4, r4, #9
 800041e:	2200      	movs	r2, #0
 8000420:	e75d      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000422:	2201      	movs	r2, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e75a      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	432c      	orrs	r4, r5
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e753      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	0800369c 	.word	0x0800369c
 800043c:	f7ffffff 	.word	0xf7ffffff
 8000440:	080036dc 	.word	0x080036dc

08000444 <__aeabi_fmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	464e      	mov	r6, r9
 8000448:	4657      	mov	r7, sl
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0243      	lsls	r3, r0, #9
 8000452:	0a5b      	lsrs	r3, r3, #9
 8000454:	0045      	lsls	r5, r0, #1
 8000456:	b083      	sub	sp, #12
 8000458:	1c0f      	adds	r7, r1, #0
 800045a:	4699      	mov	r9, r3
 800045c:	0e2d      	lsrs	r5, r5, #24
 800045e:	0fc6      	lsrs	r6, r0, #31
 8000460:	2d00      	cmp	r5, #0
 8000462:	d057      	beq.n	8000514 <__aeabi_fmul+0xd0>
 8000464:	2dff      	cmp	r5, #255	; 0xff
 8000466:	d024      	beq.n	80004b2 <__aeabi_fmul+0x6e>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	04c0      	lsls	r0, r0, #19
 800046e:	4318      	orrs	r0, r3
 8000470:	2300      	movs	r3, #0
 8000472:	4681      	mov	r9, r0
 8000474:	469a      	mov	sl, r3
 8000476:	469b      	mov	fp, r3
 8000478:	3d7f      	subs	r5, #127	; 0x7f
 800047a:	027c      	lsls	r4, r7, #9
 800047c:	007a      	lsls	r2, r7, #1
 800047e:	0ffb      	lsrs	r3, r7, #31
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	0e12      	lsrs	r2, r2, #24
 8000484:	4698      	mov	r8, r3
 8000486:	d023      	beq.n	80004d0 <__aeabi_fmul+0x8c>
 8000488:	2aff      	cmp	r2, #255	; 0xff
 800048a:	d04b      	beq.n	8000524 <__aeabi_fmul+0xe0>
 800048c:	00e3      	lsls	r3, r4, #3
 800048e:	2480      	movs	r4, #128	; 0x80
 8000490:	2000      	movs	r0, #0
 8000492:	04e4      	lsls	r4, r4, #19
 8000494:	3a7f      	subs	r2, #127	; 0x7f
 8000496:	431c      	orrs	r4, r3
 8000498:	18ad      	adds	r5, r5, r2
 800049a:	1c6b      	adds	r3, r5, #1
 800049c:	4647      	mov	r7, r8
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	4653      	mov	r3, sl
 80004a2:	4077      	eors	r7, r6
 80004a4:	003a      	movs	r2, r7
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d848      	bhi.n	800053c <__aeabi_fmul+0xf8>
 80004aa:	497d      	ldr	r1, [pc, #500]	; (80006a0 <__aeabi_fmul+0x25c>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	58cb      	ldr	r3, [r1, r3]
 80004b0:	469f      	mov	pc, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fmul+0x74>
 80004b6:	e085      	b.n	80005c4 <__aeabi_fmul+0x180>
 80004b8:	3308      	adds	r3, #8
 80004ba:	469a      	mov	sl, r3
 80004bc:	3b06      	subs	r3, #6
 80004be:	469b      	mov	fp, r3
 80004c0:	027c      	lsls	r4, r7, #9
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	25ff      	movs	r5, #255	; 0xff
 80004c8:	0a64      	lsrs	r4, r4, #9
 80004ca:	0e12      	lsrs	r2, r2, #24
 80004cc:	4698      	mov	r8, r3
 80004ce:	d1db      	bne.n	8000488 <__aeabi_fmul+0x44>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fmul+0x92>
 80004d4:	e090      	b.n	80005f8 <__aeabi_fmul+0x1b4>
 80004d6:	4652      	mov	r2, sl
 80004d8:	2301      	movs	r3, #1
 80004da:	431a      	orrs	r2, r3
 80004dc:	4692      	mov	sl, r2
 80004de:	2001      	movs	r0, #1
 80004e0:	e7db      	b.n	800049a <__aeabi_fmul+0x56>
 80004e2:	464c      	mov	r4, r9
 80004e4:	4658      	mov	r0, fp
 80004e6:	0017      	movs	r7, r2
 80004e8:	2802      	cmp	r0, #2
 80004ea:	d024      	beq.n	8000536 <__aeabi_fmul+0xf2>
 80004ec:	2803      	cmp	r0, #3
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fmul+0xae>
 80004f0:	e0cf      	b.n	8000692 <__aeabi_fmul+0x24e>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	2801      	cmp	r0, #1
 80004f8:	d14d      	bne.n	8000596 <__aeabi_fmul+0x152>
 80004fa:	0258      	lsls	r0, r3, #9
 80004fc:	05d2      	lsls	r2, r2, #23
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	07ff      	lsls	r7, r7, #31
 8000502:	4310      	orrs	r0, r2
 8000504:	4338      	orrs	r0, r7
 8000506:	b003      	add	sp, #12
 8000508:	bc3c      	pop	{r2, r3, r4, r5}
 800050a:	4690      	mov	r8, r2
 800050c:	4699      	mov	r9, r3
 800050e:	46a2      	mov	sl, r4
 8000510:	46ab      	mov	fp, r5
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	2b00      	cmp	r3, #0
 8000516:	d15b      	bne.n	80005d0 <__aeabi_fmul+0x18c>
 8000518:	2304      	movs	r3, #4
 800051a:	469a      	mov	sl, r3
 800051c:	3b03      	subs	r3, #3
 800051e:	2500      	movs	r5, #0
 8000520:	469b      	mov	fp, r3
 8000522:	e7aa      	b.n	800047a <__aeabi_fmul+0x36>
 8000524:	35ff      	adds	r5, #255	; 0xff
 8000526:	2c00      	cmp	r4, #0
 8000528:	d160      	bne.n	80005ec <__aeabi_fmul+0x1a8>
 800052a:	4652      	mov	r2, sl
 800052c:	2302      	movs	r3, #2
 800052e:	431a      	orrs	r2, r3
 8000530:	4692      	mov	sl, r2
 8000532:	2002      	movs	r0, #2
 8000534:	e7b1      	b.n	800049a <__aeabi_fmul+0x56>
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	2300      	movs	r3, #0
 800053a:	e7de      	b.n	80004fa <__aeabi_fmul+0xb6>
 800053c:	464b      	mov	r3, r9
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	469c      	mov	ip, r3
 8000542:	464b      	mov	r3, r9
 8000544:	0426      	lsls	r6, r4, #16
 8000546:	0c36      	lsrs	r6, r6, #16
 8000548:	0418      	lsls	r0, r3, #16
 800054a:	4661      	mov	r1, ip
 800054c:	0033      	movs	r3, r6
 800054e:	0c22      	lsrs	r2, r4, #16
 8000550:	4664      	mov	r4, ip
 8000552:	0c00      	lsrs	r0, r0, #16
 8000554:	4343      	muls	r3, r0
 8000556:	434e      	muls	r6, r1
 8000558:	4350      	muls	r0, r2
 800055a:	4354      	muls	r4, r2
 800055c:	1980      	adds	r0, r0, r6
 800055e:	0c1a      	lsrs	r2, r3, #16
 8000560:	1812      	adds	r2, r2, r0
 8000562:	4296      	cmp	r6, r2
 8000564:	d903      	bls.n	800056e <__aeabi_fmul+0x12a>
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	468c      	mov	ip, r1
 800056c:	4464      	add	r4, ip
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	0c1b      	lsrs	r3, r3, #16
 8000572:	0410      	lsls	r0, r2, #16
 8000574:	18c0      	adds	r0, r0, r3
 8000576:	0183      	lsls	r3, r0, #6
 8000578:	1e5e      	subs	r6, r3, #1
 800057a:	41b3      	sbcs	r3, r6
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	4318      	orrs	r0, r3
 8000580:	0c13      	lsrs	r3, r2, #16
 8000582:	191b      	adds	r3, r3, r4
 8000584:	019b      	lsls	r3, r3, #6
 8000586:	4303      	orrs	r3, r0
 8000588:	001c      	movs	r4, r3
 800058a:	0123      	lsls	r3, r4, #4
 800058c:	d579      	bpl.n	8000682 <__aeabi_fmul+0x23e>
 800058e:	2301      	movs	r3, #1
 8000590:	0862      	lsrs	r2, r4, #1
 8000592:	401c      	ands	r4, r3
 8000594:	4314      	orrs	r4, r2
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	2a00      	cmp	r2, #0
 800059c:	dd4d      	ble.n	800063a <__aeabi_fmul+0x1f6>
 800059e:	0763      	lsls	r3, r4, #29
 80005a0:	d004      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005a2:	230f      	movs	r3, #15
 80005a4:	4023      	ands	r3, r4
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005aa:	3404      	adds	r4, #4
 80005ac:	0123      	lsls	r3, r4, #4
 80005ae:	d503      	bpl.n	80005b8 <__aeabi_fmul+0x174>
 80005b0:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <__aeabi_fmul+0x260>)
 80005b2:	9a01      	ldr	r2, [sp, #4]
 80005b4:	401c      	ands	r4, r3
 80005b6:	3280      	adds	r2, #128	; 0x80
 80005b8:	2afe      	cmp	r2, #254	; 0xfe
 80005ba:	dcbc      	bgt.n	8000536 <__aeabi_fmul+0xf2>
 80005bc:	01a3      	lsls	r3, r4, #6
 80005be:	0a5b      	lsrs	r3, r3, #9
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	e79a      	b.n	80004fa <__aeabi_fmul+0xb6>
 80005c4:	230c      	movs	r3, #12
 80005c6:	469a      	mov	sl, r3
 80005c8:	3b09      	subs	r3, #9
 80005ca:	25ff      	movs	r5, #255	; 0xff
 80005cc:	469b      	mov	fp, r3
 80005ce:	e754      	b.n	800047a <__aeabi_fmul+0x36>
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f8f3 	bl	80007bc <__clzsi2>
 80005d6:	464a      	mov	r2, r9
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	2576      	movs	r5, #118	; 0x76
 80005dc:	409a      	lsls	r2, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	426d      	negs	r5, r5
 80005e2:	4691      	mov	r9, r2
 80005e4:	1a2d      	subs	r5, r5, r0
 80005e6:	469a      	mov	sl, r3
 80005e8:	469b      	mov	fp, r3
 80005ea:	e746      	b.n	800047a <__aeabi_fmul+0x36>
 80005ec:	4652      	mov	r2, sl
 80005ee:	2303      	movs	r3, #3
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4692      	mov	sl, r2
 80005f4:	2003      	movs	r0, #3
 80005f6:	e750      	b.n	800049a <__aeabi_fmul+0x56>
 80005f8:	0020      	movs	r0, r4
 80005fa:	f000 f8df 	bl	80007bc <__clzsi2>
 80005fe:	1f43      	subs	r3, r0, #5
 8000600:	1a2d      	subs	r5, r5, r0
 8000602:	409c      	lsls	r4, r3
 8000604:	3d76      	subs	r5, #118	; 0x76
 8000606:	2000      	movs	r0, #0
 8000608:	e747      	b.n	800049a <__aeabi_fmul+0x56>
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	2700      	movs	r7, #0
 800060e:	03db      	lsls	r3, r3, #15
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	e772      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000614:	4642      	mov	r2, r8
 8000616:	e766      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000618:	464c      	mov	r4, r9
 800061a:	0032      	movs	r2, r6
 800061c:	4658      	mov	r0, fp
 800061e:	e762      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	464a      	mov	r2, r9
 8000624:	03db      	lsls	r3, r3, #15
 8000626:	421a      	tst	r2, r3
 8000628:	d022      	beq.n	8000670 <__aeabi_fmul+0x22c>
 800062a:	421c      	tst	r4, r3
 800062c:	d120      	bne.n	8000670 <__aeabi_fmul+0x22c>
 800062e:	4323      	orrs	r3, r4
 8000630:	025b      	lsls	r3, r3, #9
 8000632:	0a5b      	lsrs	r3, r3, #9
 8000634:	4647      	mov	r7, r8
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0xb6>
 800063a:	2301      	movs	r3, #1
 800063c:	1a9a      	subs	r2, r3, r2
 800063e:	2a1b      	cmp	r2, #27
 8000640:	dc21      	bgt.n	8000686 <__aeabi_fmul+0x242>
 8000642:	0023      	movs	r3, r4
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	40d3      	lsrs	r3, r2
 8000648:	319e      	adds	r1, #158	; 0x9e
 800064a:	408c      	lsls	r4, r1
 800064c:	001a      	movs	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	1e5c      	subs	r4, r3, #1
 8000652:	41a3      	sbcs	r3, r4
 8000654:	4313      	orrs	r3, r2
 8000656:	075a      	lsls	r2, r3, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x220>
 800065a:	220f      	movs	r2, #15
 800065c:	401a      	ands	r2, r3
 800065e:	2a04      	cmp	r2, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x220>
 8000662:	3304      	adds	r3, #4
 8000664:	015a      	lsls	r2, r3, #5
 8000666:	d411      	bmi.n	800068c <__aeabi_fmul+0x248>
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	0a5b      	lsrs	r3, r3, #9
 800066c:	2200      	movs	r2, #0
 800066e:	e744      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	464a      	mov	r2, r9
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	4313      	orrs	r3, r2
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	0037      	movs	r7, r6
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	e73b      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000682:	9501      	str	r5, [sp, #4]
 8000684:	e787      	b.n	8000596 <__aeabi_fmul+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	e736      	b.n	80004fa <__aeabi_fmul+0xb6>
 800068c:	2201      	movs	r2, #1
 800068e:	2300      	movs	r3, #0
 8000690:	e733      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	03db      	lsls	r3, r3, #15
 8000696:	4323      	orrs	r3, r4
 8000698:	025b      	lsls	r3, r3, #9
 800069a:	0a5b      	lsrs	r3, r3, #9
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	e72c      	b.n	80004fa <__aeabi_fmul+0xb6>
 80006a0:	0800371c 	.word	0x0800371c
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_i2f>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d03d      	beq.n	800072a <__aeabi_i2f+0x82>
 80006ae:	17c3      	asrs	r3, r0, #31
 80006b0:	18c5      	adds	r5, r0, r3
 80006b2:	405d      	eors	r5, r3
 80006b4:	0fc4      	lsrs	r4, r0, #31
 80006b6:	0028      	movs	r0, r5
 80006b8:	f000 f880 	bl	80007bc <__clzsi2>
 80006bc:	229e      	movs	r2, #158	; 0x9e
 80006be:	1a12      	subs	r2, r2, r0
 80006c0:	2a96      	cmp	r2, #150	; 0x96
 80006c2:	dc07      	bgt.n	80006d4 <__aeabi_i2f+0x2c>
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	2808      	cmp	r0, #8
 80006c8:	dd33      	ble.n	8000732 <__aeabi_i2f+0x8a>
 80006ca:	3808      	subs	r0, #8
 80006cc:	4085      	lsls	r5, r0
 80006ce:	0268      	lsls	r0, r5, #9
 80006d0:	0a40      	lsrs	r0, r0, #9
 80006d2:	e023      	b.n	800071c <__aeabi_i2f+0x74>
 80006d4:	2a99      	cmp	r2, #153	; 0x99
 80006d6:	dd0b      	ble.n	80006f0 <__aeabi_i2f+0x48>
 80006d8:	2305      	movs	r3, #5
 80006da:	0029      	movs	r1, r5
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	0003      	movs	r3, r0
 80006e2:	331b      	adds	r3, #27
 80006e4:	409d      	lsls	r5, r3
 80006e6:	002b      	movs	r3, r5
 80006e8:	1e5d      	subs	r5, r3, #1
 80006ea:	41ab      	sbcs	r3, r5
 80006ec:	4319      	orrs	r1, r3
 80006ee:	000d      	movs	r5, r1
 80006f0:	2805      	cmp	r0, #5
 80006f2:	dd01      	ble.n	80006f8 <__aeabi_i2f+0x50>
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409d      	lsls	r5, r3
 80006f8:	002b      	movs	r3, r5
 80006fa:	490f      	ldr	r1, [pc, #60]	; (8000738 <__aeabi_i2f+0x90>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	076e      	lsls	r6, r5, #29
 8000700:	d009      	beq.n	8000716 <__aeabi_i2f+0x6e>
 8000702:	260f      	movs	r6, #15
 8000704:	4035      	ands	r5, r6
 8000706:	2d04      	cmp	r5, #4
 8000708:	d005      	beq.n	8000716 <__aeabi_i2f+0x6e>
 800070a:	3304      	adds	r3, #4
 800070c:	015d      	lsls	r5, r3, #5
 800070e:	d502      	bpl.n	8000716 <__aeabi_i2f+0x6e>
 8000710:	229f      	movs	r2, #159	; 0x9f
 8000712:	400b      	ands	r3, r1
 8000714:	1a12      	subs	r2, r2, r0
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	0a58      	lsrs	r0, r3, #9
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	0240      	lsls	r0, r0, #9
 800071e:	05d2      	lsls	r2, r2, #23
 8000720:	0a40      	lsrs	r0, r0, #9
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4310      	orrs	r0, r2
 8000726:	4320      	orrs	r0, r4
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	2400      	movs	r4, #0
 800072c:	2200      	movs	r2, #0
 800072e:	2000      	movs	r0, #0
 8000730:	e7f4      	b.n	800071c <__aeabi_i2f+0x74>
 8000732:	0268      	lsls	r0, r5, #9
 8000734:	0a40      	lsrs	r0, r0, #9
 8000736:	e7f1      	b.n	800071c <__aeabi_i2f+0x74>
 8000738:	fbffffff 	.word	0xfbffffff

0800073c <__aeabi_ui2f>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	1e04      	subs	r4, r0, #0
 8000740:	d034      	beq.n	80007ac <__aeabi_ui2f+0x70>
 8000742:	f000 f83b 	bl	80007bc <__clzsi2>
 8000746:	229e      	movs	r2, #158	; 0x9e
 8000748:	1a12      	subs	r2, r2, r0
 800074a:	2a96      	cmp	r2, #150	; 0x96
 800074c:	dc07      	bgt.n	800075e <__aeabi_ui2f+0x22>
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	2808      	cmp	r0, #8
 8000752:	dd2e      	ble.n	80007b2 <__aeabi_ui2f+0x76>
 8000754:	3808      	subs	r0, #8
 8000756:	4084      	lsls	r4, r0
 8000758:	0260      	lsls	r0, r4, #9
 800075a:	0a40      	lsrs	r0, r0, #9
 800075c:	e021      	b.n	80007a2 <__aeabi_ui2f+0x66>
 800075e:	2a99      	cmp	r2, #153	; 0x99
 8000760:	dd09      	ble.n	8000776 <__aeabi_ui2f+0x3a>
 8000762:	0003      	movs	r3, r0
 8000764:	0021      	movs	r1, r4
 8000766:	331b      	adds	r3, #27
 8000768:	4099      	lsls	r1, r3
 800076a:	1e4b      	subs	r3, r1, #1
 800076c:	4199      	sbcs	r1, r3
 800076e:	2305      	movs	r3, #5
 8000770:	1a1b      	subs	r3, r3, r0
 8000772:	40dc      	lsrs	r4, r3
 8000774:	430c      	orrs	r4, r1
 8000776:	2805      	cmp	r0, #5
 8000778:	dd01      	ble.n	800077e <__aeabi_ui2f+0x42>
 800077a:	1f43      	subs	r3, r0, #5
 800077c:	409c      	lsls	r4, r3
 800077e:	0023      	movs	r3, r4
 8000780:	490d      	ldr	r1, [pc, #52]	; (80007b8 <__aeabi_ui2f+0x7c>)
 8000782:	400b      	ands	r3, r1
 8000784:	0765      	lsls	r5, r4, #29
 8000786:	d009      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000788:	250f      	movs	r5, #15
 800078a:	402c      	ands	r4, r5
 800078c:	2c04      	cmp	r4, #4
 800078e:	d005      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000790:	3304      	adds	r3, #4
 8000792:	015c      	lsls	r4, r3, #5
 8000794:	d502      	bpl.n	800079c <__aeabi_ui2f+0x60>
 8000796:	229f      	movs	r2, #159	; 0x9f
 8000798:	400b      	ands	r3, r1
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	0a58      	lsrs	r0, r3, #9
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	05d2      	lsls	r2, r2, #23
 80007a6:	0a40      	lsrs	r0, r0, #9
 80007a8:	4310      	orrs	r0, r2
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	2200      	movs	r2, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	e7f7      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b2:	0260      	lsls	r0, r4, #9
 80007b4:	0a40      	lsrs	r0, r0, #9
 80007b6:	e7f4      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__clzsi2>:
 80007bc:	211c      	movs	r1, #28
 80007be:	2301      	movs	r3, #1
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d301      	bcc.n	80007ca <__clzsi2+0xe>
 80007c6:	0c00      	lsrs	r0, r0, #16
 80007c8:	3910      	subs	r1, #16
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	4298      	cmp	r0, r3
 80007ce:	d301      	bcc.n	80007d4 <__clzsi2+0x18>
 80007d0:	0a00      	lsrs	r0, r0, #8
 80007d2:	3908      	subs	r1, #8
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	4298      	cmp	r0, r3
 80007d8:	d301      	bcc.n	80007de <__clzsi2+0x22>
 80007da:	0900      	lsrs	r0, r0, #4
 80007dc:	3904      	subs	r1, #4
 80007de:	a202      	add	r2, pc, #8	; (adr r2, 80007e8 <__clzsi2+0x2c>)
 80007e0:	5c10      	ldrb	r0, [r2, r0]
 80007e2:	1840      	adds	r0, r0, r1
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	02020304 	.word	0x02020304
 80007ec:	01010101 	.word	0x01010101
	...

080007f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_Init+0x24>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_Init+0x24>)
 8000802:	2110      	movs	r1, #16
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f809 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080e:	f002 fd2f 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000828:	f001 fcc4 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 800082c:	0002      	movs	r2, r0
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0099      	lsls	r1, r3, #2
 8000832:	0010      	movs	r0, r2
 8000834:	f7ff fc68 	bl	8000108 <__udivsi3>
 8000838:	0003      	movs	r3, r0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f8e7 	bl	8000a0e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	2301      	movs	r3, #1
 8000844:	425b      	negs	r3, r3
 8000846:	2200      	movs	r2, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f8cb 	bl	80009e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  uwTick++;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_IncTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_IncTick+0x14>)
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000020 	.word	0x20000020

08000870 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000020 	.word	0x20000020

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff fff0 	bl	8000870 <HAL_GetTick>
 8000890:	0003      	movs	r3, r0
 8000892:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3301      	adds	r3, #1
 800089c:	d002      	beq.n	80008a4 <HAL_Delay+0x20>
  {
     wait++;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	f7ff ffe3 	bl	8000870 <HAL_GetTick>
 80008aa:	0002      	movs	r2, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d8f7      	bhi.n	80008a6 <HAL_Delay+0x22>
  {
  }
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	0002      	movs	r2, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b7f      	cmp	r3, #127	; 0x7f
 80008d4:	d932      	bls.n	800093c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d6:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <NVIC_SetPriority+0xd4>)
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	230f      	movs	r3, #15
 80008e0:	400b      	ands	r3, r1
 80008e2:	3b08      	subs	r3, #8
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3306      	adds	r3, #6
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	3304      	adds	r3, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1dfa      	adds	r2, r7, #7
 80008f2:	7812      	ldrb	r2, [r2, #0]
 80008f4:	0011      	movs	r1, r2
 80008f6:	2203      	movs	r2, #3
 80008f8:	400a      	ands	r2, r1
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	21ff      	movs	r1, #255	; 0xff
 80008fe:	4091      	lsls	r1, r2
 8000900:	000a      	movs	r2, r1
 8000902:	43d2      	mvns	r2, r2
 8000904:	401a      	ands	r2, r3
 8000906:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	019b      	lsls	r3, r3, #6
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	401a      	ands	r2, r3
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	0018      	movs	r0, r3
 8000916:	2303      	movs	r3, #3
 8000918:	4003      	ands	r3, r0
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <NVIC_SetPriority+0xd4>)
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001c      	movs	r4, r3
 8000926:	230f      	movs	r3, #15
 8000928:	4023      	ands	r3, r4
 800092a:	3b08      	subs	r3, #8
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	430a      	orrs	r2, r1
 8000930:	3306      	adds	r3, #6
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	18c3      	adds	r3, r0, r3
 8000936:	3304      	adds	r3, #4
 8000938:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800093a:	e027      	b.n	800098c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	33c0      	adds	r3, #192	; 0xc0
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	589b      	ldr	r3, [r3, r2]
 800094c:	1dfa      	adds	r2, r7, #7
 800094e:	7812      	ldrb	r2, [r2, #0]
 8000950:	0011      	movs	r1, r2
 8000952:	2203      	movs	r2, #3
 8000954:	400a      	ands	r2, r1
 8000956:	00d2      	lsls	r2, r2, #3
 8000958:	21ff      	movs	r1, #255	; 0xff
 800095a:	4091      	lsls	r1, r2
 800095c:	000a      	movs	r2, r1
 800095e:	43d2      	mvns	r2, r2
 8000960:	401a      	ands	r2, r3
 8000962:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	019b      	lsls	r3, r3, #6
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	401a      	ands	r2, r3
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0018      	movs	r0, r3
 8000972:	2303      	movs	r3, #3
 8000974:	4003      	ands	r3, r0
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <NVIC_SetPriority+0xd8>)
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b25b      	sxtb	r3, r3
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	430a      	orrs	r2, r1
 8000986:	33c0      	adds	r3, #192	; 0xc0
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	501a      	str	r2, [r3, r0]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b003      	add	sp, #12
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	e000e100 	.word	0xe000e100

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <SysTick_Config+0x40>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d901      	bls.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e010      	b.n	80009d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <SysTick_Config+0x44>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	3a01      	subs	r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	2103      	movs	r1, #3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff7d 	bl	80008c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SysTick_Config+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x44>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	00ffffff 	.word	0x00ffffff
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	210f      	movs	r1, #15
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	1c02      	adds	r2, r0, #0
 80009f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <NVIC_SetPriority>
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ffbf 	bl	800099c <SysTick_Config>
 8000a1e:	0003      	movs	r3, r0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a3e:	e14f      	b.n	8000ce0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x30>
 8000a56:	e140      	b.n	8000cda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b12      	cmp	r3, #18
 8000a66:	d123      	bne.n	8000ab0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	08da      	lsrs	r2, r3, #3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3208      	adds	r2, #8
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2207      	movs	r2, #7
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	409a      	lsls	r2, r3
 8000a82:	0013      	movs	r3, r2
 8000a84:	43da      	mvns	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2107      	movs	r1, #7
 8000a94:	400b      	ands	r3, r1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d00b      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d007      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	2b11      	cmp	r3, #17
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	055b      	lsls	r3, r3, #21
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_GPIO_Init+0x17c>
 8000ba2:	e09a      	b.n	8000cda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b54      	ldr	r3, [pc, #336]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	619a      	str	r2, [r3, #24]
 8000bb0:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000bbc:	4a4f      	ldr	r2, [pc, #316]	; (8000cfc <HAL_GPIO_Init+0x2d4>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	589b      	ldr	r3, [r3, r2]
 8000bc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	2390      	movs	r3, #144	; 0x90
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0x1ea>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a44      	ldr	r2, [pc, #272]	; (8000d00 <HAL_GPIO_Init+0x2d8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00d      	beq.n	8000c0e <HAL_GPIO_Init+0x1e6>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a43      	ldr	r2, [pc, #268]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d007      	beq.n	8000c0a <HAL_GPIO_Init+0x1e2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <HAL_GPIO_Init+0x2e0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_GPIO_Init+0x1de>
 8000c02:	2303      	movs	r3, #3
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c06:	2305      	movs	r3, #5
 8000c08:	e004      	b.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c12:	2300      	movs	r3, #0
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	2103      	movs	r1, #3
 8000c18:	400a      	ands	r2, r1
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c24:	4935      	ldr	r1, [pc, #212]	; (8000cfc <HAL_GPIO_Init+0x2d4>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	035b      	lsls	r3, r3, #13
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	039b      	lsls	r3, r3, #14
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	40da      	lsrs	r2, r3
 8000ce8:	1e13      	subs	r3, r2, #0
 8000cea:	d000      	beq.n	8000cee <HAL_GPIO_Init+0x2c6>
 8000cec:	e6a8      	b.n	8000a40 <HAL_GPIO_Init+0x18>
  } 
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b006      	add	sp, #24
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	0008      	movs	r0, r1
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	1cbb      	adds	r3, r7, #2
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	801a      	strh	r2, [r3, #0]
 8000d22:	1c7b      	adds	r3, r7, #1
 8000d24:	1c0a      	adds	r2, r1, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d28:	1c7b      	adds	r3, r7, #1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d30:	1cbb      	adds	r3, r7, #2
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e003      	b.n	8000d42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	1cbb      	adds	r3, r7, #2
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e082      	b.n	8000e64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2241      	movs	r2, #65	; 0x41
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d107      	bne.n	8000d7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f002 fa9f 	bl	80032b8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2241      	movs	r2, #65	; 0x41
 8000d7e:	2124      	movs	r1, #36	; 0x24
 8000d80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	438a      	bics	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4934      	ldr	r1, [pc, #208]	; (8000e6c <HAL_I2C_Init+0x120>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4931      	ldr	r1, [pc, #196]	; (8000e70 <HAL_I2C_Init+0x124>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0209      	lsls	r1, r1, #8
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	e007      	b.n	8000dda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2184      	movs	r1, #132	; 0x84
 8000dd4:	0209      	lsls	r1, r1, #8
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d104      	bne.n	8000dec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	491f      	ldr	r1, [pc, #124]	; (8000e74 <HAL_I2C_Init+0x128>)
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	491a      	ldr	r1, [pc, #104]	; (8000e70 <HAL_I2C_Init+0x124>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	021a      	lsls	r2, r3, #8
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69d9      	ldr	r1, [r3, #28]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a1a      	ldr	r2, [r3, #32]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2241      	movs	r2, #65	; 0x41
 8000e50:	2120      	movs	r1, #32
 8000e52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2242      	movs	r2, #66	; 0x42
 8000e5e:	2100      	movs	r1, #0
 8000e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	f0ffffff 	.word	0xf0ffffff
 8000e70:	ffff7fff 	.word	0xffff7fff
 8000e74:	02008000 	.word	0x02008000

08000e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	000c      	movs	r4, r1
 8000e82:	0010      	movs	r0, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	230a      	movs	r3, #10
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	1c22      	adds	r2, r4, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
 8000e8e:	2308      	movs	r3, #8
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	1c0a      	adds	r2, r1, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2241      	movs	r2, #65	; 0x41
 8000ea4:	5c9b      	ldrb	r3, [r3, r2]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d000      	beq.n	8000eae <HAL_I2C_Mem_Write+0x36>
 8000eac:	e11c      	b.n	80010e8 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <HAL_I2C_Mem_Write+0x46>
 8000eb4:	232c      	movs	r3, #44	; 0x2c
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e113      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2240      	movs	r2, #64	; 0x40
 8000ec6:	5c9b      	ldrb	r3, [r3, r2]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_I2C_Mem_Write+0x58>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e10c      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fcca 	bl	8000870 <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	0219      	lsls	r1, r3, #8
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2319      	movs	r3, #25
 8000eec:	2201      	movs	r2, #1
 8000eee:	f000 fb3f 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e0f7      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2241      	movs	r2, #65	; 0x41
 8000efe:	2121      	movs	r1, #33	; 0x21
 8000f00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2242      	movs	r2, #66	; 0x42
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	222c      	movs	r2, #44	; 0x2c
 8000f1a:	18ba      	adds	r2, r7, r2
 8000f1c:	8812      	ldrh	r2, [r2, #0]
 8000f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	881c      	ldrh	r4, [r3, #0]
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	230a      	movs	r3, #10
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	8819      	ldrh	r1, [r3, #0]
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	0023      	movs	r3, r4
 8000f42:	f000 fa19 	bl	8001378 <I2C_RequestMemoryWrite>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d00f      	beq.n	8000f6a <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d105      	bne.n	8000f5e <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	2100      	movs	r1, #0
 8000f58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0c5      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e0bf      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d911      	bls.n	8000f98 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	045c      	lsls	r4, r3, #17
 8000f84:	230a      	movs	r3, #10
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	0023      	movs	r3, r4
 8000f92:	f000 fbff 	bl	8001794 <I2C_TransferConfig>
 8000f96:	e012      	b.n	8000fbe <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	049c      	lsls	r4, r3, #18
 8000fac:	230a      	movs	r3, #10
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	0023      	movs	r3, r4
 8000fba:	f000 fbeb 	bl	8001794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fb0c 	bl	80015e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d007      	beq.n	8000fde <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d101      	bne.n	8000fda <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e087      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e085      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	1c59      	adds	r1, r3, #1
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	6251      	str	r1, [r2, #36]	; 0x24
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001002:	3b01      	subs	r3, #1
 8001004:	b29a      	uxth	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100e:	2b00      	cmp	r3, #0
 8001010:	d13b      	bne.n	800108a <HAL_I2C_Mem_Write+0x212>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001016:	b29b      	uxth	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d036      	beq.n	800108a <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800101c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	0013      	movs	r3, r2
 8001026:	2200      	movs	r2, #0
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	f000 faa1 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e059      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103a:	b29b      	uxth	r3, r3
 800103c:	2bff      	cmp	r3, #255	; 0xff
 800103e:	d911      	bls.n	8001064 <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104a:	b2da      	uxtb	r2, r3
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	045c      	lsls	r4, r3, #17
 8001050:	230a      	movs	r3, #10
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	8819      	ldrh	r1, [r3, #0]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	2300      	movs	r3, #0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	0023      	movs	r3, r4
 800105e:	f000 fb99 	bl	8001794 <I2C_TransferConfig>
 8001062:	e012      	b.n	800108a <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001072:	b2da      	uxtb	r2, r3
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	049c      	lsls	r4, r3, #18
 8001078:	230a      	movs	r3, #10
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	8819      	ldrh	r1, [r3, #0]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	2300      	movs	r3, #0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	0023      	movs	r3, r4
 8001086:	f000 fb85 	bl	8001794 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108e:	b29b      	uxth	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d194      	bne.n	8000fbe <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fae0 	bl	8001660 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d101      	bne.n	80010b0 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e01c      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e01a      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2220      	movs	r2, #32
 80010ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	490b      	ldr	r1, [pc, #44]	; (80010f4 <HAL_I2C_Mem_Write+0x27c>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	2120      	movs	r1, #32
 80010d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2242      	movs	r2, #66	; 0x42
 80010d8:	2100      	movs	r1, #0
 80010da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	2100      	movs	r1, #0
 80010e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 80010e8:	2302      	movs	r3, #2
  }
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b007      	add	sp, #28
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	fe00e800 	.word	0xfe00e800

080010f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	000c      	movs	r4, r1
 8001102:	0010      	movs	r0, r2
 8001104:	0019      	movs	r1, r3
 8001106:	230a      	movs	r3, #10
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	1c22      	adds	r2, r4, #0
 800110c:	801a      	strh	r2, [r3, #0]
 800110e:	2308      	movs	r3, #8
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	801a      	strh	r2, [r3, #0]
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	1c0a      	adds	r2, r1, #0
 800111a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2241      	movs	r2, #65	; 0x41
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b20      	cmp	r3, #32
 800112a:	d000      	beq.n	800112e <HAL_I2C_Mem_Read+0x36>
 800112c:	e11c      	b.n	8001368 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_I2C_Mem_Read+0x46>
 8001134:	232c      	movs	r3, #44	; 0x2c
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e113      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2240      	movs	r2, #64	; 0x40
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_I2C_Mem_Read+0x58>
 800114c:	2302      	movs	r3, #2
 800114e:	e10c      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	2101      	movs	r1, #1
 8001156:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001158:	f7ff fb8a 	bl	8000870 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	0219      	lsls	r1, r3, #8
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2319      	movs	r3, #25
 800116c:	2201      	movs	r2, #1
 800116e:	f000 f9ff 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e0f7      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2241      	movs	r2, #65	; 0x41
 800117e:	2122      	movs	r1, #34	; 0x22
 8001180:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2242      	movs	r2, #66	; 0x42
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	222c      	movs	r2, #44	; 0x2c
 800119a:	18ba      	adds	r2, r7, r2
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	881c      	ldrh	r4, [r3, #0]
 80011aa:	2308      	movs	r3, #8
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	230a      	movs	r3, #10
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	8819      	ldrh	r1, [r3, #0]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	0023      	movs	r3, r4
 80011c2:	f000 f947 	bl	8001454 <I2C_RequestMemoryRead>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d00f      	beq.n	80011ea <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d105      	bne.n	80011de <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	2100      	movs	r1, #0
 80011d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0c5      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	2100      	movs	r1, #0
 80011e4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e0bf      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d912      	bls.n	800121a <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	045c      	lsls	r4, r3, #17
 8001204:	230a      	movs	r3, #10
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	8819      	ldrh	r1, [r3, #0]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	2390      	movs	r3, #144	; 0x90
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	0023      	movs	r3, r4
 8001214:	f000 fabe 	bl	8001794 <I2C_TransferConfig>
 8001218:	e013      	b.n	8001242 <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	b2da      	uxtb	r2, r3
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	049c      	lsls	r4, r3, #18
 800122e:	230a      	movs	r3, #10
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	8819      	ldrh	r1, [r3, #0]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	2390      	movs	r3, #144	; 0x90
 8001238:	019b      	lsls	r3, r3, #6
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	0023      	movs	r3, r4
 800123e:	f000 faa9 	bl	8001794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	0013      	movs	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	2104      	movs	r1, #4
 8001250:	f000 f98e 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e086      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	1c59      	adds	r1, r3, #1
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6251      	str	r1, [r2, #36]	; 0x24
 800126c:	b2c2      	uxtb	r2, r0
 800126e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001274:	3b01      	subs	r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128e:	2b00      	cmp	r3, #0
 8001290:	d13b      	bne.n	800130a <HAL_I2C_Mem_Read+0x212>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29b      	uxth	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d036      	beq.n	800130a <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800129c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	0013      	movs	r3, r2
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	f000 f961 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e059      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2bff      	cmp	r3, #255	; 0xff
 80012be:	d911      	bls.n	80012e4 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	045c      	lsls	r4, r3, #17
 80012d0:	230a      	movs	r3, #10
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	8819      	ldrh	r1, [r3, #0]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	0023      	movs	r3, r4
 80012de:	f000 fa59 	bl	8001794 <I2C_TransferConfig>
 80012e2:	e012      	b.n	800130a <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	049c      	lsls	r4, r3, #18
 80012f8:	230a      	movs	r3, #10
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	0023      	movs	r3, r4
 8001306:	f000 fa45 	bl	8001794 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d196      	bne.n	8001242 <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f9a0 	bl	8001660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d007      	beq.n	8001334 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	2b04      	cmp	r3, #4
 800132a:	d101      	bne.n	8001330 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e01c      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e01a      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2220      	movs	r2, #32
 800133a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	490b      	ldr	r1, [pc, #44]	; (8001374 <HAL_I2C_Mem_Read+0x27c>)
 8001348:	400a      	ands	r2, r1
 800134a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2241      	movs	r2, #65	; 0x41
 8001350:	2120      	movs	r1, #32
 8001352:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2242      	movs	r2, #66	; 0x42
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2240      	movs	r2, #64	; 0x40
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 8001368:	2302      	movs	r3, #2
  }
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b007      	add	sp, #28
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	fe00e800 	.word	0xfe00e800

08001378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	000c      	movs	r4, r1
 8001382:	0010      	movs	r0, r2
 8001384:	0019      	movs	r1, r3
 8001386:	250a      	movs	r5, #10
 8001388:	197b      	adds	r3, r7, r5
 800138a:	1c22      	adds	r2, r4, #0
 800138c:	801a      	strh	r2, [r3, #0]
 800138e:	2308      	movs	r3, #8
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	1c02      	adds	r2, r0, #0
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	1c0a      	adds	r2, r1, #0
 800139a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	045c      	lsls	r4, r3, #17
 80013a6:	197b      	adds	r3, r7, r5
 80013a8:	8819      	ldrh	r1, [r3, #0]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	0023      	movs	r3, r4
 80013b4:	f000 f9ee 	bl	8001794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ba:	6a39      	ldr	r1, [r7, #32]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f90f 	bl	80015e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d007      	beq.n	80013d8 <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d101      	bne.n	80013d4 <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e03b      	b.n	800144c <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e039      	b.n	800144c <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013e0:	2308      	movs	r3, #8
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
 80013ee:	e01f      	b.n	8001430 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013f0:	2308      	movs	r3, #8
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	6a39      	ldr	r1, [r7, #32]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	0018      	movs	r0, r3
 800140a:	f000 f8ea 	bl	80015e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d007      	beq.n	8001422 <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	2b04      	cmp	r3, #4
 8001418:	d101      	bne.n	800141e <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e016      	b.n	800144c <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e014      	b.n	800144c <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001422:	2308      	movs	r3, #8
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001430:	6a3a      	ldr	r2, [r7, #32]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	0013      	movs	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	f000 f897 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e000      	b.n	800144c <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bdb0      	pop	{r4, r5, r7, pc}

08001454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	000c      	movs	r4, r1
 800145e:	0010      	movs	r0, r2
 8001460:	0019      	movs	r1, r3
 8001462:	250a      	movs	r5, #10
 8001464:	197b      	adds	r3, r7, r5
 8001466:	1c22      	adds	r2, r4, #0
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	2308      	movs	r3, #8
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	1c02      	adds	r2, r0, #0
 8001470:	801a      	strh	r2, [r3, #0]
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	1c0a      	adds	r2, r1, #0
 8001476:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	197b      	adds	r3, r7, r5
 8001480:	8819      	ldrh	r1, [r3, #0]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	019b      	lsls	r3, r3, #6
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	f000 f982 	bl	8001794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	6a39      	ldr	r1, [r7, #32]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0018      	movs	r0, r3
 8001498:	f000 f8a3 	bl	80015e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d007      	beq.n	80014b0 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d101      	bne.n	80014ac <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e03b      	b.n	8001524 <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e039      	b.n	8001524 <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014b0:	1dbb      	adds	r3, r7, #6
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d107      	bne.n	80014c8 <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014b8:	2308      	movs	r3, #8
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
 80014c6:	e01f      	b.n	8001508 <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014c8:	2308      	movs	r3, #8
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 f87e 	bl	80015e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d007      	beq.n	80014fa <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d101      	bne.n	80014f6 <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e016      	b.n	8001524 <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e014      	b.n	8001524 <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014fa:	2308      	movs	r3, #8
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001508:	6a3a      	ldr	r2, [r7, #32]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	0013      	movs	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	f000 f82b 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e000      	b.n	8001524 <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b004      	add	sp, #16
 800152a:	bdb0      	pop	{r4, r5, r7, pc}

0800152c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d103      	bne.n	800154a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	2b01      	cmp	r3, #1
 8001556:	d007      	beq.n	8001568 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	619a      	str	r2, [r3, #24]
  }
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	e01b      	b.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	d018      	beq.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800158e:	f7ff f96f 	bl	8000870 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d20d      	bcs.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2241      	movs	r2, #65	; 0x41
 80015a2:	2120      	movs	r1, #32
 80015a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2242      	movs	r2, #66	; 0x42
 80015aa:	2100      	movs	r1, #0
 80015ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e00f      	b.n	80015da <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	4013      	ands	r3, r2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	425a      	negs	r2, r3
 80015ca:	4153      	adcs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	001a      	movs	r2, r3
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d0d4      	beq.n	8001582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015ee:	e02b      	b.n	8001648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f86e 	bl	80016d8 <I2C_IsAcknowledgeFailed>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e029      	b.n	8001658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3301      	adds	r3, #1
 8001608:	d01e      	beq.n	8001648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001610:	f7ff f92e 	bl	8000870 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d213      	bcs.n	8001648 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	2220      	movs	r2, #32
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2241      	movs	r2, #65	; 0x41
 8001630:	2120      	movs	r1, #32
 8001632:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2242      	movs	r2, #66	; 0x42
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e007      	b.n	8001658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	2b02      	cmp	r3, #2
 8001654:	d1cc      	bne.n	80015f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}

08001660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800166c:	e028      	b.n	80016c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f82f 	bl	80016d8 <I2C_IsAcknowledgeFailed>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e026      	b.n	80016d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001688:	f7ff f8f2 	bl	8000870 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d213      	bcs.n	80016c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	2220      	movs	r2, #32
 800169e:	431a      	orrs	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2241      	movs	r2, #65	; 0x41
 80016a8:	2120      	movs	r1, #32
 80016aa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2242      	movs	r2, #66	; 0x42
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e007      	b.n	80016d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2220      	movs	r2, #32
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d1cf      	bne.n	800166e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2210      	movs	r2, #16
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d148      	bne.n	8001784 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f2:	e01b      	b.n	800172c <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3301      	adds	r3, #1
 80016f8:	d018      	beq.n	800172c <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <I2C_IsAcknowledgeFailed+0x38>
 8001700:	f7ff f8b6 	bl	8000870 <HAL_GetTick>
 8001704:	0002      	movs	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	d20d      	bcs.n	800172c <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2241      	movs	r2, #65	; 0x41
 8001714:	2120      	movs	r1, #32
 8001716:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2242      	movs	r2, #66	; 0x42
 800171c:	2100      	movs	r1, #0
 800171e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e02c      	b.n	8001786 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2220      	movs	r2, #32
 8001734:	4013      	ands	r3, r2
 8001736:	2b20      	cmp	r3, #32
 8001738:	d1dc      	bne.n	80016f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2210      	movs	r2, #16
 8001740:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2220      	movs	r2, #32
 8001748:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff feed 	bl	800152c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <I2C_IsAcknowledgeFailed+0xb8>)
 800175e:	400a      	ands	r2, r1
 8001760:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2204      	movs	r2, #4
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2241      	movs	r2, #65	; 0x41
 800176c:	2120      	movs	r1, #32
 800176e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2242      	movs	r2, #66	; 0x42
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	fe00e800 	.word	0xfe00e800

08001794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	0008      	movs	r0, r1
 800179e:	0011      	movs	r1, r2
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	240a      	movs	r4, #10
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	2009      	movs	r0, #9
 80017ac:	183b      	adds	r3, r7, r0
 80017ae:	1c0a      	adds	r2, r1, #0
 80017b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <I2C_TransferConfig+0x68>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	059b      	lsls	r3, r3, #22
 80017cc:	0d9a      	lsrs	r2, r3, #22
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	0419      	lsls	r1, r3, #16
 80017d4:	23ff      	movs	r3, #255	; 0xff
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	400b      	ands	r3, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	431a      	orrs	r2, r3
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	4313      	orrs	r3, r2
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	605a      	str	r2, [r3, #4]
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b007      	add	sp, #28
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	fc009800 	.word	0xfc009800

08001800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2241      	movs	r2, #65	; 0x41
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b20      	cmp	r3, #32
 8001814:	d138      	bne.n	8001888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001820:	2302      	movs	r3, #2
 8001822:	e032      	b.n	800188a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	2101      	movs	r1, #1
 800182a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2241      	movs	r2, #65	; 0x41
 8001830:	2124      	movs	r1, #36	; 0x24
 8001832:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4911      	ldr	r1, [pc, #68]	; (8001894 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e000      	b.n	800188a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001888:	2302      	movs	r3, #2
  }
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	ffffefff 	.word	0xffffefff

08001898 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2241      	movs	r2, #65	; 0x41
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d139      	bne.n	8001926 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80018bc:	2302      	movs	r3, #2
 80018be:	e033      	b.n	8001928 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	2101      	movs	r1, #1
 80018c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2241      	movs	r2, #65	; 0x41
 80018cc:	2124      	movs	r1, #36	; 0x24
 80018ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2101      	movs	r1, #1
 80018dc:	438a      	bics	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	2120      	movs	r1, #32
 8001918:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}
 8001930:	fffff0ff 	.word	0xfffff0ff

08001934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d100      	bne.n	800194c <HAL_RCC_OscConfig+0x18>
 800194a:	e08d      	b.n	8001a68 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800194c:	4bc3      	ldr	r3, [pc, #780]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	220c      	movs	r2, #12
 8001952:	4013      	ands	r3, r2
 8001954:	2b04      	cmp	r3, #4
 8001956:	d00e      	beq.n	8001976 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001958:	4bc0      	ldr	r3, [pc, #768]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	220c      	movs	r2, #12
 800195e:	4013      	ands	r3, r2
 8001960:	2b08      	cmp	r3, #8
 8001962:	d116      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
 8001964:	4bbd      	ldr	r3, [pc, #756]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	401a      	ands	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	429a      	cmp	r2, r3
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4bb9      	ldr	r3, [pc, #740]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	4013      	ands	r3, r2
 8001980:	d100      	bne.n	8001984 <HAL_RCC_OscConfig+0x50>
 8001982:	e070      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d000      	beq.n	800198e <HAL_RCC_OscConfig+0x5a>
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e2b6      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_OscConfig+0x76>
 800199a:	4bb0      	ldr	r3, [pc, #704]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4baf      	ldr	r3, [pc, #700]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0249      	lsls	r1, r1, #9
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e02f      	b.n	8001a0a <HAL_RCC_OscConfig+0xd6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4ba9      	ldr	r3, [pc, #676]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019b8:	49a9      	ldr	r1, [pc, #676]	; (8001c60 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4ba6      	ldr	r3, [pc, #664]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019c4:	49a7      	ldr	r1, [pc, #668]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e01e      	b.n	8001a0a <HAL_RCC_OscConfig+0xd6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10e      	bne.n	80019f2 <HAL_RCC_OscConfig+0xbe>
 80019d4:	4ba1      	ldr	r3, [pc, #644]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4ba0      	ldr	r3, [pc, #640]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	02c9      	lsls	r1, r1, #11
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b9d      	ldr	r3, [pc, #628]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0249      	lsls	r1, r1, #9
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e00b      	b.n	8001a0a <HAL_RCC_OscConfig+0xd6>
 80019f2:	4b9a      	ldr	r3, [pc, #616]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b99      	ldr	r3, [pc, #612]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 80019f8:	4999      	ldr	r1, [pc, #612]	; (8001c60 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b96      	ldr	r3, [pc, #600]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a04:	4997      	ldr	r1, [pc, #604]	; (8001c64 <HAL_RCC_OscConfig+0x330>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d014      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7fe ff2d 	bl	8000870 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7fe ff28 	bl	8000870 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e268      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e015      	b.n	8001a68 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7fe ff18 	bl	8000870 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a46:	f7fe ff13 	bl	8000870 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e253      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x112>
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x140>
 8001a72:	e069      	b.n	8001b48 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	220c      	movs	r2, #12
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x190>
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4013      	ands	r3, r2
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x178>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e229      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	22f8      	movs	r2, #248	; 0xf8
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e041      	b.n	8001b48 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d024      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe feca 	bl	8000870 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7fe fec5 	bl	8000870 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e205      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f1      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	22f8      	movs	r2, #248	; 0xf8
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00da      	lsls	r2, r3, #3
 8001b0e:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	438a      	bics	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7fe fea5 	bl	8000870 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7fe fea0 	bl	8000870 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1e0      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f1      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fe83 	bl	8000870 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe fe7e 	bl	8000870 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1be      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x23c>
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	438a      	bics	r2, r1
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fe69 	bl	8000870 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe fe64 	bl	8000870 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1a4      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d1f1      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x298>
 8001bca:	e0b5      	b.n	8001d38 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2317      	movs	r3, #23
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	055b      	lsls	r3, r3, #21
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d111      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0549      	lsls	r1, r1, #21
 8001bea:	430a      	orrs	r2, r1
 8001bec:	61da      	str	r2, [r3, #28]
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	055b      	lsls	r3, r3, #21
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bfc:	2317      	movs	r3, #23
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d11a      	bne.n	8001c46 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0049      	lsls	r1, r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fe27 	bl	8000870 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7fe fe22 	bl	8000870 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e162      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x334>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x338>
 8001c4e:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_RCC_OscConfig+0x328>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	621a      	str	r2, [r3, #32]
 8001c5a:	e035      	b.n	8001cc8 <HAL_RCC_OscConfig+0x394>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	fffeffff 	.word	0xfffeffff
 8001c64:	fffbffff 	.word	0xfffbffff
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x35a>
 8001c74:	4ba4      	ldr	r3, [pc, #656]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x394>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x37c>
 8001c96:	4b9c      	ldr	r3, [pc, #624]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4b9b      	ldr	r3, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	4b98      	ldr	r3, [pc, #608]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x394>
 8001cb0:	4b95      	ldr	r3, [pc, #596]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4b94      	ldr	r3, [pc, #592]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	4b91      	ldr	r3, [pc, #580]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d014      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fdce 	bl	8000870 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fdc9 	bl	8000870 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a89      	ldr	r2, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x5d8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e108      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	4b86      	ldr	r3, [pc, #536]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x3a6>
 8001cf8:	e013      	b.n	8001d22 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fdb9 	bl	8000870 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7fe fdb4 	bl	8000870 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a7f      	ldr	r2, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x5d8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0f3      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d22:	2317      	movs	r3, #23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d32:	4977      	ldr	r1, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x5dc>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5a:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7fe fd85 	bl	8000870 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d6c:	f7fe fd80 	bl	8000870 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c0      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d88:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	22f8      	movs	r2, #248	; 0xf8
 8001d8e:	4393      	bics	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	00da      	lsls	r2, r3, #3
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9e:	e034      	b.n	8001e0a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	3305      	adds	r3, #5
 8001da6:	d111      	bne.n	8001dcc <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001da8:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dac:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dae:	2104      	movs	r1, #4
 8001db0:	438a      	bics	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001db4:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	22f8      	movs	r2, #248	; 0xf8
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	00da      	lsls	r2, r3, #3
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	e01e      	b.n	8001e0a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fd44 	bl	8000870 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dee:	f7fe fd3f 	bl	8000870 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e07f      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d100      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
 8001e12:	e074      	b.n	8001efe <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	220c      	movs	r2, #12
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d100      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4ee>
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d14c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e30:	4938      	ldr	r1, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0x5e0>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fd1b 	bl	8000870 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fd16 	bl	8000870 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e056      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	220f      	movs	r2, #15
 8001e64:	4393      	bics	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <HAL_RCC_OscConfig+0x5e4>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0449      	lsls	r1, r1, #17
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fce9 	bl	8000870 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fce4 	bl	8000870 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e024      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	049b      	lsls	r3, r3, #18
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x570>
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001eca:	4912      	ldr	r1, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x5e0>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fcce 	bl	8000870 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe fcc9 	bl	8000870 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x5d4>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	049b      	lsls	r3, r3, #18
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a6>
 8001ef8:	e001      	b.n	8001efe <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b006      	add	sp, #24
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	efffffff 	.word	0xefffffff
 8001f14:	feffffff 	.word	0xfeffffff
 8001f18:	ffc2ffff 	.word	0xffc2ffff

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d911      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f38:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	4b64      	ldr	r3, [pc, #400]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b6      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	22f0      	movs	r2, #240	; 0xf0
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x6a>
 8001f84:	e067      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	d114      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e095      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	049b      	lsls	r3, r3, #18
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e089      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e082      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc4:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4393      	bics	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fc4a 	bl	8000870 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe fc41 	bl	8000870 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a39      	ldr	r2, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e065      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	220c      	movs	r2, #12
 8002004:	4013      	ands	r3, r2
 8002006:	2b04      	cmp	r3, #4
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
 800200a:	e024      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d11b      	bne.n	800204c <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	e009      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe fc2b 	bl	8000870 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e04f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	220c      	movs	r2, #12
 8002030:	4013      	ands	r3, r2
 8002032:	2b08      	cmp	r3, #8
 8002034:	d1ef      	bne.n	8002016 <HAL_RCC_ClockConfig+0xfa>
 8002036:	e00e      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7fe fc1a 	bl	8000870 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e03e      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	220c      	movs	r2, #12
 8002052:	4013      	ands	r3, r2
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d211      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4393      	bics	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e020      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	0001      	movs	r1, r0
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	220f      	movs	r2, #15
 80020b4:	4013      	ands	r3, r2
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	000a      	movs	r2, r1
 80020bc:	40da      	lsrs	r2, r3
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7fe fbac 	bl	8000820 <HAL_InitTick>
  
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	00001388 	.word	0x00001388
 80020e0:	fffff8ff 	.word	0xfffff8ff
 80020e4:	0800375c 	.word	0x0800375c
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08f      	sub	sp, #60	; 0x3c
 80020f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020f2:	2314      	movs	r3, #20
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020fa:	c313      	stmia	r3!, {r0, r1, r4}
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002104:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002106:	c313      	stmia	r3!, {r0, r1, r4}
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	220c      	movs	r2, #12
 800212a:	4013      	ands	r3, r2
 800212c:	2b04      	cmp	r3, #4
 800212e:	d002      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x4a>
 8002130:	2b08      	cmp	r3, #8
 8002132:	d003      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x50>
 8002134:	e02d      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213a:	e02d      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	220f      	movs	r2, #15
 8002142:	4013      	ands	r3, r2
 8002144:	2214      	movs	r2, #20
 8002146:	18ba      	adds	r2, r7, r2
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	220f      	movs	r2, #15
 8002152:	4013      	ands	r3, r2
 8002154:	1d3a      	adds	r2, r7, #4
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800215a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002166:	4812      	ldr	r0, [pc, #72]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002168:	f7fd ffce 	bl	8000108 <__udivsi3>
 800216c:	0003      	movs	r3, r0
 800216e:	001a      	movs	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	4353      	muls	r3, r2
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
 8002176:	e009      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	000a      	movs	r2, r1
 800217c:	0152      	lsls	r2, r2, #5
 800217e:	1a52      	subs	r2, r2, r1
 8002180:	0193      	lsls	r3, r2, #6
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	185b      	adds	r3, r3, r1
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002196:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b00f      	add	sp, #60	; 0x3c
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	0800367c 	.word	0x0800367c
 80021a8:	0800368c 	.word	0x0800368c
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021cc:	f7ff fff2 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d0:	0001      	movs	r1, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	2207      	movs	r2, #7
 80021da:	4013      	ands	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	40d9      	lsrs	r1, r3
 80021e2:	000b      	movs	r3, r1
}    
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	0800376c 	.word	0x0800376c

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	4013      	ands	r3, r2
 800220e:	d100      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002210:	e08f      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2317      	movs	r3, #23
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	4013      	ands	r3, r2
 8002224:	d111      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0549      	lsls	r1, r1, #21
 8002230:	430a      	orrs	r2, r1
 8002232:	61da      	str	r2, [r3, #28]
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	055b      	lsls	r3, r3, #21
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2317      	movs	r3, #23
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d11a      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b49      	ldr	r3, [pc, #292]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0049      	lsls	r1, r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002264:	f7fe fb04 	bl	8000870 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe faff 	bl	8000870 <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e077      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d0f0      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	23c0      	movs	r3, #192	; 0xc0
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d034      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d02c      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	0249      	lsls	r1, r1, #9
 80022c2:	430a      	orrs	r2, r1
 80022c4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022cc:	492d      	ldr	r1, [pc, #180]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	4013      	ands	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fac6 	bl	8000870 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e009      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fac1 	bl	8000870 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e038      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d0f0      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002318:	430a      	orrs	r2, r1
 800231a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800231c:	2317      	movs	r3, #23
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800232c:	4917      	ldr	r1, [pc, #92]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800232e:	400a      	ands	r2, r1
 8002330:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	2203      	movs	r2, #3
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800234c:	430a      	orrs	r2, r1
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	4013      	ands	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	2210      	movs	r2, #16
 8002360:	4393      	bics	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800236a:	430a      	orrs	r2, r1
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b006      	add	sp, #24
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	fffffcff 	.word	0xfffffcff
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	00001388 	.word	0x00001388
 800238c:	efffffff 	.word	0xefffffff

08002390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e08a      	b.n	80024b8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	225d      	movs	r2, #93	; 0x5d
 80023ac:	5c9b      	ldrb	r3, [r3, r2]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	225c      	movs	r2, #92	; 0x5c
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 ffc8 	bl	8003354 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	225d      	movs	r2, #93	; 0x5d
 80023c8:	2102      	movs	r1, #2
 80023ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	23e0      	movs	r3, #224	; 0xe0
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d902      	bls.n	80023ee <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e002      	b.n	80023f4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	23f0      	movs	r3, #240	; 0xf0
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d008      	beq.n	8002412 <HAL_SPI_Init+0x82>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	23e0      	movs	r3, #224	; 0xe0
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	429a      	cmp	r2, r3
 800240a:	d002      	beq.n	8002412 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	23e0      	movs	r3, #224	; 0xe0
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	429a      	cmp	r2, r3
 8002424:	d903      	bls.n	800242e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
 800242c:	e002      	b.n	8002434 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6999      	ldr	r1, [r3, #24]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	400b      	ands	r3, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	431a      	orrs	r2, r3
 8002462:	0011      	movs	r1, r2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	2204      	movs	r2, #4
 8002478:	401a      	ands	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	431a      	orrs	r2, r3
 800248c:	0011      	movs	r1, r2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4907      	ldr	r1, [pc, #28]	; (80024c0 <HAL_SPI_Init+0x130>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	225d      	movs	r2, #93	; 0x5d
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	fffff7ff 	.word	0xfffff7ff

080024c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e047      	b.n	8002566 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2269      	movs	r2, #105	; 0x69
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2268      	movs	r2, #104	; 0x68
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 ff7d 	bl	80033ec <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2269      	movs	r2, #105	; 0x69
 80024f6:	2124      	movs	r1, #36	; 0x24
 80024f8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	438a      	bics	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f831 	bl	8002574 <UART_SetConfig>
 8002512:	0003      	movs	r3, r0
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e024      	b.n	8002566 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f99a 	bl	8002860 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <HAL_UART_Init+0xac>)
 8002538:	400a      	ands	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2108      	movs	r1, #8
 8002548:	438a      	bics	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fa32 	bl	80029c8 <UART_CheckIdleState>
 8002564:	0003      	movs	r3, r0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	fffff7ff 	.word	0xfffff7ff

08002574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002580:	2317      	movs	r3, #23
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2210      	movs	r2, #16
 8002586:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002588:	230a      	movs	r3, #10
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002590:	2314      	movs	r3, #20
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002598:	2313      	movs	r3, #19
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4aa0      	ldr	r2, [pc, #640]	; (8002840 <UART_SetConfig+0x2cc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a9b      	ldr	r2, [pc, #620]	; (8002844 <UART_SetConfig+0x2d0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a93      	ldr	r2, [pc, #588]	; (8002848 <UART_SetConfig+0x2d4>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a8f      	ldr	r2, [pc, #572]	; (800284c <UART_SetConfig+0x2d8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d125      	bne.n	800265e <UART_SetConfig+0xea>
 8002612:	4b8f      	ldr	r3, [pc, #572]	; (8002850 <UART_SetConfig+0x2dc>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	2203      	movs	r2, #3
 8002618:	4013      	ands	r3, r2
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00f      	beq.n	800263e <UART_SetConfig+0xca>
 800261e:	d304      	bcc.n	800262a <UART_SetConfig+0xb6>
 8002620:	2b02      	cmp	r3, #2
 8002622:	d011      	beq.n	8002648 <UART_SetConfig+0xd4>
 8002624:	2b03      	cmp	r3, #3
 8002626:	d005      	beq.n	8002634 <UART_SetConfig+0xc0>
 8002628:	e013      	b.n	8002652 <UART_SetConfig+0xde>
 800262a:	2317      	movs	r3, #23
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e022      	b.n	800267a <UART_SetConfig+0x106>
 8002634:	2317      	movs	r3, #23
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e01d      	b.n	800267a <UART_SetConfig+0x106>
 800263e:	2317      	movs	r3, #23
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2204      	movs	r2, #4
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e018      	b.n	800267a <UART_SetConfig+0x106>
 8002648:	2317      	movs	r3, #23
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2208      	movs	r2, #8
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e013      	b.n	800267a <UART_SetConfig+0x106>
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2210      	movs	r2, #16
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	e00d      	b.n	800267a <UART_SetConfig+0x106>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <UART_SetConfig+0x2e0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d104      	bne.n	8002672 <UART_SetConfig+0xfe>
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e003      	b.n	800267a <UART_SetConfig+0x106>
 8002672:	2317      	movs	r3, #23
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2210      	movs	r2, #16
 8002678:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	429a      	cmp	r2, r3
 8002684:	d000      	beq.n	8002688 <UART_SetConfig+0x114>
 8002686:	e077      	b.n	8002778 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8002688:	2317      	movs	r3, #23
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d01c      	beq.n	80026cc <UART_SetConfig+0x158>
 8002692:	dc02      	bgt.n	800269a <UART_SetConfig+0x126>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <UART_SetConfig+0x130>
 8002698:	e04f      	b.n	800273a <UART_SetConfig+0x1c6>
 800269a:	2b04      	cmp	r3, #4
 800269c:	d027      	beq.n	80026ee <UART_SetConfig+0x17a>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d039      	beq.n	8002716 <UART_SetConfig+0x1a2>
 80026a2:	e04a      	b.n	800273a <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026a4:	f7ff fd90 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 80026a8:	0003      	movs	r3, r0
 80026aa:	005a      	lsls	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	18d2      	adds	r2, r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f7fd fd24 	bl	8000108 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	001a      	movs	r2, r3
 80026c4:	2314      	movs	r3, #20
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	801a      	strh	r2, [r3, #0]
        break;
 80026ca:	e03b      	b.n	8002744 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	4a61      	ldr	r2, [pc, #388]	; (8002858 <UART_SetConfig+0x2e4>)
 80026d4:	189a      	adds	r2, r3, r2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7fd fd13 	bl	8000108 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	001a      	movs	r2, r3
 80026e6:	2314      	movs	r3, #20
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	801a      	strh	r2, [r3, #0]
        break;
 80026ec:	e02a      	b.n	8002744 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026ee:	f7ff fcfd 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80026f2:	0003      	movs	r3, r0
 80026f4:	005a      	lsls	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	18d2      	adds	r2, r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f7fd fcff 	bl	8000108 <__udivsi3>
 800270a:	0003      	movs	r3, r0
 800270c:	001a      	movs	r2, r3
 800270e:	2314      	movs	r3, #20
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	801a      	strh	r2, [r3, #0]
        break;
 8002714:	e016      	b.n	8002744 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0252      	lsls	r2, r2, #9
 8002720:	189a      	adds	r2, r3, r2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0019      	movs	r1, r3
 8002728:	0010      	movs	r0, r2
 800272a:	f7fd fced 	bl	8000108 <__udivsi3>
 800272e:	0003      	movs	r3, r0
 8002730:	001a      	movs	r2, r3
 8002732:	2314      	movs	r3, #20
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	801a      	strh	r2, [r3, #0]
        break;
 8002738:	e004      	b.n	8002744 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800273a:	2313      	movs	r3, #19
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
        break;
 8002742:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002744:	200a      	movs	r0, #10
 8002746:	183b      	adds	r3, r7, r0
 8002748:	2414      	movs	r4, #20
 800274a:	193a      	adds	r2, r7, r4
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	210f      	movs	r1, #15
 8002750:	438a      	bics	r2, r1
 8002752:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002754:	193b      	adds	r3, r7, r4
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	105b      	asrs	r3, r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	2207      	movs	r2, #7
 800275e:	4013      	ands	r3, r2
 8002760:	b299      	uxth	r1, r3
 8002762:	183b      	adds	r3, r7, r0
 8002764:	183a      	adds	r2, r7, r0
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	183a      	adds	r2, r7, r0
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e05b      	b.n	8002830 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8002778:	2317      	movs	r3, #23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d01b      	beq.n	80027ba <UART_SetConfig+0x246>
 8002782:	dc02      	bgt.n	800278a <UART_SetConfig+0x216>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <UART_SetConfig+0x220>
 8002788:	e04d      	b.n	8002826 <UART_SetConfig+0x2b2>
 800278a:	2b04      	cmp	r3, #4
 800278c:	d026      	beq.n	80027dc <UART_SetConfig+0x268>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d037      	beq.n	8002802 <UART_SetConfig+0x28e>
 8002792:	e048      	b.n	8002826 <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002794:	f7ff fd18 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8002798:	0002      	movs	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	18d2      	adds	r2, r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0019      	movs	r1, r3
 80027a8:	0010      	movs	r0, r2
 80027aa:	f7fd fcad 	bl	8000108 <__udivsi3>
 80027ae:	0003      	movs	r3, r0
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
        break;
 80027b8:	e03a      	b.n	8002830 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <UART_SetConfig+0x2e8>)
 80027c2:	189a      	adds	r2, r3, r2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60da      	str	r2, [r3, #12]
        break;
 80027da:	e029      	b.n	8002830 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027dc:	f7ff fc86 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80027e0:	0002      	movs	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	18d2      	adds	r2, r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0019      	movs	r1, r3
 80027f0:	0010      	movs	r0, r2
 80027f2:	f7fd fc89 	bl	8000108 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60da      	str	r2, [r3, #12]
        break;
 8002800:	e016      	b.n	8002830 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0212      	lsls	r2, r2, #8
 800280c:	189a      	adds	r2, r3, r2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0019      	movs	r1, r3
 8002814:	0010      	movs	r0, r2
 8002816:	f7fd fc77 	bl	8000108 <__udivsi3>
 800281a:	0003      	movs	r3, r0
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60da      	str	r2, [r3, #12]
        break;
 8002824:	e004      	b.n	8002830 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002826:	2313      	movs	r3, #19
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
        break;
 800282e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002830:	2313      	movs	r3, #19
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]

}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b007      	add	sp, #28
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	ffff69f3 	.word	0xffff69f3
 8002844:	ffffcfff 	.word	0xffffcfff
 8002848:	fffff4ff 	.word	0xfffff4ff
 800284c:	40013800 	.word	0x40013800
 8002850:	40021000 	.word	0x40021000
 8002854:	40004400 	.word	0x40004400
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d00b      	beq.n	800288a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <UART_AdvFeatureConfig+0x144>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <UART_AdvFeatureConfig+0x148>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2204      	movs	r2, #4
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00b      	beq.n	80028ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a3b      	ldr	r2, [pc, #236]	; (80029ac <UART_AdvFeatureConfig+0x14c>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2208      	movs	r2, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <UART_AdvFeatureConfig+0x150>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
 80028f8:	d00b      	beq.n	8002912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <UART_AdvFeatureConfig+0x154>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2220      	movs	r2, #32
 8002918:	4013      	ands	r3, r2
 800291a:	d00b      	beq.n	8002934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <UART_AdvFeatureConfig+0x158>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	4013      	ands	r3, r2
 800293c:	d01d      	beq.n	800297a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <UART_AdvFeatureConfig+0x15c>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	035b      	lsls	r3, r3, #13
 800295e:	429a      	cmp	r2, r3
 8002960:	d10b      	bne.n	800297a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <UART_AdvFeatureConfig+0x160>)
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	4013      	ands	r3, r2
 8002982:	d00b      	beq.n	800299c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <UART_AdvFeatureConfig+0x164>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  }
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	fffdffff 	.word	0xfffdffff
 80029a8:	fffeffff 	.word	0xfffeffff
 80029ac:	fffbffff 	.word	0xfffbffff
 80029b0:	ffff7fff 	.word	0xffff7fff
 80029b4:	ffffefff 	.word	0xffffefff
 80029b8:	ffffdfff 	.word	0xffffdfff
 80029bc:	ffefffff 	.word	0xffefffff
 80029c0:	ff9fffff 	.word	0xff9fffff
 80029c4:	fff7ffff 	.word	0xfff7ffff

080029c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2269      	movs	r2, #105	; 0x69
 80029da:	2120      	movs	r1, #32
 80029dc:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	226a      	movs	r2, #106	; 0x6a
 80029e2:	2120      	movs	r1, #32
 80029e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2268      	movs	r2, #104	; 0x68
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <initMMA8452Q>:
#include <MMA8452Q.h>


// Initializes accelerometer
// returns 1 if successful else 0
uint8_t initMMA8452Q(uint8_t addr, MMA8452Q_Scale scale, MMA8452Q_Data_Rate rate){
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	0004      	movs	r4, r0
 8002a00:	0008      	movs	r0, r1
 8002a02:	0011      	movs	r1, r2
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	1c22      	adds	r2, r4, #0
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	1c02      	adds	r2, r0, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	1d7b      	adds	r3, r7, #5
 8002a12:	1c0a      	adds	r2, r1, #0
 8002a14:	701a      	strb	r2, [r3, #0]

	// verify device identity
	if (readRegister(WHO_AM_I) != 0x2A){
 8002a16:	200d      	movs	r0, #13
 8002a18:	f000 f99c 	bl	8002d54 <readRegister>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a20:	d001      	beq.n	8002a26 <initMMA8452Q+0x2e>
		return 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e00e      	b.n	8002a44 <initMMA8452Q+0x4c>
	}

	// switch to standby to change registers
	standby();
 8002a26:	f000 f87c 	bl	8002b22 <standby>

	// set the scale and data rate
	setScale(scale);
 8002a2a:	1dbb      	adds	r3, r7, #6
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f80c 	bl	8002a4c <setScale>
	setDataRate(rate);
 8002a34:	1d7b      	adds	r3, r7, #5
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f83f 	bl	8002abc <setDataRate>

	// set the device to active state and return successfully
	active();
 8002a3e:	f000 f886 	bl	8002b4e <active>
	return 1;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b003      	add	sp, #12
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <setScale>:

// sets the full-scale range of the accelerometers
// possible values for scale are SCALE_2G, SCALE_4G, SCALE_8G
void setScale(MMA8452Q_Scale scale){
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	0002      	movs	r2, r0
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	701a      	strb	r2, [r3, #0]
	// set the global scale variable (used to calculate measured data)
	SCALE = scale;
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <setScale+0x6c>)
 8002a5a:	1dfa      	adds	r2, r7, #7
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]

	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8002a60:	f000 f88b 	bl	8002b7a <isActive>
 8002a64:	0003      	movs	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <setScale+0x22>
		standby();
 8002a6a:	f000 f85a 	bl	8002b22 <standby>
	}

	// read config, change scale bits, then re-write register
	uint8_t config = readRegister(XYZ_DATA_CFG);	// read current config
 8002a6e:	200f      	movs	r0, #15
 8002a70:	0005      	movs	r5, r0
 8002a72:	183c      	adds	r4, r7, r0
 8002a74:	200e      	movs	r0, #14
 8002a76:	f000 f96d 	bl	8002d54 <readRegister>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	7023      	strb	r3, [r4, #0]
	config &= 0xFC;									// mask out the scale bits
 8002a7e:	0028      	movs	r0, r5
 8002a80:	183b      	adds	r3, r7, r0
 8002a82:	183a      	adds	r2, r7, r0
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	2103      	movs	r1, #3
 8002a88:	438a      	bics	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]
	config |= (scale >> 2);							// 00 = 2G, 01 = 4G, 10 = 8G
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	b2d9      	uxtb	r1, r3
 8002a94:	183b      	adds	r3, r7, r0
 8002a96:	183a      	adds	r2, r7, r0
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
	writeRegister(XYZ_DATA_CFG, config);			// write config with new scale
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	200e      	movs	r0, #14
 8002aa6:	f000 f941 	bl	8002d2c <writeRegister>

	// return to active state once complete
	active();
 8002aaa:	f000 f850 	bl	8002b4e <active>
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	2000002c 	.word	0x2000002c

08002abc <setDataRate>:

// sets the data rate
void setDataRate(MMA8452Q_Data_Rate data_rate){
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	701a      	strb	r2, [r3, #0]
	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8002ac8:	f000 f857 	bl	8002b7a <isActive>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <setDataRate+0x1a>
		standby();
 8002ad2:	f000 f826 	bl	8002b22 <standby>
	}

	// read control, change rate bits, then re-write register
	uint8_t control = readRegister(CTRL_REG1);		// read current settings
 8002ad6:	200f      	movs	r0, #15
 8002ad8:	0005      	movs	r5, r0
 8002ada:	183c      	adds	r4, r7, r0
 8002adc:	202a      	movs	r0, #42	; 0x2a
 8002ade:	f000 f939 	bl	8002d54 <readRegister>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	7023      	strb	r3, [r4, #0]
	control &= 0xC7;								// mask out the data rate bits
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	183b      	adds	r3, r7, r0
 8002aea:	183a      	adds	r2, r7, r0
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	2138      	movs	r1, #56	; 0x38
 8002af0:	438a      	bics	r2, r1
 8002af2:	701a      	strb	r2, [r3, #0]
	control |= (data_rate << 3);					// shift data rate bits
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	b25a      	sxtb	r2, r3
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b25a      	sxtb	r2, r3
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	701a      	strb	r2, [r3, #0]
	writeRegister(CTRL_REG1, control);				// write settings with new data rate
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	0019      	movs	r1, r3
 8002b10:	202a      	movs	r0, #42	; 0x2a
 8002b12:	f000 f90b 	bl	8002d2c <writeRegister>

	// return to active state once complete
	active();
 8002b16:	f000 f81a 	bl	8002b4e <active>
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}

08002b22 <standby>:

// sets the MMA8452 to standby mode
void standby(void){
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
	// clear the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8002b28:	1dfc      	adds	r4, r7, #7
 8002b2a:	202a      	movs	r0, #42	; 0x2a
 8002b2c:	f000 f912 	bl	8002d54 <readRegister>
 8002b30:	0003      	movs	r3, r0
 8002b32:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control & ~(0x01)));
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	0019      	movs	r1, r3
 8002b40:	202a      	movs	r0, #42	; 0x2a
 8002b42:	f000 f8f3 	bl	8002d2c <writeRegister>
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b003      	add	sp, #12
 8002b4c:	bd90      	pop	{r4, r7, pc}

08002b4e <active>:

// sets the MMA8452 to active mode
void active(void){
 8002b4e:	b590      	push	{r4, r7, lr}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
	// set the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8002b54:	1dfc      	adds	r4, r7, #7
 8002b56:	202a      	movs	r0, #42	; 0x2a
 8002b58:	f000 f8fc 	bl	8002d54 <readRegister>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control | 0x01));
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	202a      	movs	r0, #42	; 0x2a
 8002b6e:	f000 f8dd 	bl	8002d2c <writeRegister>
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b003      	add	sp, #12
 8002b78:	bd90      	pop	{r4, r7, pc}

08002b7a <isActive>:

// returns 1 if in Active state, otherwise returns 0
uint8_t isActive(void){
 8002b7a:	b590      	push	{r4, r7, lr}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
	uint8_t currentState = readRegister(SYSMOD);
 8002b80:	1dfc      	adds	r4, r7, #7
 8002b82:	200b      	movs	r0, #11
 8002b84:	f000 f8e6 	bl	8002d54 <readRegister>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	7023      	strb	r3, [r4, #0]
	currentState &= 0x03;
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	1dfa      	adds	r2, r7, #7
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	2103      	movs	r1, #3
 8002b94:	400a      	ands	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]

	// Wake and Sleep are both active SYSMOD states
	if (currentState == SYSMOD_STANDBY)
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <isActive+0x2a>
		return 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <isActive+0x2c>
	return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b003      	add	sp, #12
 8002bac:	bd90      	pop	{r4, r7, pc}

08002bae <available>:

// checks the status of the MMA8452Q to see if new data is available.
// returns 1 if new data is present otherwise 0
uint8_t available(void){
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	af00      	add	r7, sp, #0
	return (readRegister(STATUS_MMA8452Q) & 0x08) >> 3;
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f000 f8ce 	bl	8002d54 <readRegister>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b2db      	uxtb	r3, r3
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <read>:

// reads calculated acceleration data into global variables: X, Y, Z
void read(void){
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
	uint8_t rawData[6];
	readRegisters(OUT_X_MSB, rawData, 6);
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f000 f8cf 	bl	8002d7c <readRegisters>
	short x = ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	210e      	movs	r1, #14
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	1112      	asrs	r2, r2, #4
 8002bf6:	801a      	strh	r2, [r3, #0]
	short y = ((short)(rawData[2] << 8 | rawData[3])) >> 4;
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	789b      	ldrb	r3, [r3, #2]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	250c      	movs	r5, #12
 8002c0c:	197b      	adds	r3, r7, r5
 8002c0e:	1112      	asrs	r2, r2, #4
 8002c10:	801a      	strh	r2, [r3, #0]
	short z = ((short)(rawData[4] << 8 | rawData[5])) >> 4;
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	795b      	ldrb	r3, [r3, #5]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	260a      	movs	r6, #10
 8002c26:	19bb      	adds	r3, r7, r6
 8002c28:	1112      	asrs	r2, r2, #4
 8002c2a:	801a      	strh	r2, [r3, #0]
	X = (float)x / (float)(1 << 11) * (float)(SCALE);
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2200      	movs	r2, #0
 8002c30:	5e9b      	ldrsh	r3, [r3, r2]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fd38 	bl	80006a8 <__aeabi_i2f>
 8002c38:	1c03      	adds	r3, r0, #0
 8002c3a:	218a      	movs	r1, #138	; 0x8a
 8002c3c:	05c9      	lsls	r1, r1, #23
 8002c3e:	1c18      	adds	r0, r3, #0
 8002c40:	f7fd faee 	bl	8000220 <__aeabi_fdiv>
 8002c44:	1c03      	adds	r3, r0, #0
 8002c46:	1c1c      	adds	r4, r3, #0
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <read+0x110>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd fd75 	bl	800073c <__aeabi_ui2f>
 8002c52:	1c03      	adds	r3, r0, #0
 8002c54:	1c19      	adds	r1, r3, #0
 8002c56:	1c20      	adds	r0, r4, #0
 8002c58:	f7fd fbf4 	bl	8000444 <__aeabi_fmul>
 8002c5c:	1c03      	adds	r3, r0, #0
 8002c5e:	1c1a      	adds	r2, r3, #0
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <read+0x114>)
 8002c62:	601a      	str	r2, [r3, #0]
	Y = (float)y / (float)(1 << 11) * (float)(SCALE);
 8002c64:	197b      	adds	r3, r7, r5
 8002c66:	2200      	movs	r2, #0
 8002c68:	5e9b      	ldrsh	r3, [r3, r2]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7fd fd1c 	bl	80006a8 <__aeabi_i2f>
 8002c70:	1c03      	adds	r3, r0, #0
 8002c72:	218a      	movs	r1, #138	; 0x8a
 8002c74:	05c9      	lsls	r1, r1, #23
 8002c76:	1c18      	adds	r0, r3, #0
 8002c78:	f7fd fad2 	bl	8000220 <__aeabi_fdiv>
 8002c7c:	1c03      	adds	r3, r0, #0
 8002c7e:	1c1c      	adds	r4, r3, #0
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <read+0x110>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7fd fd59 	bl	800073c <__aeabi_ui2f>
 8002c8a:	1c03      	adds	r3, r0, #0
 8002c8c:	1c19      	adds	r1, r3, #0
 8002c8e:	1c20      	adds	r0, r4, #0
 8002c90:	f7fd fbd8 	bl	8000444 <__aeabi_fmul>
 8002c94:	1c03      	adds	r3, r0, #0
 8002c96:	1c1a      	adds	r2, r3, #0
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <read+0x118>)
 8002c9a:	601a      	str	r2, [r3, #0]
	Z = (float)z / (float)(1 << 11) * (float)(SCALE);
 8002c9c:	19bb      	adds	r3, r7, r6
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7fd fd00 	bl	80006a8 <__aeabi_i2f>
 8002ca8:	1c03      	adds	r3, r0, #0
 8002caa:	218a      	movs	r1, #138	; 0x8a
 8002cac:	05c9      	lsls	r1, r1, #23
 8002cae:	1c18      	adds	r0, r3, #0
 8002cb0:	f7fd fab6 	bl	8000220 <__aeabi_fdiv>
 8002cb4:	1c03      	adds	r3, r0, #0
 8002cb6:	1c1c      	adds	r4, r3, #0
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <read+0x110>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fd fd3d 	bl	800073c <__aeabi_ui2f>
 8002cc2:	1c03      	adds	r3, r0, #0
 8002cc4:	1c19      	adds	r1, r3, #0
 8002cc6:	1c20      	adds	r0, r4, #0
 8002cc8:	f7fd fbbc 	bl	8000444 <__aeabi_fmul>
 8002ccc:	1c03      	adds	r3, r0, #0
 8002cce:	1c1a      	adds	r2, r3, #0
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <read+0x11c>)
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b005      	add	sp, #20
 8002cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cdc:	2000002c 	.word	0x2000002c
 8002ce0:	20000030 	.word	0x20000030
 8002ce4:	20000024 	.word	0x20000024
 8002ce8:	20000028 	.word	0x20000028

08002cec <writeRegisters>:

// write an array of "len" bytes ("buffer")
void writeRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af04      	add	r7, sp, #16
 8002cf2:	6039      	str	r1, [r7, #0]
 8002cf4:	0011      	movs	r1, r2
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	1c02      	adds	r2, r0, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	1c0a      	adds	r2, r1, #0
 8002d00:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4807      	ldr	r0, [pc, #28]	; (8002d28 <writeRegisters+0x3c>)
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	9302      	str	r3, [sp, #8]
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	213a      	movs	r1, #58	; 0x3a
 8002d1c:	f7fe f8ac 	bl	8000e78 <HAL_I2C_Mem_Write>
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000034 	.word	0x20000034

08002d2c <writeRegister>:

// write a single byte of data to a register in the MMA8452Q
void writeRegister(MMA8452Q_Register reg, uint8_t data){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0002      	movs	r2, r0
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	1c0a      	adds	r2, r1, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
	writeRegisters(reg, &data, 1);
 8002d3e:	1db9      	adds	r1, r7, #6
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ffd0 	bl	8002cec <writeRegisters>
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <readRegister>:

uint8_t readRegister(MMA8452Q_Register reg){
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	readRegisters(reg, &buffer, 1);
 8002d60:	240f      	movs	r4, #15
 8002d62:	1939      	adds	r1, r7, r4
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f806 	bl	8002d7c <readRegisters>
	return buffer;
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	781b      	ldrb	r3, [r3, #0]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b005      	add	sp, #20
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <readRegisters>:

void readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	6039      	str	r1, [r7, #0]
 8002d84:	0011      	movs	r1, r2
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	1c02      	adds	r2, r0, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	1c0a      	adds	r2, r1, #0
 8002d90:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <readRegisters+0x3c>)
 8002d9a:	230a      	movs	r3, #10
 8002d9c:	9302      	str	r3, [sp, #8]
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2301      	movs	r3, #1
 8002daa:	213a      	movs	r1, #58	; 0x3a
 8002dac:	f7fe f9a4 	bl	80010f8 <HAL_I2C_Mem_Read>
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000034 	.word	0x20000034

08002dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc2:	f7fd fd19 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc6:	f000 f829 	bl	8002e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dca:	f000 f95f 	bl	800308c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002dce:	f000 f87f 	bl	8002ed0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002dd2:	f000 f8bd 	bl	8002f50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002dd6:	f000 f8f9 	bl	8002fcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002dda:	f000 f927 	bl	800302c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initMMA8452Q(MMA8452Q_Address, SCALE_2G, DR_800_Hz);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2102      	movs	r1, #2
 8002de2:	201d      	movs	r0, #29
 8002de4:	f7ff fe08 	bl	80029f8 <initMMA8452Q>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (available()){
 8002de8:	f7ff fee1 	bl	8002bae <available>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d0fb      	beq.n	8002de8 <main+0x2c>
	  		  read();
 8002df0:	f7ff feec 	bl	8002bcc <read>
	  		  float temp_x = X;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <main+0x54>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
	  		  float temp_y = Y;
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <main+0x58>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60bb      	str	r3, [r7, #8]
	  		  float temp_z = Z;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <main+0x5c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	607b      	str	r3, [r7, #4]
	  		  HAL_Delay(200);
 8002e06:	20c8      	movs	r0, #200	; 0xc8
 8002e08:	f7fd fd3c 	bl	8000884 <HAL_Delay>
	  if (available()){
 8002e0c:	e7ec      	b.n	8002de8 <main+0x2c>
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000030 	.word	0x20000030
 8002e14:	20000024 	.word	0x20000024
 8002e18:	20000028 	.word	0x20000028

08002e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b095      	sub	sp, #84	; 0x54
 8002e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e22:	2420      	movs	r4, #32
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	0018      	movs	r0, r3
 8002e28:	2330      	movs	r3, #48	; 0x30
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f000 fc11 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e32:	2310      	movs	r3, #16
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	0018      	movs	r0, r3
 8002e38:	2310      	movs	r3, #16
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f000 fc09 	bl	8003654 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e42:	003b      	movs	r3, r7
 8002e44:	0018      	movs	r0, r3
 8002e46:	2310      	movs	r3, #16
 8002e48:	001a      	movs	r2, r3
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f000 fc02 	bl	8003654 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e50:	0021      	movs	r1, r4
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2210      	movs	r2, #16
 8002e62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fe fd61 	bl	8001934 <HAL_RCC_OscConfig>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002e76:	f000 f9f5 	bl	8003264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2207      	movs	r2, #7
 8002e80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2100      	movs	r1, #0
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff f83f 	bl	8001f1c <HAL_RCC_ClockConfig>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d001      	beq.n	8002ea6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002ea2:	f000 f9df 	bl	8003264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002ea6:	003b      	movs	r3, r7
 8002ea8:	2221      	movs	r2, #33	; 0x21
 8002eaa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002eac:	003b      	movs	r3, r7
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb8:	003b      	movs	r3, r7
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff f99a 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002ec4:	f000 f9ce 	bl	8003264 <Error_Handler>
  }
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b015      	add	sp, #84	; 0x54
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <MX_I2C1_Init+0x78>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <MX_I2C1_Init+0x7c>)
 8002ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7fd ff1d 	bl	8000d4c <HAL_I2C_Init>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f16:	f000 f9a5 	bl	8003264 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fe fc6e 	bl	8001800 <HAL_I2CEx_ConfigAnalogFilter>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f28:	f000 f99c 	bl	8003264 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <MX_I2C1_Init+0x74>)
 8002f2e:	2100      	movs	r1, #0
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fe fcb1 	bl	8001898 <HAL_I2CEx_ConfigDigitalFilter>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d001      	beq.n	8002f3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f3a:	f000 f993 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000034 	.word	0x20000034
 8002f48:	40005400 	.word	0x40005400
 8002f4c:	2000090e 	.word	0x2000090e

08002f50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <MX_SPI1_Init+0x78>)
 8002f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f5c:	2282      	movs	r2, #130	; 0x82
 8002f5e:	0052      	lsls	r2, r2, #1
 8002f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f6a:	22c0      	movs	r2, #192	; 0xc0
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002faa:	2208      	movs	r2, #8
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <MX_SPI1_Init+0x74>)
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff f9ed 	bl	8002390 <HAL_SPI_Init>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fba:	f000 f953 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200000f0 	.word	0x200000f0
 8002fc8:	40013000 	.word	0x40013000

08002fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <MX_USART1_UART_Init+0x5c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fd8:	2296      	movs	r2, #150	; 0x96
 8002fda:	0212      	lsls	r2, r2, #8
 8002fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <MX_USART1_UART_Init+0x58>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <MX_USART1_UART_Init+0x58>)
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fa57 	bl	80024c4 <HAL_UART_Init>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800301a:	f000 f923 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000080 	.word	0x20000080
 8003028:	40013800 	.word	0x40013800

0800302c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <MX_USART2_UART_Init+0x5c>)
 8003034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003038:	2296      	movs	r2, #150	; 0x96
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <MX_USART2_UART_Init+0x58>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003052:	220c      	movs	r2, #12
 8003054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <MX_USART2_UART_Init+0x58>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <MX_USART2_UART_Init+0x58>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <MX_USART2_UART_Init+0x58>)
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fa27 	bl	80024c4 <HAL_UART_Init>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800307a:	f000 f8f3 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000154 	.word	0x20000154
 8003088:	40004400 	.word	0x40004400

0800308c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08b      	sub	sp, #44	; 0x2c
 8003090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	2414      	movs	r4, #20
 8003094:	193b      	adds	r3, r7, r4
 8003096:	0018      	movs	r0, r3
 8003098:	2314      	movs	r3, #20
 800309a:	001a      	movs	r2, r3
 800309c:	2100      	movs	r1, #0
 800309e:	f000 fad9 	bl	8003654 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a2:	4b68      	ldr	r3, [pc, #416]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0309      	lsls	r1, r1, #12
 80030ac:	430a      	orrs	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	4b60      	ldr	r3, [pc, #384]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	03c9      	lsls	r1, r1, #15
 80030c8:	430a      	orrs	r2, r1
 80030ca:	615a      	str	r2, [r3, #20]
 80030cc:	4b5d      	ldr	r3, [pc, #372]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	03db      	lsls	r3, r3, #15
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	4b59      	ldr	r3, [pc, #356]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0289      	lsls	r1, r1, #10
 80030e4:	430a      	orrs	r2, r1
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	4b56      	ldr	r3, [pc, #344]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	029b      	lsls	r3, r3, #10
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	4b52      	ldr	r3, [pc, #328]	; (8003244 <MX_GPIO_Init+0x1b8>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	02c9      	lsls	r1, r1, #11
 8003100:	430a      	orrs	r2, r1
 8003102:	615a      	str	r2, [r3, #20]
 8003104:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <MX_GPIO_Init+0x1b8>)
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	02db      	lsls	r3, r3, #11
 800310c:	4013      	ands	r3, r2
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 8003112:	494d      	ldr	r1, [pc, #308]	; (8003248 <MX_GPIO_Init+0x1bc>)
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <MX_GPIO_Init+0x1c0>)
 8003116:	2200      	movs	r2, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd fdf9 	bl	8000d10 <HAL_GPIO_WritePin>
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE_GPIO_3_GPIO_Port, SPARE_GPIO_3_Pin, GPIO_PIN_RESET);
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <MX_GPIO_Init+0x1c4>)
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd fdf3 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800312a:	494a      	ldr	r1, [pc, #296]	; (8003254 <MX_GPIO_Init+0x1c8>)
 800312c:	2390      	movs	r3, #144	; 0x90
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	2200      	movs	r2, #0
 8003132:	0018      	movs	r0, r3
 8003134:	f7fd fdec 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin, GPIO_PIN_RESET);
 8003138:	23f0      	movs	r3, #240	; 0xf0
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	4846      	ldr	r0, [pc, #280]	; (8003258 <MX_GPIO_Init+0x1cc>)
 800313e:	2200      	movs	r2, #0
 8003140:	0019      	movs	r1, r3
 8003142:	f7fd fde5 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPARE_GPIO_0_Pin SPARE_GPIO_1_Pin SPARE_GPIO_2_Pin LCD_DC_Pin 
                           LCD_CCS_Pin LCD_8BIT_1_Pin LCD_8BIT_5_Pin LCD_8BIT_0_Pin 
                           LCD_8BIT_4_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 8003146:	193b      	adds	r3, r7, r4
 8003148:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <MX_GPIO_Init+0x1bc>)
 800314a:	601a      	str	r2, [r3, #0]
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	193b      	adds	r3, r7, r4
 800314e:	2201      	movs	r2, #1
 8003150:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315e:	193b      	adds	r3, r7, r4
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <MX_GPIO_Init+0x1c0>)
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f7fd fc5f 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_GPIO_3_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_3_Pin;
 800316a:	193b      	adds	r3, r7, r4
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2201      	movs	r2, #1
 8003174:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	193b      	adds	r3, r7, r4
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	193b      	adds	r3, r7, r4
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPARE_GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8003182:	193b      	adds	r3, r7, r4
 8003184:	4a32      	ldr	r2, [pc, #200]	; (8003250 <MX_GPIO_Init+0x1c4>)
 8003186:	0019      	movs	r1, r3
 8003188:	0010      	movs	r0, r2
 800318a:	f7fd fc4d 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_1PPS_Pin */
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 800318e:	193b      	adds	r3, r7, r4
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	193b      	adds	r3, r7, r4
 8003196:	2200      	movs	r2, #0
 8003198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80031a0:	193a      	adds	r2, r7, r4
 80031a2:	2390      	movs	r3, #144	; 0x90
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fd fc3d 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_FORCE_ON_Pin LCD_SEL_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <MX_GPIO_Init+0x1c8>)
 80031b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	2201      	movs	r2, #1
 80031b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	193a      	adds	r2, r7, r4
 80031c8:	2390      	movs	r3, #144	; 0x90
 80031ca:	05db      	lsls	r3, r3, #23
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7fd fc2a 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_YP_Pin LCD_XM_Pin LCD_YM_Pin LCD_XP_Pin */
  GPIO_InitStruct.Pin = LCD_YP_Pin|LCD_XM_Pin|LCD_YM_Pin|LCD_XP_Pin;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <MX_GPIO_Init+0x1d0>)
 80031d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	2203      	movs	r2, #3
 80031de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <MX_GPIO_Init+0x1cc>)
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f7fd fc1b 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_8BIT_3_Pin LCD_8BIT_7_Pin LCD_8BIT_2_Pin LCD_8BIT_6_Pin */
  GPIO_InitStruct.Pin = LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin;
 80031f2:	0021      	movs	r1, r4
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	22f0      	movs	r2, #240	; 0xf0
 80031f8:	0212      	lsls	r2, r2, #8
 80031fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2201      	movs	r2, #1
 8003200:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	000c      	movs	r4, r1
 8003210:	187b      	adds	r3, r7, r1
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <MX_GPIO_Init+0x1cc>)
 8003214:	0019      	movs	r1, r3
 8003216:	0010      	movs	r0, r2
 8003218:	f7fd fc06 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800321c:	0021      	movs	r1, r4
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2260      	movs	r2, #96	; 0x60
 8003222:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <MX_GPIO_Init+0x1d4>)
 8003228:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	187b      	adds	r3, r7, r1
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <MX_GPIO_Init+0x1cc>)
 8003234:	0019      	movs	r1, r3
 8003236:	0010      	movs	r0, r2
 8003238:	f7fd fbf6 	bl	8000a28 <HAL_GPIO_Init>

}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b00b      	add	sp, #44	; 0x2c
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	0000eff0 	.word	0x0000eff0
 800324c:	48000800 	.word	0x48000800
 8003250:	48001400 	.word	0x48001400
 8003254:	00008012 	.word	0x00008012
 8003258:	48000400 	.word	0x48000400
 800325c:	00000407 	.word	0x00000407
 8003260:	10110000 	.word	0x10110000

08003264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_MspInit+0x44>)
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_MspInit+0x44>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_MspInit+0x44>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2201      	movs	r2, #1
 8003288:	4013      	ands	r3, r2
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_MspInit+0x44>)
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_MspInit+0x44>)
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	0549      	lsls	r1, r1, #21
 8003298:	430a      	orrs	r2, r1
 800329a:	61da      	str	r2, [r3, #28]
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_MspInit+0x44>)
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	055b      	lsls	r3, r3, #21
 80032a4:	4013      	ands	r3, r2
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	2314      	movs	r3, #20
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	0018      	movs	r0, r3
 80032c6:	2314      	movs	r3, #20
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f000 f9c2 	bl	8003654 <memset>
  if(hi2c->Instance==I2C1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_I2C_MspInit+0x90>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d132      	bne.n	8003340 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <HAL_I2C_MspInit+0x94>)
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_I2C_MspInit+0x94>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	02c9      	lsls	r1, r1, #11
 80032e4:	430a      	orrs	r2, r1
 80032e6:	615a      	str	r2, [r3, #20]
 80032e8:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_I2C_MspInit+0x94>)
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	02db      	lsls	r3, r3, #11
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin|IMU_SCL_Pin;
 80032f6:	2114      	movs	r1, #20
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	22c0      	movs	r2, #192	; 0xc0
 80032fc:	0052      	lsls	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003300:	187b      	adds	r3, r7, r1
 8003302:	2212      	movs	r2, #18
 8003304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2201      	movs	r2, #1
 800330a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2203      	movs	r2, #3
 8003310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2201      	movs	r2, #1
 8003316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003318:	187b      	adds	r3, r7, r1
 800331a:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <HAL_I2C_MspInit+0x98>)
 800331c:	0019      	movs	r1, r3
 800331e:	0010      	movs	r0, r2
 8003320:	f7fd fb82 	bl	8000a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_I2C_MspInit+0x94>)
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_I2C_MspInit+0x94>)
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	0389      	lsls	r1, r1, #14
 800332e:	430a      	orrs	r2, r1
 8003330:	61da      	str	r2, [r3, #28]
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_I2C_MspInit+0x94>)
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	039b      	lsls	r3, r3, #14
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b00a      	add	sp, #40	; 0x28
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40005400 	.word	0x40005400
 800334c:	40021000 	.word	0x40021000
 8003350:	48000400 	.word	0x48000400

08003354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	2314      	movs	r3, #20
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	0018      	movs	r0, r3
 8003362:	2314      	movs	r3, #20
 8003364:	001a      	movs	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f000 f974 	bl	8003654 <memset>
  if(hspi->Instance==SPI1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_SPI_MspInit+0x90>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d132      	bne.n	80033dc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	0149      	lsls	r1, r1, #5
 8003380:	430a      	orrs	r2, r1
 8003382:	619a      	str	r2, [r3, #24]
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0289      	lsls	r1, r1, #10
 800339c:	430a      	orrs	r2, r1
 800339e:	615a      	str	r2, [r3, #20]
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_SPI_MspInit+0x94>)
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	029b      	lsls	r3, r3, #10
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80033ae:	2114      	movs	r1, #20
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	22e0      	movs	r2, #224	; 0xe0
 80033b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2202      	movs	r2, #2
 80033ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2203      	movs	r2, #3
 80033c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	187a      	adds	r2, r7, r1
 80033d0:	2390      	movs	r3, #144	; 0x90
 80033d2:	05db      	lsls	r3, r3, #23
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fd fb26 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b00a      	add	sp, #40	; 0x28
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40013000 	.word	0x40013000
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	231c      	movs	r3, #28
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f000 f928 	bl	8003654 <memset>
  if(huart->Instance==USART1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <HAL_UART_MspInit+0x104>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d134      	bne.n	8003478 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	01c9      	lsls	r1, r1, #7
 8003418:	430a      	orrs	r2, r1
 800341a:	619a      	str	r2, [r3, #24]
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <HAL_UART_MspInit+0x108>)
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	01db      	lsls	r3, r3, #7
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_UART_MspInit+0x108>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	0289      	lsls	r1, r1, #10
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_UART_MspInit+0x108>)
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	4013      	ands	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8003446:	211c      	movs	r1, #28
 8003448:	187b      	adds	r3, r7, r1
 800344a:	22c0      	movs	r2, #192	; 0xc0
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2202      	movs	r2, #2
 8003454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2203      	movs	r2, #3
 8003460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2201      	movs	r2, #1
 8003466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	187a      	adds	r2, r7, r1
 800346a:	2390      	movs	r3, #144	; 0x90
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f7fd fad9 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003476:	e037      	b.n	80034e8 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_UART_MspInit+0x10c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d132      	bne.n	80034e8 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0289      	lsls	r1, r1, #10
 800348c:	430a      	orrs	r2, r1
 800348e:	61da      	str	r2, [r3, #28]
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_UART_MspInit+0x108>)
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_UART_MspInit+0x108>)
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_UART_MspInit+0x108>)
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	0289      	lsls	r1, r1, #10
 80034a8:	430a      	orrs	r2, r1
 80034aa:	615a      	str	r2, [r3, #20]
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_UART_MspInit+0x108>)
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80034ba:	211c      	movs	r1, #28
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	220c      	movs	r2, #12
 80034c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2202      	movs	r2, #2
 80034c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2203      	movs	r2, #3
 80034d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2201      	movs	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	187a      	adds	r2, r7, r1
 80034dc:	2390      	movs	r3, #144	; 0x90
 80034de:	05db      	lsls	r3, r3, #23
 80034e0:	0011      	movs	r1, r2
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd faa0 	bl	8000a28 <HAL_GPIO_Init>
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b00c      	add	sp, #48	; 0x30
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40004400 	.word	0x40004400

080034fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <HardFault_Handler+0x4>

0800350c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003524:	f7fd f998 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <SystemInit+0x70>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <SystemInit+0x70>)
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <SystemInit+0x70>)
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <SystemInit+0x70>)
 8003546:	4917      	ldr	r1, [pc, #92]	; (80035a4 <SystemInit+0x74>)
 8003548:	400a      	ands	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <SystemInit+0x70>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <SystemInit+0x70>)
 8003552:	4915      	ldr	r1, [pc, #84]	; (80035a8 <SystemInit+0x78>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <SystemInit+0x70>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <SystemInit+0x70>)
 800355e:	4913      	ldr	r1, [pc, #76]	; (80035ac <SystemInit+0x7c>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <SystemInit+0x70>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <SystemInit+0x70>)
 800356a:	4911      	ldr	r1, [pc, #68]	; (80035b0 <SystemInit+0x80>)
 800356c:	400a      	ands	r2, r1
 800356e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <SystemInit+0x70>)
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <SystemInit+0x70>)
 8003576:	210f      	movs	r1, #15
 8003578:	438a      	bics	r2, r1
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <SystemInit+0x70>)
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <SystemInit+0x70>)
 8003582:	490c      	ldr	r1, [pc, #48]	; (80035b4 <SystemInit+0x84>)
 8003584:	400a      	ands	r2, r1
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <SystemInit+0x70>)
 800358a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SystemInit+0x70>)
 800358e:	2101      	movs	r1, #1
 8003590:	438a      	bics	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <SystemInit+0x70>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]

}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08ffb80c 	.word	0x08ffb80c
 80035a8:	fef6ffff 	.word	0xfef6ffff
 80035ac:	fffbffff 	.word	0xfffbffff
 80035b0:	ffc0ffff 	.word	0xffc0ffff
 80035b4:	fffffeec 	.word	0xfffffeec

080035b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035bc:	480d      	ldr	r0, [pc, #52]	; (80035f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80035be:	490e      	ldr	r1, [pc, #56]	; (80035f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c0:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <LoopForever+0xe>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d4:	4c0b      	ldr	r4, [pc, #44]	; (8003604 <LoopForever+0x16>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035e2:	f7ff ffa5 	bl	8003530 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80035e6:	f000 f811 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ea:	f7ff fbe7 	bl	8002dbc <main>

080035ee <LoopForever>:

LoopForever:
    b LoopForever
 80035ee:	e7fe      	b.n	80035ee <LoopForever>
  ldr   r0, =_estack
 80035f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80035f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80035fc:	0800377c 	.word	0x0800377c
  ldr r2, =_sbss
 8003600:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003604:	200001c4 	.word	0x200001c4

08003608 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC1_IRQHandler>
	...

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	2600      	movs	r6, #0
 8003610:	4d0c      	ldr	r5, [pc, #48]	; (8003644 <__libc_init_array+0x38>)
 8003612:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	2600      	movs	r6, #0
 800361e:	f000 f821 	bl	8003664 <_init>
 8003622:	4d0a      	ldr	r5, [pc, #40]	; (800364c <__libc_init_array+0x40>)
 8003624:	4c0a      	ldr	r4, [pc, #40]	; (8003650 <__libc_init_array+0x44>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	00b3      	lsls	r3, r6, #2
 8003632:	58eb      	ldr	r3, [r5, r3]
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	00b3      	lsls	r3, r6, #2
 800363c:	58eb      	ldr	r3, [r5, r3]
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08003774 	.word	0x08003774
 8003648:	08003774 	.word	0x08003774
 800364c:	08003774 	.word	0x08003774
 8003650:	08003778 	.word	0x08003778

08003654 <memset>:
 8003654:	0003      	movs	r3, r0
 8003656:	1812      	adds	r2, r2, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
