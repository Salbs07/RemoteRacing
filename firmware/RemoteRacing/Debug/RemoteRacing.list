
RemoteRacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08007d24  08007d24  00017d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f68  08007f68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f68  08007f68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f68  08007f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f68  08007f68  00017f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001654  2000000c  08007f7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001660  08007f7c  00021660  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c19a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038de  00000000  00000000  0003c1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  00040ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010883  00000000  00000000  00042178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125e4  00000000  00000000  000529fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000545c4  00000000  00000000  00064fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b95a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c0  00000000  00000000  000b9620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d0c 	.word	0x08007d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08007d0c 	.word	0x08007d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe8e 	bl	8000f48 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fdaf 	bl	8000d94 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fbe5 	bl	8000a0c <__aeabi_fsub>
 8000242:	f000 fda7 	bl	8000d94 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5b      	lsrs	r3, r3, #9
 800025a:	0044      	lsls	r4, r0, #1
 800025c:	0fc2      	lsrs	r2, r0, #31
 800025e:	469c      	mov	ip, r3
 8000260:	0048      	lsls	r0, r1, #1
 8000262:	00dd      	lsls	r5, r3, #3
 8000264:	024b      	lsls	r3, r1, #9
 8000266:	0e24      	lsrs	r4, r4, #24
 8000268:	0a5b      	lsrs	r3, r3, #9
 800026a:	0e00      	lsrs	r0, r0, #24
 800026c:	b580      	push	{r7, lr}
 800026e:	4698      	mov	r8, r3
 8000270:	0026      	movs	r6, r4
 8000272:	4691      	mov	r9, r2
 8000274:	0fc9      	lsrs	r1, r1, #31
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	1a27      	subs	r7, r4, r0
 800027a:	428a      	cmp	r2, r1
 800027c:	d029      	beq.n	80002d2 <__aeabi_fadd+0x82>
 800027e:	2f00      	cmp	r7, #0
 8000280:	dd15      	ble.n	80002ae <__aeabi_fadd+0x5e>
 8000282:	2800      	cmp	r0, #0
 8000284:	d14a      	bne.n	800031c <__aeabi_fadd+0xcc>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d000      	beq.n	800028c <__aeabi_fadd+0x3c>
 800028a:	e095      	b.n	80003b8 <__aeabi_fadd+0x168>
 800028c:	08ed      	lsrs	r5, r5, #3
 800028e:	2cff      	cmp	r4, #255	; 0xff
 8000290:	d100      	bne.n	8000294 <__aeabi_fadd+0x44>
 8000292:	e088      	b.n	80003a6 <__aeabi_fadd+0x156>
 8000294:	026b      	lsls	r3, r5, #9
 8000296:	0a5b      	lsrs	r3, r3, #9
 8000298:	b2e6      	uxtb	r6, r4
 800029a:	025b      	lsls	r3, r3, #9
 800029c:	05f6      	lsls	r6, r6, #23
 800029e:	0a58      	lsrs	r0, r3, #9
 80002a0:	4330      	orrs	r0, r6
 80002a2:	07d2      	lsls	r2, r2, #31
 80002a4:	4310      	orrs	r0, r2
 80002a6:	bc0c      	pop	{r2, r3}
 80002a8:	4690      	mov	r8, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002ae:	2f00      	cmp	r7, #0
 80002b0:	d000      	beq.n	80002b4 <__aeabi_fadd+0x64>
 80002b2:	e087      	b.n	80003c4 <__aeabi_fadd+0x174>
 80002b4:	1c60      	adds	r0, r4, #1
 80002b6:	b2c0      	uxtb	r0, r0
 80002b8:	2801      	cmp	r0, #1
 80002ba:	dc00      	bgt.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e0b6      	b.n	800042c <__aeabi_fadd+0x1dc>
 80002be:	1aee      	subs	r6, r5, r3
 80002c0:	0172      	lsls	r2, r6, #5
 80002c2:	d500      	bpl.n	80002c6 <__aeabi_fadd+0x76>
 80002c4:	e0c5      	b.n	8000452 <__aeabi_fadd+0x202>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d13d      	bne.n	8000346 <__aeabi_fadd+0xf6>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2600      	movs	r6, #0
 80002ce:	2300      	movs	r3, #0
 80002d0:	e7e3      	b.n	800029a <__aeabi_fadd+0x4a>
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	dc00      	bgt.n	80002d8 <__aeabi_fadd+0x88>
 80002d6:	e096      	b.n	8000406 <__aeabi_fadd+0x1b6>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d05d      	beq.n	8000398 <__aeabi_fadd+0x148>
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	d060      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	4313      	orrs	r3, r2
 80002e6:	2f1b      	cmp	r7, #27
 80002e8:	dd00      	ble.n	80002ec <__aeabi_fadd+0x9c>
 80002ea:	e0ec      	b.n	80004c6 <__aeabi_fadd+0x276>
 80002ec:	2220      	movs	r2, #32
 80002ee:	1bd2      	subs	r2, r2, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	4093      	lsls	r3, r2
 80002f4:	40f8      	lsrs	r0, r7
 80002f6:	1e5a      	subs	r2, r3, #1
 80002f8:	4193      	sbcs	r3, r2
 80002fa:	4303      	orrs	r3, r0
 80002fc:	18ed      	adds	r5, r5, r3
 80002fe:	016b      	lsls	r3, r5, #5
 8000300:	d57b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000302:	3401      	adds	r4, #1
 8000304:	2cff      	cmp	r4, #255	; 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0xba>
 8000308:	e0b7      	b.n	800047a <__aeabi_fadd+0x22a>
 800030a:	2201      	movs	r2, #1
 800030c:	2607      	movs	r6, #7
 800030e:	402a      	ands	r2, r5
 8000310:	086b      	lsrs	r3, r5, #1
 8000312:	4d9a      	ldr	r5, [pc, #616]	; (800057c <__aeabi_fadd+0x32c>)
 8000314:	401d      	ands	r5, r3
 8000316:	4315      	orrs	r5, r2
 8000318:	402e      	ands	r6, r5
 800031a:	e029      	b.n	8000370 <__aeabi_fadd+0x120>
 800031c:	2cff      	cmp	r4, #255	; 0xff
 800031e:	d0b5      	beq.n	800028c <__aeabi_fadd+0x3c>
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	04d2      	lsls	r2, r2, #19
 8000324:	4313      	orrs	r3, r2
 8000326:	2f1b      	cmp	r7, #27
 8000328:	dd00      	ble.n	800032c <__aeabi_fadd+0xdc>
 800032a:	e0b2      	b.n	8000492 <__aeabi_fadd+0x242>
 800032c:	2220      	movs	r2, #32
 800032e:	1bd2      	subs	r2, r2, r7
 8000330:	0019      	movs	r1, r3
 8000332:	4093      	lsls	r3, r2
 8000334:	40f9      	lsrs	r1, r7
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	4193      	sbcs	r3, r2
 800033a:	430b      	orrs	r3, r1
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	016b      	lsls	r3, r5, #5
 8000340:	d55b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000342:	01ad      	lsls	r5, r5, #6
 8000344:	09ae      	lsrs	r6, r5, #6
 8000346:	0030      	movs	r0, r6
 8000348:	f000 fe08 	bl	8000f5c <__clzsi2>
 800034c:	3805      	subs	r0, #5
 800034e:	4086      	lsls	r6, r0
 8000350:	4284      	cmp	r4, r0
 8000352:	dc65      	bgt.n	8000420 <__aeabi_fadd+0x1d0>
 8000354:	1b04      	subs	r4, r0, r4
 8000356:	0033      	movs	r3, r6
 8000358:	2020      	movs	r0, #32
 800035a:	3401      	adds	r4, #1
 800035c:	40e3      	lsrs	r3, r4
 800035e:	1b04      	subs	r4, r0, r4
 8000360:	40a6      	lsls	r6, r4
 8000362:	1e75      	subs	r5, r6, #1
 8000364:	41ae      	sbcs	r6, r5
 8000366:	4333      	orrs	r3, r6
 8000368:	2607      	movs	r6, #7
 800036a:	001d      	movs	r5, r3
 800036c:	2400      	movs	r4, #0
 800036e:	401e      	ands	r6, r3
 8000370:	2201      	movs	r2, #1
 8000372:	464b      	mov	r3, r9
 8000374:	401a      	ands	r2, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d004      	beq.n	8000384 <__aeabi_fadd+0x134>
 800037a:	230f      	movs	r3, #15
 800037c:	402b      	ands	r3, r5
 800037e:	2b04      	cmp	r3, #4
 8000380:	d000      	beq.n	8000384 <__aeabi_fadd+0x134>
 8000382:	3504      	adds	r5, #4
 8000384:	016b      	lsls	r3, r5, #5
 8000386:	d400      	bmi.n	800038a <__aeabi_fadd+0x13a>
 8000388:	e780      	b.n	800028c <__aeabi_fadd+0x3c>
 800038a:	3401      	adds	r4, #1
 800038c:	b2e6      	uxtb	r6, r4
 800038e:	2cff      	cmp	r4, #255	; 0xff
 8000390:	d12f      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 8000392:	26ff      	movs	r6, #255	; 0xff
 8000394:	2300      	movs	r3, #0
 8000396:	e780      	b.n	800029a <__aeabi_fadd+0x4a>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d152      	bne.n	8000442 <__aeabi_fadd+0x1f2>
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d000      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80003a0:	e774      	b.n	800028c <__aeabi_fadd+0x3c>
 80003a2:	000a      	movs	r2, r1
 80003a4:	08ed      	lsrs	r5, r5, #3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0f3      	beq.n	8000392 <__aeabi_fadd+0x142>
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	03db      	lsls	r3, r3, #15
 80003ae:	432b      	orrs	r3, r5
 80003b0:	025b      	lsls	r3, r3, #9
 80003b2:	0a5b      	lsrs	r3, r3, #9
 80003b4:	26ff      	movs	r6, #255	; 0xff
 80003b6:	e770      	b.n	800029a <__aeabi_fadd+0x4a>
 80003b8:	3f01      	subs	r7, #1
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d0be      	beq.n	800033c <__aeabi_fadd+0xec>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d1b1      	bne.n	8000326 <__aeabi_fadd+0xd6>
 80003c2:	e763      	b.n	800028c <__aeabi_fadd+0x3c>
 80003c4:	2c00      	cmp	r4, #0
 80003c6:	d047      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003c8:	28ff      	cmp	r0, #255	; 0xff
 80003ca:	d069      	beq.n	80004a0 <__aeabi_fadd+0x250>
 80003cc:	2480      	movs	r4, #128	; 0x80
 80003ce:	04e4      	lsls	r4, r4, #19
 80003d0:	427a      	negs	r2, r7
 80003d2:	4325      	orrs	r5, r4
 80003d4:	2a1b      	cmp	r2, #27
 80003d6:	dd00      	ble.n	80003da <__aeabi_fadd+0x18a>
 80003d8:	e0c5      	b.n	8000566 <__aeabi_fadd+0x316>
 80003da:	002c      	movs	r4, r5
 80003dc:	2620      	movs	r6, #32
 80003de:	40d4      	lsrs	r4, r2
 80003e0:	1ab2      	subs	r2, r6, r2
 80003e2:	4095      	lsls	r5, r2
 80003e4:	1e6a      	subs	r2, r5, #1
 80003e6:	4195      	sbcs	r5, r2
 80003e8:	4325      	orrs	r5, r4
 80003ea:	1b5d      	subs	r5, r3, r5
 80003ec:	0004      	movs	r4, r0
 80003ee:	4689      	mov	r9, r1
 80003f0:	e7a5      	b.n	800033e <__aeabi_fadd+0xee>
 80003f2:	01ab      	lsls	r3, r5, #6
 80003f4:	0a5b      	lsrs	r3, r3, #9
 80003f6:	e750      	b.n	800029a <__aeabi_fadd+0x4a>
 80003f8:	2400      	movs	r4, #0
 80003fa:	2201      	movs	r2, #1
 80003fc:	464b      	mov	r3, r9
 80003fe:	401a      	ands	r2, r3
 8000400:	076b      	lsls	r3, r5, #29
 8000402:	d1ba      	bne.n	800037a <__aeabi_fadd+0x12a>
 8000404:	e742      	b.n	800028c <__aeabi_fadd+0x3c>
 8000406:	2f00      	cmp	r7, #0
 8000408:	d13b      	bne.n	8000482 <__aeabi_fadd+0x232>
 800040a:	3401      	adds	r4, #1
 800040c:	b2e0      	uxtb	r0, r4
 800040e:	2801      	cmp	r0, #1
 8000410:	dd4a      	ble.n	80004a8 <__aeabi_fadd+0x258>
 8000412:	2cff      	cmp	r4, #255	; 0xff
 8000414:	d0bd      	beq.n	8000392 <__aeabi_fadd+0x142>
 8000416:	2607      	movs	r6, #7
 8000418:	18ed      	adds	r5, r5, r3
 800041a:	086d      	lsrs	r5, r5, #1
 800041c:	402e      	ands	r6, r5
 800041e:	e7a7      	b.n	8000370 <__aeabi_fadd+0x120>
 8000420:	2307      	movs	r3, #7
 8000422:	4d57      	ldr	r5, [pc, #348]	; (8000580 <__aeabi_fadd+0x330>)
 8000424:	1a24      	subs	r4, r4, r0
 8000426:	4035      	ands	r5, r6
 8000428:	401e      	ands	r6, r3
 800042a:	e7a1      	b.n	8000370 <__aeabi_fadd+0x120>
 800042c:	2c00      	cmp	r4, #0
 800042e:	d11b      	bne.n	8000468 <__aeabi_fadd+0x218>
 8000430:	2d00      	cmp	r5, #0
 8000432:	d16e      	bne.n	8000512 <__aeabi_fadd+0x2c2>
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x1ea>
 8000438:	e09a      	b.n	8000570 <__aeabi_fadd+0x320>
 800043a:	000a      	movs	r2, r1
 800043c:	001d      	movs	r5, r3
 800043e:	003c      	movs	r4, r7
 8000440:	e724      	b.n	800028c <__aeabi_fadd+0x3c>
 8000442:	3f01      	subs	r7, #1
 8000444:	2f00      	cmp	r7, #0
 8000446:	d100      	bne.n	800044a <__aeabi_fadd+0x1fa>
 8000448:	e758      	b.n	80002fc <__aeabi_fadd+0xac>
 800044a:	2cff      	cmp	r4, #255	; 0xff
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x200>
 800044e:	e74a      	b.n	80002e6 <__aeabi_fadd+0x96>
 8000450:	e7a7      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000452:	1b5e      	subs	r6, r3, r5
 8000454:	4689      	mov	r9, r1
 8000456:	e776      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d11c      	bne.n	8000496 <__aeabi_fadd+0x246>
 800045c:	000a      	movs	r2, r1
 800045e:	28ff      	cmp	r0, #255	; 0xff
 8000460:	d01f      	beq.n	80004a2 <__aeabi_fadd+0x252>
 8000462:	0004      	movs	r4, r0
 8000464:	001d      	movs	r5, r3
 8000466:	e711      	b.n	800028c <__aeabi_fadd+0x3c>
 8000468:	2d00      	cmp	r5, #0
 800046a:	d15d      	bne.n	8000528 <__aeabi_fadd+0x2d8>
 800046c:	2b00      	cmp	r3, #0
 800046e:	d117      	bne.n	80004a0 <__aeabi_fadd+0x250>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	2200      	movs	r2, #0
 8000474:	03db      	lsls	r3, r3, #15
 8000476:	26ff      	movs	r6, #255	; 0xff
 8000478:	e70f      	b.n	800029a <__aeabi_fadd+0x4a>
 800047a:	000a      	movs	r2, r1
 800047c:	26ff      	movs	r6, #255	; 0xff
 800047e:	2300      	movs	r3, #0
 8000480:	e70b      	b.n	800029a <__aeabi_fadd+0x4a>
 8000482:	2c00      	cmp	r4, #0
 8000484:	d121      	bne.n	80004ca <__aeabi_fadd+0x27a>
 8000486:	2d00      	cmp	r5, #0
 8000488:	d166      	bne.n	8000558 <__aeabi_fadd+0x308>
 800048a:	28ff      	cmp	r0, #255	; 0xff
 800048c:	d1e9      	bne.n	8000462 <__aeabi_fadd+0x212>
 800048e:	001d      	movs	r5, r3
 8000490:	e787      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000492:	2301      	movs	r3, #1
 8000494:	e752      	b.n	800033c <__aeabi_fadd+0xec>
 8000496:	1c7a      	adds	r2, r7, #1
 8000498:	d0a7      	beq.n	80003ea <__aeabi_fadd+0x19a>
 800049a:	43fa      	mvns	r2, r7
 800049c:	28ff      	cmp	r0, #255	; 0xff
 800049e:	d199      	bne.n	80003d4 <__aeabi_fadd+0x184>
 80004a0:	000a      	movs	r2, r1
 80004a2:	001d      	movs	r5, r3
 80004a4:	24ff      	movs	r4, #255	; 0xff
 80004a6:	e6f1      	b.n	800028c <__aeabi_fadd+0x3c>
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d121      	bne.n	80004f0 <__aeabi_fadd+0x2a0>
 80004ac:	2d00      	cmp	r5, #0
 80004ae:	d04f      	beq.n	8000550 <__aeabi_fadd+0x300>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d04c      	beq.n	800054e <__aeabi_fadd+0x2fe>
 80004b4:	18ed      	adds	r5, r5, r3
 80004b6:	016b      	lsls	r3, r5, #5
 80004b8:	d59e      	bpl.n	80003f8 <__aeabi_fadd+0x1a8>
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <__aeabi_fadd+0x330>)
 80004bc:	3607      	adds	r6, #7
 80004be:	402e      	ands	r6, r5
 80004c0:	2401      	movs	r4, #1
 80004c2:	401d      	ands	r5, r3
 80004c4:	e754      	b.n	8000370 <__aeabi_fadd+0x120>
 80004c6:	2301      	movs	r3, #1
 80004c8:	e718      	b.n	80002fc <__aeabi_fadd+0xac>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d0df      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004ce:	2480      	movs	r4, #128	; 0x80
 80004d0:	04e4      	lsls	r4, r4, #19
 80004d2:	427f      	negs	r7, r7
 80004d4:	4325      	orrs	r5, r4
 80004d6:	2f1b      	cmp	r7, #27
 80004d8:	dc4d      	bgt.n	8000576 <__aeabi_fadd+0x326>
 80004da:	2620      	movs	r6, #32
 80004dc:	1bf6      	subs	r6, r6, r7
 80004de:	002c      	movs	r4, r5
 80004e0:	40b5      	lsls	r5, r6
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	1e6a      	subs	r2, r5, #1
 80004e6:	4195      	sbcs	r5, r2
 80004e8:	4325      	orrs	r5, r4
 80004ea:	18ed      	adds	r5, r5, r3
 80004ec:	0004      	movs	r4, r0
 80004ee:	e706      	b.n	80002fe <__aeabi_fadd+0xae>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d0cc      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2aa>
 80004f8:	e753      	b.n	80003a2 <__aeabi_fadd+0x152>
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4660      	mov	r0, ip
 80004fe:	03c9      	lsls	r1, r1, #15
 8000500:	4208      	tst	r0, r1
 8000502:	d003      	beq.n	800050c <__aeabi_fadd+0x2bc>
 8000504:	4640      	mov	r0, r8
 8000506:	4208      	tst	r0, r1
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x2bc>
 800050a:	001d      	movs	r5, r3
 800050c:	2101      	movs	r1, #1
 800050e:	4011      	ands	r1, r2
 8000510:	e747      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x2c8>
 8000516:	e6b9      	b.n	800028c <__aeabi_fadd+0x3c>
 8000518:	1aea      	subs	r2, r5, r3
 800051a:	0150      	lsls	r0, r2, #5
 800051c:	d525      	bpl.n	800056a <__aeabi_fadd+0x31a>
 800051e:	2607      	movs	r6, #7
 8000520:	1b5d      	subs	r5, r3, r5
 8000522:	402e      	ands	r6, r5
 8000524:	4689      	mov	r9, r1
 8000526:	e723      	b.n	8000370 <__aeabi_fadd+0x120>
 8000528:	24ff      	movs	r4, #255	; 0xff
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x2e0>
 800052e:	e6ad      	b.n	800028c <__aeabi_fadd+0x3c>
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	4660      	mov	r0, ip
 8000534:	03d2      	lsls	r2, r2, #15
 8000536:	4210      	tst	r0, r2
 8000538:	d004      	beq.n	8000544 <__aeabi_fadd+0x2f4>
 800053a:	4640      	mov	r0, r8
 800053c:	4210      	tst	r0, r2
 800053e:	d101      	bne.n	8000544 <__aeabi_fadd+0x2f4>
 8000540:	001d      	movs	r5, r3
 8000542:	4689      	mov	r9, r1
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	24ff      	movs	r4, #255	; 0xff
 800054a:	401a      	ands	r2, r3
 800054c:	e69e      	b.n	800028c <__aeabi_fadd+0x3c>
 800054e:	002b      	movs	r3, r5
 8000550:	08dd      	lsrs	r5, r3, #3
 8000552:	000a      	movs	r2, r1
 8000554:	2400      	movs	r4, #0
 8000556:	e69d      	b.n	8000294 <__aeabi_fadd+0x44>
 8000558:	1c7a      	adds	r2, r7, #1
 800055a:	d0c6      	beq.n	80004ea <__aeabi_fadd+0x29a>
 800055c:	43ff      	mvns	r7, r7
 800055e:	28ff      	cmp	r0, #255	; 0xff
 8000560:	d1b9      	bne.n	80004d6 <__aeabi_fadd+0x286>
 8000562:	001d      	movs	r5, r3
 8000564:	e71d      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000566:	2501      	movs	r5, #1
 8000568:	e73f      	b.n	80003ea <__aeabi_fadd+0x19a>
 800056a:	1e15      	subs	r5, r2, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x320>
 800056e:	e744      	b.n	80003fa <__aeabi_fadd+0x1aa>
 8000570:	2200      	movs	r2, #0
 8000572:	2300      	movs	r3, #0
 8000574:	e691      	b.n	800029a <__aeabi_fadd+0x4a>
 8000576:	2501      	movs	r5, #1
 8000578:	e7b7      	b.n	80004ea <__aeabi_fadd+0x29a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	7dffffff 	.word	0x7dffffff
 8000580:	fbffffff 	.word	0xfbffffff

08000584 <__aeabi_fdiv>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	0244      	lsls	r4, r0, #9
 8000590:	b5e0      	push	{r5, r6, r7, lr}
 8000592:	0046      	lsls	r6, r0, #1
 8000594:	4688      	mov	r8, r1
 8000596:	0a64      	lsrs	r4, r4, #9
 8000598:	0e36      	lsrs	r6, r6, #24
 800059a:	0fc7      	lsrs	r7, r0, #31
 800059c:	2e00      	cmp	r6, #0
 800059e:	d063      	beq.n	8000668 <__aeabi_fdiv+0xe4>
 80005a0:	2eff      	cmp	r6, #255	; 0xff
 80005a2:	d024      	beq.n	80005ee <__aeabi_fdiv+0x6a>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	00e4      	lsls	r4, r4, #3
 80005a8:	04db      	lsls	r3, r3, #19
 80005aa:	431c      	orrs	r4, r3
 80005ac:	2300      	movs	r3, #0
 80005ae:	4699      	mov	r9, r3
 80005b0:	469b      	mov	fp, r3
 80005b2:	3e7f      	subs	r6, #127	; 0x7f
 80005b4:	4643      	mov	r3, r8
 80005b6:	4642      	mov	r2, r8
 80005b8:	025d      	lsls	r5, r3, #9
 80005ba:	0fd2      	lsrs	r2, r2, #31
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	0a6d      	lsrs	r5, r5, #9
 80005c0:	0e1b      	lsrs	r3, r3, #24
 80005c2:	4690      	mov	r8, r2
 80005c4:	4692      	mov	sl, r2
 80005c6:	d065      	beq.n	8000694 <__aeabi_fdiv+0x110>
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	d055      	beq.n	8000678 <__aeabi_fdiv+0xf4>
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	2100      	movs	r1, #0
 80005d0:	00ed      	lsls	r5, r5, #3
 80005d2:	04d2      	lsls	r2, r2, #19
 80005d4:	3b7f      	subs	r3, #127	; 0x7f
 80005d6:	4315      	orrs	r5, r2
 80005d8:	1af6      	subs	r6, r6, r3
 80005da:	4643      	mov	r3, r8
 80005dc:	464a      	mov	r2, r9
 80005de:	407b      	eors	r3, r7
 80005e0:	2a0f      	cmp	r2, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x62>
 80005e4:	e08d      	b.n	8000702 <__aeabi_fdiv+0x17e>
 80005e6:	486d      	ldr	r0, [pc, #436]	; (800079c <__aeabi_fdiv+0x218>)
 80005e8:	0092      	lsls	r2, r2, #2
 80005ea:	5882      	ldr	r2, [r0, r2]
 80005ec:	4697      	mov	pc, r2
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d154      	bne.n	800069c <__aeabi_fdiv+0x118>
 80005f2:	2308      	movs	r3, #8
 80005f4:	4699      	mov	r9, r3
 80005f6:	3b06      	subs	r3, #6
 80005f8:	26ff      	movs	r6, #255	; 0xff
 80005fa:	469b      	mov	fp, r3
 80005fc:	e7da      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80005fe:	2500      	movs	r5, #0
 8000600:	4653      	mov	r3, sl
 8000602:	2902      	cmp	r1, #2
 8000604:	d01b      	beq.n	800063e <__aeabi_fdiv+0xba>
 8000606:	2903      	cmp	r1, #3
 8000608:	d100      	bne.n	800060c <__aeabi_fdiv+0x88>
 800060a:	e0bf      	b.n	800078c <__aeabi_fdiv+0x208>
 800060c:	2901      	cmp	r1, #1
 800060e:	d028      	beq.n	8000662 <__aeabi_fdiv+0xde>
 8000610:	0030      	movs	r0, r6
 8000612:	307f      	adds	r0, #127	; 0x7f
 8000614:	2800      	cmp	r0, #0
 8000616:	dd20      	ble.n	800065a <__aeabi_fdiv+0xd6>
 8000618:	076a      	lsls	r2, r5, #29
 800061a:	d004      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 800061c:	220f      	movs	r2, #15
 800061e:	402a      	ands	r2, r5
 8000620:	2a04      	cmp	r2, #4
 8000622:	d000      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 8000624:	3504      	adds	r5, #4
 8000626:	012a      	lsls	r2, r5, #4
 8000628:	d503      	bpl.n	8000632 <__aeabi_fdiv+0xae>
 800062a:	0030      	movs	r0, r6
 800062c:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <__aeabi_fdiv+0x21c>)
 800062e:	3080      	adds	r0, #128	; 0x80
 8000630:	4015      	ands	r5, r2
 8000632:	28fe      	cmp	r0, #254	; 0xfe
 8000634:	dc03      	bgt.n	800063e <__aeabi_fdiv+0xba>
 8000636:	01ac      	lsls	r4, r5, #6
 8000638:	0a64      	lsrs	r4, r4, #9
 800063a:	b2c2      	uxtb	r2, r0
 800063c:	e001      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	2400      	movs	r4, #0
 8000642:	0264      	lsls	r4, r4, #9
 8000644:	05d2      	lsls	r2, r2, #23
 8000646:	0a60      	lsrs	r0, r4, #9
 8000648:	07db      	lsls	r3, r3, #31
 800064a:	4310      	orrs	r0, r2
 800064c:	4318      	orrs	r0, r3
 800064e:	bc3c      	pop	{r2, r3, r4, r5}
 8000650:	4690      	mov	r8, r2
 8000652:	4699      	mov	r9, r3
 8000654:	46a2      	mov	sl, r4
 8000656:	46ab      	mov	fp, r5
 8000658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800065a:	2201      	movs	r2, #1
 800065c:	1a10      	subs	r0, r2, r0
 800065e:	281b      	cmp	r0, #27
 8000660:	dd7c      	ble.n	800075c <__aeabi_fdiv+0x1d8>
 8000662:	2200      	movs	r2, #0
 8000664:	2400      	movs	r4, #0
 8000666:	e7ec      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000668:	2c00      	cmp	r4, #0
 800066a:	d11d      	bne.n	80006a8 <__aeabi_fdiv+0x124>
 800066c:	2304      	movs	r3, #4
 800066e:	4699      	mov	r9, r3
 8000670:	3b03      	subs	r3, #3
 8000672:	2600      	movs	r6, #0
 8000674:	469b      	mov	fp, r3
 8000676:	e79d      	b.n	80005b4 <__aeabi_fdiv+0x30>
 8000678:	3eff      	subs	r6, #255	; 0xff
 800067a:	2d00      	cmp	r5, #0
 800067c:	d120      	bne.n	80006c0 <__aeabi_fdiv+0x13c>
 800067e:	2102      	movs	r1, #2
 8000680:	4643      	mov	r3, r8
 8000682:	464a      	mov	r2, r9
 8000684:	407b      	eors	r3, r7
 8000686:	430a      	orrs	r2, r1
 8000688:	2a0f      	cmp	r2, #15
 800068a:	d8d8      	bhi.n	800063e <__aeabi_fdiv+0xba>
 800068c:	4845      	ldr	r0, [pc, #276]	; (80007a4 <__aeabi_fdiv+0x220>)
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	5882      	ldr	r2, [r0, r2]
 8000692:	4697      	mov	pc, r2
 8000694:	2d00      	cmp	r5, #0
 8000696:	d119      	bne.n	80006cc <__aeabi_fdiv+0x148>
 8000698:	2101      	movs	r1, #1
 800069a:	e7f1      	b.n	8000680 <__aeabi_fdiv+0xfc>
 800069c:	230c      	movs	r3, #12
 800069e:	4699      	mov	r9, r3
 80006a0:	3b09      	subs	r3, #9
 80006a2:	26ff      	movs	r6, #255	; 0xff
 80006a4:	469b      	mov	fp, r3
 80006a6:	e785      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80006a8:	0020      	movs	r0, r4
 80006aa:	f000 fc57 	bl	8000f5c <__clzsi2>
 80006ae:	2676      	movs	r6, #118	; 0x76
 80006b0:	1f43      	subs	r3, r0, #5
 80006b2:	409c      	lsls	r4, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	4276      	negs	r6, r6
 80006b8:	1a36      	subs	r6, r6, r0
 80006ba:	4699      	mov	r9, r3
 80006bc:	469b      	mov	fp, r3
 80006be:	e779      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80006c0:	464a      	mov	r2, r9
 80006c2:	2303      	movs	r3, #3
 80006c4:	431a      	orrs	r2, r3
 80006c6:	4691      	mov	r9, r2
 80006c8:	2103      	movs	r1, #3
 80006ca:	e786      	b.n	80005da <__aeabi_fdiv+0x56>
 80006cc:	0028      	movs	r0, r5
 80006ce:	f000 fc45 	bl	8000f5c <__clzsi2>
 80006d2:	1f43      	subs	r3, r0, #5
 80006d4:	1836      	adds	r6, r6, r0
 80006d6:	409d      	lsls	r5, r3
 80006d8:	3676      	adds	r6, #118	; 0x76
 80006da:	2100      	movs	r1, #0
 80006dc:	e77d      	b.n	80005da <__aeabi_fdiv+0x56>
 80006de:	2480      	movs	r4, #128	; 0x80
 80006e0:	2300      	movs	r3, #0
 80006e2:	03e4      	lsls	r4, r4, #15
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	e7ac      	b.n	8000642 <__aeabi_fdiv+0xbe>
 80006e8:	2500      	movs	r5, #0
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	03db      	lsls	r3, r3, #15
 80006ee:	421c      	tst	r4, r3
 80006f0:	d028      	beq.n	8000744 <__aeabi_fdiv+0x1c0>
 80006f2:	421d      	tst	r5, r3
 80006f4:	d126      	bne.n	8000744 <__aeabi_fdiv+0x1c0>
 80006f6:	432b      	orrs	r3, r5
 80006f8:	025c      	lsls	r4, r3, #9
 80006fa:	0a64      	lsrs	r4, r4, #9
 80006fc:	4643      	mov	r3, r8
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	e79f      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000702:	0162      	lsls	r2, r4, #5
 8000704:	016c      	lsls	r4, r5, #5
 8000706:	42a2      	cmp	r2, r4
 8000708:	d224      	bcs.n	8000754 <__aeabi_fdiv+0x1d0>
 800070a:	211b      	movs	r1, #27
 800070c:	2500      	movs	r5, #0
 800070e:	3e01      	subs	r6, #1
 8000710:	2701      	movs	r7, #1
 8000712:	0010      	movs	r0, r2
 8000714:	006d      	lsls	r5, r5, #1
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	2800      	cmp	r0, #0
 800071a:	db01      	blt.n	8000720 <__aeabi_fdiv+0x19c>
 800071c:	4294      	cmp	r4, r2
 800071e:	d801      	bhi.n	8000724 <__aeabi_fdiv+0x1a0>
 8000720:	1b12      	subs	r2, r2, r4
 8000722:	433d      	orrs	r5, r7
 8000724:	3901      	subs	r1, #1
 8000726:	2900      	cmp	r1, #0
 8000728:	d1f3      	bne.n	8000712 <__aeabi_fdiv+0x18e>
 800072a:	0014      	movs	r4, r2
 800072c:	1e62      	subs	r2, r4, #1
 800072e:	4194      	sbcs	r4, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	e76d      	b.n	8000610 <__aeabi_fdiv+0x8c>
 8000734:	46ba      	mov	sl, r7
 8000736:	4659      	mov	r1, fp
 8000738:	0025      	movs	r5, r4
 800073a:	4653      	mov	r3, sl
 800073c:	2902      	cmp	r1, #2
 800073e:	d000      	beq.n	8000742 <__aeabi_fdiv+0x1be>
 8000740:	e761      	b.n	8000606 <__aeabi_fdiv+0x82>
 8000742:	e77c      	b.n	800063e <__aeabi_fdiv+0xba>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	431c      	orrs	r4, r3
 800074a:	0264      	lsls	r4, r4, #9
 800074c:	0a64      	lsrs	r4, r4, #9
 800074e:	003b      	movs	r3, r7
 8000750:	22ff      	movs	r2, #255	; 0xff
 8000752:	e776      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000754:	1b12      	subs	r2, r2, r4
 8000756:	211a      	movs	r1, #26
 8000758:	2501      	movs	r5, #1
 800075a:	e7d9      	b.n	8000710 <__aeabi_fdiv+0x18c>
 800075c:	369e      	adds	r6, #158	; 0x9e
 800075e:	002a      	movs	r2, r5
 8000760:	40b5      	lsls	r5, r6
 8000762:	002c      	movs	r4, r5
 8000764:	40c2      	lsrs	r2, r0
 8000766:	1e65      	subs	r5, r4, #1
 8000768:	41ac      	sbcs	r4, r5
 800076a:	4314      	orrs	r4, r2
 800076c:	0762      	lsls	r2, r4, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fdiv+0x1f6>
 8000770:	220f      	movs	r2, #15
 8000772:	4022      	ands	r2, r4
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fdiv+0x1f6>
 8000778:	3404      	adds	r4, #4
 800077a:	0162      	lsls	r2, r4, #5
 800077c:	d403      	bmi.n	8000786 <__aeabi_fdiv+0x202>
 800077e:	01a4      	lsls	r4, r4, #6
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	2200      	movs	r2, #0
 8000784:	e75d      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000786:	2201      	movs	r2, #1
 8000788:	2400      	movs	r4, #0
 800078a:	e75a      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800078c:	2480      	movs	r4, #128	; 0x80
 800078e:	03e4      	lsls	r4, r4, #15
 8000790:	432c      	orrs	r4, r5
 8000792:	0264      	lsls	r4, r4, #9
 8000794:	0a64      	lsrs	r4, r4, #9
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	e753      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	08007e08 	.word	0x08007e08
 80007a0:	f7ffffff 	.word	0xf7ffffff
 80007a4:	08007e48 	.word	0x08007e48

080007a8 <__aeabi_fmul>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464e      	mov	r6, r9
 80007ac:	4657      	mov	r7, sl
 80007ae:	4645      	mov	r5, r8
 80007b0:	46de      	mov	lr, fp
 80007b2:	b5e0      	push	{r5, r6, r7, lr}
 80007b4:	0243      	lsls	r3, r0, #9
 80007b6:	0a5b      	lsrs	r3, r3, #9
 80007b8:	0045      	lsls	r5, r0, #1
 80007ba:	b083      	sub	sp, #12
 80007bc:	1c0f      	adds	r7, r1, #0
 80007be:	4699      	mov	r9, r3
 80007c0:	0e2d      	lsrs	r5, r5, #24
 80007c2:	0fc6      	lsrs	r6, r0, #31
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d057      	beq.n	8000878 <__aeabi_fmul+0xd0>
 80007c8:	2dff      	cmp	r5, #255	; 0xff
 80007ca:	d024      	beq.n	8000816 <__aeabi_fmul+0x6e>
 80007cc:	2080      	movs	r0, #128	; 0x80
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	04c0      	lsls	r0, r0, #19
 80007d2:	4318      	orrs	r0, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	4681      	mov	r9, r0
 80007d8:	469a      	mov	sl, r3
 80007da:	469b      	mov	fp, r3
 80007dc:	3d7f      	subs	r5, #127	; 0x7f
 80007de:	027c      	lsls	r4, r7, #9
 80007e0:	007a      	lsls	r2, r7, #1
 80007e2:	0ffb      	lsrs	r3, r7, #31
 80007e4:	0a64      	lsrs	r4, r4, #9
 80007e6:	0e12      	lsrs	r2, r2, #24
 80007e8:	4698      	mov	r8, r3
 80007ea:	d023      	beq.n	8000834 <__aeabi_fmul+0x8c>
 80007ec:	2aff      	cmp	r2, #255	; 0xff
 80007ee:	d04b      	beq.n	8000888 <__aeabi_fmul+0xe0>
 80007f0:	00e3      	lsls	r3, r4, #3
 80007f2:	2480      	movs	r4, #128	; 0x80
 80007f4:	2000      	movs	r0, #0
 80007f6:	04e4      	lsls	r4, r4, #19
 80007f8:	3a7f      	subs	r2, #127	; 0x7f
 80007fa:	431c      	orrs	r4, r3
 80007fc:	18ad      	adds	r5, r5, r2
 80007fe:	1c6b      	adds	r3, r5, #1
 8000800:	4647      	mov	r7, r8
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	4653      	mov	r3, sl
 8000806:	4077      	eors	r7, r6
 8000808:	003a      	movs	r2, r7
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d848      	bhi.n	80008a0 <__aeabi_fmul+0xf8>
 800080e:	497d      	ldr	r1, [pc, #500]	; (8000a04 <__aeabi_fmul+0x25c>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58cb      	ldr	r3, [r1, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fmul+0x74>
 800081a:	e085      	b.n	8000928 <__aeabi_fmul+0x180>
 800081c:	3308      	adds	r3, #8
 800081e:	469a      	mov	sl, r3
 8000820:	3b06      	subs	r3, #6
 8000822:	469b      	mov	fp, r3
 8000824:	027c      	lsls	r4, r7, #9
 8000826:	007a      	lsls	r2, r7, #1
 8000828:	0ffb      	lsrs	r3, r7, #31
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	0e12      	lsrs	r2, r2, #24
 8000830:	4698      	mov	r8, r3
 8000832:	d1db      	bne.n	80007ec <__aeabi_fmul+0x44>
 8000834:	2c00      	cmp	r4, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fmul+0x92>
 8000838:	e090      	b.n	800095c <__aeabi_fmul+0x1b4>
 800083a:	4652      	mov	r2, sl
 800083c:	2301      	movs	r3, #1
 800083e:	431a      	orrs	r2, r3
 8000840:	4692      	mov	sl, r2
 8000842:	2001      	movs	r0, #1
 8000844:	e7db      	b.n	80007fe <__aeabi_fmul+0x56>
 8000846:	464c      	mov	r4, r9
 8000848:	4658      	mov	r0, fp
 800084a:	0017      	movs	r7, r2
 800084c:	2802      	cmp	r0, #2
 800084e:	d024      	beq.n	800089a <__aeabi_fmul+0xf2>
 8000850:	2803      	cmp	r0, #3
 8000852:	d100      	bne.n	8000856 <__aeabi_fmul+0xae>
 8000854:	e0cf      	b.n	80009f6 <__aeabi_fmul+0x24e>
 8000856:	2200      	movs	r2, #0
 8000858:	2300      	movs	r3, #0
 800085a:	2801      	cmp	r0, #1
 800085c:	d14d      	bne.n	80008fa <__aeabi_fmul+0x152>
 800085e:	0258      	lsls	r0, r3, #9
 8000860:	05d2      	lsls	r2, r2, #23
 8000862:	0a40      	lsrs	r0, r0, #9
 8000864:	07ff      	lsls	r7, r7, #31
 8000866:	4310      	orrs	r0, r2
 8000868:	4338      	orrs	r0, r7
 800086a:	b003      	add	sp, #12
 800086c:	bc3c      	pop	{r2, r3, r4, r5}
 800086e:	4690      	mov	r8, r2
 8000870:	4699      	mov	r9, r3
 8000872:	46a2      	mov	sl, r4
 8000874:	46ab      	mov	fp, r5
 8000876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000878:	2b00      	cmp	r3, #0
 800087a:	d15b      	bne.n	8000934 <__aeabi_fmul+0x18c>
 800087c:	2304      	movs	r3, #4
 800087e:	469a      	mov	sl, r3
 8000880:	3b03      	subs	r3, #3
 8000882:	2500      	movs	r5, #0
 8000884:	469b      	mov	fp, r3
 8000886:	e7aa      	b.n	80007de <__aeabi_fmul+0x36>
 8000888:	35ff      	adds	r5, #255	; 0xff
 800088a:	2c00      	cmp	r4, #0
 800088c:	d160      	bne.n	8000950 <__aeabi_fmul+0x1a8>
 800088e:	4652      	mov	r2, sl
 8000890:	2302      	movs	r3, #2
 8000892:	431a      	orrs	r2, r3
 8000894:	4692      	mov	sl, r2
 8000896:	2002      	movs	r0, #2
 8000898:	e7b1      	b.n	80007fe <__aeabi_fmul+0x56>
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7de      	b.n	800085e <__aeabi_fmul+0xb6>
 80008a0:	464b      	mov	r3, r9
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	469c      	mov	ip, r3
 80008a6:	464b      	mov	r3, r9
 80008a8:	0426      	lsls	r6, r4, #16
 80008aa:	0c36      	lsrs	r6, r6, #16
 80008ac:	0418      	lsls	r0, r3, #16
 80008ae:	4661      	mov	r1, ip
 80008b0:	0033      	movs	r3, r6
 80008b2:	0c22      	lsrs	r2, r4, #16
 80008b4:	4664      	mov	r4, ip
 80008b6:	0c00      	lsrs	r0, r0, #16
 80008b8:	4343      	muls	r3, r0
 80008ba:	434e      	muls	r6, r1
 80008bc:	4350      	muls	r0, r2
 80008be:	4354      	muls	r4, r2
 80008c0:	1980      	adds	r0, r0, r6
 80008c2:	0c1a      	lsrs	r2, r3, #16
 80008c4:	1812      	adds	r2, r2, r0
 80008c6:	4296      	cmp	r6, r2
 80008c8:	d903      	bls.n	80008d2 <__aeabi_fmul+0x12a>
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	0249      	lsls	r1, r1, #9
 80008ce:	468c      	mov	ip, r1
 80008d0:	4464      	add	r4, ip
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	0c1b      	lsrs	r3, r3, #16
 80008d6:	0410      	lsls	r0, r2, #16
 80008d8:	18c0      	adds	r0, r0, r3
 80008da:	0183      	lsls	r3, r0, #6
 80008dc:	1e5e      	subs	r6, r3, #1
 80008de:	41b3      	sbcs	r3, r6
 80008e0:	0e80      	lsrs	r0, r0, #26
 80008e2:	4318      	orrs	r0, r3
 80008e4:	0c13      	lsrs	r3, r2, #16
 80008e6:	191b      	adds	r3, r3, r4
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	4303      	orrs	r3, r0
 80008ec:	001c      	movs	r4, r3
 80008ee:	0123      	lsls	r3, r4, #4
 80008f0:	d579      	bpl.n	80009e6 <__aeabi_fmul+0x23e>
 80008f2:	2301      	movs	r3, #1
 80008f4:	0862      	lsrs	r2, r4, #1
 80008f6:	401c      	ands	r4, r3
 80008f8:	4314      	orrs	r4, r2
 80008fa:	9a01      	ldr	r2, [sp, #4]
 80008fc:	327f      	adds	r2, #127	; 0x7f
 80008fe:	2a00      	cmp	r2, #0
 8000900:	dd4d      	ble.n	800099e <__aeabi_fmul+0x1f6>
 8000902:	0763      	lsls	r3, r4, #29
 8000904:	d004      	beq.n	8000910 <__aeabi_fmul+0x168>
 8000906:	230f      	movs	r3, #15
 8000908:	4023      	ands	r3, r4
 800090a:	2b04      	cmp	r3, #4
 800090c:	d000      	beq.n	8000910 <__aeabi_fmul+0x168>
 800090e:	3404      	adds	r4, #4
 8000910:	0123      	lsls	r3, r4, #4
 8000912:	d503      	bpl.n	800091c <__aeabi_fmul+0x174>
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <__aeabi_fmul+0x260>)
 8000916:	9a01      	ldr	r2, [sp, #4]
 8000918:	401c      	ands	r4, r3
 800091a:	3280      	adds	r2, #128	; 0x80
 800091c:	2afe      	cmp	r2, #254	; 0xfe
 800091e:	dcbc      	bgt.n	800089a <__aeabi_fmul+0xf2>
 8000920:	01a3      	lsls	r3, r4, #6
 8000922:	0a5b      	lsrs	r3, r3, #9
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	e79a      	b.n	800085e <__aeabi_fmul+0xb6>
 8000928:	230c      	movs	r3, #12
 800092a:	469a      	mov	sl, r3
 800092c:	3b09      	subs	r3, #9
 800092e:	25ff      	movs	r5, #255	; 0xff
 8000930:	469b      	mov	fp, r3
 8000932:	e754      	b.n	80007de <__aeabi_fmul+0x36>
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb11 	bl	8000f5c <__clzsi2>
 800093a:	464a      	mov	r2, r9
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	2576      	movs	r5, #118	; 0x76
 8000940:	409a      	lsls	r2, r3
 8000942:	2300      	movs	r3, #0
 8000944:	426d      	negs	r5, r5
 8000946:	4691      	mov	r9, r2
 8000948:	1a2d      	subs	r5, r5, r0
 800094a:	469a      	mov	sl, r3
 800094c:	469b      	mov	fp, r3
 800094e:	e746      	b.n	80007de <__aeabi_fmul+0x36>
 8000950:	4652      	mov	r2, sl
 8000952:	2303      	movs	r3, #3
 8000954:	431a      	orrs	r2, r3
 8000956:	4692      	mov	sl, r2
 8000958:	2003      	movs	r0, #3
 800095a:	e750      	b.n	80007fe <__aeabi_fmul+0x56>
 800095c:	0020      	movs	r0, r4
 800095e:	f000 fafd 	bl	8000f5c <__clzsi2>
 8000962:	1f43      	subs	r3, r0, #5
 8000964:	1a2d      	subs	r5, r5, r0
 8000966:	409c      	lsls	r4, r3
 8000968:	3d76      	subs	r5, #118	; 0x76
 800096a:	2000      	movs	r0, #0
 800096c:	e747      	b.n	80007fe <__aeabi_fmul+0x56>
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	2700      	movs	r7, #0
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	e772      	b.n	800085e <__aeabi_fmul+0xb6>
 8000978:	4642      	mov	r2, r8
 800097a:	e766      	b.n	800084a <__aeabi_fmul+0xa2>
 800097c:	464c      	mov	r4, r9
 800097e:	0032      	movs	r2, r6
 8000980:	4658      	mov	r0, fp
 8000982:	e762      	b.n	800084a <__aeabi_fmul+0xa2>
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	464a      	mov	r2, r9
 8000988:	03db      	lsls	r3, r3, #15
 800098a:	421a      	tst	r2, r3
 800098c:	d022      	beq.n	80009d4 <__aeabi_fmul+0x22c>
 800098e:	421c      	tst	r4, r3
 8000990:	d120      	bne.n	80009d4 <__aeabi_fmul+0x22c>
 8000992:	4323      	orrs	r3, r4
 8000994:	025b      	lsls	r3, r3, #9
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	4647      	mov	r7, r8
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	e75f      	b.n	800085e <__aeabi_fmul+0xb6>
 800099e:	2301      	movs	r3, #1
 80009a0:	1a9a      	subs	r2, r3, r2
 80009a2:	2a1b      	cmp	r2, #27
 80009a4:	dc21      	bgt.n	80009ea <__aeabi_fmul+0x242>
 80009a6:	0023      	movs	r3, r4
 80009a8:	9901      	ldr	r1, [sp, #4]
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	319e      	adds	r1, #158	; 0x9e
 80009ae:	408c      	lsls	r4, r1
 80009b0:	001a      	movs	r2, r3
 80009b2:	0023      	movs	r3, r4
 80009b4:	1e5c      	subs	r4, r3, #1
 80009b6:	41a3      	sbcs	r3, r4
 80009b8:	4313      	orrs	r3, r2
 80009ba:	075a      	lsls	r2, r3, #29
 80009bc:	d004      	beq.n	80009c8 <__aeabi_fmul+0x220>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fmul+0x220>
 80009c6:	3304      	adds	r3, #4
 80009c8:	015a      	lsls	r2, r3, #5
 80009ca:	d411      	bmi.n	80009f0 <__aeabi_fmul+0x248>
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	0a5b      	lsrs	r3, r3, #9
 80009d0:	2200      	movs	r2, #0
 80009d2:	e744      	b.n	800085e <__aeabi_fmul+0xb6>
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	464a      	mov	r2, r9
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	4313      	orrs	r3, r2
 80009dc:	025b      	lsls	r3, r3, #9
 80009de:	0a5b      	lsrs	r3, r3, #9
 80009e0:	0037      	movs	r7, r6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	e73b      	b.n	800085e <__aeabi_fmul+0xb6>
 80009e6:	9501      	str	r5, [sp, #4]
 80009e8:	e787      	b.n	80008fa <__aeabi_fmul+0x152>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e736      	b.n	800085e <__aeabi_fmul+0xb6>
 80009f0:	2201      	movs	r2, #1
 80009f2:	2300      	movs	r3, #0
 80009f4:	e733      	b.n	800085e <__aeabi_fmul+0xb6>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	4323      	orrs	r3, r4
 80009fc:	025b      	lsls	r3, r3, #9
 80009fe:	0a5b      	lsrs	r3, r3, #9
 8000a00:	22ff      	movs	r2, #255	; 0xff
 8000a02:	e72c      	b.n	800085e <__aeabi_fmul+0xb6>
 8000a04:	08007e88 	.word	0x08007e88
 8000a08:	f7ffffff 	.word	0xf7ffffff

08000a0c <__aeabi_fsub>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	4647      	mov	r7, r8
 8000a10:	46ce      	mov	lr, r9
 8000a12:	0044      	lsls	r4, r0, #1
 8000a14:	0fc2      	lsrs	r2, r0, #31
 8000a16:	b580      	push	{r7, lr}
 8000a18:	0247      	lsls	r7, r0, #9
 8000a1a:	0248      	lsls	r0, r1, #9
 8000a1c:	0a40      	lsrs	r0, r0, #9
 8000a1e:	4684      	mov	ip, r0
 8000a20:	4666      	mov	r6, ip
 8000a22:	0048      	lsls	r0, r1, #1
 8000a24:	0a7f      	lsrs	r7, r7, #9
 8000a26:	0e24      	lsrs	r4, r4, #24
 8000a28:	00f6      	lsls	r6, r6, #3
 8000a2a:	0025      	movs	r5, r4
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	00fb      	lsls	r3, r7, #3
 8000a30:	0e00      	lsrs	r0, r0, #24
 8000a32:	0fc9      	lsrs	r1, r1, #31
 8000a34:	46b1      	mov	r9, r6
 8000a36:	28ff      	cmp	r0, #255	; 0xff
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x30>
 8000a3a:	e085      	b.n	8000b48 <__aeabi_fsub+0x13c>
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	4071      	eors	r1, r6
 8000a40:	1a26      	subs	r6, r4, r0
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d057      	beq.n	8000af6 <__aeabi_fsub+0xea>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	dd43      	ble.n	8000ad2 <__aeabi_fsub+0xc6>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fsub+0x44>
 8000a4e:	e07f      	b.n	8000b50 <__aeabi_fsub+0x144>
 8000a50:	4649      	mov	r1, r9
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x4c>
 8000a56:	e0aa      	b.n	8000bae <__aeabi_fsub+0x1a2>
 8000a58:	3e01      	subs	r6, #1
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fsub+0x54>
 8000a5e:	e0f7      	b.n	8000c50 <__aeabi_fsub+0x244>
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	015a      	lsls	r2, r3, #5
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_fsub+0x5c>
 8000a66:	e08b      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	099c      	lsrs	r4, r3, #6
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f000 fa75 	bl	8000f5c <__clzsi2>
 8000a72:	3805      	subs	r0, #5
 8000a74:	4084      	lsls	r4, r0
 8000a76:	4285      	cmp	r5, r0
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fsub+0x70>
 8000a7a:	e0d3      	b.n	8000c24 <__aeabi_fsub+0x218>
 8000a7c:	1b45      	subs	r5, r0, r5
 8000a7e:	0023      	movs	r3, r4
 8000a80:	2020      	movs	r0, #32
 8000a82:	3501      	adds	r5, #1
 8000a84:	40eb      	lsrs	r3, r5
 8000a86:	1b45      	subs	r5, r0, r5
 8000a88:	40ac      	lsls	r4, r5
 8000a8a:	1e62      	subs	r2, r4, #1
 8000a8c:	4194      	sbcs	r4, r2
 8000a8e:	4323      	orrs	r3, r4
 8000a90:	2407      	movs	r4, #7
 8000a92:	2500      	movs	r5, #0
 8000a94:	401c      	ands	r4, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	4641      	mov	r1, r8
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d004      	beq.n	8000aaa <__aeabi_fsub+0x9e>
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	4019      	ands	r1, r3
 8000aa4:	2904      	cmp	r1, #4
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_fsub+0x9e>
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	0159      	lsls	r1, r3, #5
 8000aac:	d400      	bmi.n	8000ab0 <__aeabi_fsub+0xa4>
 8000aae:	e080      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000ab0:	3501      	adds	r5, #1
 8000ab2:	b2ec      	uxtb	r4, r5
 8000ab4:	2dff      	cmp	r5, #255	; 0xff
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0xae>
 8000ab8:	e0a3      	b.n	8000c02 <__aeabi_fsub+0x1f6>
 8000aba:	24ff      	movs	r4, #255	; 0xff
 8000abc:	2300      	movs	r3, #0
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	05e4      	lsls	r4, r4, #23
 8000ac2:	0a58      	lsrs	r0, r3, #9
 8000ac4:	07d2      	lsls	r2, r2, #31
 8000ac6:	4320      	orrs	r0, r4
 8000ac8:	4310      	orrs	r0, r2
 8000aca:	bc0c      	pop	{r2, r3}
 8000acc:	4690      	mov	r8, r2
 8000ace:	4699      	mov	r9, r3
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d174      	bne.n	8000bc0 <__aeabi_fsub+0x1b4>
 8000ad6:	1c60      	adds	r0, r4, #1
 8000ad8:	b2c0      	uxtb	r0, r0
 8000ada:	2801      	cmp	r0, #1
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_fsub+0xd4>
 8000ade:	e0a7      	b.n	8000c30 <__aeabi_fsub+0x224>
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1a9c      	subs	r4, r3, r2
 8000ae4:	0162      	lsls	r2, r4, #5
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_fsub+0xde>
 8000ae8:	e0b6      	b.n	8000c58 <__aeabi_fsub+0x24c>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1be      	bne.n	8000a6c <__aeabi_fsub+0x60>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2400      	movs	r4, #0
 8000af2:	2300      	movs	r3, #0
 8000af4:	e7e3      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dc00      	bgt.n	8000afc <__aeabi_fsub+0xf0>
 8000afa:	e085      	b.n	8000c08 <__aeabi_fsub+0x1fc>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d046      	beq.n	8000b8e <__aeabi_fsub+0x182>
 8000b00:	2cff      	cmp	r4, #255	; 0xff
 8000b02:	d049      	beq.n	8000b98 <__aeabi_fsub+0x18c>
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	4648      	mov	r0, r9
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2e1b      	cmp	r6, #27
 8000b12:	dc09      	bgt.n	8000b28 <__aeabi_fsub+0x11c>
 8000b14:	2020      	movs	r0, #32
 8000b16:	464c      	mov	r4, r9
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	4084      	lsls	r4, r0
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	0020      	movs	r0, r4
 8000b20:	40f2      	lsrs	r2, r6
 8000b22:	1e44      	subs	r4, r0, #1
 8000b24:	41a0      	sbcs	r0, r4
 8000b26:	4302      	orrs	r2, r0
 8000b28:	189b      	adds	r3, r3, r2
 8000b2a:	015a      	lsls	r2, r3, #5
 8000b2c:	d528      	bpl.n	8000b80 <__aeabi_fsub+0x174>
 8000b2e:	3501      	adds	r5, #1
 8000b30:	2dff      	cmp	r5, #255	; 0xff
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x12a>
 8000b34:	e0a8      	b.n	8000c88 <__aeabi_fsub+0x27c>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2407      	movs	r4, #7
 8000b3a:	4994      	ldr	r1, [pc, #592]	; (8000d8c <__aeabi_fsub+0x380>)
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	400b      	ands	r3, r1
 8000b42:	4313      	orrs	r3, r2
 8000b44:	401c      	ands	r4, r3
 8000b46:	e7a6      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_fsub+0x142>
 8000b4c:	e778      	b.n	8000a40 <__aeabi_fsub+0x34>
 8000b4e:	e775      	b.n	8000a3c <__aeabi_fsub+0x30>
 8000b50:	2cff      	cmp	r4, #255	; 0xff
 8000b52:	d054      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	4649      	mov	r1, r9
 8000b58:	04d2      	lsls	r2, r2, #19
 8000b5a:	4311      	orrs	r1, r2
 8000b5c:	4689      	mov	r9, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2e1b      	cmp	r6, #27
 8000b62:	dc09      	bgt.n	8000b78 <__aeabi_fsub+0x16c>
 8000b64:	2120      	movs	r1, #32
 8000b66:	4648      	mov	r0, r9
 8000b68:	1b89      	subs	r1, r1, r6
 8000b6a:	4088      	lsls	r0, r1
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	0001      	movs	r1, r0
 8000b70:	40f2      	lsrs	r2, r6
 8000b72:	1e48      	subs	r0, r1, #1
 8000b74:	4181      	sbcs	r1, r0
 8000b76:	430a      	orrs	r2, r1
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	015a      	lsls	r2, r3, #5
 8000b7c:	d500      	bpl.n	8000b80 <__aeabi_fsub+0x174>
 8000b7e:	e773      	b.n	8000a68 <__aeabi_fsub+0x5c>
 8000b80:	2201      	movs	r2, #1
 8000b82:	4641      	mov	r1, r8
 8000b84:	400a      	ands	r2, r1
 8000b86:	0759      	lsls	r1, r3, #29
 8000b88:	d000      	beq.n	8000b8c <__aeabi_fsub+0x180>
 8000b8a:	e789      	b.n	8000aa0 <__aeabi_fsub+0x94>
 8000b8c:	e011      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000b8e:	4648      	mov	r0, r9
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d158      	bne.n	8000c46 <__aeabi_fsub+0x23a>
 8000b94:	2cff      	cmp	r4, #255	; 0xff
 8000b96:	d10c      	bne.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x194>
 8000b9e:	e78c      	b.n	8000aba <__aeabi_fsub+0xae>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4303      	orrs	r3, r0
 8000ba6:	025b      	lsls	r3, r3, #9
 8000ba8:	0a5b      	lsrs	r3, r3, #9
 8000baa:	24ff      	movs	r4, #255	; 0xff
 8000bac:	e787      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000bae:	2cff      	cmp	r4, #255	; 0xff
 8000bb0:	d025      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	2dff      	cmp	r5, #255	; 0xff
 8000bb6:	d0f0      	beq.n	8000b9a <__aeabi_fsub+0x18e>
 8000bb8:	025b      	lsls	r3, r3, #9
 8000bba:	0a5b      	lsrs	r3, r3, #9
 8000bbc:	b2ec      	uxtb	r4, r5
 8000bbe:	e77e      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d04d      	beq.n	8000c60 <__aeabi_fsub+0x254>
 8000bc4:	28ff      	cmp	r0, #255	; 0xff
 8000bc6:	d018      	beq.n	8000bfa <__aeabi_fsub+0x1ee>
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	04e4      	lsls	r4, r4, #19
 8000bcc:	4272      	negs	r2, r6
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	2a1b      	cmp	r2, #27
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_fsub+0x1ca>
 8000bd4:	e0c4      	b.n	8000d60 <__aeabi_fsub+0x354>
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	2520      	movs	r5, #32
 8000bda:	40d4      	lsrs	r4, r2
 8000bdc:	1aaa      	subs	r2, r5, r2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	4193      	sbcs	r3, r2
 8000be4:	4323      	orrs	r3, r4
 8000be6:	464a      	mov	r2, r9
 8000be8:	0005      	movs	r5, r0
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	4688      	mov	r8, r1
 8000bee:	e738      	b.n	8000a62 <__aeabi_fsub+0x56>
 8000bf0:	1c72      	adds	r2, r6, #1
 8000bf2:	d0f8      	beq.n	8000be6 <__aeabi_fsub+0x1da>
 8000bf4:	43f2      	mvns	r2, r6
 8000bf6:	28ff      	cmp	r0, #255	; 0xff
 8000bf8:	d1ea      	bne.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	e7d7      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c02:	019b      	lsls	r3, r3, #6
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	e75a      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d141      	bne.n	8000c90 <__aeabi_fsub+0x284>
 8000c0c:	1c65      	adds	r5, r4, #1
 8000c0e:	b2e9      	uxtb	r1, r5
 8000c10:	2901      	cmp	r1, #1
 8000c12:	dd45      	ble.n	8000ca0 <__aeabi_fsub+0x294>
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x20e>
 8000c18:	e74f      	b.n	8000aba <__aeabi_fsub+0xae>
 8000c1a:	2407      	movs	r4, #7
 8000c1c:	444b      	add	r3, r9
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	401c      	ands	r4, r3
 8000c22:	e738      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000c24:	2207      	movs	r2, #7
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <__aeabi_fsub+0x384>)
 8000c28:	1a2d      	subs	r5, r5, r0
 8000c2a:	4023      	ands	r3, r4
 8000c2c:	4014      	ands	r4, r2
 8000c2e:	e732      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d11d      	bne.n	8000c70 <__aeabi_fsub+0x264>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d17a      	bne.n	8000d2e <__aeabi_fsub+0x322>
 8000c38:	464b      	mov	r3, r9
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x234>
 8000c3e:	e091      	b.n	8000d64 <__aeabi_fsub+0x358>
 8000c40:	000a      	movs	r2, r1
 8000c42:	2500      	movs	r5, #0
 8000c44:	e7b5      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c46:	3e01      	subs	r6, #1
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d119      	bne.n	8000c80 <__aeabi_fsub+0x274>
 8000c4c:	444b      	add	r3, r9
 8000c4e:	e76c      	b.n	8000b2a <__aeabi_fsub+0x11e>
 8000c50:	2cff      	cmp	r4, #255	; 0xff
 8000c52:	d184      	bne.n	8000b5e <__aeabi_fsub+0x152>
 8000c54:	25ff      	movs	r5, #255	; 0xff
 8000c56:	e7ac      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c58:	464a      	mov	r2, r9
 8000c5a:	4688      	mov	r8, r1
 8000c5c:	1ad4      	subs	r4, r2, r3
 8000c5e:	e705      	b.n	8000a6c <__aeabi_fsub+0x60>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1c5      	bne.n	8000bf0 <__aeabi_fsub+0x1e4>
 8000c64:	000a      	movs	r2, r1
 8000c66:	28ff      	cmp	r0, #255	; 0xff
 8000c68:	d0c8      	beq.n	8000bfc <__aeabi_fsub+0x1f0>
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	e7a0      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d149      	bne.n	8000d08 <__aeabi_fsub+0x2fc>
 8000c74:	464b      	mov	r3, r9
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d077      	beq.n	8000d6a <__aeabi_fsub+0x35e>
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	25ff      	movs	r5, #255	; 0xff
 8000c7e:	e798      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c80:	2cff      	cmp	r4, #255	; 0xff
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x27a>
 8000c84:	e743      	b.n	8000b0e <__aeabi_fsub+0x102>
 8000c86:	e787      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000c88:	000a      	movs	r2, r1
 8000c8a:	24ff      	movs	r4, #255	; 0xff
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e716      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d115      	bne.n	8000cc0 <__aeabi_fsub+0x2b4>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d157      	bne.n	8000d48 <__aeabi_fsub+0x33c>
 8000c98:	28ff      	cmp	r0, #255	; 0xff
 8000c9a:	d1e6      	bne.n	8000c6a <__aeabi_fsub+0x25e>
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	e77b      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d120      	bne.n	8000ce6 <__aeabi_fsub+0x2da>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d057      	beq.n	8000d58 <__aeabi_fsub+0x34c>
 8000ca8:	4649      	mov	r1, r9
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d053      	beq.n	8000d56 <__aeabi_fsub+0x34a>
 8000cae:	444b      	add	r3, r9
 8000cb0:	015a      	lsls	r2, r3, #5
 8000cb2:	d568      	bpl.n	8000d86 <__aeabi_fsub+0x37a>
 8000cb4:	2407      	movs	r4, #7
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <__aeabi_fsub+0x384>)
 8000cb8:	401c      	ands	r4, r3
 8000cba:	2501      	movs	r5, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	e6ea      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000cc0:	28ff      	cmp	r0, #255	; 0xff
 8000cc2:	d0eb      	beq.n	8000c9c <__aeabi_fsub+0x290>
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	04d2      	lsls	r2, r2, #19
 8000cc8:	4276      	negs	r6, r6
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	2e1b      	cmp	r6, #27
 8000cce:	dc53      	bgt.n	8000d78 <__aeabi_fsub+0x36c>
 8000cd0:	2520      	movs	r5, #32
 8000cd2:	1bad      	subs	r5, r5, r6
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	40ab      	lsls	r3, r5
 8000cd8:	40f2      	lsrs	r2, r6
 8000cda:	1e5c      	subs	r4, r3, #1
 8000cdc:	41a3      	sbcs	r3, r4
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	444b      	add	r3, r9
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	e721      	b.n	8000b2a <__aeabi_fsub+0x11e>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0d8      	beq.n	8000c9c <__aeabi_fsub+0x290>
 8000cea:	4649      	mov	r1, r9
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x2e6>
 8000cf0:	e752      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	03c9      	lsls	r1, r1, #15
 8000cf6:	420f      	tst	r7, r1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x2f0>
 8000cfa:	e74d      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000cfc:	4660      	mov	r0, ip
 8000cfe:	4208      	tst	r0, r1
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fsub+0x2f8>
 8000d02:	e749      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d04:	464b      	mov	r3, r9
 8000d06:	e747      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d08:	4648      	mov	r0, r9
 8000d0a:	25ff      	movs	r5, #255	; 0xff
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0x306>
 8000d10:	e74f      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	03d2      	lsls	r2, r2, #15
 8000d16:	4217      	tst	r7, r2
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fsub+0x318>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	4210      	tst	r0, r2
 8000d1e:	d101      	bne.n	8000d24 <__aeabi_fsub+0x318>
 8000d20:	464b      	mov	r3, r9
 8000d22:	4688      	mov	r8, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	4641      	mov	r1, r8
 8000d28:	25ff      	movs	r5, #255	; 0xff
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	e741      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d2e:	4648      	mov	r0, r9
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d01f      	beq.n	8000d74 <__aeabi_fsub+0x368>
 8000d34:	1a1a      	subs	r2, r3, r0
 8000d36:	0150      	lsls	r0, r2, #5
 8000d38:	d520      	bpl.n	8000d7c <__aeabi_fsub+0x370>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	2407      	movs	r4, #7
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	401c      	ands	r4, r3
 8000d42:	4688      	mov	r8, r1
 8000d44:	2500      	movs	r5, #0
 8000d46:	e6a6      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000d48:	1c74      	adds	r4, r6, #1
 8000d4a:	d0c9      	beq.n	8000ce0 <__aeabi_fsub+0x2d4>
 8000d4c:	43f6      	mvns	r6, r6
 8000d4e:	28ff      	cmp	r0, #255	; 0xff
 8000d50:	d1bc      	bne.n	8000ccc <__aeabi_fsub+0x2c0>
 8000d52:	464b      	mov	r3, r9
 8000d54:	e720      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d56:	4699      	mov	r9, r3
 8000d58:	464b      	mov	r3, r9
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	e72b      	b.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e740      	b.n	8000be6 <__aeabi_fsub+0x1da>
 8000d64:	2200      	movs	r2, #0
 8000d66:	2300      	movs	r3, #0
 8000d68:	e6a9      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	03db      	lsls	r3, r3, #15
 8000d70:	24ff      	movs	r4, #255	; 0xff
 8000d72:	e6a4      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000d74:	2500      	movs	r5, #0
 8000d76:	e71c      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e7b1      	b.n	8000ce0 <__aeabi_fsub+0x2d4>
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d0f1      	beq.n	8000d64 <__aeabi_fsub+0x358>
 8000d80:	0013      	movs	r3, r2
 8000d82:	2500      	movs	r5, #0
 8000d84:	e6fc      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000d86:	2500      	movs	r5, #0
 8000d88:	e6fa      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	7dffffff 	.word	0x7dffffff
 8000d90:	fbffffff 	.word	0xfbffffff

08000d94 <__aeabi_f2iz>:
 8000d94:	0241      	lsls	r1, r0, #9
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0fc3      	lsrs	r3, r0, #31
 8000d9a:	0a49      	lsrs	r1, r1, #9
 8000d9c:	0e12      	lsrs	r2, r2, #24
 8000d9e:	2000      	movs	r0, #0
 8000da0:	2a7e      	cmp	r2, #126	; 0x7e
 8000da2:	d90d      	bls.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000da4:	2a9d      	cmp	r2, #157	; 0x9d
 8000da6:	d80c      	bhi.n	8000dc2 <__aeabi_f2iz+0x2e>
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	0400      	lsls	r0, r0, #16
 8000dac:	4301      	orrs	r1, r0
 8000dae:	2a95      	cmp	r2, #149	; 0x95
 8000db0:	dc0a      	bgt.n	8000dc8 <__aeabi_f2iz+0x34>
 8000db2:	2096      	movs	r0, #150	; 0x96
 8000db4:	1a82      	subs	r2, r0, r2
 8000db6:	40d1      	lsrs	r1, r2
 8000db8:	4248      	negs	r0, r1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000dbe:	0008      	movs	r0, r1
 8000dc0:	4770      	bx	lr
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <__aeabi_f2iz+0x3c>)
 8000dc4:	1898      	adds	r0, r3, r2
 8000dc6:	e7fb      	b.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000dc8:	3a96      	subs	r2, #150	; 0x96
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	e7f4      	b.n	8000db8 <__aeabi_f2iz+0x24>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	7fffffff 	.word	0x7fffffff

08000dd4 <__aeabi_i2f>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d03d      	beq.n	8000e56 <__aeabi_i2f+0x82>
 8000dda:	17c3      	asrs	r3, r0, #31
 8000ddc:	18c5      	adds	r5, r0, r3
 8000dde:	405d      	eors	r5, r3
 8000de0:	0fc4      	lsrs	r4, r0, #31
 8000de2:	0028      	movs	r0, r5
 8000de4:	f000 f8ba 	bl	8000f5c <__clzsi2>
 8000de8:	229e      	movs	r2, #158	; 0x9e
 8000dea:	1a12      	subs	r2, r2, r0
 8000dec:	2a96      	cmp	r2, #150	; 0x96
 8000dee:	dc07      	bgt.n	8000e00 <__aeabi_i2f+0x2c>
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	2808      	cmp	r0, #8
 8000df4:	dd33      	ble.n	8000e5e <__aeabi_i2f+0x8a>
 8000df6:	3808      	subs	r0, #8
 8000df8:	4085      	lsls	r5, r0
 8000dfa:	0268      	lsls	r0, r5, #9
 8000dfc:	0a40      	lsrs	r0, r0, #9
 8000dfe:	e023      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e00:	2a99      	cmp	r2, #153	; 0x99
 8000e02:	dd0b      	ble.n	8000e1c <__aeabi_i2f+0x48>
 8000e04:	2305      	movs	r3, #5
 8000e06:	0029      	movs	r1, r5
 8000e08:	1a1b      	subs	r3, r3, r0
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	331b      	adds	r3, #27
 8000e10:	409d      	lsls	r5, r3
 8000e12:	002b      	movs	r3, r5
 8000e14:	1e5d      	subs	r5, r3, #1
 8000e16:	41ab      	sbcs	r3, r5
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	000d      	movs	r5, r1
 8000e1c:	2805      	cmp	r0, #5
 8000e1e:	dd01      	ble.n	8000e24 <__aeabi_i2f+0x50>
 8000e20:	1f43      	subs	r3, r0, #5
 8000e22:	409d      	lsls	r5, r3
 8000e24:	002b      	movs	r3, r5
 8000e26:	490f      	ldr	r1, [pc, #60]	; (8000e64 <__aeabi_i2f+0x90>)
 8000e28:	400b      	ands	r3, r1
 8000e2a:	076e      	lsls	r6, r5, #29
 8000e2c:	d009      	beq.n	8000e42 <__aeabi_i2f+0x6e>
 8000e2e:	260f      	movs	r6, #15
 8000e30:	4035      	ands	r5, r6
 8000e32:	2d04      	cmp	r5, #4
 8000e34:	d005      	beq.n	8000e42 <__aeabi_i2f+0x6e>
 8000e36:	3304      	adds	r3, #4
 8000e38:	015d      	lsls	r5, r3, #5
 8000e3a:	d502      	bpl.n	8000e42 <__aeabi_i2f+0x6e>
 8000e3c:	229f      	movs	r2, #159	; 0x9f
 8000e3e:	400b      	ands	r3, r1
 8000e40:	1a12      	subs	r2, r2, r0
 8000e42:	019b      	lsls	r3, r3, #6
 8000e44:	0a58      	lsrs	r0, r3, #9
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	0240      	lsls	r0, r0, #9
 8000e4a:	05d2      	lsls	r2, r2, #23
 8000e4c:	0a40      	lsrs	r0, r0, #9
 8000e4e:	07e4      	lsls	r4, r4, #31
 8000e50:	4310      	orrs	r0, r2
 8000e52:	4320      	orrs	r0, r4
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2400      	movs	r4, #0
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f4      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e5e:	0268      	lsls	r0, r5, #9
 8000e60:	0a40      	lsrs	r0, r0, #9
 8000e62:	e7f1      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e64:	fbffffff 	.word	0xfbffffff

08000e68 <__aeabi_ui2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	1e04      	subs	r4, r0, #0
 8000e6c:	d034      	beq.n	8000ed8 <__aeabi_ui2f+0x70>
 8000e6e:	f000 f875 	bl	8000f5c <__clzsi2>
 8000e72:	229e      	movs	r2, #158	; 0x9e
 8000e74:	1a12      	subs	r2, r2, r0
 8000e76:	2a96      	cmp	r2, #150	; 0x96
 8000e78:	dc07      	bgt.n	8000e8a <__aeabi_ui2f+0x22>
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	2808      	cmp	r0, #8
 8000e7e:	dd2e      	ble.n	8000ede <__aeabi_ui2f+0x76>
 8000e80:	3808      	subs	r0, #8
 8000e82:	4084      	lsls	r4, r0
 8000e84:	0260      	lsls	r0, r4, #9
 8000e86:	0a40      	lsrs	r0, r0, #9
 8000e88:	e021      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000e8a:	2a99      	cmp	r2, #153	; 0x99
 8000e8c:	dd09      	ble.n	8000ea2 <__aeabi_ui2f+0x3a>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	0021      	movs	r1, r4
 8000e92:	331b      	adds	r3, #27
 8000e94:	4099      	lsls	r1, r3
 8000e96:	1e4b      	subs	r3, r1, #1
 8000e98:	4199      	sbcs	r1, r3
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	1a1b      	subs	r3, r3, r0
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	430c      	orrs	r4, r1
 8000ea2:	2805      	cmp	r0, #5
 8000ea4:	dd01      	ble.n	8000eaa <__aeabi_ui2f+0x42>
 8000ea6:	1f43      	subs	r3, r0, #5
 8000ea8:	409c      	lsls	r4, r3
 8000eaa:	0023      	movs	r3, r4
 8000eac:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <__aeabi_ui2f+0x7c>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	0765      	lsls	r5, r4, #29
 8000eb2:	d009      	beq.n	8000ec8 <__aeabi_ui2f+0x60>
 8000eb4:	250f      	movs	r5, #15
 8000eb6:	402c      	ands	r4, r5
 8000eb8:	2c04      	cmp	r4, #4
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_ui2f+0x60>
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	015c      	lsls	r4, r3, #5
 8000ec0:	d502      	bpl.n	8000ec8 <__aeabi_ui2f+0x60>
 8000ec2:	229f      	movs	r2, #159	; 0x9f
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	1a12      	subs	r2, r2, r0
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	0a58      	lsrs	r0, r3, #9
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	0240      	lsls	r0, r0, #9
 8000ed0:	05d2      	lsls	r2, r2, #23
 8000ed2:	0a40      	lsrs	r0, r0, #9
 8000ed4:	4310      	orrs	r0, r2
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	e7f7      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000ede:	0260      	lsls	r0, r4, #9
 8000ee0:	0a40      	lsrs	r0, r0, #9
 8000ee2:	e7f4      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000ee4:	fbffffff 	.word	0xfbffffff

08000ee8 <__aeabi_cfrcmple>:
 8000ee8:	4684      	mov	ip, r0
 8000eea:	1c08      	adds	r0, r1, #0
 8000eec:	4661      	mov	r1, ip
 8000eee:	e7ff      	b.n	8000ef0 <__aeabi_cfcmpeq>

08000ef0 <__aeabi_cfcmpeq>:
 8000ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ef2:	f000 f8c7 	bl	8001084 <__lesf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d401      	bmi.n	8000efe <__aeabi_cfcmpeq+0xe>
 8000efa:	2100      	movs	r1, #0
 8000efc:	42c8      	cmn	r0, r1
 8000efe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f00 <__aeabi_fcmpeq>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	f000 f849 	bl	8000f98 <__eqsf2>
 8000f06:	4240      	negs	r0, r0
 8000f08:	3001      	adds	r0, #1
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <__aeabi_fcmplt>:
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	f000 f8b9 	bl	8001084 <__lesf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	db01      	blt.n	8000f1a <__aeabi_fcmplt+0xe>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)

08000f20 <__aeabi_fcmple>:
 8000f20:	b510      	push	{r4, lr}
 8000f22:	f000 f8af 	bl	8001084 <__lesf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	dd01      	ble.n	8000f2e <__aeabi_fcmple+0xe>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	2001      	movs	r0, #1
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)

08000f34 <__aeabi_fcmpgt>:
 8000f34:	b510      	push	{r4, lr}
 8000f36:	f000 f857 	bl	8000fe8 <__gesf2>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	dc01      	bgt.n	8000f42 <__aeabi_fcmpgt+0xe>
 8000f3e:	2000      	movs	r0, #0
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	2001      	movs	r0, #1
 8000f44:	bd10      	pop	{r4, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)

08000f48 <__aeabi_fcmpge>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	f000 f84d 	bl	8000fe8 <__gesf2>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	da01      	bge.n	8000f56 <__aeabi_fcmpge+0xe>
 8000f52:	2000      	movs	r0, #0
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	2001      	movs	r0, #1
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <__clzsi2>:
 8000f5c:	211c      	movs	r1, #28
 8000f5e:	2301      	movs	r3, #1
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d301      	bcc.n	8000f6a <__clzsi2+0xe>
 8000f66:	0c00      	lsrs	r0, r0, #16
 8000f68:	3910      	subs	r1, #16
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	d301      	bcc.n	8000f74 <__clzsi2+0x18>
 8000f70:	0a00      	lsrs	r0, r0, #8
 8000f72:	3908      	subs	r1, #8
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	4298      	cmp	r0, r3
 8000f78:	d301      	bcc.n	8000f7e <__clzsi2+0x22>
 8000f7a:	0900      	lsrs	r0, r0, #4
 8000f7c:	3904      	subs	r1, #4
 8000f7e:	a202      	add	r2, pc, #8	; (adr r2, 8000f88 <__clzsi2+0x2c>)
 8000f80:	5c10      	ldrb	r0, [r2, r0]
 8000f82:	1840      	adds	r0, r0, r1
 8000f84:	4770      	bx	lr
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	02020304 	.word	0x02020304
 8000f8c:	01010101 	.word	0x01010101
	...

08000f98 <__eqsf2>:
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	0042      	lsls	r2, r0, #1
 8000f9c:	024e      	lsls	r6, r1, #9
 8000f9e:	004c      	lsls	r4, r1, #1
 8000fa0:	0245      	lsls	r5, r0, #9
 8000fa2:	0a6d      	lsrs	r5, r5, #9
 8000fa4:	0e12      	lsrs	r2, r2, #24
 8000fa6:	0fc3      	lsrs	r3, r0, #31
 8000fa8:	0a76      	lsrs	r6, r6, #9
 8000faa:	0e24      	lsrs	r4, r4, #24
 8000fac:	0fc9      	lsrs	r1, r1, #31
 8000fae:	2aff      	cmp	r2, #255	; 0xff
 8000fb0:	d00f      	beq.n	8000fd2 <__eqsf2+0x3a>
 8000fb2:	2cff      	cmp	r4, #255	; 0xff
 8000fb4:	d011      	beq.n	8000fda <__eqsf2+0x42>
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	42a2      	cmp	r2, r4
 8000fba:	d000      	beq.n	8000fbe <__eqsf2+0x26>
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
 8000fbe:	42b5      	cmp	r5, r6
 8000fc0:	d1fc      	bne.n	8000fbc <__eqsf2+0x24>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d00d      	beq.n	8000fe2 <__eqsf2+0x4a>
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d1f8      	bne.n	8000fbc <__eqsf2+0x24>
 8000fca:	0028      	movs	r0, r5
 8000fcc:	1e45      	subs	r5, r0, #1
 8000fce:	41a8      	sbcs	r0, r5
 8000fd0:	e7f4      	b.n	8000fbc <__eqsf2+0x24>
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d1f1      	bne.n	8000fbc <__eqsf2+0x24>
 8000fd8:	e7eb      	b.n	8000fb2 <__eqsf2+0x1a>
 8000fda:	2001      	movs	r0, #1
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d1ed      	bne.n	8000fbc <__eqsf2+0x24>
 8000fe0:	e7e9      	b.n	8000fb6 <__eqsf2+0x1e>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	e7ea      	b.n	8000fbc <__eqsf2+0x24>
 8000fe6:	46c0      	nop			; (mov r8, r8)

08000fe8 <__gesf2>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	004a      	lsls	r2, r1, #1
 8000fec:	024e      	lsls	r6, r1, #9
 8000fee:	0245      	lsls	r5, r0, #9
 8000ff0:	0044      	lsls	r4, r0, #1
 8000ff2:	0a6d      	lsrs	r5, r5, #9
 8000ff4:	0e24      	lsrs	r4, r4, #24
 8000ff6:	0fc3      	lsrs	r3, r0, #31
 8000ff8:	0a76      	lsrs	r6, r6, #9
 8000ffa:	0e12      	lsrs	r2, r2, #24
 8000ffc:	0fc9      	lsrs	r1, r1, #31
 8000ffe:	2cff      	cmp	r4, #255	; 0xff
 8001000:	d015      	beq.n	800102e <__gesf2+0x46>
 8001002:	2aff      	cmp	r2, #255	; 0xff
 8001004:	d00e      	beq.n	8001024 <__gesf2+0x3c>
 8001006:	2c00      	cmp	r4, #0
 8001008:	d115      	bne.n	8001036 <__gesf2+0x4e>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d101      	bne.n	8001012 <__gesf2+0x2a>
 800100e:	2e00      	cmp	r6, #0
 8001010:	d01c      	beq.n	800104c <__gesf2+0x64>
 8001012:	2d00      	cmp	r5, #0
 8001014:	d014      	beq.n	8001040 <__gesf2+0x58>
 8001016:	428b      	cmp	r3, r1
 8001018:	d027      	beq.n	800106a <__gesf2+0x82>
 800101a:	2002      	movs	r0, #2
 800101c:	3b01      	subs	r3, #1
 800101e:	4018      	ands	r0, r3
 8001020:	3801      	subs	r0, #1
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	2e00      	cmp	r6, #0
 8001026:	d0ee      	beq.n	8001006 <__gesf2+0x1e>
 8001028:	2002      	movs	r0, #2
 800102a:	4240      	negs	r0, r0
 800102c:	e7f9      	b.n	8001022 <__gesf2+0x3a>
 800102e:	2d00      	cmp	r5, #0
 8001030:	d1fa      	bne.n	8001028 <__gesf2+0x40>
 8001032:	2aff      	cmp	r2, #255	; 0xff
 8001034:	d00e      	beq.n	8001054 <__gesf2+0x6c>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d10e      	bne.n	8001058 <__gesf2+0x70>
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0ed      	beq.n	800101a <__gesf2+0x32>
 800103e:	e00b      	b.n	8001058 <__gesf2+0x70>
 8001040:	2301      	movs	r3, #1
 8001042:	3901      	subs	r1, #1
 8001044:	4399      	bics	r1, r3
 8001046:	0008      	movs	r0, r1
 8001048:	3001      	adds	r0, #1
 800104a:	e7ea      	b.n	8001022 <__gesf2+0x3a>
 800104c:	2000      	movs	r0, #0
 800104e:	2d00      	cmp	r5, #0
 8001050:	d0e7      	beq.n	8001022 <__gesf2+0x3a>
 8001052:	e7e2      	b.n	800101a <__gesf2+0x32>
 8001054:	2e00      	cmp	r6, #0
 8001056:	d1e7      	bne.n	8001028 <__gesf2+0x40>
 8001058:	428b      	cmp	r3, r1
 800105a:	d1de      	bne.n	800101a <__gesf2+0x32>
 800105c:	4294      	cmp	r4, r2
 800105e:	dd05      	ble.n	800106c <__gesf2+0x84>
 8001060:	2102      	movs	r1, #2
 8001062:	1e58      	subs	r0, r3, #1
 8001064:	4008      	ands	r0, r1
 8001066:	3801      	subs	r0, #1
 8001068:	e7db      	b.n	8001022 <__gesf2+0x3a>
 800106a:	2400      	movs	r4, #0
 800106c:	42a2      	cmp	r2, r4
 800106e:	dc04      	bgt.n	800107a <__gesf2+0x92>
 8001070:	42b5      	cmp	r5, r6
 8001072:	d8d2      	bhi.n	800101a <__gesf2+0x32>
 8001074:	2000      	movs	r0, #0
 8001076:	42b5      	cmp	r5, r6
 8001078:	d2d3      	bcs.n	8001022 <__gesf2+0x3a>
 800107a:	1e58      	subs	r0, r3, #1
 800107c:	2301      	movs	r3, #1
 800107e:	4398      	bics	r0, r3
 8001080:	3001      	adds	r0, #1
 8001082:	e7ce      	b.n	8001022 <__gesf2+0x3a>

08001084 <__lesf2>:
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	0042      	lsls	r2, r0, #1
 8001088:	0244      	lsls	r4, r0, #9
 800108a:	024d      	lsls	r5, r1, #9
 800108c:	0fc3      	lsrs	r3, r0, #31
 800108e:	0048      	lsls	r0, r1, #1
 8001090:	0a64      	lsrs	r4, r4, #9
 8001092:	0e12      	lsrs	r2, r2, #24
 8001094:	0a6d      	lsrs	r5, r5, #9
 8001096:	0e00      	lsrs	r0, r0, #24
 8001098:	0fc9      	lsrs	r1, r1, #31
 800109a:	2aff      	cmp	r2, #255	; 0xff
 800109c:	d012      	beq.n	80010c4 <__lesf2+0x40>
 800109e:	28ff      	cmp	r0, #255	; 0xff
 80010a0:	d00c      	beq.n	80010bc <__lesf2+0x38>
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d112      	bne.n	80010cc <__lesf2+0x48>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d119      	bne.n	80010de <__lesf2+0x5a>
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	d117      	bne.n	80010de <__lesf2+0x5a>
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d02b      	beq.n	800110a <__lesf2+0x86>
 80010b2:	2002      	movs	r0, #2
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4018      	ands	r0, r3
 80010b8:	3801      	subs	r0, #1
 80010ba:	e026      	b.n	800110a <__lesf2+0x86>
 80010bc:	2d00      	cmp	r5, #0
 80010be:	d0f0      	beq.n	80010a2 <__lesf2+0x1e>
 80010c0:	2002      	movs	r0, #2
 80010c2:	e022      	b.n	800110a <__lesf2+0x86>
 80010c4:	2c00      	cmp	r4, #0
 80010c6:	d1fb      	bne.n	80010c0 <__lesf2+0x3c>
 80010c8:	28ff      	cmp	r0, #255	; 0xff
 80010ca:	d01f      	beq.n	800110c <__lesf2+0x88>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d11f      	bne.n	8001110 <__lesf2+0x8c>
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d11d      	bne.n	8001110 <__lesf2+0x8c>
 80010d4:	2002      	movs	r0, #2
 80010d6:	3b01      	subs	r3, #1
 80010d8:	4018      	ands	r0, r3
 80010da:	3801      	subs	r0, #1
 80010dc:	e015      	b.n	800110a <__lesf2+0x86>
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d00e      	beq.n	8001100 <__lesf2+0x7c>
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d1e5      	bne.n	80010b2 <__lesf2+0x2e>
 80010e6:	2200      	movs	r2, #0
 80010e8:	4290      	cmp	r0, r2
 80010ea:	dc04      	bgt.n	80010f6 <__lesf2+0x72>
 80010ec:	42ac      	cmp	r4, r5
 80010ee:	d8e0      	bhi.n	80010b2 <__lesf2+0x2e>
 80010f0:	2000      	movs	r0, #0
 80010f2:	42ac      	cmp	r4, r5
 80010f4:	d209      	bcs.n	800110a <__lesf2+0x86>
 80010f6:	1e58      	subs	r0, r3, #1
 80010f8:	2301      	movs	r3, #1
 80010fa:	4398      	bics	r0, r3
 80010fc:	3001      	adds	r0, #1
 80010fe:	e004      	b.n	800110a <__lesf2+0x86>
 8001100:	2301      	movs	r3, #1
 8001102:	3901      	subs	r1, #1
 8001104:	4399      	bics	r1, r3
 8001106:	0008      	movs	r0, r1
 8001108:	3001      	adds	r0, #1
 800110a:	bd30      	pop	{r4, r5, pc}
 800110c:	2d00      	cmp	r5, #0
 800110e:	d1d7      	bne.n	80010c0 <__lesf2+0x3c>
 8001110:	428b      	cmp	r3, r1
 8001112:	d1ce      	bne.n	80010b2 <__lesf2+0x2e>
 8001114:	4282      	cmp	r2, r0
 8001116:	dde7      	ble.n	80010e8 <__lesf2+0x64>
 8001118:	2102      	movs	r1, #2
 800111a:	1e58      	subs	r0, r3, #1
 800111c:	4008      	ands	r0, r1
 800111e:	3801      	subs	r0, #1
 8001120:	e7f3      	b.n	800110a <__lesf2+0x86>
 8001122:	46c0      	nop			; (mov r8, r8)

08001124 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_Init+0x24>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_Init+0x24>)
 800112e:	2110      	movs	r1, #16
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001134:	2000      	movs	r0, #0
 8001136:	f005 f897 	bl	8006268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f004 ff11 	bl	8005f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	001a      	movs	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	18d2      	adds	r2, r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000000 	.word	0x20000000
 800116c:	20000d6c 	.word	0x20000d6c

08001170 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000d6c 	.word	0x20000d6c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_Delay+0x40>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001a      	movs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	189b      	adds	r3, r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b004      	add	sp, #16
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b7f      	cmp	r3, #127	; 0x7f
 80011da:	d809      	bhi.n	80011f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_EnableIRQ+0x30>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
  }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b7f      	cmp	r3, #127	; 0x7f
 8001210:	d828      	bhi.n	8001264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	33c0      	adds	r3, #192	; 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	589b      	ldr	r3, [r3, r2]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	33c0      	adds	r3, #192	; 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001262:	e031      	b.n	80012c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	230f      	movs	r3, #15
 800126e:	400b      	ands	r3, r1
 8001270:	3b08      	subs	r3, #8
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3306      	adds	r3, #6
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1dfa      	adds	r2, r7, #7
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	2203      	movs	r2, #3
 8001286:	400a      	ands	r2, r1
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	401a      	ands	r2, r3
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	2303      	movs	r3, #3
 80012a6:	4003      	ands	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001c      	movs	r4, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	4023      	ands	r3, r4
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	3306      	adds	r3, #6
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	18c3      	adds	r3, r0, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b003      	add	sp, #12
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	210f      	movs	r1, #15
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	1c02      	adds	r2, r0, #0
 80012e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ff81 	bl	80011fc <__NVIC_SetPriority>
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	0002      	movs	r2, r0
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff ff57 	bl	80011c8 <__NVIC_EnableIRQ>
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e036      	b.n	80013a8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2221      	movs	r2, #33	; 0x21
 800133e:	2102      	movs	r1, #2
 8001340:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_DMA_Init+0x8c>)
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f98c 	bl	80016a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2221      	movs	r2, #33	; 0x21
 800139a:	2101      	movs	r1, #1
 800139c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	2100      	movs	r1, #0
 80013a4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}  
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	ffffc00f 	.word	0xffffc00f

080013b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013c2:	2317      	movs	r3, #23
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2220      	movs	r2, #32
 80013ce:	5c9b      	ldrb	r3, [r3, r2]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Start_IT+0x24>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e04f      	b.n	8001478 <HAL_DMA_Start_IT+0xc4>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2220      	movs	r2, #32
 80013dc:	2101      	movs	r1, #1
 80013de:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2221      	movs	r2, #33	; 0x21
 80013e4:	5c9b      	ldrb	r3, [r3, r2]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d13a      	bne.n	8001462 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2221      	movs	r2, #33	; 0x21
 80013f0:	2102      	movs	r1, #2
 80013f2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	438a      	bics	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f91d 	bl	8001650 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	210e      	movs	r1, #14
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e00f      	b.n	8001450 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	210a      	movs	r1, #10
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2104      	movs	r1, #4
 800144c:	438a      	bics	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e007      	b.n	8001472 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2220      	movs	r2, #32
 8001466:	2100      	movs	r1, #0
 8001468:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800146a:	2317      	movs	r3, #23
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2202      	movs	r2, #2
 8001470:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001472:	2317      	movs	r3, #23
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
} 
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	230f      	movs	r3, #15
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2221      	movs	r2, #33	; 0x21
 8001494:	5c9b      	ldrb	r3, [r3, r2]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d007      	beq.n	80014ac <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e028      	b.n	80014fe <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	210e      	movs	r1, #14
 80014b8:	438a      	bics	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2101      	movs	r1, #1
 80014d6:	4091      	lsls	r1, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2221      	movs	r2, #33	; 0x21
 80014e0:	2101      	movs	r1, #1
 80014e2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	0010      	movs	r0, r2
 80014fc:	4798      	blx	r3
    } 
  }
  return status;
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2204      	movs	r2, #4
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	d024      	beq.n	800157e <HAL_DMA_IRQHandler+0x72>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d020      	beq.n	800157e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2220      	movs	r2, #32
 8001544:	4013      	ands	r3, r2
 8001546:	d107      	bne.n	8001558 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001560:	2104      	movs	r1, #4
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d100      	bne.n	8001572 <HAL_DMA_IRQHandler+0x66>
 8001570:	e06a      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	0010      	movs	r0, r2
 800157a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800157c:	e064      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2202      	movs	r2, #2
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xda>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d027      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2220      	movs	r2, #32
 800159e:	4013      	ands	r3, r2
 80015a0:	d10b      	bne.n	80015ba <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	210a      	movs	r1, #10
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	2101      	movs	r1, #1
 80015b8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	2102      	movs	r1, #2
 80015c4:	4091      	lsls	r1, r2
 80015c6:	000a      	movs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d036      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	0010      	movs	r0, r2
 80015e2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015e4:	e030      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2208      	movs	r2, #8
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	d028      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2208      	movs	r2, #8
 80015fa:	4013      	ands	r3, r2
 80015fc:	d024      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	210e      	movs	r1, #14
 800160a:	438a      	bics	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	2101      	movs	r1, #1
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2221      	movs	r2, #33	; 0x21
 8001628:	2101      	movs	r1, #1
 800162a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	0010      	movs	r0, r2
 8001644:	4798      	blx	r3
    }
   }
}  
 8001646:	e7ff      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	2101      	movs	r1, #1
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d108      	bne.n	8001690 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800168e:	e007      	b.n	80016a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <DMA_CalcBaseAndBitshift+0x30>)
 80016b6:	4694      	mov	ip, r2
 80016b8:	4463      	add	r3, ip
 80016ba:	2114      	movs	r1, #20
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe fd23 	bl	8000108 <__udivsi3>
 80016c2:	0003      	movs	r3, r0
 80016c4:	009a      	lsls	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <DMA_CalcBaseAndBitshift+0x34>)
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	bffdfff8 	.word	0xbffdfff8
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e14f      	b.n	8001990 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <HAL_GPIO_Init+0x28>
 8001706:	e140      	b.n	800198a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d00b      	beq.n	8001728 <HAL_GPIO_Init+0x48>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171c:	2b11      	cmp	r3, #17
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	2201      	movs	r2, #1
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0xea>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	58d3      	ldr	r3, [r2, r3]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2207      	movs	r2, #7
 80017dc:	4013      	ands	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2107      	movs	r1, #7
 80017f6:	400b      	ands	r3, r1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	6939      	ldr	r1, [r7, #16]
 8001810:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	43da      	mvns	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2203      	movs	r2, #3
 8001830:	401a      	ands	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	055b      	lsls	r3, r3, #21
 800184e:	4013      	ands	r3, r2
 8001850:	d100      	bne.n	8001854 <HAL_GPIO_Init+0x174>
 8001852:	e09a      	b.n	800198a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 800185a:	2101      	movs	r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	589b      	ldr	r3, [r3, r2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2203      	movs	r2, #3
 800187e:	4013      	ands	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	2390      	movs	r3, #144	; 0x90
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	429a      	cmp	r2, r3
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x1e2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a44      	ldr	r2, [pc, #272]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x1de>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a43      	ldr	r2, [pc, #268]	; (80019b4 <HAL_GPIO_Init+0x2d4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x1da>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a42      	ldr	r2, [pc, #264]	; (80019b8 <HAL_GPIO_Init+0x2d8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x1d6>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018c2:	2300      	movs	r3, #0
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	2103      	movs	r1, #3
 80018c8:	400a      	ands	r2, r1
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	4013      	ands	r3, r2
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	035b      	lsls	r3, r3, #13
 800194e:	4013      	ands	r3, r2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43da      	mvns	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	039b      	lsls	r3, r3, #14
 8001978:	4013      	ands	r3, r2
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	40da      	lsrs	r2, r3
 8001998:	1e13      	subs	r3, r2, #0
 800199a:	d000      	beq.n	800199e <HAL_GPIO_Init+0x2be>
 800199c:	e6a8      	b.n	80016f0 <HAL_GPIO_Init+0x10>
  } 
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	0008      	movs	r0, r1
 80019ca:	0011      	movs	r1, r2
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	1c02      	adds	r2, r0, #0
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	1c7b      	adds	r3, r7, #1
 80019d4:	1c0a      	adds	r2, r1, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	1c7b      	adds	r3, r7, #1
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e0:	1cbb      	adds	r3, r7, #2
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	1cbb      	adds	r3, r7, #2
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e082      	b.n	8001b14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2241      	movs	r2, #65	; 0x41
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f004 fabf 	bl	8005fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2241      	movs	r2, #65	; 0x41
 8001a2e:	2124      	movs	r1, #36	; 0x24
 8001a30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	438a      	bics	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4934      	ldr	r1, [pc, #208]	; (8001b1c <HAL_I2C_Init+0x120>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4931      	ldr	r1, [pc, #196]	; (8001b20 <HAL_I2C_Init+0x124>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	0209      	lsls	r1, r1, #8
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e007      	b.n	8001a8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2184      	movs	r1, #132	; 0x84
 8001a84:	0209      	lsls	r1, r1, #8
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d104      	bne.n	8001a9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	491f      	ldr	r1, [pc, #124]	; (8001b24 <HAL_I2C_Init+0x128>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	491a      	ldr	r1, [pc, #104]	; (8001b20 <HAL_I2C_Init+0x124>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69d9      	ldr	r1, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2241      	movs	r2, #65	; 0x41
 8001b00:	2120      	movs	r1, #32
 8001b02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2242      	movs	r2, #66	; 0x42
 8001b0e:	2100      	movs	r1, #0
 8001b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	f0ffffff 	.word	0xf0ffffff
 8001b20:	ffff7fff 	.word	0xffff7fff
 8001b24:	02008000 	.word	0x02008000

08001b28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	000c      	movs	r4, r1
 8001b32:	0010      	movs	r0, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	230a      	movs	r3, #10
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	1c22      	adds	r2, r4, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	2308      	movs	r3, #8
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	1c02      	adds	r2, r0, #0
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	1c0a      	adds	r2, r1, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	5c9b      	ldrb	r3, [r3, r2]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d000      	beq.n	8001b5a <HAL_I2C_Mem_Write+0x32>
 8001b58:	e10c      	b.n	8001d74 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_I2C_Mem_Write+0x42>
 8001b60:	232c      	movs	r3, #44	; 0x2c
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0ff      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2C_Mem_Write+0x5c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0f8      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2101      	movs	r1, #1
 8001b8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff faf0 	bl	8001170 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	0219      	lsls	r1, r3, #8
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2319      	movs	r3, #25
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f000 fb0b 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e3      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2241      	movs	r2, #65	; 0x41
 8001bb2:	2121      	movs	r1, #33	; 0x21
 8001bb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2242      	movs	r2, #66	; 0x42
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	222c      	movs	r2, #44	; 0x2c
 8001bce:	18ba      	adds	r2, r7, r2
 8001bd0:	8812      	ldrh	r2, [r2, #0]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bda:	1dbb      	adds	r3, r7, #6
 8001bdc:	881c      	ldrh	r4, [r3, #0]
 8001bde:	2308      	movs	r3, #8
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	230a      	movs	r3, #10
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	8819      	ldrh	r1, [r3, #0]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	f000 f9f9 	bl	8001fec <I2C_RequestMemoryWrite>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0b5      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d911      	bls.n	8001c38 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	22ff      	movs	r2, #255	; 0xff
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	045c      	lsls	r4, r3, #17
 8001c24:	230a      	movs	r3, #10
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	8819      	ldrh	r1, [r3, #0]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	0023      	movs	r3, r4
 8001c32:	f000 fbe3 	bl	80023fc <I2C_TransferConfig>
 8001c36:	e012      	b.n	8001c5e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	049c      	lsls	r4, r3, #18
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	8819      	ldrh	r1, [r3, #0]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	0023      	movs	r3, r4
 8001c5a:	f000 fbcf 	bl	80023fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fae8 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e081      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03a      	beq.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d136      	bne.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	f000 fa7b 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e053      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d911      	bls.n	8001cfc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	045c      	lsls	r4, r3, #17
 8001ce8:	230a      	movs	r3, #10
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	8819      	ldrh	r1, [r3, #0]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	0023      	movs	r3, r4
 8001cf6:	f000 fb81 	bl	80023fc <I2C_TransferConfig>
 8001cfa:	e012      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	049c      	lsls	r4, r3, #18
 8001d10:	230a      	movs	r3, #10
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	8819      	ldrh	r1, [r3, #0]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	f000 fb6d 	bl	80023fc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d198      	bne.n	8001c5e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fac0 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01a      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	490b      	ldr	r1, [pc, #44]	; (8001d80 <HAL_I2C_Mem_Write+0x258>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2242      	movs	r2, #66	; 0x42
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b007      	add	sp, #28
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	fe00e800 	.word	0xfe00e800

08001d84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	230a      	movs	r3, #10
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	1c22      	adds	r2, r4, #0
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	1c0a      	adds	r2, r1, #0
 8001da6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2241      	movs	r2, #65	; 0x41
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d000      	beq.n	8001db6 <HAL_I2C_Mem_Read+0x32>
 8001db4:	e110      	b.n	8001fd8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_I2C_Mem_Read+0x42>
 8001dbc:	232c      	movs	r3, #44	; 0x2c
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e103      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2C_Mem_Read+0x5c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0fc      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff f9c2 	bl	8001170 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	0219      	lsls	r1, r3, #8
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2319      	movs	r3, #25
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f000 f9dd 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0e7      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2241      	movs	r2, #65	; 0x41
 8001e0e:	2122      	movs	r1, #34	; 0x22
 8001e10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2242      	movs	r2, #66	; 0x42
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	222c      	movs	r2, #44	; 0x2c
 8001e2a:	18ba      	adds	r2, r7, r2
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881c      	ldrh	r4, [r3, #0]
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	881a      	ldrh	r2, [r3, #0]
 8001e40:	230a      	movs	r3, #10
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	8819      	ldrh	r1, [r3, #0]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	0023      	movs	r3, r4
 8001e52:	f000 f92f 	bl	80020b4 <I2C_RequestMemoryRead>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0b9      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d911      	bls.n	8001e94 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	045c      	lsls	r4, r3, #17
 8001e80:	230a      	movs	r3, #10
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	8819      	ldrh	r1, [r3, #0]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_I2C_Mem_Read+0x260>)
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	0023      	movs	r3, r4
 8001e8e:	f000 fab5 	bl	80023fc <I2C_TransferConfig>
 8001e92:	e012      	b.n	8001eba <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	049c      	lsls	r4, r3, #18
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	8819      	ldrh	r1, [r3, #0]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_I2C_Mem_Read+0x260>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	0023      	movs	r3, r4
 8001eb6:	f000 faa1 	bl	80023fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	f000 f978 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e082      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03a      	beq.n	8001f86 <HAL_I2C_Mem_Read+0x202>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d136      	bne.n	8001f86 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	0013      	movs	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	f000 f949 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e053      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2bff      	cmp	r3, #255	; 0xff
 8001f3a:	d911      	bls.n	8001f60 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	045c      	lsls	r4, r3, #17
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	8819      	ldrh	r1, [r3, #0]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	0023      	movs	r3, r4
 8001f5a:	f000 fa4f 	bl	80023fc <I2C_TransferConfig>
 8001f5e:	e012      	b.n	8001f86 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	049c      	lsls	r4, r3, #18
 8001f74:	230a      	movs	r3, #10
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	8819      	ldrh	r1, [r3, #0]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	0023      	movs	r3, r4
 8001f82:	f000 fa3b 	bl	80023fc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d194      	bne.n	8001eba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f98e 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e01a      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <HAL_I2C_Mem_Read+0x264>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2242      	movs	r2, #66	; 0x42
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b007      	add	sp, #28
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	80002400 	.word	0x80002400
 8001fe8:	fe00e800 	.word	0xfe00e800

08001fec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	000c      	movs	r4, r1
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	250a      	movs	r5, #10
 8001ffc:	197b      	adds	r3, r7, r5
 8001ffe:	1c22      	adds	r2, r4, #0
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	2308      	movs	r3, #8
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	1c0a      	adds	r2, r1, #0
 800200e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	045c      	lsls	r4, r3, #17
 800201a:	197b      	adds	r3, r7, r5
 800201c:	8819      	ldrh	r1, [r3, #0]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <I2C_RequestMemoryWrite+0xc4>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	0023      	movs	r3, r4
 8002026:	f000 f9e9 	bl	80023fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f902 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e033      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002046:	2308      	movs	r3, #8
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
 8002054:	e019      	b.n	800208a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002056:	2308      	movs	r3, #8
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 f8e3 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e014      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800207c:	2308      	movs	r3, #8
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	0013      	movs	r3, r2
 8002094:	2200      	movs	r2, #0
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	f000 f890 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	80002000 	.word	0x80002000

080020b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	000c      	movs	r4, r1
 80020be:	0010      	movs	r0, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	250a      	movs	r5, #10
 80020c4:	197b      	adds	r3, r7, r5
 80020c6:	1c22      	adds	r2, r4, #0
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	2308      	movs	r3, #8
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	1c02      	adds	r2, r0, #0
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	1c0a      	adds	r2, r1, #0
 80020d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	8819      	ldrh	r1, [r3, #0]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <I2C_RequestMemoryRead+0xc0>)
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	f000 f987 	bl	80023fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f8a0 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e033      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002102:	1dbb      	adds	r3, r7, #6
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800210a:	2308      	movs	r3, #8
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
 8002118:	e019      	b.n	800214e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800211a:	2308      	movs	r3, #8
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b29b      	uxth	r3, r3
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f881 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e014      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002140:	2308      	movs	r3, #8
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	0013      	movs	r3, r2
 8002158:	2200      	movs	r2, #0
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	f000 f82e 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	80002000 	.word	0x80002000

08002178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d103      	bne.n	8002196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	619a      	str	r2, [r3, #24]
  }
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e021      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	d01e      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7fe ffcc 	bl	8001170 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	2220      	movs	r2, #32
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2241      	movs	r2, #65	; 0x41
 80021fa:	2120      	movs	r1, #32
 80021fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2242      	movs	r2, #66	; 0x42
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	425a      	negs	r2, r3
 8002222:	4153      	adcs	r3, r2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d0ce      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}

0800223a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002246:	e02b      	b.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f86e 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e029      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	d01e      	beq.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7fe ff85 	bl	8001170 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d113      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2241      	movs	r2, #65	; 0x41
 8002288:	2120      	movs	r1, #32
 800228a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2242      	movs	r2, #66	; 0x42
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d1cc      	bne.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c4:	e028      	b.n	8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 f82f 	bl	8002330 <I2C_IsAcknowledgeFailed>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e026      	b.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7fe ff49 	bl	8001170 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	2220      	movs	r2, #32
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2241      	movs	r2, #65	; 0x41
 8002300:	2120      	movs	r1, #32
 8002302:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2242      	movs	r2, #66	; 0x42
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2220      	movs	r2, #32
 8002320:	4013      	ands	r3, r2
 8002322:	2b20      	cmp	r3, #32
 8002324:	d1cf      	bne.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2210      	movs	r2, #16
 8002344:	4013      	ands	r3, r2
 8002346:	2b10      	cmp	r3, #16
 8002348:	d151      	bne.n	80023ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234a:	e021      	b.n	8002390 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	d01e      	beq.n	8002390 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe ff0d 	bl	8001170 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_IsAcknowledgeFailed+0x38>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d113      	bne.n	8002390 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	2220      	movs	r2, #32
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2241      	movs	r2, #65	; 0x41
 8002378:	2120      	movs	r1, #32
 800237a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2242      	movs	r2, #66	; 0x42
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e02f      	b.n	80023f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2220      	movs	r2, #32
 8002398:	4013      	ands	r3, r2
 800239a:	2b20      	cmp	r3, #32
 800239c:	d1d6      	bne.n	800234c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2210      	movs	r2, #16
 80023a4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2220      	movs	r2, #32
 80023ac:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff fee1 	bl	8002178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	490d      	ldr	r1, [pc, #52]	; (80023f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	2204      	movs	r2, #4
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	2120      	movs	r1, #32
 80023d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2242      	movs	r2, #66	; 0x42
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b004      	add	sp, #16
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	fe00e800 	.word	0xfe00e800

080023fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	0008      	movs	r0, r1
 8002406:	0011      	movs	r1, r2
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	240a      	movs	r4, #10
 800240c:	193b      	adds	r3, r7, r4
 800240e:	1c02      	adds	r2, r0, #0
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	2009      	movs	r0, #9
 8002414:	183b      	adds	r3, r7, r0
 8002416:	1c0a      	adds	r2, r1, #0
 8002418:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	0d51      	lsrs	r1, r2, #21
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	00d2      	lsls	r2, r2, #3
 8002428:	400a      	ands	r2, r1
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <I2C_TransferConfig+0x68>)
 800242c:	430a      	orrs	r2, r1
 800242e:	43d2      	mvns	r2, r2
 8002430:	401a      	ands	r2, r3
 8002432:	0011      	movs	r1, r2
 8002434:	193b      	adds	r3, r7, r4
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	059b      	lsls	r3, r3, #22
 800243a:	0d9a      	lsrs	r2, r3, #22
 800243c:	183b      	adds	r3, r7, r0
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	0418      	lsls	r0, r3, #16
 8002442:	23ff      	movs	r3, #255	; 0xff
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	4003      	ands	r3, r0
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	431a      	orrs	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b005      	add	sp, #20
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	03ff63ff 	.word	0x03ff63ff

08002468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2241      	movs	r2, #65	; 0x41
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	d138      	bne.n	80024f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2240      	movs	r2, #64	; 0x40
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002488:	2302      	movs	r3, #2
 800248a:	e032      	b.n	80024f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2241      	movs	r2, #65	; 0x41
 8002498:	2124      	movs	r1, #36	; 0x24
 800249a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	438a      	bics	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4911      	ldr	r1, [pc, #68]	; (80024fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2241      	movs	r2, #65	; 0x41
 80024e0:	2120      	movs	r1, #32
 80024e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	ffffefff 	.word	0xffffefff

08002500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2241      	movs	r2, #65	; 0x41
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d139      	bne.n	800258a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002520:	2302      	movs	r3, #2
 8002522:	e033      	b.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2241      	movs	r2, #65	; 0x41
 8002530:	2124      	movs	r1, #36	; 0x24
 8002532:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	438a      	bics	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2241      	movs	r2, #65	; 0x41
 800257a:	2120      	movs	r1, #32
 800257c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	2100      	movs	r1, #0
 8002584:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b004      	add	sp, #16
 8002592:	bd80      	pop	{r7, pc}
 8002594:	fffff0ff 	.word	0xfffff0ff

08002598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e303      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d100      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 80025b4:	e08d      	b.n	80026d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025b6:	4bc4      	ldr	r3, [pc, #784]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	220c      	movs	r2, #12
 80025bc:	4013      	ands	r3, r2
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00e      	beq.n	80025e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c2:	4bc1      	ldr	r3, [pc, #772]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	220c      	movs	r2, #12
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x64>
 80025ce:	4bbe      	ldr	r3, [pc, #760]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	401a      	ands	r2, r3
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4bb9      	ldr	r3, [pc, #740]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	4013      	ands	r3, r2
 80025ea:	d100      	bne.n	80025ee <HAL_RCC_OscConfig+0x56>
 80025ec:	e070      	b.n	80026d0 <HAL_RCC_OscConfig+0x138>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d000      	beq.n	80025f8 <HAL_RCC_OscConfig+0x60>
 80025f6:	e06b      	b.n	80026d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e2da      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x7c>
 8002604:	4bb0      	ldr	r3, [pc, #704]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4baf      	ldr	r3, [pc, #700]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	0249      	lsls	r1, r1, #9
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e02f      	b.n	8002674 <HAL_RCC_OscConfig+0xdc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x9e>
 800261c:	4baa      	ldr	r3, [pc, #680]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4ba9      	ldr	r3, [pc, #676]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002622:	49aa      	ldr	r1, [pc, #680]	; (80028cc <HAL_RCC_OscConfig+0x334>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4ba7      	ldr	r3, [pc, #668]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4ba6      	ldr	r3, [pc, #664]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800262e:	49a8      	ldr	r1, [pc, #672]	; (80028d0 <HAL_RCC_OscConfig+0x338>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e01e      	b.n	8002674 <HAL_RCC_OscConfig+0xdc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d10e      	bne.n	800265c <HAL_RCC_OscConfig+0xc4>
 800263e:	4ba2      	ldr	r3, [pc, #648]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4ba1      	ldr	r3, [pc, #644]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	02c9      	lsls	r1, r1, #11
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b9d      	ldr	r3, [pc, #628]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0249      	lsls	r1, r1, #9
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xdc>
 800265c:	4b9a      	ldr	r3, [pc, #616]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b99      	ldr	r3, [pc, #612]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002662:	499a      	ldr	r1, [pc, #616]	; (80028cc <HAL_RCC_OscConfig+0x334>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800266e:	4998      	ldr	r1, [pc, #608]	; (80028d0 <HAL_RCC_OscConfig+0x338>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d014      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fd78 	bl	8001170 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7fe fd73 	bl	8001170 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e28c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0xee>
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fd63 	bl	8001170 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fd5e 	bl	8001170 <HAL_GetTick>
 80026b4:	0002      	movs	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e277      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	4013      	ands	r3, r2
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x118>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d100      	bne.n	80026de <HAL_RCC_OscConfig+0x146>
 80026dc:	e069      	b.n	80027b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	220c      	movs	r2, #12
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e8:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	220c      	movs	r2, #12
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d11c      	bne.n	800272e <HAL_RCC_OscConfig+0x196>
 80026f4:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	025b      	lsls	r3, r3, #9
 80026fc:	4013      	ands	r3, r2
 80026fe:	d116      	bne.n	800272e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002700:	4b71      	ldr	r3, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x17e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e24d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	22f8      	movs	r2, #248	; 0xf8
 800271c:	4393      	bics	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	00da      	lsls	r2, r3, #3
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272c:	e041      	b.n	80027b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d024      	beq.n	8002780 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fd15 	bl	8001170 <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fd10 	bl	8001170 <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e229      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d0f1      	beq.n	800274c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	22f8      	movs	r2, #248	; 0xf8
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00da      	lsls	r2, r3, #3
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e018      	b.n	80027b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fcf0 	bl	8001170 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fceb 	bl	8001170 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e204      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f1      	bne.n	8002796 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2208      	movs	r2, #8
 80027b8:	4013      	ands	r3, r2
 80027ba:	d036      	beq.n	800282a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d019      	beq.n	80027f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fcce 	bl	8001170 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe fcc9 	bl	8001170 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1e2      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	4013      	ands	r3, r2
 80027f4:	d0f1      	beq.n	80027da <HAL_RCC_OscConfig+0x242>
 80027f6:	e018      	b.n	800282a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80027fe:	2101      	movs	r1, #1
 8002800:	438a      	bics	r2, r1
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fcb4 	bl	8001170 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe fcaf 	bl	8001170 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1c8      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2202      	movs	r2, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d1f1      	bne.n	800280e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2204      	movs	r2, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d100      	bne.n	8002836 <HAL_RCC_OscConfig+0x29e>
 8002834:	e0b6      	b.n	80029a4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	055b      	lsls	r3, r3, #21
 8002846:	4013      	ands	r3, r2
 8002848:	d111      	bne.n	800286e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0549      	lsls	r1, r1, #21
 8002854:	430a      	orrs	r2, r1
 8002856:	61da      	str	r2, [r3, #28]
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	055b      	lsls	r3, r3, #21
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002866:	231f      	movs	r3, #31
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d11a      	bne.n	80028b0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	0049      	lsls	r1, r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002888:	f7fe fc72 	bl	8001170 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7fe fc6d 	bl	8001170 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b64      	cmp	r3, #100	; 0x64
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e186      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x340>
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	621a      	str	r2, [r3, #32]
 80028c4:	e036      	b.n	8002934 <HAL_RCC_OscConfig+0x39c>
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021000 	.word	0x40021000
 80028cc:	fffeffff 	.word	0xfffeffff
 80028d0:	fffbffff 	.word	0xfffbffff
 80028d4:	40007000 	.word	0x40007000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x362>
 80028e0:	4bb6      	ldr	r3, [pc, #728]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	4bb5      	ldr	r3, [pc, #724]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	438a      	bics	r2, r1
 80028ea:	621a      	str	r2, [r3, #32]
 80028ec:	4bb3      	ldr	r3, [pc, #716]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	4bb2      	ldr	r3, [pc, #712]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80028f2:	2104      	movs	r1, #4
 80028f4:	438a      	bics	r2, r1
 80028f6:	621a      	str	r2, [r3, #32]
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x39c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x384>
 8002902:	4bae      	ldr	r3, [pc, #696]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	4bad      	ldr	r3, [pc, #692]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002908:	2104      	movs	r1, #4
 800290a:	430a      	orrs	r2, r1
 800290c:	621a      	str	r2, [r3, #32]
 800290e:	4bab      	ldr	r3, [pc, #684]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	4baa      	ldr	r3, [pc, #680]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002914:	2101      	movs	r1, #1
 8002916:	430a      	orrs	r2, r1
 8002918:	621a      	str	r2, [r3, #32]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x39c>
 800291c:	4ba7      	ldr	r3, [pc, #668]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	4ba6      	ldr	r3, [pc, #664]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002922:	2101      	movs	r1, #1
 8002924:	438a      	bics	r2, r1
 8002926:	621a      	str	r2, [r3, #32]
 8002928:	4ba4      	ldr	r3, [pc, #656]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	4ba3      	ldr	r3, [pc, #652]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800292e:	2104      	movs	r1, #4
 8002930:	438a      	bics	r2, r1
 8002932:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d014      	beq.n	8002966 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fe fc18 	bl	8001170 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e009      	b.n	800295a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fc13 	bl	8001170 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	4a9b      	ldr	r2, [pc, #620]	; (8002bc0 <HAL_RCC_OscConfig+0x628>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e12b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b98      	ldr	r3, [pc, #608]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x3ae>
 8002964:	e013      	b.n	800298e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fc03 	bl	8001170 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	e009      	b.n	8002984 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fbfe 	bl	8001170 <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	4a91      	ldr	r2, [pc, #580]	; (8002bc0 <HAL_RCC_OscConfig+0x628>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e116      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	4b8d      	ldr	r3, [pc, #564]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800298e:	231f      	movs	r3, #31
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	4b87      	ldr	r3, [pc, #540]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 800299e:	4989      	ldr	r1, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x62c>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2210      	movs	r2, #16
 80029aa:	4013      	ands	r3, r2
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d12a      	bne.n	8002a0c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029b6:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ba:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029bc:	2104      	movs	r1, #4
 80029be:	430a      	orrs	r2, r1
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029c2:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	4b7d      	ldr	r3, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fbcf 	bl	8001170 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d8:	f7fe fbca 	bl	8001170 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0e3      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ea:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d0f1      	beq.n	80029d8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029f4:	4b71      	ldr	r3, [pc, #452]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	22f8      	movs	r2, #248	; 0xf8
 80029fa:	4393      	bics	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	00da      	lsls	r2, r3, #3
 8002a04:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0a:	e034      	b.n	8002a76 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	3305      	adds	r3, #5
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	22f8      	movs	r2, #248	; 0xf8
 8002a26:	4393      	bics	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	00da      	lsls	r2, r3, #3
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	e01e      	b.n	8002a76 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a38:	4b60      	ldr	r3, [pc, #384]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a3e:	2104      	movs	r1, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a44:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fb8e 	bl	8001170 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a5a:	f7fe fb89 	bl	8001170 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0a2      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	2202      	movs	r2, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	d1f1      	bne.n	8002a5a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d100      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4e8>
 8002a7e:	e097      	b.n	8002bb0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	220c      	movs	r2, #12
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d100      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4f6>
 8002a8c:	e06b      	b.n	8002b66 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d14c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a9c:	494a      	ldr	r1, [pc, #296]	; (8002bc8 <HAL_RCC_OscConfig+0x630>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fb65 	bl	8001170 <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe fb60 	bl	8001170 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e079      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	049b      	lsls	r3, r3, #18
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	220f      	movs	r2, #15
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_RCC_OscConfig+0x634>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0449      	lsls	r1, r1, #17
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fb33 	bl	8001170 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fb2e 	bl	8001170 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e047      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	049b      	lsls	r3, r3, #18
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x578>
 8002b2e:	e03f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b36:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x630>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fb18 	bl	8001170 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fb13 	bl	8001170 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e02c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	049b      	lsls	r3, r3, #18
 8002b60:	4013      	ands	r3, r2
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5ae>
 8002b64:	e024      	b.n	8002bb0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e01f      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	025b      	lsls	r3, r3, #9
 8002b84:	401a      	ands	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10e      	bne.n	8002bac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	220f      	movs	r2, #15
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	23f0      	movs	r3, #240	; 0xf0
 8002ba0:	039b      	lsls	r3, r3, #14
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b008      	add	sp, #32
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	00001388 	.word	0x00001388
 8002bc4:	efffffff 	.word	0xefffffff
 8002bc8:	feffffff 	.word	0xfeffffff
 8002bcc:	ffc2ffff 	.word	0xffc2ffff

08002bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b3      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d911      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b58      	ldr	r3, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e09a      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2204      	movs	r2, #4
 8002c26:	4013      	ands	r3, r2
 8002c28:	d006      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c2a:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c30:	21e0      	movs	r1, #224	; 0xe0
 8002c32:	00c9      	lsls	r1, r1, #3
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	22f0      	movs	r2, #240	; 0xf0
 8002c3e:	4393      	bics	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d040      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	4013      	ands	r3, r2
 8002c68:	d114      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06e      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	049b      	lsls	r3, r3, #18
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e062      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e05b      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fa62 	bl	8001170 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb0:	e009      	b.n	8002cc6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7fe fa5d 	bl	8001170 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x18c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e042      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	220c      	movs	r2, #12
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1ec      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d211      	bcs.n	8002d0a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4393      	bics	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x184>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e020      	b.n	8002d4c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_RCC_ClockConfig+0x190>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d28:	f000 f820 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2c:	0001      	movs	r1, r0
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x188>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	220f      	movs	r2, #15
 8002d36:	4013      	ands	r3, r2
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x194>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	000a      	movs	r2, r1
 8002d3e:	40da      	lsrs	r2, r3
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x198>)
 8002d42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f003 fa8f 	bl	8006268 <HAL_InitTick>
  
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	fffff8ff 	.word	0xfffff8ff
 8002d64:	08007f50 	.word	0x08007f50
 8002d68:	20000004 	.word	0x20000004

08002d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08f      	sub	sp, #60	; 0x3c
 8002d70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d72:	2314      	movs	r3, #20
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d86:	c313      	stmia	r3!, {r0, r1, r4}
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d002      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x4a>
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d003      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x50>
 8002db4:	e02d      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dba:	e02d      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2214      	movs	r2, #20
 8002dc6:	18ba      	adds	r2, r7, r2
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	1d3a      	adds	r2, r7, #4
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	025b      	lsls	r3, r3, #9
 8002de0:	4013      	ands	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de6:	4812      	ldr	r0, [pc, #72]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002de8:	f7fd f98e 	bl	8000108 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	001a      	movs	r2, r3
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	4353      	muls	r3, r2
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfa:	000a      	movs	r2, r1
 8002dfc:	0152      	lsls	r2, r2, #5
 8002dfe:	1a52      	subs	r2, r2, r1
 8002e00:	0193      	lsls	r3, r2, #6
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	185b      	adds	r3, r3, r1
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b00f      	add	sp, #60	; 0x3c
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	08007d24 	.word	0x08007d24
 8002e28:	08007d34 	.word	0x08007d34
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e4c:	f7ff fff2 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e50:	0001      	movs	r1, r0
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	2207      	movs	r2, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	40d9      	lsrs	r1, r3
 8002e62:	000b      	movs	r3, r1
}    
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08007f60 	.word	0x08007f60

08002e74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	22f0      	movs	r2, #240	; 0xf0
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_GetClockConfig+0x4c>)
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	23e0      	movs	r3, #224	; 0xe0
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_GetClockConfig+0x50>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	601a      	str	r2, [r3, #0]
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ee4:	e08f      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2317      	movs	r3, #23
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0549      	lsls	r1, r1, #21
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	055b      	lsls	r3, r3, #21
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f16:	2317      	movs	r3, #23
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4013      	ands	r3, r2
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b49      	ldr	r3, [pc, #292]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b48      	ldr	r3, [pc, #288]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0049      	lsls	r1, r1, #1
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f38:	f7fe f91a 	bl	8001170 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fe f915 	bl	8001170 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e077      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	23c0      	movs	r3, #192	; 0xc0
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d034      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	23c0      	movs	r3, #192	; 0xc0
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d02c      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f82:	4b32      	ldr	r3, [pc, #200]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0249      	lsls	r1, r1, #9
 8002f96:	430a      	orrs	r2, r1
 8002f98:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa0:	492d      	ldr	r1, [pc, #180]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe f8dc 	bl	8001170 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	e009      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe f8d7 	bl	8001170 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e038      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff0:	2317      	movs	r3, #23
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003000:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003002:	400a      	ands	r2, r1
 8003004:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2203      	movs	r2, #3
 8003016:	4393      	bics	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003020:	430a      	orrs	r2, r1
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	4013      	ands	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	2210      	movs	r2, #16
 8003034:	4393      	bics	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800303e:	430a      	orrs	r2, r1
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
 8003054:	fffffcff 	.word	0xfffffcff
 8003058:	fffeffff 	.word	0xfffeffff
 800305c:	00001388 	.word	0x00001388
 8003060:	efffffff 	.word	0xefffffff

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e01e      	b.n	80030b4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	223d      	movs	r2, #61	; 0x3d
 800307a:	5c9b      	ldrb	r3, [r3, r2]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223c      	movs	r2, #60	; 0x3c
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f815 	bl	80030bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	223d      	movs	r2, #61	; 0x3d
 8003096:	2102      	movs	r1, #2
 8003098:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	0019      	movs	r1, r3
 80030a4:	0010      	movs	r0, r2
 80030a6:	f000 f969 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223d      	movs	r2, #61	; 0x3d
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2207      	movs	r2, #7
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d007      	beq.n	8003106 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d124      	bne.n	8003170 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	4013      	ands	r3, r2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11d      	bne.n	8003170 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2203      	movs	r2, #3
 800313a:	4252      	negs	r2, r2
 800313c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2203      	movs	r2, #3
 800314c:	4013      	ands	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f8fa 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003158:	e007      	b.n	800316a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0018      	movs	r0, r3
 800315e:	f000 f8ed 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f000 f8f9 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2204      	movs	r2, #4
 8003178:	4013      	ands	r3, r2
 800317a:	2b04      	cmp	r3, #4
 800317c:	d125      	bne.n	80031ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2204      	movs	r2, #4
 8003186:	4013      	ands	r3, r2
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11e      	bne.n	80031ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2205      	movs	r2, #5
 8003192:	4252      	negs	r2, r2
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f8cd 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 80031b2:	e007      	b.n	80031c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f8c0 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 f8cc 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d124      	bne.n	8003222 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2208      	movs	r2, #8
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11d      	bne.n	8003222 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2209      	movs	r2, #9
 80031ec:	4252      	negs	r2, r2
 80031ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2203      	movs	r2, #3
 80031fe:	4013      	ands	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f8a1 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 800320a:	e007      	b.n	800321c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f894 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 f8a0 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2210      	movs	r2, #16
 800322a:	4013      	ands	r3, r2
 800322c:	2b10      	cmp	r3, #16
 800322e:	d125      	bne.n	800327c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2210      	movs	r2, #16
 8003238:	4013      	ands	r3, r2
 800323a:	2b10      	cmp	r3, #16
 800323c:	d11e      	bne.n	800327c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2211      	movs	r2, #17
 8003244:	4252      	negs	r2, r2
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2208      	movs	r2, #8
 800324c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	23c0      	movs	r3, #192	; 0xc0
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4013      	ands	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f874 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003264:	e007      	b.n	8003276 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f867 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f873 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10f      	bne.n	80032aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	4252      	negs	r2, r2
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f002 fb07 	bl	80058b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d10f      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d108      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2281      	movs	r2, #129	; 0x81
 80032cc:	4252      	negs	r2, r2
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f8d0 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10f      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d108      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2241      	movs	r2, #65	; 0x41
 80032fa:	4252      	negs	r2, r2
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f833 	bl	800336c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2220      	movs	r2, #32
 800330e:	4013      	ands	r3, r2
 8003310:	2b20      	cmp	r3, #32
 8003312:	d10f      	bne.n	8003334 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	4013      	ands	r3, r2
 800331e:	2b20      	cmp	r3, #32
 8003320:	d108      	bne.n	8003334 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2221      	movs	r2, #33	; 0x21
 8003328:	4252      	negs	r2, r2
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 f89a 	bl	8003468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <TIM_Base_SetConfig+0xd0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x20>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <TIM_Base_SetConfig+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2270      	movs	r2, #112	; 0x70
 80033a0:	4393      	bics	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <TIM_Base_SetConfig+0xd0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <TIM_Base_SetConfig+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a25      	ldr	r2, [pc, #148]	; (8003450 <TIM_Base_SetConfig+0xd4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_Base_SetConfig+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <TIM_Base_SetConfig+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_Base_SetConfig+0x62>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <TIM_Base_SetConfig+0xdc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0x62>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <TIM_Base_SetConfig+0xe0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a21      	ldr	r2, [pc, #132]	; (8003460 <TIM_Base_SetConfig+0xe4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <TIM_Base_SetConfig+0xe8>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	4393      	bics	r3, r2
 80033f6:	001a      	movs	r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <TIM_Base_SetConfig+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0xba>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <TIM_Base_SetConfig+0xdc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0xba>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0c      	ldr	r2, [pc, #48]	; (800345c <TIM_Base_SetConfig+0xe0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0xba>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <TIM_Base_SetConfig+0xe4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d103      	bne.n	800343e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	615a      	str	r2, [r3, #20]
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40002000 	.word	0x40002000
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	fffffcff 	.word	0xfffffcff

08003468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e044      	b.n	8003524 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2270      	movs	r2, #112	; 0x70
 80034a6:	2100      	movs	r1, #0
 80034a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f002 fdc9 	bl	8006044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2224      	movs	r2, #36	; 0x24
 80034b6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fb40 	bl	8003b50 <UART_SetConfig>
 80034d0:	0003      	movs	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e024      	b.n	8003524 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fcb9 	bl	8003e5c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	490d      	ldr	r1, [pc, #52]	; (800352c <HAL_UART_Init+0xa4>)
 80034f6:	400a      	ands	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2108      	movs	r1, #8
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fd51 	bl	8003fc4 <UART_CheckIdleState>
 8003522:	0003      	movs	r3, r0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	fffff7ff 	.word	0xfffff7ff

08003530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	1dbb      	adds	r3, r7, #6
 800353e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	2b20      	cmp	r3, #32
 8003546:	d000      	beq.n	800354a <HAL_UART_Transmit+0x1a>
 8003548:	e095      	b.n	8003676 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_UART_Transmit+0x28>
 8003550:	1dbb      	adds	r3, r7, #6
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e08d      	b.n	8003678 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	429a      	cmp	r2, r3
 8003566:	d109      	bne.n	800357c <HAL_UART_Transmit+0x4c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e07d      	b.n	8003678 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2270      	movs	r2, #112	; 0x70
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Transmit+0x5a>
 8003586:	2302      	movs	r3, #2
 8003588:	e076      	b.n	8003678 <HAL_UART_Transmit+0x148>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2270      	movs	r2, #112	; 0x70
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2221      	movs	r2, #33	; 0x21
 800359c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800359e:	f7fd fde7 	bl	8001170 <HAL_GetTick>
 80035a2:	0003      	movs	r3, r0
 80035a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1dba      	adds	r2, r7, #6
 80035aa:	2150      	movs	r1, #80	; 0x50
 80035ac:	8812      	ldrh	r2, [r2, #0]
 80035ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1dba      	adds	r2, r7, #6
 80035b4:	2152      	movs	r1, #82	; 0x52
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	015b      	lsls	r3, r3, #5
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0xa8>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e0:	e02d      	b.n	800363e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	0013      	movs	r3, r2
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	f000 fd2e 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d001      	beq.n	80035fc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e03d      	b.n	8003678 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	05d2      	lsls	r2, r2, #23
 800360c:	0dd2      	lsrs	r2, r2, #23
 800360e:	b292      	uxth	r2, r2
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3302      	adds	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e008      	b.n	800362c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b292      	uxth	r2, r2
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3301      	adds	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2252      	movs	r2, #82	; 0x52
 8003630:	5a9b      	ldrh	r3, [r3, r2]
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b299      	uxth	r1, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2252      	movs	r2, #82	; 0x52
 800363c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2252      	movs	r2, #82	; 0x52
 8003642:	5a9b      	ldrh	r3, [r3, r2]
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cb      	bne.n	80035e2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	0013      	movs	r3, r2
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	f000 fcfa 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d001      	beq.n	8003664 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e009      	b.n	8003678 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2270      	movs	r2, #112	; 0x70
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b008      	add	sp, #32
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	2b20      	cmp	r3, #32
 8003694:	d000      	beq.n	8003698 <HAL_UART_Transmit_DMA+0x18>
 8003696:	e077      	b.n	8003788 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_UART_Transmit_DMA+0x26>
 800369e:	1dbb      	adds	r3, r7, #6
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06f      	b.n	800378a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	015b      	lsls	r3, r3, #5
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d109      	bne.n	80036ca <HAL_UART_Transmit_DMA+0x4a>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e05f      	b.n	800378a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2270      	movs	r2, #112	; 0x70
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_UART_Transmit_DMA+0x58>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e058      	b.n	800378a <HAL_UART_Transmit_DMA+0x10a>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2270      	movs	r2, #112	; 0x70
 80036dc:	2101      	movs	r1, #1
 80036de:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1dba      	adds	r2, r7, #6
 80036ea:	2150      	movs	r1, #80	; 0x50
 80036ec:	8812      	ldrh	r2, [r2, #0]
 80036ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1dba      	adds	r2, r7, #6
 80036f4:	2152      	movs	r1, #82	; 0x52
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	; 0x21
 8003704:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02a      	beq.n	8003764 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_UART_Transmit_DMA+0x114>)
 8003714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_UART_Transmit_DMA+0x118>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_UART_Transmit_DMA+0x11c>)
 8003724:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372a:	2200      	movs	r2, #0
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	0019      	movs	r1, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3328      	adds	r3, #40	; 0x28
 800373e:	001a      	movs	r2, r3
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f7fd fe36 	bl	80013b4 <HAL_DMA_Start_IT>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d00b      	beq.n	8003764 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2210      	movs	r2, #16
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2270      	movs	r2, #112	; 0x70
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e012      	b.n	800378a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2240      	movs	r2, #64	; 0x40
 800376a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2270      	movs	r2, #112	; 0x70
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	080041b5 	.word	0x080041b5
 8003798:	08004205 	.word	0x08004205
 800379c:	080042ab 	.word	0x080042ab

080037a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d000      	beq.n	80037b8 <HAL_UART_Receive_DMA+0x18>
 80037b6:	e07f      	b.n	80038b8 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_UART_Receive_DMA+0x26>
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e077      	b.n	80038ba <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d109      	bne.n	80037ea <HAL_UART_Receive_DMA+0x4a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	d001      	beq.n	80037ea <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e067      	b.n	80038ba <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2270      	movs	r2, #112	; 0x70
 80037ee:	5c9b      	ldrb	r3, [r3, r2]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Receive_DMA+0x58>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e060      	b.n	80038ba <HAL_UART_Receive_DMA+0x11a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2270      	movs	r2, #112	; 0x70
 80037fc:	2101      	movs	r1, #1
 80037fe:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1dba      	adds	r2, r7, #6
 800380a:	2158      	movs	r1, #88	; 0x58
 800380c:	8812      	ldrh	r2, [r2, #0]
 800380e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2222      	movs	r2, #34	; 0x22
 800381a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02a      	beq.n	800387a <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003828:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <HAL_UART_Receive_DMA+0x124>)
 800382a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003830:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <HAL_UART_Receive_DMA+0x128>)
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003838:	4a24      	ldr	r2, [pc, #144]	; (80038cc <HAL_UART_Receive_DMA+0x12c>)
 800383a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003840:	2200      	movs	r2, #0
 8003842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	0019      	movs	r1, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	001a      	movs	r2, r3
 8003856:	1dbb      	adds	r3, r7, #6
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	f7fd fdab 	bl	80013b4 <HAL_DMA_Start_IT>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d00b      	beq.n	800387a <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2210      	movs	r2, #16
 8003866:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2270      	movs	r2, #112	; 0x70
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e01f      	b.n	80038ba <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2270      	movs	r2, #112	; 0x70
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0049      	lsls	r1, r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	08004225 	.word	0x08004225
 80038c8:	0800428d 	.word	0x0800428d
 80038cc:	080042ab 	.word	0x080042ab

080038d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4a89      	ldr	r2, [pc, #548]	; (8003b18 <HAL_UART_IRQHandler+0x248>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d112      	bne.n	8003924 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2220      	movs	r2, #32
 8003902:	4013      	ands	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2220      	movs	r2, #32
 800390a:	4013      	ands	r3, r2
 800390c:	d00a      	beq.n	8003924 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	2b00      	cmp	r3, #0
 8003914:	d100      	bne.n	8003918 <HAL_UART_IRQHandler+0x48>
 8003916:	e0f7      	b.n	8003b08 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	0010      	movs	r0, r2
 8003920:	4798      	blx	r3
      }
      return;
 8003922:	e0f1      	b.n	8003b08 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d100      	bne.n	800392c <HAL_UART_IRQHandler+0x5c>
 800392a:	e0cd      	b.n	8003ac8 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2201      	movs	r2, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d105      	bne.n	8003940 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	2390      	movs	r3, #144	; 0x90
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4013      	ands	r3, r2
 800393c:	d100      	bne.n	8003940 <HAL_UART_IRQHandler+0x70>
 800393e:	e0c3      	b.n	8003ac8 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2201      	movs	r2, #1
 8003944:	4013      	ands	r3, r2
 8003946:	d00e      	beq.n	8003966 <HAL_UART_IRQHandler+0x96>
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395e:	2201      	movs	r2, #1
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_UART_IRQHandler+0xba>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2201      	movs	r2, #1
 8003972:	4013      	ands	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	2204      	movs	r2, #4
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2204      	movs	r2, #4
 800398e:	4013      	ands	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_UART_IRQHandler+0xde>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2204      	movs	r2, #4
 80039a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	2202      	movs	r2, #2
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2208      	movs	r2, #8
 80039b2:	4013      	ands	r3, r2
 80039b4:	d011      	beq.n	80039da <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2220      	movs	r2, #32
 80039ba:	4013      	ands	r3, r2
 80039bc:	d103      	bne.n	80039c6 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039c4:	d009      	beq.n	80039da <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d2:	2208      	movs	r2, #8
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	4013      	ands	r3, r2
 80039e2:	d00f      	beq.n	8003a04 <HAL_UART_IRQHandler+0x134>
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	04db      	lsls	r3, r3, #19
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00a      	beq.n	8003a04 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	0112      	lsls	r2, r2, #4
 80039f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fc:	2220      	movs	r2, #32
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d100      	bne.n	8003a0e <HAL_UART_IRQHandler+0x13e>
 8003a0c:	e07e      	b.n	8003b0c <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2220      	movs	r2, #32
 8003a12:	4013      	ands	r3, r2
 8003a14:	d00c      	beq.n	8003a30 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d008      	beq.n	8003a30 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	0010      	movs	r0, r2
 8003a2e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d003      	beq.n	8003a4c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2228      	movs	r2, #40	; 0x28
 8003a48:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a4a:	d033      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fb90 	bl	8004174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d123      	bne.n	8003aaa <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	438a      	bics	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <HAL_UART_IRQHandler+0x24c>)
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fd fcfa 	bl	8001480 <HAL_DMA_Abort_IT>
 8003a8c:	1e03      	subs	r3, r0, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	e011      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 f84c 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00c      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 f847 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab2:	e007      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f842 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003ac2:	e023      	b.n	8003b0c <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	46c0      	nop			; (mov r8, r8)
    return;
 8003ac6:	e021      	b.n	8003b0c <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00d      	beq.n	8003aec <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	4798      	blx	r3
    }
    return;
 8003aea:	e011      	b.n	8003b10 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	4013      	ands	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_UART_IRQHandler+0x242>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	4013      	ands	r3, r2
 8003afa:	d00a      	beq.n	8003b12 <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 fc29 	bl	8004356 <UART_EndTransmit_IT>
    return;
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	e004      	b.n	8003b12 <HAL_UART_IRQHandler+0x242>
      return;
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	e002      	b.n	8003b12 <HAL_UART_IRQHandler+0x242>
    return;
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_IRQHandler+0x242>
    return;
 8003b10:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b008      	add	sp, #32
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	0000080f 	.word	0x0000080f
 8003b1c:	08004329 	.word	0x08004329

08003b20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5c:	2317      	movs	r3, #23
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4aad      	ldr	r2, [pc, #692]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4aa8      	ldr	r2, [pc, #672]	; (8003e3c <UART_SetConfig+0x2ec>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a9f      	ldr	r2, [pc, #636]	; (8003e40 <UART_SetConfig+0x2f0>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a9b      	ldr	r2, [pc, #620]	; (8003e44 <UART_SetConfig+0x2f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d125      	bne.n	8003c26 <UART_SetConfig+0xd6>
 8003bda:	4b9b      	ldr	r3, [pc, #620]	; (8003e48 <UART_SetConfig+0x2f8>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	2203      	movs	r2, #3
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00f      	beq.n	8003c06 <UART_SetConfig+0xb6>
 8003be6:	d304      	bcc.n	8003bf2 <UART_SetConfig+0xa2>
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d011      	beq.n	8003c10 <UART_SetConfig+0xc0>
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0xac>
 8003bf0:	e013      	b.n	8003c1a <UART_SetConfig+0xca>
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e022      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e01d      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003c06:	231f      	movs	r3, #31
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e018      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003c10:	231f      	movs	r3, #31
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2208      	movs	r2, #8
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e013      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003c1a:	231f      	movs	r3, #31
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2210      	movs	r2, #16
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a88      	ldr	r2, [pc, #544]	; (8003e4c <UART_SetConfig+0x2fc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d104      	bne.n	8003c3a <UART_SetConfig+0xea>
 8003c30:	231f      	movs	r3, #31
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e003      	b.n	8003c42 <UART_SetConfig+0xf2>
 8003c3a:	231f      	movs	r3, #31
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2210      	movs	r2, #16
 8003c40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d000      	beq.n	8003c50 <UART_SetConfig+0x100>
 8003c4e:	e07d      	b.n	8003d4c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003c50:	231f      	movs	r3, #31
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d01c      	beq.n	8003c94 <UART_SetConfig+0x144>
 8003c5a:	dc02      	bgt.n	8003c62 <UART_SetConfig+0x112>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <UART_SetConfig+0x11c>
 8003c60:	e04b      	b.n	8003cfa <UART_SetConfig+0x1aa>
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d025      	beq.n	8003cb2 <UART_SetConfig+0x162>
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d037      	beq.n	8003cda <UART_SetConfig+0x18a>
 8003c6a:	e046      	b.n	8003cfa <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7ff f8ec 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8003c70:	0003      	movs	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	005a      	lsls	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	18d2      	adds	r2, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0019      	movs	r1, r3
 8003c86:	0010      	movs	r0, r2
 8003c88:	f7fc fa3e 	bl	8000108 <__udivsi3>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	61bb      	str	r3, [r7, #24]
        break;
 8003c92:	e037      	b.n	8003d04 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <UART_SetConfig+0x300>)
 8003c9c:	189a      	adds	r2, r3, r2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	f7fc fa2f 	bl	8000108 <__udivsi3>
 8003caa:	0003      	movs	r3, r0
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	61bb      	str	r3, [r7, #24]
        break;
 8003cb0:	e028      	b.n	8003d04 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7ff f85b 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	18d2      	adds	r2, r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	0019      	movs	r1, r3
 8003ccc:	0010      	movs	r0, r2
 8003cce:	f7fc fa1b 	bl	8000108 <__udivsi3>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	61bb      	str	r3, [r7, #24]
        break;
 8003cd8:	e014      	b.n	8003d04 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	0252      	lsls	r2, r2, #9
 8003ce4:	189a      	adds	r2, r3, r2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	0019      	movs	r1, r3
 8003cec:	0010      	movs	r0, r2
 8003cee:	f7fc fa0b 	bl	8000108 <__udivsi3>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e004      	b.n	8003d04 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003cfa:	2317      	movs	r3, #23
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
        break;
 8003d02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d91b      	bls.n	8003d42 <UART_SetConfig+0x1f2>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4a51      	ldr	r2, [pc, #324]	; (8003e54 <UART_SetConfig+0x304>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d817      	bhi.n	8003d42 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	200a      	movs	r0, #10
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2207      	movs	r2, #7
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b299      	uxth	r1, r3
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	183a      	adds	r2, r7, r0
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	183a      	adds	r2, r7, r0
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e06c      	b.n	8003e1c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003d42:	2317      	movs	r3, #23
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e067      	b.n	8003e1c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003d4c:	231f      	movs	r3, #31
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d01b      	beq.n	8003d8e <UART_SetConfig+0x23e>
 8003d56:	dc02      	bgt.n	8003d5e <UART_SetConfig+0x20e>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <UART_SetConfig+0x218>
 8003d5c:	e049      	b.n	8003df2 <UART_SetConfig+0x2a2>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d024      	beq.n	8003dac <UART_SetConfig+0x25c>
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d035      	beq.n	8003dd2 <UART_SetConfig+0x282>
 8003d66:	e044      	b.n	8003df2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7ff f86e 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	085a      	lsrs	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	18d2      	adds	r2, r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0019      	movs	r1, r3
 8003d80:	0010      	movs	r0, r2
 8003d82:	f7fc f9c1 	bl	8000108 <__udivsi3>
 8003d86:	0003      	movs	r3, r0
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	61bb      	str	r3, [r7, #24]
        break;
 8003d8c:	e036      	b.n	8003dfc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <UART_SetConfig+0x308>)
 8003d96:	189a      	adds	r2, r3, r2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	0010      	movs	r0, r2
 8003da0:	f7fc f9b2 	bl	8000108 <__udivsi3>
 8003da4:	0003      	movs	r3, r0
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	61bb      	str	r3, [r7, #24]
        break;
 8003daa:	e027      	b.n	8003dfc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dac:	f7fe ffde 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8003db0:	0003      	movs	r3, r0
 8003db2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	085a      	lsrs	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	18d2      	adds	r2, r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	f7fc f99f 	bl	8000108 <__udivsi3>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e014      	b.n	8003dfc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	0212      	lsls	r2, r2, #8
 8003ddc:	189a      	adds	r2, r3, r2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f7fc f98f 	bl	8000108 <__udivsi3>
 8003dea:	0003      	movs	r3, r0
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e004      	b.n	8003dfc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003df2:	2317      	movs	r3, #23
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
        break;
 8003dfa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d908      	bls.n	8003e14 <UART_SetConfig+0x2c4>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <UART_SetConfig+0x304>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d804      	bhi.n	8003e14 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e003      	b.n	8003e1c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003e14:	2317      	movs	r3, #23
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e28:	2317      	movs	r3, #23
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	781b      	ldrb	r3, [r3, #0]
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b008      	add	sp, #32
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	ffff69f3 	.word	0xffff69f3
 8003e3c:	ffffcfff 	.word	0xffffcfff
 8003e40:	fffff4ff 	.word	0xfffff4ff
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40004400 	.word	0x40004400
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	0000ffff 	.word	0x0000ffff
 8003e58:	007a1200 	.word	0x007a1200

08003e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <UART_AdvFeatureConfig+0x144>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <UART_AdvFeatureConfig+0x148>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2204      	movs	r2, #4
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <UART_AdvFeatureConfig+0x14c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2208      	movs	r2, #8
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a34      	ldr	r2, [pc, #208]	; (8003fac <UART_AdvFeatureConfig+0x150>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <UART_AdvFeatureConfig+0x154>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2220      	movs	r2, #32
 8003f14:	4013      	ands	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <UART_AdvFeatureConfig+0x158>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	4013      	ands	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <UART_AdvFeatureConfig+0x15c>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	035b      	lsls	r3, r3, #13
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10b      	bne.n	8003f76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <UART_AdvFeatureConfig+0x160>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <UART_AdvFeatureConfig+0x164>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	fffdffff 	.word	0xfffdffff
 8003fa4:	fffeffff 	.word	0xfffeffff
 8003fa8:	fffbffff 	.word	0xfffbffff
 8003fac:	ffff7fff 	.word	0xffff7fff
 8003fb0:	ffffefff 	.word	0xffffefff
 8003fb4:	ffffdfff 	.word	0xffffdfff
 8003fb8:	ffefffff 	.word	0xffefffff
 8003fbc:	ff9fffff 	.word	0xff9fffff
 8003fc0:	fff7ffff 	.word	0xfff7ffff

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fd2:	f7fd f8cd 	bl	8001170 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10d      	bne.n	8004004 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	0399      	lsls	r1, r3, #14
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <UART_CheckIdleState+0x88>)
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	0013      	movs	r3, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f000 f82a 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d001      	beq.n	8004004 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e01f      	b.n	8004044 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2204      	movs	r2, #4
 800400c:	4013      	ands	r3, r2
 800400e:	2b04      	cmp	r3, #4
 8004010:	d10d      	bne.n	800402e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	03d9      	lsls	r1, r3, #15
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <UART_CheckIdleState+0x88>)
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0013      	movs	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	f000 f815 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8004026:	1e03      	subs	r3, r0, #0
 8004028:	d001      	beq.n	800402e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00a      	b.n	8004044 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2270      	movs	r2, #112	; 0x70
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b004      	add	sp, #16
 800404a:	bd80      	pop	{r7, pc}
 800404c:	01ffffff 	.word	0x01ffffff

08004050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004060:	e05d      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	3301      	adds	r3, #1
 8004066:	d05a      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7fd f882 	bl	8001170 <HAL_GetTick>
 800406c:	0002      	movs	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11b      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	492f      	ldr	r1, [pc, #188]	; (8004148 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800408a:	400a      	ands	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2270      	movs	r2, #112	; 0x70
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e043      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2204      	movs	r2, #4
 80040be:	4013      	ands	r3, r2
 80040c0:	d02d      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	401a      	ands	r2, r3
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d123      	bne.n	800411e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4917      	ldr	r1, [pc, #92]	; (8004148 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2270      	movs	r2, #112	; 0x70
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	425a      	negs	r2, r3
 800412e:	4153      	adcs	r3, r2
 8004130:	b2db      	uxtb	r3, r3
 8004132:	001a      	movs	r2, r3
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d092      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	fffffe5f 	.word	0xfffffe5f

0800414c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	21c0      	movs	r1, #192	; 0xc0
 8004160:	438a      	bics	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	675a      	str	r2, [r3, #116]	; 0x74
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <UART_EndRxTransfer+0x3c>)
 8004188:	400a      	ands	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	438a      	bics	r2, r1
 800419a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	fffffedf 	.word	0xfffffedf

080041b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d014      	beq.n	80041f4 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2252      	movs	r2, #82	; 0x52
 80041ce:	2100      	movs	r1, #0
 80041d0:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	438a      	bics	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f2:	e003      	b.n	80041fc <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7ff fc92 	bl	8003b20 <HAL_UART_TxCpltCallback>
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b004      	add	sp, #16
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fc8b 	bl	8003b30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b20      	cmp	r3, #32
 8004238:	d01e      	beq.n	8004278 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	225a      	movs	r2, #90	; 0x5a
 800423e:	2100      	movs	r1, #0
 8004240:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <UART_DMAReceiveCplt+0x64>)
 800424e:	400a      	ands	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	438a      	bics	r2, r1
 8004260:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	438a      	bics	r2, r1
 8004270:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0018      	movs	r0, r3
 800427c:	f001 faec 	bl	8005858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b004      	add	sp, #16
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fffffeff 	.word	0xfffffeff

0800428c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0018      	movs	r0, r3
 800429e:	f001 fafb 	bl	8005898 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b004      	add	sp, #16
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d10a      	bne.n	80042e8 <UART_DMAError+0x3e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b21      	cmp	r3, #33	; 0x21
 80042d6:	d107      	bne.n	80042e8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2252      	movs	r2, #82	; 0x52
 80042dc:	2100      	movs	r1, #0
 80042de:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7ff ff32 	bl	800414c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d10a      	bne.n	800430c <UART_DMAError+0x62>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d107      	bne.n	800430c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	225a      	movs	r2, #90	; 0x5a
 8004300:	2100      	movs	r1, #0
 8004302:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	0018      	movs	r0, r3
 8004308:	f7ff ff34 	bl	8004174 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004310:	2210      	movs	r2, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fc10 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	225a      	movs	r2, #90	; 0x5a
 800433a:	2100      	movs	r1, #0
 800433c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2252      	movs	r2, #82	; 0x52
 8004342:	2100      	movs	r1, #0
 8004344:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff fbf9 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	438a      	bics	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f7ff fbcf 	bl	8003b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b002      	add	sp, #8
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <ble_init>:
#include "BLE.h"
#include "racing_tasks.h"

void ble_init(UART_HandleTypeDef *BLE_UART) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	HAL_UART_MspInit(BLE_UART);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f001 fe54 	bl	8006044 <HAL_UART_MspInit>
	HAL_UART_Receive_DMA(BLE_UART, (uint8_t *) &RX_BUFFER, sizeof(RX_BUFFER));
 800439c:	4904      	ldr	r1, [pc, #16]	; (80043b0 <ble_init+0x24>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2279      	movs	r2, #121	; 0x79
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff f9fc 	bl	80037a0 <HAL_UART_Receive_DMA>
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000d78 	.word	0x20000d78

080043b4 <ble_send>:

void ble_send(UART_HandleTypeDef *BLE_UART, ble_data_packet_tx_t *packet) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(BLE_UART, (uint8_t *) packet, sizeof(*packet));
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	22ed      	movs	r2, #237	; 0xed
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7ff f95b 	bl	8003680 <HAL_UART_Transmit_DMA>
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <gps_init>:
uint8_t rxBuffer[GPS_RX_BUFFER_SIZE]; // incoming data buffer to be filled by DMA

/*
 * Initialize the GPS module to a higher baud rate (9600 -> 57600), to only output GPRMC data, and to output at 10Hz rate
 */
uint8_t gps_init(UART_HandleTypeDef *GPS_UART) {
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	b09f      	sub	sp, #124	; 0x7c
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	f7fc fed1 	bl	8001184 <HAL_Delay>
	uint8_t command_baud_57600[GPS_BAUD_57600_SIZE] = GPS_BAUD_57600;
 80043e2:	2564      	movs	r5, #100	; 0x64
 80043e4:	197b      	adds	r3, r7, r5
 80043e6:	4a4c      	ldr	r2, [pc, #304]	; (8004518 <gps_init+0x144>)
 80043e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ea:	c313      	stmia	r3!, {r0, r1, r4}
 80043ec:	6811      	ldr	r1, [r2, #0]
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	8891      	ldrh	r1, [r2, #4]
 80043f2:	8099      	strh	r1, [r3, #4]
 80043f4:	7992      	ldrb	r2, [r2, #6]
 80043f6:	719a      	strb	r2, [r3, #6]
	uint8_t command_gprmc[GPS_GPRMC_ONLY_SIZE] = GPS_GPRMC_ONLY;
 80043f8:	2330      	movs	r3, #48	; 0x30
 80043fa:	18fa      	adds	r2, r7, r3
 80043fc:	4b47      	ldr	r3, [pc, #284]	; (800451c <gps_init+0x148>)
 80043fe:	0010      	movs	r0, r2
 8004400:	0019      	movs	r1, r3
 8004402:	2333      	movs	r3, #51	; 0x33
 8004404:	001a      	movs	r2, r3
 8004406:	f003 fc6f 	bl	8007ce8 <memcpy>
	uint8_t command_pqtxt[GPS_PQTXT_SIZE] = GPS_PQTXT;
 800440a:	231c      	movs	r3, #28
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	4a44      	ldr	r2, [pc, #272]	; (8004520 <gps_init+0x14c>)
 8004410:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004412:	c313      	stmia	r3!, {r0, r1, r4}
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	6019      	str	r1, [r3, #0]
 8004418:	7912      	ldrb	r2, [r2, #4]
 800441a:	711a      	strb	r2, [r3, #4]
	uint8_t command_10hz[GPS_10HZ_SIZE] = GPS_10HZ;
 800441c:	2308      	movs	r3, #8
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	4a40      	ldr	r2, [pc, #256]	; (8004524 <gps_init+0x150>)
 8004422:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004424:	c313      	stmia	r3!, {r0, r1, r4}
 8004426:	6811      	ldr	r1, [r2, #0]
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	7912      	ldrb	r2, [r2, #4]
 800442c:	711a      	strb	r2, [r3, #4]
	txBufferInsertIndex = txBuffer;
 800442e:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <gps_init+0x154>)
 8004430:	4a3e      	ldr	r2, [pc, #248]	; (800452c <gps_init+0x158>)
 8004432:	601a      	str	r2, [r3, #0]
	txBufferReadIndex = txBuffer;
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <gps_init+0x15c>)
 8004436:	4a3d      	ldr	r2, [pc, #244]	; (800452c <gps_init+0x158>)
 8004438:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef result = HAL_UART_Transmit(GPS_UART, command_baud_57600, GPS_BAUD_57600_SIZE, GPS_UART_TIMEOUT);
 800443a:	2677      	movs	r6, #119	; 0x77
 800443c:	19bc      	adds	r4, r7, r6
 800443e:	23fa      	movs	r3, #250	; 0xfa
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	1979      	adds	r1, r7, r5
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	2213      	movs	r2, #19
 8004448:	f7ff f872 	bl	8003530 <HAL_UART_Transmit>
 800444c:	0003      	movs	r3, r0
 800444e:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8004450:	19bb      	adds	r3, r7, r6
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <gps_init+0x88>
		return 0;
 8004458:	2300      	movs	r3, #0
 800445a:	e058      	b.n	800450e <gps_init+0x13a>
	}

	GPS_UART->Init.BaudRate = 57600;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	22e1      	movs	r2, #225	; 0xe1
 8004460:	0212      	lsls	r2, r2, #8
 8004462:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(GPS_UART) != HAL_OK) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f7ff f80e 	bl	8003488 <HAL_UART_Init>
 800446c:	1e03      	subs	r3, r0, #0
 800446e:	d001      	beq.n	8004474 <gps_init+0xa0>
		return 0;
 8004470:	2300      	movs	r3, #0
 8004472:	e04c      	b.n	800450e <gps_init+0x13a>
	}

	HAL_Delay(100);
 8004474:	2064      	movs	r0, #100	; 0x64
 8004476:	f7fc fe85 	bl	8001184 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_gprmc, GPS_GPRMC_ONLY_SIZE, GPS_UART_TIMEOUT);
 800447a:	2577      	movs	r5, #119	; 0x77
 800447c:	197c      	adds	r4, r7, r5
 800447e:	23fa      	movs	r3, #250	; 0xfa
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	2230      	movs	r2, #48	; 0x30
 8004484:	18b9      	adds	r1, r7, r2
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	2233      	movs	r2, #51	; 0x33
 800448a:	f7ff f851 	bl	8003530 <HAL_UART_Transmit>
 800448e:	0003      	movs	r3, r0
 8004490:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8004492:	197b      	adds	r3, r7, r5
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <gps_init+0xca>
		return 0;
 800449a:	2300      	movs	r3, #0
 800449c:	e037      	b.n	800450e <gps_init+0x13a>
	}

	HAL_Delay(100);
 800449e:	2064      	movs	r0, #100	; 0x64
 80044a0:	f7fc fe70 	bl	8001184 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_pqtxt, GPS_PQTXT_SIZE, GPS_UART_TIMEOUT);
 80044a4:	2577      	movs	r5, #119	; 0x77
 80044a6:	197c      	adds	r4, r7, r5
 80044a8:	23fa      	movs	r3, #250	; 0xfa
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	221c      	movs	r2, #28
 80044ae:	18b9      	adds	r1, r7, r2
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	2211      	movs	r2, #17
 80044b4:	f7ff f83c 	bl	8003530 <HAL_UART_Transmit>
 80044b8:	0003      	movs	r3, r0
 80044ba:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80044bc:	197b      	adds	r3, r7, r5
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <gps_init+0xf4>
		return 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e022      	b.n	800450e <gps_init+0x13a>
	}

	HAL_Delay(100);
 80044c8:	2064      	movs	r0, #100	; 0x64
 80044ca:	f7fc fe5b 	bl	8001184 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_10hz, GPS_10HZ_SIZE, GPS_UART_TIMEOUT);
 80044ce:	2577      	movs	r5, #119	; 0x77
 80044d0:	197c      	adds	r4, r7, r5
 80044d2:	23fa      	movs	r3, #250	; 0xfa
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	2208      	movs	r2, #8
 80044d8:	18b9      	adds	r1, r7, r2
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	2211      	movs	r2, #17
 80044de:	f7ff f827 	bl	8003530 <HAL_UART_Transmit>
 80044e2:	0003      	movs	r3, r0
 80044e4:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80044e6:	197b      	adds	r3, r7, r5
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <gps_init+0x11e>
		return 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e00d      	b.n	800450e <gps_init+0x13a>
	}

	HAL_Delay(100);
 80044f2:	2064      	movs	r0, #100	; 0x64
 80044f4:	f7fc fe46 	bl	8001184 <HAL_Delay>

	// Initialize DMA for GPS_UART
	HAL_UART_MspInit(GPS_UART);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f001 fda2 	bl	8006044 <HAL_UART_MspInit>

	// Begin Receiving DMA for GPS_UART
	HAL_UART_Receive_DMA(GPS_UART, rxBuffer, GPS_RX_BUFFER_SIZE);
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <gps_init+0x160>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff f94a 	bl	80037a0 <HAL_UART_Receive_DMA>
	return 1;
 800450c:	2301      	movs	r3, #1
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b01f      	add	sp, #124	; 0x7c
 8004514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	08007d44 	.word	0x08007d44
 800451c:	08007d58 	.word	0x08007d58
 8004520:	08007d8c 	.word	0x08007d8c
 8004524:	08007da0 	.word	0x08007da0
 8004528:	20000f80 	.word	0x20000f80
 800452c:	20000fe0 	.word	0x20000fe0
 8004530:	20000f6c 	.word	0x20000f6c
 8004534:	20000f8c 	.word	0x20000f8c

08004538 <gps_recieve_full>:

void gps_recieve_full() {
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer + GPS_RX_BUFFER_HALF_SIZE, GPS_RX_BUFFER_HALF_SIZE);
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <gps_recieve_full+0x34>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	490b      	ldr	r1, [pc, #44]	; (8004570 <gps_recieve_full+0x38>)
 8004542:	2220      	movs	r2, #32
 8004544:	0018      	movs	r0, r3
 8004546:	f003 fbcf 	bl	8007ce8 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <gps_recieve_full+0x34>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <gps_recieve_full+0x3c>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d004      	beq.n	800455e <gps_recieve_full+0x26>
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <gps_recieve_full+0x34>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3320      	adds	r3, #32
 800455a:	001a      	movs	r2, r3
 800455c:	e000      	b.n	8004560 <gps_recieve_full+0x28>
 800455e:	4a06      	ldr	r2, [pc, #24]	; (8004578 <gps_recieve_full+0x40>)
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <gps_recieve_full+0x34>)
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	20000f80 	.word	0x20000f80
 8004570:	20000fac 	.word	0x20000fac
 8004574:	200013a0 	.word	0x200013a0
 8004578:	20000fe0 	.word	0x20000fe0

0800457c <gps_recieve_half>:

void gps_recieve_half() {
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer, GPS_RX_BUFFER_HALF_SIZE);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <gps_recieve_half+0x34>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <gps_recieve_half+0x38>)
 8004586:	2220      	movs	r2, #32
 8004588:	0018      	movs	r0, r3
 800458a:	f003 fbad 	bl	8007ce8 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <gps_recieve_half+0x34>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <gps_recieve_half+0x3c>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d004      	beq.n	80045a2 <gps_recieve_half+0x26>
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <gps_recieve_half+0x34>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3320      	adds	r3, #32
 800459e:	001a      	movs	r2, r3
 80045a0:	e000      	b.n	80045a4 <gps_recieve_half+0x28>
 80045a2:	4a06      	ldr	r2, [pc, #24]	; (80045bc <gps_recieve_half+0x40>)
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <gps_recieve_half+0x34>)
 80045a6:	601a      	str	r2, [r3, #0]
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20000f80 	.word	0x20000f80
 80045b4:	20000f8c 	.word	0x20000f8c
 80045b8:	200013a0 	.word	0x200013a0
 80045bc:	20000fe0 	.word	0x20000fe0

080045c0 <gps_get_data>:

uint8_t ** gps_get_data(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
	read_params[0] = NULL;
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <gps_get_data+0xa4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
	read_params[1] = NULL;
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <gps_get_data+0xa4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
	txBufferReadIndex = txBufferReadIndex == txBuffer + GPS_TX_BUFFER_SIZE ? txBuffer : txBufferReadIndex;
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <gps_get_data+0xa8>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <gps_get_data+0xac>)
 80045d8:	429a      	cmp	r2, r3
 80045da:	d002      	beq.n	80045e2 <gps_get_data+0x22>
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <gps_get_data+0xa8>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	e000      	b.n	80045e4 <gps_get_data+0x24>
 80045e2:	4a23      	ldr	r2, [pc, #140]	; (8004670 <gps_get_data+0xb0>)
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <gps_get_data+0xa8>)
 80045e6:	601a      	str	r2, [r3, #0]
	uint8_t * tmp = txBufferReadIndex;
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <gps_get_data+0xa8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 80045ee:	e023      	b.n	8004638 <gps_get_data+0x78>
		if(*tmp == '$') {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b24      	cmp	r3, #36	; 0x24
 80045f6:	d103      	bne.n	8004600 <gps_get_data+0x40>
			read_params[0] = tmp;
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <gps_get_data+0xa4>)
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e012      	b.n	8004626 <gps_get_data+0x66>
		} else if (*tmp == '\n') {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b0a      	cmp	r3, #10
 8004606:	d10e      	bne.n	8004626 <gps_get_data+0x66>
			if (read_params[0] == NULL) {
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <gps_get_data+0xa4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <gps_get_data+0x5c>
				txBufferReadIndex = tmp + 1; // if txBufferReadIndex is somehow in the middle of a command, reset it here -- this may happen on startup
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <gps_get_data+0xa8>)
 8004616:	601a      	str	r2, [r3, #0]
				return read_params;
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <gps_get_data+0xa4>)
 800461a:	e01f      	b.n	800465c <gps_get_data+0x9c>
			}
			read_params[1] = tmp + 1;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <gps_get_data+0xa4>)
 8004622:	605a      	str	r2, [r3, #4]
			break;
 8004624:	e00d      	b.n	8004642 <gps_get_data+0x82>
		}
		tmp = (tmp == txBuffer + (GPS_TX_BUFFER_SIZE - 1)) ? txBuffer : tmp + 1;
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <gps_get_data+0xb4>)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	429a      	cmp	r2, r3
 800462c:	d002      	beq.n	8004634 <gps_get_data+0x74>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3301      	adds	r3, #1
 8004632:	e000      	b.n	8004636 <gps_get_data+0x76>
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <gps_get_data+0xb0>)
 8004636:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <gps_get_data+0xb8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d1d6      	bne.n	80045f0 <gps_get_data+0x30>
	}

	if (read_params[0] != NULL && read_params[1] != NULL) {
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <gps_get_data+0xa4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <gps_get_data+0x9a>
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <gps_get_data+0xa4>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <gps_get_data+0x9a>
		txBufferReadIndex = read_params[1];
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <gps_get_data+0xa4>)
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <gps_get_data+0xa8>)
 8004658:	601a      	str	r2, [r3, #0]
	}

	return read_params;
 800465a:	4b02      	ldr	r3, [pc, #8]	; (8004664 <gps_get_data+0xa4>)
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200013f0 	.word	0x200013f0
 8004668:	20000f6c 	.word	0x20000f6c
 800466c:	200013e0 	.word	0x200013e0
 8004670:	20000fe0 	.word	0x20000fe0
 8004674:	200013df 	.word	0x200013df
 8004678:	20000f80 	.word	0x20000f80

0800467c <LCD_Init>:
/*
   brief:    Initializes the LCD screen - once called, the LCD is ready
   	   	   	   to be used
*/
/**************************************************************************/
void LCD_Init(void) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	  uint8_t cmd, x, numArgs;
	  const uint8_t *addr = initcmd;
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <LCD_Init+0xd8>)
 8004684:	607b      	str	r3, [r7, #4]

	  _width = ILI9341_TFTWIDTH;
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <LCD_Init+0xdc>)
 8004688:	22f0      	movs	r2, #240	; 0xf0
 800468a:	801a      	strh	r2, [r3, #0]
	  _height = ILI9341_TFTHEIGHT;
 800468c:	4b33      	ldr	r3, [pc, #204]	; (800475c <LCD_Init+0xe0>)
 800468e:	22a0      	movs	r2, #160	; 0xa0
 8004690:	0052      	lsls	r2, r2, #1
 8004692:	801a      	strh	r2, [r3, #0]
	  cursor_y = cursor_x = 0;
 8004694:	4b32      	ldr	r3, [pc, #200]	; (8004760 <LCD_Init+0xe4>)
 8004696:	2200      	movs	r2, #0
 8004698:	801a      	strh	r2, [r3, #0]
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <LCD_Init+0xe4>)
 800469c:	2200      	movs	r2, #0
 800469e:	5e9a      	ldrsh	r2, [r3, r2]
 80046a0:	4b30      	ldr	r3, [pc, #192]	; (8004764 <LCD_Init+0xe8>)
 80046a2:	801a      	strh	r2, [r3, #0]
	  textsize_x = textsize_y = 1;
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <LCD_Init+0xec>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <LCD_Init+0xec>)
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <LCD_Init+0xf0>)
 80046b0:	701a      	strb	r2, [r3, #0]
	  textcolor = textbgcolor = bgcolor = 0xFFFF;
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <LCD_Init+0xf4>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	4252      	negs	r2, r2
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <LCD_Init+0xf4>)
 80046bc:	881a      	ldrh	r2, [r3, #0]
 80046be:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <LCD_Init+0xf8>)
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <LCD_Init+0xf8>)
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <LCD_Init+0xfc>)
 80046c8:	801a      	strh	r2, [r3, #0]
	  wrap = 1;
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <LCD_Init+0x100>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
	  _cp437 = 0;
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <LCD_Init+0x104>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
	  text = NULL;
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <LCD_Init+0x108>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
	  textlength = 0;
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <LCD_Init+0x10c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]

	    // Resets the LCD
	    sendCommand(ILI9341_SWRESET);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f000 f984 	bl	80049f0 <sendCommand>
	    HAL_Delay(150);
 80046e8:	2096      	movs	r0, #150	; 0x96
 80046ea:	f7fc fd4b 	bl	8001184 <HAL_Delay>

	    // Sends the init command to the LCD
	    while ((cmd = pgm_read_byte(addr++)) > 0) {
 80046ee:	e020      	b.n	8004732 <LCD_Init+0xb6>
	      x = pgm_read_byte(addr++);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	1cba      	adds	r2, r7, #2
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	7013      	strb	r3, [r2, #0]
	      numArgs = x & 0x7F;
 80046fc:	1c7b      	adds	r3, r7, #1
 80046fe:	1cba      	adds	r2, r7, #2
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	217f      	movs	r1, #127	; 0x7f
 8004704:	400a      	ands	r2, r1
 8004706:	701a      	strb	r2, [r3, #0]
	      sendCommands(cmd, addr, numArgs);
 8004708:	1c7b      	adds	r3, r7, #1
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	1cfb      	adds	r3, r7, #3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	0018      	movs	r0, r3
 8004714:	f000 f99e 	bl	8004a54 <sendCommands>
	      addr += numArgs;
 8004718:	1c7b      	adds	r3, r7, #1
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	18d3      	adds	r3, r2, r3
 8004720:	607b      	str	r3, [r7, #4]
	      if (x & 0x80)
 8004722:	1cbb      	adds	r3, r7, #2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b25b      	sxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	da02      	bge.n	8004732 <LCD_Init+0xb6>
	     	 HAL_Delay(150);
 800472c:	2096      	movs	r0, #150	; 0x96
 800472e:	f7fc fd29 	bl	8001184 <HAL_Delay>
	    while ((cmd = pgm_read_byte(addr++)) > 0) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	1cfa      	adds	r2, r7, #3
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	7013      	strb	r3, [r2, #0]
 800473e:	1cfb      	adds	r3, r7, #3
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1d4      	bne.n	80046f0 <LCD_Init+0x74>
	    }

	    // sets the screen to display text in landscape mode
	 	 setRotation(1);
 8004746:	2001      	movs	r0, #1
 8004748:	f000 fb9e 	bl	8004e88 <setRotation>

}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08007ec8 	.word	0x08007ec8
 8004758:	200013e4 	.word	0x200013e4
 800475c:	200013ea 	.word	0x200013ea
 8004760:	200013e6 	.word	0x200013e6
 8004764:	20000f68 	.word	0x20000f68
 8004768:	200013fa 	.word	0x200013fa
 800476c:	20000f7c 	.word	0x20000f7c
 8004770:	20000f74 	.word	0x20000f74
 8004774:	200013f8 	.word	0x200013f8
 8004778:	200013fc 	.word	0x200013fc
 800477c:	200013e8 	.word	0x200013e8
 8004780:	20000f88 	.word	0x20000f88
 8004784:	20000f78 	.word	0x20000f78
 8004788:	20000d74 	.word	0x20000d74

0800478c <fillScreen>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void fillScreen(uint16_t color) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af02      	add	r7, sp, #8
 8004792:	0002      	movs	r2, r0
 8004794:	1dbb      	adds	r3, r7, #6
 8004796:	801a      	strh	r2, [r3, #0]
	bgcolor = color;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <fillScreen+0x38>)
 800479a:	1dba      	adds	r2, r7, #6
 800479c:	8812      	ldrh	r2, [r2, #0]
 800479e:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, _width, _height, color);
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <fillScreen+0x3c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	5e9a      	ldrsh	r2, [r3, r2]
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <fillScreen+0x40>)
 80047a8:	2100      	movs	r1, #0
 80047aa:	5e59      	ldrsh	r1, [r3, r1]
 80047ac:	1dbb      	adds	r3, r7, #6
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	000b      	movs	r3, r1
 80047b4:	2100      	movs	r1, #0
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 f80a 	bl	80047d0 <fillRect>
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000f74 	.word	0x20000f74
 80047c8:	200013e4 	.word	0x200013e4
 80047cc:	200013ea 	.word	0x200013ea

080047d0 <fillRect>:
    @param    w   Width in pixels
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	0005      	movs	r5, r0
 80047d8:	000c      	movs	r4, r1
 80047da:	0010      	movs	r0, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	1dbb      	adds	r3, r7, #6
 80047e0:	1c2a      	adds	r2, r5, #0
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	1c22      	adds	r2, r4, #0
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	1cbb      	adds	r3, r7, #2
 80047ec:	1c02      	adds	r2, r0, #0
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	003b      	movs	r3, r7
 80047f2:	1c0a      	adds	r2, r1, #0
 80047f4:	801a      	strh	r2, [r3, #0]
	if (w && h) {   // Nonzero width and height?
 80047f6:	1cbb      	adds	r3, r7, #2
 80047f8:	2200      	movs	r2, #0
 80047fa:	5e9b      	ldrsh	r3, [r3, r2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d100      	bne.n	8004802 <fillRect+0x32>
 8004800:	e0ee      	b.n	80049e0 <fillRect+0x210>
 8004802:	003b      	movs	r3, r7
 8004804:	2200      	movs	r2, #0
 8004806:	5e9b      	ldrsh	r3, [r3, r2]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d100      	bne.n	800480e <fillRect+0x3e>
 800480c:	e0e8      	b.n	80049e0 <fillRect+0x210>
	    if (w < 0) {  // If negative width...
 800480e:	1cbb      	adds	r3, r7, #2
 8004810:	2200      	movs	r2, #0
 8004812:	5e9b      	ldrsh	r3, [r3, r2]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da0f      	bge.n	8004838 <fillRect+0x68>
	      x += w + 1; //   Move X to left edge
 8004818:	1cbb      	adds	r3, r7, #2
 800481a:	881a      	ldrh	r2, [r3, #0]
 800481c:	1dbb      	adds	r3, r7, #6
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	3301      	adds	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	1dbb      	adds	r3, r7, #6
 800482a:	801a      	strh	r2, [r3, #0]
	      w = -w;     //   Use positive width
 800482c:	1cbb      	adds	r3, r7, #2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	425b      	negs	r3, r3
 8004832:	b29a      	uxth	r2, r3
 8004834:	1cbb      	adds	r3, r7, #2
 8004836:	801a      	strh	r2, [r3, #0]
	    }
	    if (x < _width) { // Not off right
 8004838:	4b6b      	ldr	r3, [pc, #428]	; (80049e8 <fillRect+0x218>)
 800483a:	2200      	movs	r2, #0
 800483c:	5e9b      	ldrsh	r3, [r3, r2]
 800483e:	1dba      	adds	r2, r7, #6
 8004840:	2100      	movs	r1, #0
 8004842:	5e52      	ldrsh	r2, [r2, r1]
 8004844:	429a      	cmp	r2, r3
 8004846:	db00      	blt.n	800484a <fillRect+0x7a>
 8004848:	e0ca      	b.n	80049e0 <fillRect+0x210>
	      if (h < 0) {    // If negative height...
 800484a:	003b      	movs	r3, r7
 800484c:	2200      	movs	r2, #0
 800484e:	5e9b      	ldrsh	r3, [r3, r2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	da0f      	bge.n	8004874 <fillRect+0xa4>
	        y += h + 1;   //   Move Y to top edge
 8004854:	003b      	movs	r3, r7
 8004856:	881a      	ldrh	r2, [r3, #0]
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	18d3      	adds	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	801a      	strh	r2, [r3, #0]
	        h = -h;       //   Use positive height
 8004868:	003b      	movs	r3, r7
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	425b      	negs	r3, r3
 800486e:	b29a      	uxth	r2, r3
 8004870:	003b      	movs	r3, r7
 8004872:	801a      	strh	r2, [r3, #0]
	      }
	      if (y < _height) { // Not off bottom
 8004874:	4b5d      	ldr	r3, [pc, #372]	; (80049ec <fillRect+0x21c>)
 8004876:	2200      	movs	r2, #0
 8004878:	5e9b      	ldrsh	r3, [r3, r2]
 800487a:	1d3a      	adds	r2, r7, #4
 800487c:	2100      	movs	r1, #0
 800487e:	5e52      	ldrsh	r2, [r2, r1]
 8004880:	429a      	cmp	r2, r3
 8004882:	db00      	blt.n	8004886 <fillRect+0xb6>
 8004884:	e0ac      	b.n	80049e0 <fillRect+0x210>
	        int16_t x2 = x + w - 1;
 8004886:	1dbb      	adds	r3, r7, #6
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	1cbb      	adds	r3, r7, #2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	210a      	movs	r1, #10
 8004898:	187b      	adds	r3, r7, r1
 800489a:	801a      	strh	r2, [r3, #0]
	        if (x2 >= 0) { // Not off left
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2200      	movs	r2, #0
 80048a0:	5e9b      	ldrsh	r3, [r3, r2]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da00      	bge.n	80048a8 <fillRect+0xd8>
 80048a6:	e09b      	b.n	80049e0 <fillRect+0x210>
	          int16_t y2 = y + h - 1;
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	003b      	movs	r3, r7
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	2108      	movs	r1, #8
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	801a      	strh	r2, [r3, #0]
	          if (y2 >= 0) { // Not off top
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	2200      	movs	r2, #0
 80048c2:	5e9b      	ldrsh	r3, [r3, r2]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da00      	bge.n	80048ca <fillRect+0xfa>
 80048c8:	e08a      	b.n	80049e0 <fillRect+0x210>
	        	  int16_t i, j;
	            // Rectangle partly or fully overlaps screen
	            if (x < 0) {
 80048ca:	1dbb      	adds	r3, r7, #6
 80048cc:	2200      	movs	r2, #0
 80048ce:	5e9b      	ldrsh	r3, [r3, r2]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da09      	bge.n	80048e8 <fillRect+0x118>
	              x = 0;
 80048d4:	1dbb      	adds	r3, r7, #6
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]
	              w = x2 + 1;
 80048da:	230a      	movs	r3, #10
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	1cbb      	adds	r3, r7, #2
 80048e6:	801a      	strh	r2, [r3, #0]
	            } // Clip left
	            if (y < 0) {
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	2200      	movs	r2, #0
 80048ec:	5e9b      	ldrsh	r3, [r3, r2]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da09      	bge.n	8004906 <fillRect+0x136>
	              y = 0;
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
	              h = y2 + 1;
 80048f8:	2308      	movs	r3, #8
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	003b      	movs	r3, r7
 8004904:	801a      	strh	r2, [r3, #0]
	            } // Clip top
	            if (x2 >= _width) {
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <fillRect+0x218>)
 8004908:	2200      	movs	r2, #0
 800490a:	5e9b      	ldrsh	r3, [r3, r2]
 800490c:	220a      	movs	r2, #10
 800490e:	18ba      	adds	r2, r7, r2
 8004910:	2100      	movs	r1, #0
 8004912:	5e52      	ldrsh	r2, [r2, r1]
 8004914:	429a      	cmp	r2, r3
 8004916:	db09      	blt.n	800492c <fillRect+0x15c>
	              w = _width - x;
 8004918:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <fillRect+0x218>)
 800491a:	2200      	movs	r2, #0
 800491c:	5e9b      	ldrsh	r3, [r3, r2]
 800491e:	b29a      	uxth	r2, r3
 8004920:	1dbb      	adds	r3, r7, #6
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	b29a      	uxth	r2, r3
 8004928:	1cbb      	adds	r3, r7, #2
 800492a:	801a      	strh	r2, [r3, #0]
	            } // Clip right
	            if (y2 >= _height) {
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <fillRect+0x21c>)
 800492e:	2200      	movs	r2, #0
 8004930:	5e9b      	ldrsh	r3, [r3, r2]
 8004932:	2208      	movs	r2, #8
 8004934:	18ba      	adds	r2, r7, r2
 8004936:	2100      	movs	r1, #0
 8004938:	5e52      	ldrsh	r2, [r2, r1]
 800493a:	429a      	cmp	r2, r3
 800493c:	db09      	blt.n	8004952 <fillRect+0x182>
	              h = _height - y;
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <fillRect+0x21c>)
 8004940:	2200      	movs	r2, #0
 8004942:	5e9b      	ldrsh	r3, [r3, r2]
 8004944:	b29a      	uxth	r2, r3
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	b29a      	uxth	r2, r3
 800494e:	003b      	movs	r3, r7
 8004950:	801a      	strh	r2, [r3, #0]
	            } // Clip bottom
	            	for (i = x; i < x + w; i++) {
 8004952:	230e      	movs	r3, #14
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	1dba      	adds	r2, r7, #6
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e033      	b.n	80049c6 <fillRect+0x1f6>
	            		for (j = y; j < y + h; j++) {
 800495e:	230c      	movs	r3, #12
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	1d3a      	adds	r2, r7, #4
 8004964:	8812      	ldrh	r2, [r2, #0]
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e017      	b.n	800499a <fillRect+0x1ca>
	            			writePixel(i, j, color);
 800496a:	2320      	movs	r3, #32
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	210c      	movs	r1, #12
 8004972:	000c      	movs	r4, r1
 8004974:	187b      	adds	r3, r7, r1
 8004976:	2100      	movs	r1, #0
 8004978:	5e59      	ldrsh	r1, [r3, r1]
 800497a:	230e      	movs	r3, #14
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	2000      	movs	r0, #0
 8004980:	5e1b      	ldrsh	r3, [r3, r0]
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f9c4 	bl	8004d10 <writePixel>
	            		for (j = y; j < y + h; j++) {
 8004988:	0021      	movs	r1, r4
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2200      	movs	r2, #0
 800498e:	5e9b      	ldrsh	r3, [r3, r2]
 8004990:	b29b      	uxth	r3, r3
 8004992:	3301      	adds	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	187b      	adds	r3, r7, r1
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	230c      	movs	r3, #12
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2200      	movs	r2, #0
 80049a0:	5e9a      	ldrsh	r2, [r3, r2]
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	2100      	movs	r1, #0
 80049a6:	5e59      	ldrsh	r1, [r3, r1]
 80049a8:	003b      	movs	r3, r7
 80049aa:	2000      	movs	r0, #0
 80049ac:	5e1b      	ldrsh	r3, [r3, r0]
 80049ae:	18cb      	adds	r3, r1, r3
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dbda      	blt.n	800496a <fillRect+0x19a>
	            	for (i = x; i < x + w; i++) {
 80049b4:	210e      	movs	r1, #14
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	2200      	movs	r2, #0
 80049ba:	5e9b      	ldrsh	r3, [r3, r2]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	230e      	movs	r3, #14
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	5e9a      	ldrsh	r2, [r3, r2]
 80049ce:	1dbb      	adds	r3, r7, #6
 80049d0:	2100      	movs	r1, #0
 80049d2:	5e59      	ldrsh	r1, [r3, r1]
 80049d4:	1cbb      	adds	r3, r7, #2
 80049d6:	2000      	movs	r0, #0
 80049d8:	5e1b      	ldrsh	r3, [r3, r0]
 80049da:	18cb      	adds	r3, r1, r3
 80049dc:	429a      	cmp	r2, r3
 80049de:	dbbe      	blt.n	800495e <fillRect+0x18e>
	          }
	        }
	      }
	    }
	}
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b004      	add	sp, #16
 80049e6:	bdb0      	pop	{r4, r5, r7, pc}
 80049e8:	200013e4 	.word	0x200013e4
 80049ec:	200013ea 	.word	0x200013ea

080049f0 <sendCommand>:

/*
   brief:    Sends the command byte (no data bytes) to the LCD
   param:    commandByte	The command to be sent
*/
void sendCommand(uint8_t commandByte) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	0002      	movs	r2, r0
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80049fc:	2390      	movs	r3, #144	; 0x90
 80049fe:	05db      	lsls	r3, r3, #23
 8004a00:	2200      	movs	r2, #0
 8004a02:	2110      	movs	r1, #16
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fc ffdb 	bl	80019c0 <HAL_GPIO_WritePin>
    // Command mode
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004a0a:	2390      	movs	r3, #144	; 0x90
 8004a0c:	05db      	lsls	r3, r3, #23
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2120      	movs	r1, #32
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fc ffd4 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <sendCommand+0x60>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2110      	movs	r1, #16
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7fc ffce 	bl	80019c0 <HAL_GPIO_WritePin>
    // Send the command byte
    write8Bit(commandByte);
 8004a24:	1dfb      	adds	r3, r7, #7
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f8fd 	bl	8004c28 <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <sendCommand+0x60>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	2110      	movs	r1, #16
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fc ffc3 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8004a3a:	2390      	movs	r3, #144	; 0x90
 8004a3c:	05db      	lsls	r3, r3, #23
 8004a3e:	2201      	movs	r2, #1
 8004a40:	2110      	movs	r1, #16
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7fc ffbc 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	48000800 	.word	0x48000800

08004a54 <sendCommands>:
   @brief    Sends the command byte and data bytes to the LCD
   @param    commandByte	The command to be sent
   @param    dataBytes		The data bytes to be sent
   @param    numDataBytes	The number of data bytes
*/
void sendCommands(uint8_t commandByte, const uint8_t *dataBytes, uint8_t numDataBytes) {
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6039      	str	r1, [r7, #0]
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	1dfb      	adds	r3, r7, #7
 8004a60:	1c02      	adds	r2, r0, #0
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	1dbb      	adds	r3, r7, #6
 8004a66:	1c0a      	adds	r2, r1, #0
 8004a68:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004a6a:	2390      	movs	r3, #144	; 0x90
 8004a6c:	05db      	lsls	r3, r3, #23
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2110      	movs	r1, #16
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7fc ffa4 	bl	80019c0 <HAL_GPIO_WritePin>
    // Command mode
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004a78:	2390      	movs	r3, #144	; 0x90
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2120      	movs	r1, #32
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fc ff9d 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004a86:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <sendCommands+0xcc>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2110      	movs	r1, #16
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7fc ff97 	bl	80019c0 <HAL_GPIO_WritePin>
    // Send the command byte
    write8Bit(commandByte);
 8004a92:	1dfb      	adds	r3, r7, #7
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f8c6 	bl	8004c28 <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <sendCommands+0xcc>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7fc ff8c 	bl	80019c0 <HAL_GPIO_WritePin>

	  if (numDataBytes > 0) {
 8004aa8:	1dbb      	adds	r3, r7, #6
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02c      	beq.n	8004b0a <sendCommands+0xb6>
		  uint8_t i;
		  // Data mode
		  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004ab0:	2390      	movs	r3, #144	; 0x90
 8004ab2:	05db      	lsls	r3, r3, #23
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fc ff81 	bl	80019c0 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataBytes; i++) {
 8004abe:	230f      	movs	r3, #15
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e019      	b.n	8004afc <sendCommands+0xa8>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <sendCommands+0xcc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	2110      	movs	r1, #16
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fc ff76 	bl	80019c0 <HAL_GPIO_WritePin>
			    // Send the data byte
			    write8Bit(*(dataBytes + i));
 8004ad4:	240f      	movs	r4, #15
 8004ad6:	193b      	adds	r3, r7, r4
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	18d3      	adds	r3, r2, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 f8a1 	bl	8004c28 <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <sendCommands+0xcc>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	2110      	movs	r1, #16
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7fc ff67 	bl	80019c0 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataBytes; i++) {
 8004af2:	193b      	adds	r3, r7, r4
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	193b      	adds	r3, r7, r4
 8004af8:	3201      	adds	r2, #1
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fa      	adds	r2, r7, r3
 8004b00:	1dbb      	adds	r3, r7, #6
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3de      	bcc.n	8004ac8 <sendCommands+0x74>
		  }
	  }
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8004b0a:	2390      	movs	r3, #144	; 0x90
 8004b0c:	05db      	lsls	r3, r3, #23
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2110      	movs	r1, #16
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fc ff54 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b005      	add	sp, #20
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	48000800 	.word	0x48000800

08004b24 <sendCommands16>:
   @brief    Sends the command byte and 16-bit data bytes to the LCD
   @param    commandByte	The command to be sent
   @param    dataHalfWords		The data half-words to be sent
   @param    numDataHalfWords	The number of data half-words
*/
void sendCommands16(uint8_t commandByte, const uint16_t *dataHalfWords, uint8_t numDataHalfWords) {
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6039      	str	r1, [r7, #0]
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	1c02      	adds	r2, r0, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	1c0a      	adds	r2, r1, #0
 8004b38:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004b3a:	2390      	movs	r3, #144	; 0x90
 8004b3c:	05db      	lsls	r3, r3, #23
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2110      	movs	r1, #16
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fc ff3c 	bl	80019c0 <HAL_GPIO_WritePin>
    // Command mode
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004b48:	2390      	movs	r3, #144	; 0x90
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2120      	movs	r1, #32
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fc ff35 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <sendCommands16+0x100>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2110      	movs	r1, #16
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fc ff2f 	bl	80019c0 <HAL_GPIO_WritePin>
	// Send the command byte
	write8Bit(commandByte);
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f85e 	bl	8004c28 <write8Bit>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <sendCommands16+0x100>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2110      	movs	r1, #16
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fc ff24 	bl	80019c0 <HAL_GPIO_WritePin>

	  if (numDataHalfWords > 0) {
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d046      	beq.n	8004c0e <sendCommands16+0xea>
			uint8_t i;
		  // Data mode
		  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004b80:	2390      	movs	r3, #144	; 0x90
 8004b82:	05db      	lsls	r3, r3, #23
 8004b84:	2201      	movs	r2, #1
 8004b86:	2120      	movs	r1, #32
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fc ff19 	bl	80019c0 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataHalfWords; i++) {
 8004b8e:	230f      	movs	r3, #15
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e033      	b.n	8004c00 <sendCommands16+0xdc>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004b98:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <sendCommands16+0x100>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2110      	movs	r1, #16
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fc ff0e 	bl	80019c0 <HAL_GPIO_WritePin>
				write8Bit((uint8_t)((*(dataHalfWords + i)) >> 8));
 8004ba4:	240f      	movs	r4, #15
 8004ba6:	193b      	adds	r3, r7, r4
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	18d3      	adds	r3, r2, r3
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f835 	bl	8004c28 <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <sendCommands16+0x100>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2110      	movs	r1, #16
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fc fefb 	bl	80019c0 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <sendCommands16+0x100>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2110      	movs	r1, #16
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7fc fef5 	bl	80019c0 <HAL_GPIO_WritePin>
				write8Bit((uint8_t)((*(dataHalfWords + i)) & 0xFF));
 8004bd6:	193b      	adds	r3, r7, r4
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	18d3      	adds	r3, r2, r3
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	0018      	movs	r0, r3
 8004be6:	f000 f81f 	bl	8004c28 <write8Bit>
			    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <sendCommands16+0x100>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	2110      	movs	r1, #16
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7fc fee5 	bl	80019c0 <HAL_GPIO_WritePin>
		  for (i = 0; i < numDataHalfWords; i++) {
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	3201      	adds	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	230f      	movs	r3, #15
 8004c02:	18fa      	adds	r2, r7, r3
 8004c04:	1dbb      	adds	r3, r7, #6
 8004c06:	7812      	ldrb	r2, [r2, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3c4      	bcc.n	8004b98 <sendCommands16+0x74>
		  }
	  }
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8004c0e:	2390      	movs	r3, #144	; 0x90
 8004c10:	05db      	lsls	r3, r3, #23
 8004c12:	2201      	movs	r2, #1
 8004c14:	2110      	movs	r1, #16
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7fc fed2 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b005      	add	sp, #20
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	48000800 	.word	0x48000800

08004c28 <write8Bit>:

/*
    @brief  Writes data to LCD
    @param    d		The data to be sent
*/
void write8Bit(uint8_t d) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	0002      	movs	r2, r0
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	701a      	strb	r2, [r3, #0]
	// A bit slower than before - about 1 sec difference for fillScreen()
	GPIOB->BRR = 0xf000;
 8004c34:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <write8Bit+0xe0>)
 8004c36:	22f0      	movs	r2, #240	; 0xf0
 8004c38:	0212      	lsls	r2, r2, #8
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BRR = 0x03c0;
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <write8Bit+0xe4>)
 8004c3e:	22f0      	movs	r2, #240	; 0xf0
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BSRR  |= ((d & 0x01)<<8);
 8004c44:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <write8Bit+0xe4>)
 8004c46:	6999      	ldr	r1, [r3, #24]
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	001a      	movs	r2, r3
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	401a      	ands	r2, r3
 8004c56:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <write8Bit+0xe4>)
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR  |= ((d & 0x02)<<5);
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <write8Bit+0xe4>)
 8004c5e:	6999      	ldr	r1, [r3, #24]
 8004c60:	1dfb      	adds	r3, r7, #7
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	015b      	lsls	r3, r3, #5
 8004c66:	001a      	movs	r2, r3
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <write8Bit+0xe4>)
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x04)<<12);
 8004c72:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <write8Bit+0xe0>)
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	031b      	lsls	r3, r3, #12
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	401a      	ands	r2, r3
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <write8Bit+0xe0>)
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x08)<<9);
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <write8Bit+0xe0>)
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	025b      	lsls	r3, r3, #9
 8004c94:	001a      	movs	r2, r3
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	015b      	lsls	r3, r3, #5
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <write8Bit+0xe0>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR  |= ((d & 0x10)<<5);
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <write8Bit+0xe4>)
 8004ca4:	6999      	ldr	r1, [r3, #24]
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	015b      	lsls	r3, r3, #5
 8004cac:	001a      	movs	r2, r3
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <write8Bit+0xe4>)
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR  |= ((d & 0x20)<<2);
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <write8Bit+0xe4>)
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	401a      	ands	r2, r3
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <write8Bit+0xe4>)
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x40)<<9);
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <write8Bit+0xe0>)
 8004cd2:	6999      	ldr	r1, [r3, #24]
 8004cd4:	1dfb      	adds	r3, r7, #7
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	025b      	lsls	r3, r3, #9
 8004cda:	001a      	movs	r2, r3
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <write8Bit+0xe0>)
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR  |= ((d & 0x80)<<6);
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <write8Bit+0xe0>)
 8004cea:	6999      	ldr	r1, [r3, #24]
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	019b      	lsls	r3, r3, #6
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	019b      	lsls	r3, r3, #6
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <write8Bit+0xe0>)
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	619a      	str	r2, [r3, #24]
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	48000800 	.word	0x48000800

08004d10 <writePixel>:
            Not self-contained; should follow a startWrite() call.
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void writePixel(int16_t x, int16_t y, uint16_t color) {
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	0004      	movs	r4, r0
 8004d18:	0008      	movs	r0, r1
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	1dbb      	adds	r3, r7, #6
 8004d1e:	1c22      	adds	r2, r4, #0
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	1c02      	adds	r2, r0, #0
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	1cbb      	adds	r3, r7, #2
 8004d2a:	1c0a      	adds	r2, r1, #0
 8004d2c:	801a      	strh	r2, [r3, #0]
	  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004d2e:	1dbb      	adds	r3, r7, #6
 8004d30:	2200      	movs	r2, #0
 8004d32:	5e9b      	ldrsh	r3, [r3, r2]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db57      	blt.n	8004de8 <writePixel+0xd8>
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <writePixel+0xe0>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	5e9b      	ldrsh	r3, [r3, r2]
 8004d3e:	1dba      	adds	r2, r7, #6
 8004d40:	2100      	movs	r1, #0
 8004d42:	5e52      	ldrsh	r2, [r2, r1]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	da4f      	bge.n	8004de8 <writePixel+0xd8>
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db4a      	blt.n	8004de8 <writePixel+0xd8>
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <writePixel+0xe4>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	5e9b      	ldrsh	r3, [r3, r2]
 8004d58:	1d3a      	adds	r2, r7, #4
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5e52      	ldrsh	r2, [r2, r1]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	da42      	bge.n	8004de8 <writePixel+0xd8>
		  //uint8_t data[] = {color >> 8, color & 0xFF};
	    // THEN set up transaction (if needed) and draw...
	    setAddrWindow(x, y, 1, 1);
 8004d62:	1dbb      	adds	r3, r7, #6
 8004d64:	8818      	ldrh	r0, [r3, #0]
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	8819      	ldrh	r1, [r3, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f000 f845 	bl	8004dfc <setAddrWindow>

	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004d72:	2390      	movs	r3, #144	; 0x90
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	2200      	movs	r2, #0
 8004d78:	2110      	movs	r1, #16
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fc fe20 	bl	80019c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004d80:	2390      	movs	r3, #144	; 0x90
 8004d82:	05db      	lsls	r3, r3, #23
 8004d84:	2201      	movs	r2, #1
 8004d86:	2120      	movs	r1, #32
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fc fe19 	bl	80019c0 <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <writePixel+0xe8>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	2110      	movs	r1, #16
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fc fe13 	bl	80019c0 <HAL_GPIO_WritePin>
	    write8Bit((color >> 8));
 8004d9a:	1cbb      	adds	r3, r7, #2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff ff3f 	bl	8004c28 <write8Bit>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <writePixel+0xe8>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	2110      	movs	r1, #16
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fc fe05 	bl	80019c0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <writePixel+0xe8>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	2110      	movs	r1, #16
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fc fdff 	bl	80019c0 <HAL_GPIO_WritePin>
	    write8Bit((color & 0xFF));
 8004dc2:	1cbb      	adds	r3, r7, #2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff ff2d 	bl	8004c28 <write8Bit>
	    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <writePixel+0xe8>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7fc fdf3 	bl	80019c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8004dda:	2390      	movs	r3, #144	; 0x90
 8004ddc:	05db      	lsls	r3, r3, #23
 8004dde:	2201      	movs	r2, #1
 8004de0:	2110      	movs	r1, #16
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fc fdec 	bl	80019c0 <HAL_GPIO_WritePin>
	  }
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b003      	add	sp, #12
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	200013e4 	.word	0x200013e4
 8004df4:	200013ea 	.word	0x200013ea
 8004df8:	48000800 	.word	0x48000800

08004dfc <setAddrWindow>:
    @param   x1  TFT memory 'x' origin
    @param   y1  TFT memory 'y' origin
    @param   w   Width of rectangle
    @param   h   Height of rectangle
*/
void setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 8004dfc:	b5b0      	push	{r4, r5, r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	0005      	movs	r5, r0
 8004e04:	000c      	movs	r4, r1
 8004e06:	0010      	movs	r0, r2
 8004e08:	0019      	movs	r1, r3
 8004e0a:	1dbb      	adds	r3, r7, #6
 8004e0c:	1c2a      	adds	r2, r5, #0
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	1c22      	adds	r2, r4, #0
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	1cbb      	adds	r3, r7, #2
 8004e18:	1c02      	adds	r2, r0, #0
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	003b      	movs	r3, r7
 8004e1e:	1c0a      	adds	r2, r1, #0
 8004e20:	801a      	strh	r2, [r3, #0]
	  uint16_t x[2] = {x1, x1 + w - 1}, y[2] = {y1, y1 + h - 1};
 8004e22:	210c      	movs	r1, #12
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	1dba      	adds	r2, r7, #6
 8004e28:	8812      	ldrh	r2, [r2, #0]
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	1dba      	adds	r2, r7, #6
 8004e2e:	1cbb      	adds	r3, r7, #2
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	805a      	strh	r2, [r3, #2]
 8004e40:	2008      	movs	r0, #8
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	1d3a      	adds	r2, r7, #4
 8004e46:	8812      	ldrh	r2, [r2, #0]
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	1d3a      	adds	r2, r7, #4
 8004e4c:	003b      	movs	r3, r7
 8004e4e:	8812      	ldrh	r2, [r2, #0]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	0004      	movs	r4, r0
 8004e5c:	183b      	adds	r3, r7, r0
 8004e5e:	805a      	strh	r2, [r3, #2]
	  sendCommands16(ILI9341_CASET, x, 2);
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	2202      	movs	r2, #2
 8004e64:	0019      	movs	r1, r3
 8004e66:	202a      	movs	r0, #42	; 0x2a
 8004e68:	f7ff fe5c 	bl	8004b24 <sendCommands16>
	  sendCommands16(ILI9341_PASET, y, 2);
 8004e6c:	0020      	movs	r0, r4
 8004e6e:	183b      	adds	r3, r7, r0
 8004e70:	2202      	movs	r2, #2
 8004e72:	0019      	movs	r1, r3
 8004e74:	202b      	movs	r0, #43	; 0x2b
 8004e76:	f7ff fe55 	bl	8004b24 <sendCommands16>
	  sendCommand(ILI9341_RAMWR); // Write to RAM
 8004e7a:	202c      	movs	r0, #44	; 0x2c
 8004e7c:	f7ff fdb8 	bl	80049f0 <sendCommand>
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b004      	add	sp, #16
 8004e86:	bdb0      	pop	{r4, r5, r7, pc}

08004e88 <setRotation>:
   param:	m	m == 0: 8 bit interface is at the bottom of the screen
   	   	   	   	m == 1: 8 bit interface is to the left of the screen
   	   	   	    m == 2: 8 bit interface is at the top of the screen
   	   	   	    m == 3: 8 bit interface is to the right of the screen
*/
void setRotation(uint8_t m) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	0002      	movs	r2, r0
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	701a      	strb	r2, [r3, #0]
  rotation = m % 4; // can't be higher than 3
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <setRotation+0xa0>)
 8004ea0:	701a      	strb	r2, [r3, #0]
  switch (rotation) {
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <setRotation+0xa0>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d013      	beq.n	8004ed2 <setRotation+0x4a>
 8004eaa:	dc02      	bgt.n	8004eb2 <setRotation+0x2a>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <setRotation+0x34>
 8004eb0:	e030      	b.n	8004f14 <setRotation+0x8c>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d018      	beq.n	8004ee8 <setRotation+0x60>
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d021      	beq.n	8004efe <setRotation+0x76>
 8004eba:	e02b      	b.n	8004f14 <setRotation+0x8c>
  case 0:
    m = (MADCTL_MX | MADCTL_BGR);
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	2248      	movs	r2, #72	; 0x48
 8004ec0:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTWIDTH;
 8004ec2:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <setRotation+0xa4>)
 8004ec4:	22f0      	movs	r2, #240	; 0xf0
 8004ec6:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTHEIGHT;
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <setRotation+0xa8>)
 8004eca:	22a0      	movs	r2, #160	; 0xa0
 8004ecc:	0052      	lsls	r2, r2, #1
 8004ece:	801a      	strh	r2, [r3, #0]
    break;
 8004ed0:	e020      	b.n	8004f14 <setRotation+0x8c>
  case 1:
    m = (MADCTL_MV | MADCTL_BGR);
 8004ed2:	1dfb      	adds	r3, r7, #7
 8004ed4:	2228      	movs	r2, #40	; 0x28
 8004ed6:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTHEIGHT;
 8004ed8:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <setRotation+0xa4>)
 8004eda:	22a0      	movs	r2, #160	; 0xa0
 8004edc:	0052      	lsls	r2, r2, #1
 8004ede:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTWIDTH;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <setRotation+0xa8>)
 8004ee2:	22f0      	movs	r2, #240	; 0xf0
 8004ee4:	801a      	strh	r2, [r3, #0]
    break;
 8004ee6:	e015      	b.n	8004f14 <setRotation+0x8c>
  case 2:
    m = (MADCTL_MY | MADCTL_BGR);
 8004ee8:	1dfb      	adds	r3, r7, #7
 8004eea:	2288      	movs	r2, #136	; 0x88
 8004eec:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTWIDTH;
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <setRotation+0xa4>)
 8004ef0:	22f0      	movs	r2, #240	; 0xf0
 8004ef2:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTHEIGHT;
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <setRotation+0xa8>)
 8004ef6:	22a0      	movs	r2, #160	; 0xa0
 8004ef8:	0052      	lsls	r2, r2, #1
 8004efa:	801a      	strh	r2, [r3, #0]
    break;
 8004efc:	e00a      	b.n	8004f14 <setRotation+0x8c>
  case 3:
    m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	22e8      	movs	r2, #232	; 0xe8
 8004f02:	701a      	strb	r2, [r3, #0]
    _width = ILI9341_TFTHEIGHT;
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <setRotation+0xa4>)
 8004f06:	22a0      	movs	r2, #160	; 0xa0
 8004f08:	0052      	lsls	r2, r2, #1
 8004f0a:	801a      	strh	r2, [r3, #0]
    _height = ILI9341_TFTWIDTH;
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <setRotation+0xa8>)
 8004f0e:	22f0      	movs	r2, #240	; 0xf0
 8004f10:	801a      	strh	r2, [r3, #0]
    break;
 8004f12:	46c0      	nop			; (mov r8, r8)
  }
  sendCommands(ILI9341_MADCTL, &m, 1);
 8004f14:	1dfb      	adds	r3, r7, #7
 8004f16:	2201      	movs	r2, #1
 8004f18:	0019      	movs	r1, r3
 8004f1a:	2036      	movs	r0, #54	; 0x36
 8004f1c:	f7ff fd9a 	bl	8004a54 <sendCommands>
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000f7d 	.word	0x20000f7d
 8004f2c:	200013e4 	.word	0x200013e4
 8004f30:	200013ea 	.word	0x200013ea

08004f34 <setLED>:
			break;
	}
}


void setLED(LED_Color LED, LED_State state){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	1dfb      	adds	r3, r7, #7
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	1dbb      	adds	r3, r7, #6
 8004f42:	1c0a      	adds	r2, r1, #0
 8004f44:	701a      	strb	r2, [r3, #0]
	switch(LED){
 8004f46:	1dfb      	adds	r3, r7, #7
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d00d      	beq.n	8004f6a <setLED+0x36>
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d014      	beq.n	8004f7c <setLED+0x48>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d000      	beq.n	8004f58 <setLED+0x24>

			case GREEN:
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
				break;
		}
}
 8004f56:	e01b      	b.n	8004f90 <setLED+0x5c>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 8004f58:	1dbb      	adds	r3, r7, #6
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	480d      	ldr	r0, [pc, #52]	; (8004f98 <setLED+0x64>)
 8004f62:	0019      	movs	r1, r3
 8004f64:	f7fc fd2c 	bl	80019c0 <HAL_GPIO_WritePin>
				break;
 8004f68:	e012      	b.n	8004f90 <setLED+0x5c>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4809      	ldr	r0, [pc, #36]	; (8004f98 <setLED+0x64>)
 8004f74:	0019      	movs	r1, r3
 8004f76:	f7fc fd23 	bl	80019c0 <HAL_GPIO_WritePin>
				break;
 8004f7a:	e009      	b.n	8004f90 <setLED+0x5c>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 8004f7c:	1dbb      	adds	r3, r7, #6
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	0219      	lsls	r1, r3, #8
 8004f84:	2390      	movs	r3, #144	; 0x90
 8004f86:	05db      	lsls	r3, r3, #23
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7fc fd19 	bl	80019c0 <HAL_GPIO_WritePin>
				break;
 8004f8e:	46c0      	nop			; (mov r8, r8)
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	48000800 	.word	0x48000800

08004f9c <initMMA8452Q>:
#include <MMA8452Q.h>


// Initializes accelerometer
// returns 1 if successful else 0
uint8_t initMMA8452Q(uint8_t addr, MMA8452Q_Scale scale, MMA8452Q_Data_Rate rate){
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	0008      	movs	r0, r1
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	1dfb      	adds	r3, r7, #7
 8004faa:	1c22      	adds	r2, r4, #0
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	1dbb      	adds	r3, r7, #6
 8004fb0:	1c02      	adds	r2, r0, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	1d7b      	adds	r3, r7, #5
 8004fb6:	1c0a      	adds	r2, r1, #0
 8004fb8:	701a      	strb	r2, [r3, #0]

	// verify device identity
	if (readRegister(WHO_AM_I) != 0x2A){
 8004fba:	200d      	movs	r0, #13
 8004fbc:	f000 f8fe 	bl	80051bc <readRegister>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc4:	d001      	beq.n	8004fca <initMMA8452Q+0x2e>
		return 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e00e      	b.n	8004fe8 <initMMA8452Q+0x4c>
	}

	// switch to standby to change registers
	standby();
 8004fca:	f000 f87c 	bl	80050c6 <standby>

	// set the scale and data rate
	setScale(scale);
 8004fce:	1dbb      	adds	r3, r7, #6
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 f80c 	bl	8004ff0 <setScale>
	setDataRate(rate);
 8004fd8:	1d7b      	adds	r3, r7, #5
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f83f 	bl	8005060 <setDataRate>

	// set the device to active state and return successfully
	active();
 8004fe2:	f000 f886 	bl	80050f2 <active>
	return 1;
 8004fe6:	2301      	movs	r3, #1
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b003      	add	sp, #12
 8004fee:	bd90      	pop	{r4, r7, pc}

08004ff0 <setScale>:

// sets the full-scale range of the accelerometers
// possible values for scale are SCALE_2G, SCALE_4G, SCALE_8G
void setScale(MMA8452Q_Scale scale){
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	701a      	strb	r2, [r3, #0]
	// set the global scale variable (used to calculate measured data)
	SCALE = scale;
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <setScale+0x6c>)
 8004ffe:	1dfa      	adds	r2, r7, #7
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]

	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8005004:	f000 f88b 	bl	800511e <isActive>
 8005008:	0003      	movs	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <setScale+0x22>
		standby();
 800500e:	f000 f85a 	bl	80050c6 <standby>
	}

	// read config, change scale bits, then re-write register
	uint8_t config = readRegister(XYZ_DATA_CFG);	// read current config
 8005012:	200f      	movs	r0, #15
 8005014:	0005      	movs	r5, r0
 8005016:	183c      	adds	r4, r7, r0
 8005018:	200e      	movs	r0, #14
 800501a:	f000 f8cf 	bl	80051bc <readRegister>
 800501e:	0003      	movs	r3, r0
 8005020:	7023      	strb	r3, [r4, #0]
	config &= 0xFC;									// mask out the scale bits
 8005022:	0028      	movs	r0, r5
 8005024:	183b      	adds	r3, r7, r0
 8005026:	183a      	adds	r2, r7, r0
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	2103      	movs	r1, #3
 800502c:	438a      	bics	r2, r1
 800502e:	701a      	strb	r2, [r3, #0]
	config |= (scale >> 2);							// 00 = 2G, 01 = 4G, 10 = 8G
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	b2d9      	uxtb	r1, r3
 8005038:	183b      	adds	r3, r7, r0
 800503a:	183a      	adds	r2, r7, r0
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	701a      	strb	r2, [r3, #0]
	writeRegister(XYZ_DATA_CFG, config);			// write config with new scale
 8005042:	183b      	adds	r3, r7, r0
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	0019      	movs	r1, r3
 8005048:	200e      	movs	r0, #14
 800504a:	f000 f8a3 	bl	8005194 <writeRegister>

	// return to active state once complete
	active();
 800504e:	f000 f850 	bl	80050f2 <active>
}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bdb0      	pop	{r4, r5, r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	200013ec 	.word	0x200013ec

08005060 <setDataRate>:

// sets the data rate
void setDataRate(MMA8452Q_Data_Rate data_rate){
 8005060:	b5b0      	push	{r4, r5, r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	0002      	movs	r2, r0
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	701a      	strb	r2, [r3, #0]
	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 800506c:	f000 f857 	bl	800511e <isActive>
 8005070:	0003      	movs	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <setDataRate+0x1a>
		standby();
 8005076:	f000 f826 	bl	80050c6 <standby>
	}

	// read control, change rate bits, then re-write register
	uint8_t control = readRegister(CTRL_REG1);		// read current settings
 800507a:	200f      	movs	r0, #15
 800507c:	0005      	movs	r5, r0
 800507e:	183c      	adds	r4, r7, r0
 8005080:	202a      	movs	r0, #42	; 0x2a
 8005082:	f000 f89b 	bl	80051bc <readRegister>
 8005086:	0003      	movs	r3, r0
 8005088:	7023      	strb	r3, [r4, #0]
	control &= 0xC7;								// mask out the data rate bits
 800508a:	0028      	movs	r0, r5
 800508c:	183b      	adds	r3, r7, r0
 800508e:	183a      	adds	r2, r7, r0
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	2138      	movs	r1, #56	; 0x38
 8005094:	438a      	bics	r2, r1
 8005096:	701a      	strb	r2, [r3, #0]
	control |= (data_rate << 3);					// shift data rate bits
 8005098:	1dfb      	adds	r3, r7, #7
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	b25a      	sxtb	r2, r3
 80050a0:	183b      	adds	r3, r7, r0
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b25a      	sxtb	r2, r3
 80050aa:	183b      	adds	r3, r7, r0
 80050ac:	701a      	strb	r2, [r3, #0]
	writeRegister(CTRL_REG1, control);				// write settings with new data rate
 80050ae:	183b      	adds	r3, r7, r0
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	0019      	movs	r1, r3
 80050b4:	202a      	movs	r0, #42	; 0x2a
 80050b6:	f000 f86d 	bl	8005194 <writeRegister>

	// return to active state once complete
	active();
 80050ba:	f000 f81a 	bl	80050f2 <active>
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bdb0      	pop	{r4, r5, r7, pc}

080050c6 <standby>:

// sets the MMA8452 to standby mode
void standby(void){
 80050c6:	b590      	push	{r4, r7, lr}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
	// clear the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 80050cc:	1dfc      	adds	r4, r7, #7
 80050ce:	202a      	movs	r0, #42	; 0x2a
 80050d0:	f000 f874 	bl	80051bc <readRegister>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control & ~(0x01)));
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	4393      	bics	r3, r2
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	0019      	movs	r1, r3
 80050e4:	202a      	movs	r0, #42	; 0x2a
 80050e6:	f000 f855 	bl	8005194 <writeRegister>
}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b003      	add	sp, #12
 80050f0:	bd90      	pop	{r4, r7, pc}

080050f2 <active>:

// sets the MMA8452 to active mode
void active(void){
 80050f2:	b590      	push	{r4, r7, lr}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
	// set the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 80050f8:	1dfc      	adds	r4, r7, #7
 80050fa:	202a      	movs	r0, #42	; 0x2a
 80050fc:	f000 f85e 	bl	80051bc <readRegister>
 8005100:	0003      	movs	r3, r0
 8005102:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control | 0x01));
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	4313      	orrs	r3, r2
 800510c:	b2db      	uxtb	r3, r3
 800510e:	0019      	movs	r1, r3
 8005110:	202a      	movs	r0, #42	; 0x2a
 8005112:	f000 f83f 	bl	8005194 <writeRegister>
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b003      	add	sp, #12
 800511c:	bd90      	pop	{r4, r7, pc}

0800511e <isActive>:

// returns 1 if in Active state, otherwise returns 0
uint8_t isActive(void){
 800511e:	b590      	push	{r4, r7, lr}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
	uint8_t currentState = readRegister(SYSMOD);
 8005124:	1dfc      	adds	r4, r7, #7
 8005126:	200b      	movs	r0, #11
 8005128:	f000 f848 	bl	80051bc <readRegister>
 800512c:	0003      	movs	r3, r0
 800512e:	7023      	strb	r3, [r4, #0]
	currentState &= 0x03;
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	1dfa      	adds	r2, r7, #7
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	2103      	movs	r1, #3
 8005138:	400a      	ands	r2, r1
 800513a:	701a      	strb	r2, [r3, #0]

	// Wake and Sleep are both active SYSMOD states
	if (currentState == SYSMOD_STANDBY)
 800513c:	1dfb      	adds	r3, r7, #7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <isActive+0x2a>
		return 0;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <isActive+0x2c>
	return 1;
 8005148:	2301      	movs	r3, #1
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b003      	add	sp, #12
 8005150:	bd90      	pop	{r4, r7, pc}
	...

08005154 <writeRegisters>:
	Y = (float)y / (float)(1 << 11) * (float)(SCALE);
	Z = (float)z / (float)(1 << 11) * (float)(SCALE);
}

// write an array of "len" bytes ("buffer")
void writeRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af04      	add	r7, sp, #16
 800515a:	6039      	str	r1, [r7, #0]
 800515c:	0011      	movs	r1, r2
 800515e:	1dfb      	adds	r3, r7, #7
 8005160:	1c02      	adds	r2, r0, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	1c0a      	adds	r2, r1, #0
 8005168:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 800516a:	1dfb      	adds	r3, r7, #7
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b29a      	uxth	r2, r3
 8005170:	4807      	ldr	r0, [pc, #28]	; (8005190 <writeRegisters+0x3c>)
 8005172:	230a      	movs	r3, #10
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2301      	movs	r3, #1
 8005182:	213a      	movs	r1, #58	; 0x3a
 8005184:	f7fc fcd0 	bl	8001b28 <HAL_I2C_Mem_Write>
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	b002      	add	sp, #8
 800518e:	bd80      	pop	{r7, pc}
 8005190:	2000144c 	.word	0x2000144c

08005194 <writeRegister>:

// write a single byte of data to a register in the MMA8452Q
void writeRegister(MMA8452Q_Register reg, uint8_t data){
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	0002      	movs	r2, r0
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	1dbb      	adds	r3, r7, #6
 80051a2:	1c0a      	adds	r2, r1, #0
 80051a4:	701a      	strb	r2, [r3, #0]
	writeRegisters(reg, &data, 1);
 80051a6:	1db9      	adds	r1, r7, #6
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff ffd0 	bl	8005154 <writeRegisters>
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <readRegister>:

uint8_t readRegister(MMA8452Q_Register reg){
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	0002      	movs	r2, r0
 80051c4:	1dfb      	adds	r3, r7, #7
 80051c6:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	readRegisters(reg, &buffer, 1);
 80051c8:	240f      	movs	r4, #15
 80051ca:	1939      	adds	r1, r7, r4
 80051cc:	1dfb      	adds	r3, r7, #7
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f806 	bl	80051e4 <readRegisters>
	return buffer;
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	781b      	ldrb	r3, [r3, #0]
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b005      	add	sp, #20
 80051e2:	bd90      	pop	{r4, r7, pc}

080051e4 <readRegisters>:

void readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af04      	add	r7, sp, #16
 80051ea:	6039      	str	r1, [r7, #0]
 80051ec:	0011      	movs	r1, r2
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	1c02      	adds	r2, r0, #0
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	1c0a      	adds	r2, r1, #0
 80051f8:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 80051fa:	1dfb      	adds	r3, r7, #7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	4807      	ldr	r0, [pc, #28]	; (8005220 <readRegisters+0x3c>)
 8005202:	230a      	movs	r3, #10
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2301      	movs	r3, #1
 8005212:	213a      	movs	r1, #58	; 0x3a
 8005214:	f7fc fdb6 	bl	8001d84 <HAL_I2C_Mem_Read>
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2000144c 	.word	0x2000144c

08005224 <getRawX>:

// Returns raw X acceleration data
short getRawX(void){
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_X_MSB, rawData, 2);
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	2202      	movs	r2, #2
 800522e:	0019      	movs	r1, r3
 8005230:	2001      	movs	r0, #1
 8005232:	f7ff ffd7 	bl	80051e4 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	b21a      	sxth	r2, r3
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	b21b      	sxth	r3, r3
 8005244:	4313      	orrs	r3, r2
 8005246:	b21b      	sxth	r3, r3
 8005248:	111b      	asrs	r3, r3, #4
 800524a:	b21b      	sxth	r3, r3
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b002      	add	sp, #8
 8005252:	bd80      	pop	{r7, pc}

08005254 <getRawY>:

// Returns raw Y acceleration data
short getRawY(void){
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Y_MSB, rawData, 2);
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	2202      	movs	r2, #2
 800525e:	0019      	movs	r1, r3
 8005260:	2003      	movs	r0, #3
 8005262:	f7ff ffbf 	bl	80051e4 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	b21a      	sxth	r2, r3
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	b21b      	sxth	r3, r3
 8005274:	4313      	orrs	r3, r2
 8005276:	b21b      	sxth	r3, r3
 8005278:	111b      	asrs	r3, r3, #4
 800527a:	b21b      	sxth	r3, r3
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b002      	add	sp, #8
 8005282:	bd80      	pop	{r7, pc}

08005284 <getRawZ>:

// Returns raw Z acceleration data
short getRawZ(void){
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Z_MSB, rawData, 2);
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	2202      	movs	r2, #2
 800528e:	0019      	movs	r1, r3
 8005290:	2005      	movs	r0, #5
 8005292:	f7ff ffa7 	bl	80051e4 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	b21a      	sxth	r2, r3
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	b21b      	sxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	b21b      	sxth	r3, r3
 80052a8:	111b      	asrs	r3, r3, #4
 80052aa:	b21b      	sxth	r3, r3
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <getX>:

// Returns calculated X acceleration data
float getX(void){
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	short x = getRawX();
 80052ba:	1dbc      	adds	r4, r7, #6
 80052bc:	f7ff ffb2 	bl	8005224 <getRawX>
 80052c0:	0003      	movs	r3, r0
 80052c2:	8023      	strh	r3, [r4, #0]
	return (float)x / (float)(1 << 11) * (float)(SCALE);
 80052c4:	1dbb      	adds	r3, r7, #6
 80052c6:	2200      	movs	r2, #0
 80052c8:	5e9b      	ldrsh	r3, [r3, r2]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fb fd82 	bl	8000dd4 <__aeabi_i2f>
 80052d0:	1c03      	adds	r3, r0, #0
 80052d2:	218a      	movs	r1, #138	; 0x8a
 80052d4:	05c9      	lsls	r1, r1, #23
 80052d6:	1c18      	adds	r0, r3, #0
 80052d8:	f7fb f954 	bl	8000584 <__aeabi_fdiv>
 80052dc:	1c03      	adds	r3, r0, #0
 80052de:	1c1c      	adds	r4, r3, #0
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <getX+0x4c>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fb fdbf 	bl	8000e68 <__aeabi_ui2f>
 80052ea:	1c03      	adds	r3, r0, #0
 80052ec:	1c19      	adds	r1, r3, #0
 80052ee:	1c20      	adds	r0, r4, #0
 80052f0:	f7fb fa5a 	bl	80007a8 <__aeabi_fmul>
 80052f4:	1c03      	adds	r3, r0, #0
}
 80052f6:	1c18      	adds	r0, r3, #0
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b003      	add	sp, #12
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	200013ec 	.word	0x200013ec

08005304 <getY>:

// Returns calculated X acceleration data
float getY(void){
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
	short Y = getRawY();
 800530a:	1dbc      	adds	r4, r7, #6
 800530c:	f7ff ffa2 	bl	8005254 <getRawY>
 8005310:	0003      	movs	r3, r0
 8005312:	8023      	strh	r3, [r4, #0]
	return (float)Y / (float)(1 << 11) * (float)(SCALE);
 8005314:	1dbb      	adds	r3, r7, #6
 8005316:	2200      	movs	r2, #0
 8005318:	5e9b      	ldrsh	r3, [r3, r2]
 800531a:	0018      	movs	r0, r3
 800531c:	f7fb fd5a 	bl	8000dd4 <__aeabi_i2f>
 8005320:	1c03      	adds	r3, r0, #0
 8005322:	218a      	movs	r1, #138	; 0x8a
 8005324:	05c9      	lsls	r1, r1, #23
 8005326:	1c18      	adds	r0, r3, #0
 8005328:	f7fb f92c 	bl	8000584 <__aeabi_fdiv>
 800532c:	1c03      	adds	r3, r0, #0
 800532e:	1c1c      	adds	r4, r3, #0
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <getY+0x4c>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	0018      	movs	r0, r3
 8005336:	f7fb fd97 	bl	8000e68 <__aeabi_ui2f>
 800533a:	1c03      	adds	r3, r0, #0
 800533c:	1c19      	adds	r1, r3, #0
 800533e:	1c20      	adds	r0, r4, #0
 8005340:	f7fb fa32 	bl	80007a8 <__aeabi_fmul>
 8005344:	1c03      	adds	r3, r0, #0
}
 8005346:	1c18      	adds	r0, r3, #0
 8005348:	46bd      	mov	sp, r7
 800534a:	b003      	add	sp, #12
 800534c:	bd90      	pop	{r4, r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	200013ec 	.word	0x200013ec

08005354 <getZ>:

// Returns calculated X acceleration data
float getZ(void){
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
	short z = getRawZ();
 800535a:	1dbc      	adds	r4, r7, #6
 800535c:	f7ff ff92 	bl	8005284 <getRawZ>
 8005360:	0003      	movs	r3, r0
 8005362:	8023      	strh	r3, [r4, #0]
	return (float)z / (float)(1 << 11) * (float)(SCALE);
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	2200      	movs	r2, #0
 8005368:	5e9b      	ldrsh	r3, [r3, r2]
 800536a:	0018      	movs	r0, r3
 800536c:	f7fb fd32 	bl	8000dd4 <__aeabi_i2f>
 8005370:	1c03      	adds	r3, r0, #0
 8005372:	218a      	movs	r1, #138	; 0x8a
 8005374:	05c9      	lsls	r1, r1, #23
 8005376:	1c18      	adds	r0, r3, #0
 8005378:	f7fb f904 	bl	8000584 <__aeabi_fdiv>
 800537c:	1c03      	adds	r3, r0, #0
 800537e:	1c1c      	adds	r4, r3, #0
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <getZ+0x4c>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	0018      	movs	r0, r3
 8005386:	f7fb fd6f 	bl	8000e68 <__aeabi_ui2f>
 800538a:	1c03      	adds	r3, r0, #0
 800538c:	1c19      	adds	r1, r3, #0
 800538e:	1c20      	adds	r0, r4, #0
 8005390:	f7fb fa0a 	bl	80007a8 <__aeabi_fmul>
 8005394:	1c03      	adds	r3, r0, #0
}
 8005396:	1c18      	adds	r0, r3, #0
 8005398:	46bd      	mov	sp, r7
 800539a:	b003      	add	sp, #12
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	200013ec 	.word	0x200013ec

080053a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char greeting[] = "Hello!";
 80053aa:	003b      	movs	r3, r7
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <main+0x5c>)
 80053ae:	6811      	ldr	r1, [r2, #0]
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	8891      	ldrh	r1, [r2, #4]
 80053b4:	8099      	strh	r1, [r3, #4]
 80053b6:	7992      	ldrb	r2, [r2, #6]
 80053b8:	719a      	strb	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053ba:	f7fb feb3 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053be:	f000 f825 	bl	800540c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053c2:	f000 f94b 	bl	800565c <MX_GPIO_Init>
  MX_DMA_Init();
 80053c6:	f000 f923 	bl	8005610 <MX_DMA_Init>
  MX_I2C1_Init();
 80053ca:	f000 f879 	bl	80054c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80053ce:	f000 f8b7 	bl	8005540 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80053d2:	f000 f8e9 	bl	80055a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initMMA8452Q(MMA8452Q_Address, SCALE_2G, DR_800_Hz);
 80053d6:	2200      	movs	r2, #0
 80053d8:	2102      	movs	r1, #2
 80053da:	201d      	movs	r0, #29
 80053dc:	f7ff fdde 	bl	8004f9c <initMMA8452Q>
  ble_init(&huart1);
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <main+0x60>)
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fe ffd2 	bl	800438c <ble_init>
  gps_init(&huart2);
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <main+0x64>)
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7fe fff2 	bl	80043d4 <gps_init>
  LCD_Init();
 80053f0:	f7ff f944 	bl	800467c <LCD_Init>
  //fillScreen(ILI9341_BLACK);
  // LCD_draw_text erases all text on screen (if any)
  //LCD_draw_text(greeting, 7, 0, 0, 6, ILI9341_WHITE);
  RTOS_INIT_TASKS();
 80053f4:	f000 fa8a 	bl	800590c <RTOS_INIT_TASKS>
  RTOS_INIT();
 80053f8:	f000 fa76 	bl	80058e8 <RTOS_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80053fc:	e7fe      	b.n	80053fc <main+0x58>
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	08007db4 	.word	0x08007db4
 8005404:	20001520 	.word	0x20001520
 8005408:	200015a0 	.word	0x200015a0

0800540c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b095      	sub	sp, #84	; 0x54
 8005410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005412:	2420      	movs	r4, #32
 8005414:	193b      	adds	r3, r7, r4
 8005416:	0018      	movs	r0, r3
 8005418:	2330      	movs	r3, #48	; 0x30
 800541a:	001a      	movs	r2, r3
 800541c:	2100      	movs	r1, #0
 800541e:	f002 fc6c 	bl	8007cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005422:	2310      	movs	r3, #16
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	0018      	movs	r0, r3
 8005428:	2310      	movs	r3, #16
 800542a:	001a      	movs	r2, r3
 800542c:	2100      	movs	r1, #0
 800542e:	f002 fc64 	bl	8007cfa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005432:	003b      	movs	r3, r7
 8005434:	0018      	movs	r0, r3
 8005436:	2310      	movs	r3, #16
 8005438:	001a      	movs	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	f002 fc5d 	bl	8007cfa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005440:	0021      	movs	r1, r4
 8005442:	187b      	adds	r3, r7, r1
 8005444:	2202      	movs	r2, #2
 8005446:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005448:	187b      	adds	r3, r7, r1
 800544a:	2201      	movs	r2, #1
 800544c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800544e:	187b      	adds	r3, r7, r1
 8005450:	2210      	movs	r2, #16
 8005452:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005454:	187b      	adds	r3, r7, r1
 8005456:	2200      	movs	r2, #0
 8005458:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800545a:	187b      	adds	r3, r7, r1
 800545c:	0018      	movs	r0, r3
 800545e:	f7fd f89b 	bl	8002598 <HAL_RCC_OscConfig>
 8005462:	1e03      	subs	r3, r0, #0
 8005464:	d001      	beq.n	800546a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8005466:	f000 fa39 	bl	80058dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800546a:	2110      	movs	r1, #16
 800546c:	187b      	adds	r3, r7, r1
 800546e:	2207      	movs	r2, #7
 8005470:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005472:	187b      	adds	r3, r7, r1
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005478:	187b      	adds	r3, r7, r1
 800547a:	2200      	movs	r2, #0
 800547c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800547e:	187b      	adds	r3, r7, r1
 8005480:	2200      	movs	r2, #0
 8005482:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005484:	187b      	adds	r3, r7, r1
 8005486:	2100      	movs	r1, #0
 8005488:	0018      	movs	r0, r3
 800548a:	f7fd fba1 	bl	8002bd0 <HAL_RCC_ClockConfig>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d001      	beq.n	8005496 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8005492:	f000 fa23 	bl	80058dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8005496:	003b      	movs	r3, r7
 8005498:	2221      	movs	r2, #33	; 0x21
 800549a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800549c:	003b      	movs	r3, r7
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80054a2:	003b      	movs	r3, r7
 80054a4:	2200      	movs	r2, #0
 80054a6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a8:	003b      	movs	r3, r7
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fd fd0c 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d001      	beq.n	80054b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80054b4:	f000 fa12 	bl	80058dc <Error_Handler>
  }
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b015      	add	sp, #84	; 0x54
 80054be:	bd90      	pop	{r4, r7, pc}

080054c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <MX_I2C1_Init+0x74>)
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <MX_I2C1_Init+0x78>)
 80054c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80054ca:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <MX_I2C1_Init+0x74>)
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <MX_I2C1_Init+0x7c>)
 80054ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <MX_I2C1_Init+0x74>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <MX_I2C1_Init+0x74>)
 80054d8:	2201      	movs	r2, #1
 80054da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054dc:	4b15      	ldr	r3, [pc, #84]	; (8005534 <MX_I2C1_Init+0x74>)
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <MX_I2C1_Init+0x74>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054e8:	4b12      	ldr	r3, [pc, #72]	; (8005534 <MX_I2C1_Init+0x74>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <MX_I2C1_Init+0x74>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <MX_I2C1_Init+0x74>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <MX_I2C1_Init+0x74>)
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fc fa7d 	bl	80019fc <HAL_I2C_Init>
 8005502:	1e03      	subs	r3, r0, #0
 8005504:	d001      	beq.n	800550a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005506:	f000 f9e9 	bl	80058dc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800550a:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <MX_I2C1_Init+0x74>)
 800550c:	2100      	movs	r1, #0
 800550e:	0018      	movs	r0, r3
 8005510:	f7fc ffaa 	bl	8002468 <HAL_I2CEx_ConfigAnalogFilter>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d001      	beq.n	800551c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005518:	f000 f9e0 	bl	80058dc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <MX_I2C1_Init+0x74>)
 800551e:	2100      	movs	r1, #0
 8005520:	0018      	movs	r0, r3
 8005522:	f7fc ffed 	bl	8002500 <HAL_I2CEx_ConfigDigitalFilter>
 8005526:	1e03      	subs	r3, r0, #0
 8005528:	d001      	beq.n	800552e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800552a:	f000 f9d7 	bl	80058dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	2000144c 	.word	0x2000144c
 8005538:	40005400 	.word	0x40005400
 800553c:	2000090e 	.word	0x2000090e

08005540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005544:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <MX_USART1_UART_Init+0x64>)
 8005548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 800554c:	2296      	movs	r2, #150	; 0x96
 800554e:	0212      	lsls	r2, r2, #8
 8005550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005554:	2200      	movs	r2, #0
 8005556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 800555a:	2200      	movs	r2, #0
 800555c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005560:	2200      	movs	r2, #0
 8005562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005566:	220c      	movs	r2, #12
 8005568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800556a:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 800556c:	2200      	movs	r2, #0
 800556e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005572:	2200      	movs	r2, #0
 8005574:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005578:	2200      	movs	r2, #0
 800557a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 800557e:	2210      	movs	r2, #16
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	0152      	lsls	r2, r2, #5
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <MX_USART1_UART_Init+0x60>)
 800558c:	0018      	movs	r0, r3
 800558e:	f7fd ff7b 	bl	8003488 <HAL_UART_Init>
 8005592:	1e03      	subs	r3, r0, #0
 8005594:	d001      	beq.n	800559a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8005596:	f000 f9a1 	bl	80058dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20001520 	.word	0x20001520
 80055a4:	40013800 	.word	0x40013800

080055a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055ae:	4a17      	ldr	r2, [pc, #92]	; (800560c <MX_USART2_UART_Init+0x64>)
 80055b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055b4:	2296      	movs	r2, #150	; 0x96
 80055b6:	0192      	lsls	r2, r2, #6
 80055b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055ce:	220c      	movs	r2, #12
 80055d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055e6:	2210      	movs	r2, #16
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055ec:	2280      	movs	r2, #128	; 0x80
 80055ee:	0152      	lsls	r2, r2, #5
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <MX_USART2_UART_Init+0x60>)
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7fd ff47 	bl	8003488 <HAL_UART_Init>
 80055fa:	1e03      	subs	r3, r0, #0
 80055fc:	d001      	beq.n	8005602 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80055fe:	f000 f96d 	bl	80058dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200015a0 	.word	0x200015a0
 800560c:	40004400 	.word	0x40004400

08005610 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <MX_DMA_Init+0x48>)
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <MX_DMA_Init+0x48>)
 800561c:	2101      	movs	r1, #1
 800561e:	430a      	orrs	r2, r1
 8005620:	615a      	str	r2, [r3, #20]
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <MX_DMA_Init+0x48>)
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2201      	movs	r2, #1
 8005628:	4013      	ands	r3, r2
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	200a      	movs	r0, #10
 8005634:	f7fb fe50 	bl	80012d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005638:	200a      	movs	r0, #10
 800563a:	f7fb fe62 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800563e:	2200      	movs	r2, #0
 8005640:	2100      	movs	r1, #0
 8005642:	200b      	movs	r0, #11
 8005644:	f7fb fe48 	bl	80012d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8005648:	200b      	movs	r0, #11
 800564a:	f7fb fe5a 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	46bd      	mov	sp, r7
 8005652:	b002      	add	sp, #8
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	40021000 	.word	0x40021000

0800565c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b08b      	sub	sp, #44	; 0x2c
 8005660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005662:	2414      	movs	r4, #20
 8005664:	193b      	adds	r3, r7, r4
 8005666:	0018      	movs	r0, r3
 8005668:	2314      	movs	r3, #20
 800566a:	001a      	movs	r2, r3
 800566c:	2100      	movs	r1, #0
 800566e:	f002 fb44 	bl	8007cfa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005672:	4b6f      	ldr	r3, [pc, #444]	; (8005830 <MX_GPIO_Init+0x1d4>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	4b6e      	ldr	r3, [pc, #440]	; (8005830 <MX_GPIO_Init+0x1d4>)
 8005678:	2180      	movs	r1, #128	; 0x80
 800567a:	0309      	lsls	r1, r1, #12
 800567c:	430a      	orrs	r2, r1
 800567e:	615a      	str	r2, [r3, #20]
 8005680:	4b6b      	ldr	r3, [pc, #428]	; (8005830 <MX_GPIO_Init+0x1d4>)
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	031b      	lsls	r3, r3, #12
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800568e:	4b68      	ldr	r3, [pc, #416]	; (8005830 <MX_GPIO_Init+0x1d4>)
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	4b67      	ldr	r3, [pc, #412]	; (8005830 <MX_GPIO_Init+0x1d4>)
 8005694:	2180      	movs	r1, #128	; 0x80
 8005696:	03c9      	lsls	r1, r1, #15
 8005698:	430a      	orrs	r2, r1
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	4b64      	ldr	r3, [pc, #400]	; (8005830 <MX_GPIO_Init+0x1d4>)
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	03db      	lsls	r3, r3, #15
 80056a4:	4013      	ands	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056aa:	4b61      	ldr	r3, [pc, #388]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	4b60      	ldr	r3, [pc, #384]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	0289      	lsls	r1, r1, #10
 80056b4:	430a      	orrs	r2, r1
 80056b6:	615a      	str	r2, [r3, #20]
 80056b8:	4b5d      	ldr	r3, [pc, #372]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c6:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	4b59      	ldr	r3, [pc, #356]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	02c9      	lsls	r1, r1, #11
 80056d0:	430a      	orrs	r2, r1
 80056d2:	615a      	str	r2, [r3, #20]
 80056d4:	4b56      	ldr	r3, [pc, #344]	; (8005830 <MX_GPIO_Init+0x1d4>)
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	02db      	lsls	r3, r3, #11
 80056dc:	4013      	ands	r3, r2
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_CCS_Pin 
 80056e2:	4954      	ldr	r1, [pc, #336]	; (8005834 <MX_GPIO_Init+0x1d8>)
 80056e4:	4b54      	ldr	r3, [pc, #336]	; (8005838 <MX_GPIO_Init+0x1dc>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7fc f969 	bl	80019c0 <HAL_GPIO_WritePin>
                          |LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin|LCD_8BIT_4_Pin 
                          |LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE_GPIO_3_GPIO_Port, SPARE_GPIO_3_Pin, GPIO_PIN_RESET);
 80056ee:	4b53      	ldr	r3, [pc, #332]	; (800583c <MX_GPIO_Init+0x1e0>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	2101      	movs	r1, #1
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fc f963 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_FORCE_ON_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80056fa:	4951      	ldr	r1, [pc, #324]	; (8005840 <MX_GPIO_Init+0x1e4>)
 80056fc:	2390      	movs	r3, #144	; 0x90
 80056fe:	05db      	lsls	r3, r3, #23
 8005700:	2200      	movs	r2, #0
 8005702:	0018      	movs	r0, r3
 8005704:	f7fc f95c 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RD_Pin, GPIO_PIN_SET);
 8005708:	2390      	movs	r3, #144	; 0x90
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	2201      	movs	r2, #1
 800570e:	21b0      	movs	r1, #176	; 0xb0
 8005710:	0018      	movs	r0, r3
 8005712:	f7fc f955 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8005716:	4b48      	ldr	r3, [pc, #288]	; (8005838 <MX_GPIO_Init+0x1dc>)
 8005718:	2201      	movs	r2, #1
 800571a:	2110      	movs	r1, #16
 800571c:	0018      	movs	r0, r3
 800571e:	f7fc f94f 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin, GPIO_PIN_RESET);
 8005722:	23f0      	movs	r3, #240	; 0xf0
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	4847      	ldr	r0, [pc, #284]	; (8005844 <MX_GPIO_Init+0x1e8>)
 8005728:	2200      	movs	r2, #0
 800572a:	0019      	movs	r1, r3
 800572c:	f7fc f948 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPARE_GPIO_0_Pin SPARE_GPIO_1_Pin SPARE_GPIO_2_Pin LCD_WR_Pin 
                           LCD_CCS_Pin LCD_8BIT_1_Pin LCD_8BIT_5_Pin LCD_8BIT_0_Pin 
                           LCD_8BIT_4_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_WR_Pin 
 8005730:	193b      	adds	r3, r7, r4
 8005732:	4a45      	ldr	r2, [pc, #276]	; (8005848 <MX_GPIO_Init+0x1ec>)
 8005734:	601a      	str	r2, [r3, #0]
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005736:	193b      	adds	r3, r7, r4
 8005738:	2201      	movs	r2, #1
 800573a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	193b      	adds	r3, r7, r4
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005742:	193b      	adds	r3, r7, r4
 8005744:	2200      	movs	r2, #0
 8005746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005748:	193b      	adds	r3, r7, r4
 800574a:	4a3b      	ldr	r2, [pc, #236]	; (8005838 <MX_GPIO_Init+0x1dc>)
 800574c:	0019      	movs	r1, r3
 800574e:	0010      	movs	r0, r2
 8005750:	f7fb ffc6 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_GPIO_3_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_3_Pin;
 8005754:	193b      	adds	r3, r7, r4
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800575a:	193b      	adds	r3, r7, r4
 800575c:	2201      	movs	r2, #1
 800575e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	193b      	adds	r3, r7, r4
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005766:	193b      	adds	r3, r7, r4
 8005768:	2200      	movs	r2, #0
 800576a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPARE_GPIO_3_GPIO_Port, &GPIO_InitStruct);
 800576c:	193b      	adds	r3, r7, r4
 800576e:	4a33      	ldr	r2, [pc, #204]	; (800583c <MX_GPIO_Init+0x1e0>)
 8005770:	0019      	movs	r1, r3
 8005772:	0010      	movs	r0, r2
 8005774:	f7fb ffb4 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_1PPS_Pin */
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8005778:	193b      	adds	r3, r7, r4
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800577e:	193b      	adds	r3, r7, r4
 8005780:	2200      	movs	r2, #0
 8005782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005784:	193b      	adds	r3, r7, r4
 8005786:	2200      	movs	r2, #0
 8005788:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 800578a:	193a      	adds	r2, r7, r4
 800578c:	2390      	movs	r3, #144	; 0x90
 800578e:	05db      	lsls	r3, r3, #23
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f7fb ffa4 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_FORCE_ON_Pin LCD_CS_Pin LCD_DC_Pin LCD_RD_Pin 
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPS_FORCE_ON_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RD_Pin 
 8005798:	193b      	adds	r3, r7, r4
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <MX_GPIO_Init+0x1f0>)
 800579c:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800579e:	193b      	adds	r3, r7, r4
 80057a0:	2201      	movs	r2, #1
 80057a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	193b      	adds	r3, r7, r4
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057aa:	193b      	adds	r3, r7, r4
 80057ac:	2200      	movs	r2, #0
 80057ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	193a      	adds	r2, r7, r4
 80057b2:	2390      	movs	r3, #144	; 0x90
 80057b4:	05db      	lsls	r3, r3, #23
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fb ff91 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_YP_Pin LCD_XM_Pin LCD_YM_Pin LCD_XP_Pin */
  GPIO_InitStruct.Pin = LCD_YP_Pin|LCD_XM_Pin|LCD_YM_Pin|LCD_XP_Pin;
 80057be:	193b      	adds	r3, r7, r4
 80057c0:	4a23      	ldr	r2, [pc, #140]	; (8005850 <MX_GPIO_Init+0x1f4>)
 80057c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	2203      	movs	r2, #3
 80057c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ca:	193b      	adds	r3, r7, r4
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d0:	193b      	adds	r3, r7, r4
 80057d2:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <MX_GPIO_Init+0x1e8>)
 80057d4:	0019      	movs	r1, r3
 80057d6:	0010      	movs	r0, r2
 80057d8:	f7fb ff82 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_8BIT_3_Pin LCD_8BIT_7_Pin LCD_8BIT_2_Pin LCD_8BIT_6_Pin */
  GPIO_InitStruct.Pin = LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin;
 80057dc:	0021      	movs	r1, r4
 80057de:	187b      	adds	r3, r7, r1
 80057e0:	22f0      	movs	r2, #240	; 0xf0
 80057e2:	0212      	lsls	r2, r2, #8
 80057e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	2201      	movs	r2, #1
 80057ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ec:	187b      	adds	r3, r7, r1
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f2:	187b      	adds	r3, r7, r1
 80057f4:	2200      	movs	r2, #0
 80057f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057f8:	000c      	movs	r4, r1
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <MX_GPIO_Init+0x1e8>)
 80057fe:	0019      	movs	r1, r3
 8005800:	0010      	movs	r0, r2
 8005802:	f7fb ff6d 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8005806:	0021      	movs	r1, r4
 8005808:	187b      	adds	r3, r7, r1
 800580a:	2260      	movs	r2, #96	; 0x60
 800580c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800580e:	187b      	adds	r3, r7, r1
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <MX_GPIO_Init+0x1f8>)
 8005812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005814:	187b      	adds	r3, r7, r1
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800581a:	187b      	adds	r3, r7, r1
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <MX_GPIO_Init+0x1e8>)
 800581e:	0019      	movs	r1, r3
 8005820:	0010      	movs	r0, r2
 8005822:	f7fb ff5d 	bl	80016e0 <HAL_GPIO_Init>

}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b00b      	add	sp, #44	; 0x2c
 800582c:	bd90      	pop	{r4, r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	40021000 	.word	0x40021000
 8005834:	0000efe0 	.word	0x0000efe0
 8005838:	48000800 	.word	0x48000800
 800583c:	48001400 	.word	0x48001400
 8005840:	00008002 	.word	0x00008002
 8005844:	48000400 	.word	0x48000400
 8005848:	0000eff0 	.word	0x0000eff0
 800584c:	000080b2 	.word	0x000080b2
 8005850:	00000407 	.word	0x00000407
 8005854:	10110000 	.word	0x10110000

08005858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_UART_RxCpltCallback+0x34>)
 8005864:	429a      	cmp	r2, r3
 8005866:	d102      	bne.n	800586e <HAL_UART_RxCpltCallback+0x16>
		gps_recieve_full();
 8005868:	f7fe fe66 	bl	8004538 <gps_recieve_full>
	}
	else if (huart == &huart1) {
		xSemaphoreGiveFromISR(ble_receive_ready, NULL);
	}

}
 800586c:	e009      	b.n	8005882 <HAL_UART_RxCpltCallback+0x2a>
	else if (huart == &huart1) {
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <HAL_UART_RxCpltCallback+0x38>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d105      	bne.n	8005882 <HAL_UART_RxCpltCallback+0x2a>
		xSemaphoreGiveFromISR(ble_receive_ready, NULL);
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <HAL_UART_RxCpltCallback+0x3c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2100      	movs	r1, #0
 800587c:	0018      	movs	r0, r3
 800587e:	f000 ff24 	bl	80066ca <xQueueGiveFromISR>
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	200015a0 	.word	0x200015a0
 8005890:	20001520 	.word	0x20001520
 8005894:	20000d70 	.word	0x20000d70

08005898 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d101      	bne.n	80058ac <HAL_UART_RxHalfCpltCallback+0x14>
		gps_recieve_half();
 80058a8:	f7fe fe68 	bl	800457c <gps_recieve_half>
	}
}
 80058ac:	46c0      	nop			; (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b002      	add	sp, #8
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200015a0 	.word	0x200015a0

080058b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80058ca:	f7fb fc3f 	bl	800114c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b002      	add	sp, #8
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	40012c00 	.word	0x40012c00

080058dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <RTOS_INIT>:
#include "racing_tasks.h"

void RTOS_INIT() {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	ble_receive_ready = xSemaphoreCreateBinary();
 80058ec:	2203      	movs	r2, #3
 80058ee:	2100      	movs	r1, #0
 80058f0:	2001      	movs	r0, #1
 80058f2:	f000 fe96 	bl	8006622 <xQueueGenericCreate>
 80058f6:	0002      	movs	r2, r0
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <RTOS_INIT+0x20>)
 80058fa:	601a      	str	r2, [r3, #0]
	vTaskStartScheduler();
 80058fc:	f001 fa70 	bl	8006de0 <vTaskStartScheduler>
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	20000d70 	.word	0x20000d70

0800590c <RTOS_INIT_TASKS>:

void RTOS_INIT_TASKS() {
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af02      	add	r7, sp, #8
	xTaskCreate(task_send_ble_packet, "send_ble_packet", 256, NULL, 0, task_send_ble_packet_handle);
 8005912:	4b0d      	ldr	r3, [pc, #52]	; (8005948 <RTOS_INIT_TASKS+0x3c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	0052      	lsls	r2, r2, #1
 800591a:	490c      	ldr	r1, [pc, #48]	; (800594c <RTOS_INIT_TASKS+0x40>)
 800591c:	480c      	ldr	r0, [pc, #48]	; (8005950 <RTOS_INIT_TASKS+0x44>)
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	2300      	movs	r3, #0
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	f001 f8b3 	bl	8006a90 <xTaskCreate>
	xTaskCreate(task_receive_ble_packet, "receive_ble_packet", 256, NULL, 1, task_receive_ble_packet_handle);
 800592a:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <RTOS_INIT_TASKS+0x48>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2280      	movs	r2, #128	; 0x80
 8005930:	0052      	lsls	r2, r2, #1
 8005932:	4909      	ldr	r1, [pc, #36]	; (8005958 <RTOS_INIT_TASKS+0x4c>)
 8005934:	4809      	ldr	r0, [pc, #36]	; (800595c <RTOS_INIT_TASKS+0x50>)
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2301      	movs	r3, #1
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	f001 f8a7 	bl	8006a90 <xTaskCreate>
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000f64 	.word	0x20000f64
 800594c:	08007dbc 	.word	0x08007dbc
 8005950:	08005961 	.word	0x08005961
 8005954:	20000f84 	.word	0x20000f84
 8005958:	08007dcc 	.word	0x08007dcc
 800595c:	08005b9d 	.word	0x08005b9d

08005960 <task_send_ble_packet>:

void task_send_ble_packet() {
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8005966:	2332      	movs	r3, #50	; 0x32
 8005968:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800596a:	f001 fb07 	bl	8006f7c <xTaskGetTickCount>
 800596e:	0003      	movs	r3, r0
 8005970:	607b      	str	r3, [r7, #4]
	for(;;) {
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f001 f9af 	bl	8006cdc <vTaskDelayUntil>
		uint8_t ** gps_read_data = gps_get_data();
 800597e:	f7fe fe1f 	bl	80045c0 <gps_get_data>
 8005982:	0003      	movs	r3, r0
 8005984:	613b      	str	r3, [r7, #16]
        if (gps_read_data[0] != NULL && gps_read_data[1] != NULL) {
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f1      	beq.n	8005972 <task_send_ble_packet+0x12>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3304      	adds	r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ec      	beq.n	8005972 <task_send_ble_packet+0x12>
        	if ( gps_read_data[1] >  gps_read_data[0]) {
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	3304      	adds	r3, #4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d919      	bls.n	80059da <task_send_ble_packet+0x7a>
        		unsigned int size = gps_read_data[1] - gps_read_data[0];
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3304      	adds	r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	001a      	movs	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	60bb      	str	r3, [r7, #8]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <task_send_ble_packet+0x22c>)
 80059be:	0018      	movs	r0, r3
 80059c0:	f002 f992 	bl	8007ce8 <memcpy>
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	4b71      	ldr	r3, [pc, #452]	; (8005b8c <task_send_ble_packet+0x22c>)
 80059c8:	18d0      	adds	r0, r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	22dc      	movs	r2, #220	; 0xdc
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	001a      	movs	r2, r3
 80059d2:	2100      	movs	r1, #0
 80059d4:	f002 f991 	bl	8007cfa <memset>
 80059d8:	e02d      	b.n	8005a36 <task_send_ble_packet+0xd6>
        	} else {
        		unsigned int size = (txBuffer + GPS_TX_BUFFER_SIZE) - gps_read_data[0];
 80059da:	4b6d      	ldr	r3, [pc, #436]	; (8005b90 <task_send_ble_packet+0x230>)
 80059dc:	001a      	movs	r2, r3
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	60fb      	str	r3, [r7, #12]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <task_send_ble_packet+0x22c>)
 80059ee:	0018      	movs	r0, r3
 80059f0:	f002 f97a 	bl	8007ce8 <memcpy>
        		memcpy(ble_tx_packet.gps_data + size, txBuffer, gps_read_data[1] - txBuffer);
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <task_send_ble_packet+0x22c>)
 80059f8:	18d0      	adds	r0, r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3304      	adds	r3, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	001a      	movs	r2, r3
 8005a02:	4b64      	ldr	r3, [pc, #400]	; (8005b94 <task_send_ble_packet+0x234>)
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	001a      	movs	r2, r3
 8005a08:	4b62      	ldr	r3, [pc, #392]	; (8005b94 <task_send_ble_packet+0x234>)
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	f002 f96c 	bl	8007ce8 <memcpy>
        		size += (gps_read_data[1] - txBuffer);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3304      	adds	r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	001a      	movs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	18d2      	adds	r2, r2, r3
 8005a1c:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <task_send_ble_packet+0x234>)
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	60fb      	str	r3, [r7, #12]
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005a26:	18d0      	adds	r0, r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22dc      	movs	r2, #220	; 0xdc
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	001a      	movs	r2, r3
 8005a30:	2100      	movs	r1, #0
 8005a32:	f002 f962 	bl	8007cfa <memset>
        	}
        	ble_tx_packet.imu_data[0] = getX();
 8005a36:	f7ff fc3d 	bl	80052b4 <getX>
 8005a3a:	1c01      	adds	r1, r0, #0
 8005a3c:	4b53      	ldr	r3, [pc, #332]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005a3e:	22dc      	movs	r2, #220	; 0xdc
 8005a40:	20ff      	movs	r0, #255	; 0xff
 8005a42:	4008      	ands	r0, r1
 8005a44:	0005      	movs	r5, r0
 8005a46:	5c98      	ldrb	r0, [r3, r2]
 8005a48:	2400      	movs	r4, #0
 8005a4a:	4020      	ands	r0, r4
 8005a4c:	1c04      	adds	r4, r0, #0
 8005a4e:	1c28      	adds	r0, r5, #0
 8005a50:	4320      	orrs	r0, r4
 8005a52:	5498      	strb	r0, [r3, r2]
 8005a54:	0a08      	lsrs	r0, r1, #8
 8005a56:	24ff      	movs	r4, #255	; 0xff
 8005a58:	4020      	ands	r0, r4
 8005a5a:	0006      	movs	r6, r0
 8005a5c:	1898      	adds	r0, r3, r2
 8005a5e:	7844      	ldrb	r4, [r0, #1]
 8005a60:	2500      	movs	r5, #0
 8005a62:	402c      	ands	r4, r5
 8005a64:	1c25      	adds	r5, r4, #0
 8005a66:	1c34      	adds	r4, r6, #0
 8005a68:	432c      	orrs	r4, r5
 8005a6a:	7044      	strb	r4, [r0, #1]
 8005a6c:	0c08      	lsrs	r0, r1, #16
 8005a6e:	24ff      	movs	r4, #255	; 0xff
 8005a70:	4020      	ands	r0, r4
 8005a72:	0006      	movs	r6, r0
 8005a74:	1898      	adds	r0, r3, r2
 8005a76:	7884      	ldrb	r4, [r0, #2]
 8005a78:	2500      	movs	r5, #0
 8005a7a:	402c      	ands	r4, r5
 8005a7c:	1c25      	adds	r5, r4, #0
 8005a7e:	1c34      	adds	r4, r6, #0
 8005a80:	432c      	orrs	r4, r5
 8005a82:	7084      	strb	r4, [r0, #2]
 8005a84:	0e08      	lsrs	r0, r1, #24
 8005a86:	189b      	adds	r3, r3, r2
 8005a88:	78da      	ldrb	r2, [r3, #3]
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	1c11      	adds	r1, r2, #0
 8005a90:	1c02      	adds	r2, r0, #0
 8005a92:	430a      	orrs	r2, r1
 8005a94:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[1] = getY();
 8005a96:	f7ff fc35 	bl	8005304 <getY>
 8005a9a:	1c01      	adds	r1, r0, #0
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005a9e:	22e0      	movs	r2, #224	; 0xe0
 8005aa0:	20ff      	movs	r0, #255	; 0xff
 8005aa2:	4008      	ands	r0, r1
 8005aa4:	0005      	movs	r5, r0
 8005aa6:	5c98      	ldrb	r0, [r3, r2]
 8005aa8:	2400      	movs	r4, #0
 8005aaa:	4020      	ands	r0, r4
 8005aac:	1c04      	adds	r4, r0, #0
 8005aae:	1c28      	adds	r0, r5, #0
 8005ab0:	4320      	orrs	r0, r4
 8005ab2:	5498      	strb	r0, [r3, r2]
 8005ab4:	0a08      	lsrs	r0, r1, #8
 8005ab6:	24ff      	movs	r4, #255	; 0xff
 8005ab8:	4020      	ands	r0, r4
 8005aba:	0006      	movs	r6, r0
 8005abc:	1898      	adds	r0, r3, r2
 8005abe:	7844      	ldrb	r4, [r0, #1]
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	402c      	ands	r4, r5
 8005ac4:	1c25      	adds	r5, r4, #0
 8005ac6:	1c34      	adds	r4, r6, #0
 8005ac8:	432c      	orrs	r4, r5
 8005aca:	7044      	strb	r4, [r0, #1]
 8005acc:	0c08      	lsrs	r0, r1, #16
 8005ace:	24ff      	movs	r4, #255	; 0xff
 8005ad0:	4020      	ands	r0, r4
 8005ad2:	0006      	movs	r6, r0
 8005ad4:	1898      	adds	r0, r3, r2
 8005ad6:	7884      	ldrb	r4, [r0, #2]
 8005ad8:	2500      	movs	r5, #0
 8005ada:	402c      	ands	r4, r5
 8005adc:	1c25      	adds	r5, r4, #0
 8005ade:	1c34      	adds	r4, r6, #0
 8005ae0:	432c      	orrs	r4, r5
 8005ae2:	7084      	strb	r4, [r0, #2]
 8005ae4:	0e08      	lsrs	r0, r1, #24
 8005ae6:	189b      	adds	r3, r3, r2
 8005ae8:	78da      	ldrb	r2, [r3, #3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	400a      	ands	r2, r1
 8005aee:	1c11      	adds	r1, r2, #0
 8005af0:	1c02      	adds	r2, r0, #0
 8005af2:	430a      	orrs	r2, r1
 8005af4:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[2] = getZ();
 8005af6:	f7ff fc2d 	bl	8005354 <getZ>
 8005afa:	1c01      	adds	r1, r0, #0
 8005afc:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005afe:	22e4      	movs	r2, #228	; 0xe4
 8005b00:	20ff      	movs	r0, #255	; 0xff
 8005b02:	4008      	ands	r0, r1
 8005b04:	0005      	movs	r5, r0
 8005b06:	5c98      	ldrb	r0, [r3, r2]
 8005b08:	2400      	movs	r4, #0
 8005b0a:	4020      	ands	r0, r4
 8005b0c:	1c04      	adds	r4, r0, #0
 8005b0e:	1c28      	adds	r0, r5, #0
 8005b10:	4320      	orrs	r0, r4
 8005b12:	5498      	strb	r0, [r3, r2]
 8005b14:	0a08      	lsrs	r0, r1, #8
 8005b16:	24ff      	movs	r4, #255	; 0xff
 8005b18:	4020      	ands	r0, r4
 8005b1a:	0006      	movs	r6, r0
 8005b1c:	1898      	adds	r0, r3, r2
 8005b1e:	7844      	ldrb	r4, [r0, #1]
 8005b20:	2500      	movs	r5, #0
 8005b22:	402c      	ands	r4, r5
 8005b24:	1c25      	adds	r5, r4, #0
 8005b26:	1c34      	adds	r4, r6, #0
 8005b28:	432c      	orrs	r4, r5
 8005b2a:	7044      	strb	r4, [r0, #1]
 8005b2c:	0c08      	lsrs	r0, r1, #16
 8005b2e:	24ff      	movs	r4, #255	; 0xff
 8005b30:	4020      	ands	r0, r4
 8005b32:	0006      	movs	r6, r0
 8005b34:	1898      	adds	r0, r3, r2
 8005b36:	7884      	ldrb	r4, [r0, #2]
 8005b38:	2500      	movs	r5, #0
 8005b3a:	402c      	ands	r4, r5
 8005b3c:	1c25      	adds	r5, r4, #0
 8005b3e:	1c34      	adds	r4, r6, #0
 8005b40:	432c      	orrs	r4, r5
 8005b42:	7084      	strb	r4, [r0, #2]
 8005b44:	0e08      	lsrs	r0, r1, #24
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	78da      	ldrb	r2, [r3, #3]
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	1c11      	adds	r1, r2, #0
 8005b50:	1c02      	adds	r2, r0, #0
 8005b52:	430a      	orrs	r2, r1
 8005b54:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.ending[0] = '-';
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b58:	22e8      	movs	r2, #232	; 0xe8
 8005b5a:	212d      	movs	r1, #45	; 0x2d
 8005b5c:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[1] = '-';
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b60:	22e9      	movs	r2, #233	; 0xe9
 8005b62:	212d      	movs	r1, #45	; 0x2d
 8005b64:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[2] = '-';
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b68:	22ea      	movs	r2, #234	; 0xea
 8005b6a:	212d      	movs	r1, #45	; 0x2d
 8005b6c:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[3] = '\r';
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b70:	22eb      	movs	r2, #235	; 0xeb
 8005b72:	210d      	movs	r1, #13
 8005b74:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[4] = '\n';
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b78:	22ec      	movs	r2, #236	; 0xec
 8005b7a:	210a      	movs	r1, #10
 8005b7c:	5499      	strb	r1, [r3, r2]

        	ble_send(&huart1, &ble_tx_packet);
 8005b7e:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <task_send_ble_packet+0x22c>)
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <task_send_ble_packet+0x238>)
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7fe fc15 	bl	80043b4 <ble_send>
	for(;;) {
 8005b8a:	e6f2      	b.n	8005972 <task_send_ble_packet+0x12>
 8005b8c:	20000df4 	.word	0x20000df4
 8005b90:	200013e0 	.word	0x200013e0
 8005b94:	20000fe0 	.word	0x20000fe0
 8005b98:	20001520 	.word	0x20001520

08005b9c <task_receive_ble_packet>:
        }
	}
}
void task_receive_ble_packet() {
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b08d      	sub	sp, #52	; 0x34
 8005ba0:	af00      	add	r7, sp, #0
	for(;;) {
//		if( xSemaphoreTake(ble_receive_ready, portMAX_DELAY) == pdTRUE ) {
		xSemaphoreTake(ble_receive_ready, portMAX_DELAY);
 8005ba2:	4b9b      	ldr	r3, [pc, #620]	; (8005e10 <task_receive_ble_packet+0x274>)
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	425a      	negs	r2, r3
 8005baa:	2300      	movs	r3, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	f000 fdf1 	bl	8006794 <xQueueGenericReceive>

		uint8_t index = 0, position;
 8005bb2:	232f      	movs	r3, #47	; 0x2f
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
		const char race_end_msg[] = "    race finished!";
 8005bba:	2310      	movs	r3, #16
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	4a95      	ldr	r2, [pc, #596]	; (8005e14 <task_receive_ble_packet+0x278>)
 8005bc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005bc2:	c313      	stmia	r3!, {r0, r1, r4}
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	6019      	str	r1, [r3, #0]
 8005bc8:	8891      	ldrh	r1, [r2, #4]
 8005bca:	8099      	strh	r1, [r3, #4]
 8005bcc:	7992      	ldrb	r2, [r2, #6]
 8005bce:	719a      	strb	r2, [r3, #6]
		char race_pos_msg[] = "  th place!";
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	4a91      	ldr	r2, [pc, #580]	; (8005e18 <task_receive_ble_packet+0x27c>)
 8005bd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005bd6:	c313      	stmia	r3!, {r0, r1, r4}
		float current_time, time_to_wait;

		switch((uint8_t)RX_BUFFER.command) {
 8005bd8:	4b90      	ldr	r3, [pc, #576]	; (8005e1c <task_receive_ble_packet+0x280>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3b40      	subs	r3, #64	; 0x40
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d900      	bls.n	8005be4 <task_receive_ble_packet+0x48>
 8005be2:	e110      	b.n	8005e06 <task_receive_ble_packet+0x26a>
 8005be4:	009a      	lsls	r2, r3, #2
 8005be6:	4b8e      	ldr	r3, [pc, #568]	; (8005e20 <task_receive_ble_packet+0x284>)
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	469f      	mov	pc, r3
		case GPS_RIP_2020NOV:
			// display messsage that the GPS has moved onto the next life
			fillScreen(ILI9341_LIGHTGREY);
 8005bee:	4b8d      	ldr	r3, [pc, #564]	; (8005e24 <task_receive_ble_packet+0x288>)
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7fe fdcb 	bl	800478c <fillScreen>
			break;
 8005bf6:	e109      	b.n	8005e0c <task_receive_ble_packet+0x270>

		case IDLE:
			// "use the app to start a race"
			 fillScreen(ILI9341_BLACK);
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f7fe fdc7 	bl	800478c <fillScreen>
			break;
 8005bfe:	e105      	b.n	8005e0c <task_receive_ble_packet+0x270>
		case RACE_START:
			// Packet Format:
			//	command: 	'_'
			// 	data:		10 bytes: HHMMSS.SSS

			START_TIME = convert_time(&RX_BUFFER.command_data);
 8005c00:	4b89      	ldr	r3, [pc, #548]	; (8005e28 <task_receive_ble_packet+0x28c>)
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 f954 	bl	8005eb0 <convert_time>
 8005c08:	1c02      	adds	r2, r0, #0
 8005c0a:	4b88      	ldr	r3, [pc, #544]	; (8005e2c <task_receive_ble_packet+0x290>)
 8005c0c:	601a      	str	r2, [r3, #0]

			// "put phone down, race starting soon"
			//print_function();

			// LED countdown
			current_time = gps_get_time();
 8005c0e:	f000 f91d 	bl	8005e4c <gps_get_time>
 8005c12:	1c03      	adds	r3, r0, #0
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
			time_to_wait = START_TIME - current_time - 2;
 8005c16:	4b85      	ldr	r3, [pc, #532]	; (8005e2c <task_receive_ble_packet+0x290>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c1c:	1c18      	adds	r0, r3, #0
 8005c1e:	f7fa fef5 	bl	8000a0c <__aeabi_fsub>
 8005c22:	1c03      	adds	r3, r0, #0
 8005c24:	2180      	movs	r1, #128	; 0x80
 8005c26:	05c9      	lsls	r1, r1, #23
 8005c28:	1c18      	adds	r0, r3, #0
 8005c2a:	f7fa feef 	bl	8000a0c <__aeabi_fsub>
 8005c2e:	1c03      	adds	r3, r0, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
			vTaskDelay((int) 1000*time_to_wait);
 8005c32:	497f      	ldr	r1, [pc, #508]	; (8005e30 <task_receive_ble_packet+0x294>)
 8005c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c36:	f7fa fdb7 	bl	80007a8 <__aeabi_fmul>
 8005c3a:	1c03      	adds	r3, r0, #0
 8005c3c:	1c18      	adds	r0, r3, #0
 8005c3e:	f7fa faef 	bl	8000220 <__aeabi_f2uiz>
 8005c42:	0003      	movs	r3, r0
 8005c44:	0018      	movs	r0, r3
 8005c46:	f001 f8a5 	bl	8006d94 <vTaskDelay>
			setLED(RED, ON);
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f7ff f971 	bl	8004f34 <setLED>
			vTaskDelay(1000);
 8005c52:	23fa      	movs	r3, #250	; 0xfa
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f001 f89c 	bl	8006d94 <vTaskDelay>
			setLED(YELLOW, ON);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f7ff f968 	bl	8004f34 <setLED>
			vTaskDelay(1000);
 8005c64:	23fa      	movs	r3, #250	; 0xfa
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f001 f893 	bl	8006d94 <vTaskDelay>
			setLED(GREEN, ON);
 8005c6e:	2101      	movs	r1, #1
 8005c70:	2002      	movs	r0, #2
 8005c72:	f7ff f95f 	bl	8004f34 <setLED>

			// print "Race!"

			break;
 8005c76:	e0c9      	b.n	8005e0c <task_receive_ble_packet+0x270>

		case POS_UPDATE:
			// Packet Format:
			//	command: 	'U'
			// 	data:		<3 char array position, ie '1st', '2nd', '3rd'...> <length of next string (as an int)> <char array containing fraction, ie "3.3 / 4.0"> <padding characters>
			memcpy(&POSITION, RX_BUFFER.command_data, 3);
 8005c78:	496e      	ldr	r1, [pc, #440]	; (8005e34 <task_receive_ble_packet+0x298>)
 8005c7a:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <task_receive_ble_packet+0x280>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	0008      	movs	r0, r1
 8005c80:	189b      	adds	r3, r3, r2
 8005c82:	2203      	movs	r2, #3
 8005c84:	0019      	movs	r1, r3
 8005c86:	f002 f82f 	bl	8007ce8 <memcpy>
			memcpy(&DIST_FRACTION_SIZE, RX_BUFFER.command_data + 3, 1);
 8005c8a:	4b6b      	ldr	r3, [pc, #428]	; (8005e38 <task_receive_ble_packet+0x29c>)
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	4b6b      	ldr	r3, [pc, #428]	; (8005e3c <task_receive_ble_packet+0x2a0>)
 8005c90:	701a      	strb	r2, [r3, #0]
			memcpy(&DIST_FRACTION, RX_BUFFER.command_data + 4, DIST_FRACTION_SIZE);
 8005c92:	496b      	ldr	r1, [pc, #428]	; (8005e40 <task_receive_ble_packet+0x2a4>)
 8005c94:	4b69      	ldr	r3, [pc, #420]	; (8005e3c <task_receive_ble_packet+0x2a0>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	001a      	movs	r2, r3
 8005c9a:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <task_receive_ble_packet+0x2a8>)
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f002 f823 	bl	8007ce8 <memcpy>

			// Print to LCD:
			//	"Pos: <POSITION>"
			//	"<DIST_FRACTION> miles"
			break;
 8005ca2:	e0b3      	b.n	8005e0c <task_receive_ble_packet+0x270>

			// print time finished on LCD
			// get time from GPS data
//			FINISH_TIME = gps_get_time();

			position = RX_BUFFER.command_data[0];
 8005ca4:	212e      	movs	r1, #46	; 0x2e
 8005ca6:	187b      	adds	r3, r7, r1
 8005ca8:	4a5c      	ldr	r2, [pc, #368]	; (8005e1c <task_receive_ble_packet+0x280>)
 8005caa:	7852      	ldrb	r2, [r2, #1]
 8005cac:	701a      	strb	r2, [r3, #0]

			// constructs position message
			if(position % 10 == 1 && position != 11) {
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	210a      	movs	r1, #10
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fa faad 	bl	8000214 <__aeabi_uidivmod>
 8005cba:	000b      	movs	r3, r1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10b      	bne.n	8005cda <task_receive_ble_packet+0x13e>
 8005cc2:	232e      	movs	r3, #46	; 0x2e
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b0b      	cmp	r3, #11
 8005cca:	d006      	beq.n	8005cda <task_receive_ble_packet+0x13e>
				race_pos_msg[2] = 's';
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	2273      	movs	r2, #115	; 0x73
 8005cd0:	709a      	strb	r2, [r3, #2]
				race_pos_msg[3] = 't';
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	2274      	movs	r2, #116	; 0x74
 8005cd6:	70da      	strb	r2, [r3, #3]
 8005cd8:	e02c      	b.n	8005d34 <task_receive_ble_packet+0x198>
			}
			else if(position % 10 == 2 && position != 12) {
 8005cda:	232e      	movs	r3, #46	; 0x2e
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	210a      	movs	r1, #10
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fa fa96 	bl	8000214 <__aeabi_uidivmod>
 8005ce8:	000b      	movs	r3, r1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d10b      	bne.n	8005d08 <task_receive_ble_packet+0x16c>
 8005cf0:	232e      	movs	r3, #46	; 0x2e
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d006      	beq.n	8005d08 <task_receive_ble_packet+0x16c>
				race_pos_msg[2] = 'n';
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	226e      	movs	r2, #110	; 0x6e
 8005cfe:	709a      	strb	r2, [r3, #2]
				race_pos_msg[3] = 'd';
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	2264      	movs	r2, #100	; 0x64
 8005d04:	70da      	strb	r2, [r3, #3]
 8005d06:	e015      	b.n	8005d34 <task_receive_ble_packet+0x198>
			}
			else if(position % 10 == 3 && position != 13) {
 8005d08:	232e      	movs	r3, #46	; 0x2e
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	210a      	movs	r1, #10
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fa fa7f 	bl	8000214 <__aeabi_uidivmod>
 8005d16:	000b      	movs	r3, r1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d10a      	bne.n	8005d34 <task_receive_ble_packet+0x198>
 8005d1e:	232e      	movs	r3, #46	; 0x2e
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b0d      	cmp	r3, #13
 8005d26:	d005      	beq.n	8005d34 <task_receive_ble_packet+0x198>
				race_pos_msg[2] = 'r';
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	2272      	movs	r2, #114	; 0x72
 8005d2c:	709a      	strb	r2, [r3, #2]
				race_pos_msg[3] = 'd';
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	2264      	movs	r2, #100	; 0x64
 8005d32:	70da      	strb	r2, [r3, #3]
			}

			if(position > 9) {
 8005d34:	232e      	movs	r3, #46	; 0x2e
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d916      	bls.n	8005d6c <task_receive_ble_packet+0x1d0>
				race_pos_msg[0] = position/10 + '0';
 8005d3e:	242e      	movs	r4, #46	; 0x2e
 8005d40:	193b      	adds	r3, r7, r4
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	210a      	movs	r1, #10
 8005d46:	0018      	movs	r0, r3
 8005d48:	f7fa f9de 	bl	8000108 <__udivsi3>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	701a      	strb	r2, [r3, #0]
				position %= 10;
 8005d58:	0023      	movs	r3, r4
 8005d5a:	18fc      	adds	r4, r7, r3
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	210a      	movs	r1, #10
 8005d62:	0018      	movs	r0, r3
 8005d64:	f7fa fa56 	bl	8000214 <__aeabi_uidivmod>
 8005d68:	000b      	movs	r3, r1
 8005d6a:	7023      	strb	r3, [r4, #0]
			}
			race_pos_msg[1] = position + '0';
 8005d6c:	232e      	movs	r3, #46	; 0x2e
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	3330      	adds	r3, #48	; 0x30
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	705a      	strb	r2, [r3, #1]

			// print position to LCD

			break;
 8005d7a:	e047      	b.n	8005e0c <task_receive_ble_packet+0x270>
			// Packet Format:
			//	command: 	''
			// 	data:		6x: 19 character name + 1 character bool
			while (RX_BUFFER.command_data[index] && index < 120){
				// copy the names
				memcpy(&RACERS[index/20].name, RX_BUFFER.command_data + index, 19);
 8005d7c:	242f      	movs	r4, #47	; 0x2f
 8005d7e:	193b      	adds	r3, r7, r4
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2114      	movs	r1, #20
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fa f9bf 	bl	8000108 <__udivsi3>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	001a      	movs	r2, r3
 8005d90:	0013      	movs	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	189b      	adds	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <task_receive_ble_packet+0x2ac>)
 8005d9a:	1898      	adds	r0, r3, r2
 8005d9c:	193b      	adds	r3, r7, r4
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <task_receive_ble_packet+0x28c>)
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	2213      	movs	r2, #19
 8005da6:	0019      	movs	r1, r3
 8005da8:	f001 ff9e 	bl	8007ce8 <memcpy>
				memcpy(&RACERS[index/20].is_you, RX_BUFFER.command_data + index + 19, 1);
 8005dac:	193b      	adds	r3, r7, r4
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2114      	movs	r1, #20
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7fa f9a8 	bl	8000108 <__udivsi3>
 8005db8:	0003      	movs	r3, r0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	0013      	movs	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	001a      	movs	r2, r3
 8005dca:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <task_receive_ble_packet+0x2ac>)
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	3303      	adds	r3, #3
 8005dd0:	193a      	adds	r2, r7, r4
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	3213      	adds	r2, #19
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <task_receive_ble_packet+0x28c>)
 8005dda:	188a      	adds	r2, r1, r2
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	701a      	strb	r2, [r3, #0]
				index += 20;
 8005de0:	193b      	adds	r3, r7, r4
 8005de2:	193a      	adds	r2, r7, r4
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	3214      	adds	r2, #20
 8005de8:	701a      	strb	r2, [r3, #0]
			while (RX_BUFFER.command_data[index] && index < 120){
 8005dea:	232f      	movs	r3, #47	; 0x2f
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <task_receive_ble_packet+0x280>)
 8005df2:	18d3      	adds	r3, r2, r3
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <task_receive_ble_packet+0x26e>
 8005dfa:	232f      	movs	r3, #47	; 0x2f
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b77      	cmp	r3, #119	; 0x77
 8005e02:	d9bb      	bls.n	8005d7c <task_receive_ble_packet+0x1e0>
			}

			// print the names and positions

			break;
 8005e04:	e001      	b.n	8005e0a <task_receive_ble_packet+0x26e>
		default:
			break;
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	e6cb      	b.n	8005ba2 <task_receive_ble_packet+0x6>
			break;
 8005e0a:	46c0      	nop			; (mov r8, r8)
	for(;;) {
 8005e0c:	e6c9      	b.n	8005ba2 <task_receive_ble_packet+0x6>
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	20000d70 	.word	0x20000d70
 8005e14:	08007de0 	.word	0x08007de0
 8005e18:	08007df4 	.word	0x08007df4
 8005e1c:	20000d78 	.word	0x20000d78
 8005e20:	08007f38 	.word	0x08007f38
 8005e24:	0000c618 	.word	0x0000c618
 8005e28:	20000d79 	.word	0x20000d79
 8005e2c:	20000f5c 	.word	0x20000f5c
 8005e30:	447a0000 	.word	0x447a0000
 8005e34:	20001400 	.word	0x20001400
 8005e38:	20000d7c 	.word	0x20000d7c
 8005e3c:	20000f76 	.word	0x20000f76
 8005e40:	20000d7d 	.word	0x20000d7d
 8005e44:	20000fcc 	.word	0x20000fcc
 8005e48:	20000ee4 	.word	0x20000ee4

08005e4c <gps_get_time>:
		}
	}
}

// returns the current time in the format of a floating point number HHMMSS.SSS
float gps_get_time() {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
	// get the current gps data
    uint8_t * gps_data = ble_tx_packet.gps_data;
 8005e52:	4b16      	ldr	r3, [pc, #88]	; (8005eac <gps_get_time+0x60>)
 8005e54:	607b      	str	r3, [r7, #4]

    // GPS messages must start with GPRMC
    if(gps_data[1] != 'G' || (gps_data[2] != 'P' && gps_data[2] != 'N') || gps_data[3] != 'R' || gps_data[4] != 'M' || gps_data[5] != 'C')
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b47      	cmp	r3, #71	; 0x47
 8005e5e:	d118      	bne.n	8005e92 <gps_get_time+0x46>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3302      	adds	r3, #2
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b50      	cmp	r3, #80	; 0x50
 8005e68:	d004      	beq.n	8005e74 <gps_get_time+0x28>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b4e      	cmp	r3, #78	; 0x4e
 8005e72:	d10e      	bne.n	8005e92 <gps_get_time+0x46>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3303      	adds	r3, #3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b52      	cmp	r3, #82	; 0x52
 8005e7c:	d109      	bne.n	8005e92 <gps_get_time+0x46>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b4d      	cmp	r3, #77	; 0x4d
 8005e86:	d104      	bne.n	8005e92 <gps_get_time+0x46>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3305      	adds	r3, #5
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b43      	cmp	r3, #67	; 0x43
 8005e90:	d001      	beq.n	8005e96 <gps_get_time+0x4a>
        return 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e005      	b.n	8005ea2 <gps_get_time+0x56>

    return convert_time(gps_data + 7);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3307      	adds	r3, #7
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 f808 	bl	8005eb0 <convert_time>
 8005ea0:	1c03      	adds	r3, r0, #0
}
 8005ea2:	1c18      	adds	r0, r3, #0
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b002      	add	sp, #8
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	20000df4 	.word	0x20000df4

08005eb0 <convert_time>:

// converts a uint8_t array in the format HHMMSS.SS to a float of the same format
float convert_time(uint8_t * time_in) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	int index = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
	float time = 0, milliseconds = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

	// add the numbers before the decimal
	for(; index < 6; index++){
 8005ec4:	e017      	b.n	8005ef6 <convert_time+0x46>
		time *= 10;
 8005ec6:	4924      	ldr	r1, [pc, #144]	; (8005f58 <convert_time+0xa8>)
 8005ec8:	6938      	ldr	r0, [r7, #16]
 8005eca:	f7fa fc6d 	bl	80007a8 <__aeabi_fmul>
 8005ece:	1c03      	adds	r3, r0, #0
 8005ed0:	613b      	str	r3, [r7, #16]
		time += time_in[index] - '0';
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	18d3      	adds	r3, r2, r3
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	3b30      	subs	r3, #48	; 0x30
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7fa ff79 	bl	8000dd4 <__aeabi_i2f>
 8005ee2:	1c03      	adds	r3, r0, #0
 8005ee4:	1c19      	adds	r1, r3, #0
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	f7fa f9b2 	bl	8000250 <__aeabi_fadd>
 8005eec:	1c03      	adds	r3, r0, #0
 8005eee:	613b      	str	r3, [r7, #16]
	for(; index < 6; index++){
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	dde4      	ble.n	8005ec6 <convert_time+0x16>
	}

	index++;    // skipping the decimal point in the message to continue to parse the number
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3301      	adds	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]

	// add the numbers after the decimal
	for(; index < 9; index++){
 8005f02:	e017      	b.n	8005f34 <convert_time+0x84>
		milliseconds *= 10;
 8005f04:	4914      	ldr	r1, [pc, #80]	; (8005f58 <convert_time+0xa8>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7fa fc4e 	bl	80007a8 <__aeabi_fmul>
 8005f0c:	1c03      	adds	r3, r0, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
		milliseconds += time_in[index] - '0';
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b30      	subs	r3, #48	; 0x30
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7fa ff5a 	bl	8000dd4 <__aeabi_i2f>
 8005f20:	1c03      	adds	r3, r0, #0
 8005f22:	1c19      	adds	r1, r3, #0
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7fa f993 	bl	8000250 <__aeabi_fadd>
 8005f2a:	1c03      	adds	r3, r0, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
	for(; index < 9; index++){
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3301      	adds	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	dde4      	ble.n	8005f04 <convert_time+0x54>
	}
	milliseconds /= 1000;
 8005f3a:	4908      	ldr	r1, [pc, #32]	; (8005f5c <convert_time+0xac>)
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fa fb21 	bl	8000584 <__aeabi_fdiv>
 8005f42:	1c03      	adds	r3, r0, #0
 8005f44:	60fb      	str	r3, [r7, #12]

	return time + milliseconds;
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6938      	ldr	r0, [r7, #16]
 8005f4a:	f7fa f981 	bl	8000250 <__aeabi_fadd>
 8005f4e:	1c03      	adds	r3, r0, #0
}
 8005f50:	1c18      	adds	r0, r3, #0
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b006      	add	sp, #24
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	41200000 	.word	0x41200000
 8005f5c:	447a0000 	.word	0x447a0000

08005f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	619a      	str	r2, [r3, #24]
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2201      	movs	r2, #1
 8005f78:	4013      	ands	r3, r2
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f80:	69da      	ldr	r2, [r3, #28]
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	0549      	lsls	r1, r1, #21
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	61da      	str	r2, [r3, #28]
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_MspInit+0x44>)
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	055b      	lsls	r3, r3, #21
 8005f94:	4013      	ands	r3, r2
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb0:	2314      	movs	r3, #20
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	2314      	movs	r3, #20
 8005fb8:	001a      	movs	r2, r3
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f001 fe9d 	bl	8007cfa <memset>
  if(hi2c->Instance==I2C1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <HAL_I2C_MspInit+0x90>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d132      	bne.n	8006030 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <HAL_I2C_MspInit+0x94>)
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_I2C_MspInit+0x94>)
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	02c9      	lsls	r1, r1, #11
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	615a      	str	r2, [r3, #20]
 8005fd8:	4b18      	ldr	r3, [pc, #96]	; (800603c <HAL_I2C_MspInit+0x94>)
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	02db      	lsls	r3, r3, #11
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin|IMU_SCL_Pin;
 8005fe6:	2114      	movs	r1, #20
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	22c0      	movs	r2, #192	; 0xc0
 8005fec:	0052      	lsls	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	2212      	movs	r2, #18
 8005ff4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	2203      	movs	r2, #3
 8006000:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006002:	187b      	adds	r3, r7, r1
 8006004:	2201      	movs	r2, #1
 8006006:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006008:	187b      	adds	r3, r7, r1
 800600a:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <HAL_I2C_MspInit+0x98>)
 800600c:	0019      	movs	r1, r3
 800600e:	0010      	movs	r0, r2
 8006010:	f7fb fb66 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_I2C_MspInit+0x94>)
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_I2C_MspInit+0x94>)
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	0389      	lsls	r1, r1, #14
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <HAL_I2C_MspInit+0x94>)
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	039b      	lsls	r3, r3, #14
 800602a:	4013      	ands	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b00a      	add	sp, #40	; 0x28
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40005400 	.word	0x40005400
 800603c:	40021000 	.word	0x40021000
 8006040:	48000400 	.word	0x48000400

08006044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800604c:	231c      	movs	r3, #28
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	0018      	movs	r0, r3
 8006052:	2314      	movs	r3, #20
 8006054:	001a      	movs	r2, r3
 8006056:	2100      	movs	r1, #0
 8006058:	f001 fe4f 	bl	8007cfa <memset>
  if(huart->Instance==USART1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a78      	ldr	r2, [pc, #480]	; (8006244 <HAL_UART_MspInit+0x200>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d000      	beq.n	8006068 <HAL_UART_MspInit+0x24>
 8006066:	e08a      	b.n	800617e <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006068:	4b77      	ldr	r3, [pc, #476]	; (8006248 <HAL_UART_MspInit+0x204>)
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	4b76      	ldr	r3, [pc, #472]	; (8006248 <HAL_UART_MspInit+0x204>)
 800606e:	2180      	movs	r1, #128	; 0x80
 8006070:	01c9      	lsls	r1, r1, #7
 8006072:	430a      	orrs	r2, r1
 8006074:	619a      	str	r2, [r3, #24]
 8006076:	4b74      	ldr	r3, [pc, #464]	; (8006248 <HAL_UART_MspInit+0x204>)
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	01db      	lsls	r3, r3, #7
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006084:	4b70      	ldr	r3, [pc, #448]	; (8006248 <HAL_UART_MspInit+0x204>)
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	4b6f      	ldr	r3, [pc, #444]	; (8006248 <HAL_UART_MspInit+0x204>)
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	0289      	lsls	r1, r1, #10
 800608e:	430a      	orrs	r2, r1
 8006090:	615a      	str	r2, [r3, #20]
 8006092:	4b6d      	ldr	r3, [pc, #436]	; (8006248 <HAL_UART_MspInit+0x204>)
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	4013      	ands	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 80060a0:	211c      	movs	r1, #28
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	22c0      	movs	r2, #192	; 0xc0
 80060a6:	00d2      	lsls	r2, r2, #3
 80060a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	2202      	movs	r2, #2
 80060ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	2203      	movs	r2, #3
 80060ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	2201      	movs	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c2:	187a      	adds	r2, r7, r1
 80060c4:	2390      	movs	r3, #144	; 0x90
 80060c6:	05db      	lsls	r3, r3, #23
 80060c8:	0011      	movs	r1, r2
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7fb fb08 	bl	80016e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80060d0:	4b5e      	ldr	r3, [pc, #376]	; (800624c <HAL_UART_MspInit+0x208>)
 80060d2:	4a5f      	ldr	r2, [pc, #380]	; (8006250 <HAL_UART_MspInit+0x20c>)
 80060d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060d6:	4b5d      	ldr	r3, [pc, #372]	; (800624c <HAL_UART_MspInit+0x208>)
 80060d8:	2210      	movs	r2, #16
 80060da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060dc:	4b5b      	ldr	r3, [pc, #364]	; (800624c <HAL_UART_MspInit+0x208>)
 80060de:	2200      	movs	r2, #0
 80060e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060e2:	4b5a      	ldr	r3, [pc, #360]	; (800624c <HAL_UART_MspInit+0x208>)
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060e8:	4b58      	ldr	r3, [pc, #352]	; (800624c <HAL_UART_MspInit+0x208>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060ee:	4b57      	ldr	r3, [pc, #348]	; (800624c <HAL_UART_MspInit+0x208>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80060f4:	4b55      	ldr	r3, [pc, #340]	; (800624c <HAL_UART_MspInit+0x208>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80060fa:	4b54      	ldr	r3, [pc, #336]	; (800624c <HAL_UART_MspInit+0x208>)
 80060fc:	2280      	movs	r2, #128	; 0x80
 80060fe:	0192      	lsls	r2, r2, #6
 8006100:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006102:	4b52      	ldr	r3, [pc, #328]	; (800624c <HAL_UART_MspInit+0x208>)
 8006104:	0018      	movs	r0, r3
 8006106:	f7fb f90d 	bl	8001324 <HAL_DMA_Init>
 800610a:	1e03      	subs	r3, r0, #0
 800610c:	d001      	beq.n	8006112 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800610e:	f7ff fbe5 	bl	80058dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a4d      	ldr	r2, [pc, #308]	; (800624c <HAL_UART_MspInit+0x208>)
 8006116:	669a      	str	r2, [r3, #104]	; 0x68
 8006118:	4b4c      	ldr	r3, [pc, #304]	; (800624c <HAL_UART_MspInit+0x208>)
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006120:	4a4d      	ldr	r2, [pc, #308]	; (8006258 <HAL_UART_MspInit+0x214>)
 8006122:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006126:	2200      	movs	r2, #0
 8006128:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_UART_MspInit+0x210>)
 800612c:	2200      	movs	r2, #0
 800612e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006130:	4b48      	ldr	r3, [pc, #288]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006136:	4b47      	ldr	r3, [pc, #284]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <HAL_UART_MspInit+0x210>)
 800613e:	2200      	movs	r2, #0
 8006140:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006142:	4b44      	ldr	r3, [pc, #272]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006144:	2220      	movs	r2, #32
 8006146:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <HAL_UART_MspInit+0x210>)
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	0152      	lsls	r2, r2, #5
 800614e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006150:	4b40      	ldr	r3, [pc, #256]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006152:	0018      	movs	r0, r3
 8006154:	f7fb f8e6 	bl	8001324 <HAL_DMA_Init>
 8006158:	1e03      	subs	r3, r0, #0
 800615a:	d001      	beq.n	8006160 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 800615c:	f7ff fbbe 	bl	80058dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3c      	ldr	r2, [pc, #240]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006164:	66da      	str	r2, [r3, #108]	; 0x6c
 8006166:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <HAL_UART_MspInit+0x210>)
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800616c:	2200      	movs	r2, #0
 800616e:	2100      	movs	r1, #0
 8006170:	201b      	movs	r0, #27
 8006172:	f7fb f8b1 	bl	80012d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006176:	201b      	movs	r0, #27
 8006178:	f7fb f8c3 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800617c:	e05e      	b.n	800623c <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a36      	ldr	r2, [pc, #216]	; (800625c <HAL_UART_MspInit+0x218>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d159      	bne.n	800623c <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <HAL_UART_MspInit+0x204>)
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <HAL_UART_MspInit+0x204>)
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	0289      	lsls	r1, r1, #10
 8006192:	430a      	orrs	r2, r1
 8006194:	61da      	str	r2, [r3, #28]
 8006196:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <HAL_UART_MspInit+0x204>)
 8006198:	69da      	ldr	r2, [r3, #28]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <HAL_UART_MspInit+0x204>)
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	4b27      	ldr	r3, [pc, #156]	; (8006248 <HAL_UART_MspInit+0x204>)
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	0289      	lsls	r1, r1, #10
 80061ae:	430a      	orrs	r2, r1
 80061b0:	615a      	str	r2, [r3, #20]
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <HAL_UART_MspInit+0x204>)
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	4013      	ands	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80061c0:	211c      	movs	r1, #28
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	220c      	movs	r2, #12
 80061c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	187b      	adds	r3, r7, r1
 80061ca:	2202      	movs	r2, #2
 80061cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	2203      	movs	r2, #3
 80061d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	2201      	movs	r2, #1
 80061de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e0:	187a      	adds	r2, r7, r1
 80061e2:	2390      	movs	r3, #144	; 0x90
 80061e4:	05db      	lsls	r3, r3, #23
 80061e6:	0011      	movs	r1, r2
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7fb fa79 	bl	80016e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <HAL_UART_MspInit+0x21c>)
 80061f0:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <HAL_UART_MspInit+0x220>)
 80061f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_UART_MspInit+0x21c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061fa:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_UART_MspInit+0x21c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006206:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006208:	2200      	movs	r2, #0
 800620a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_UART_MspInit+0x21c>)
 800620e:	2200      	movs	r2, #0
 8006210:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006214:	2220      	movs	r2, #32
 8006216:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <HAL_UART_MspInit+0x21c>)
 800621a:	22c0      	movs	r2, #192	; 0xc0
 800621c:	0192      	lsls	r2, r2, #6
 800621e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006222:	0018      	movs	r0, r3
 8006224:	f7fb f87e 	bl	8001324 <HAL_DMA_Init>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d001      	beq.n	8006230 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 800622c:	f7ff fb56 	bl	80058dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0b      	ldr	r2, [pc, #44]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006234:	66da      	str	r2, [r3, #108]	; 0x6c
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_UART_MspInit+0x21c>)
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b00c      	add	sp, #48	; 0x30
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40013800 	.word	0x40013800
 8006248:	40021000 	.word	0x40021000
 800624c:	20001498 	.word	0x20001498
 8006250:	4002001c 	.word	0x4002001c
 8006254:	200014dc 	.word	0x200014dc
 8006258:	40020030 	.word	0x40020030
 800625c:	40004400 	.word	0x40004400
 8006260:	20001408 	.word	0x20001408
 8006264:	40020058 	.word	0x40020058

08006268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	0019      	movs	r1, r3
 800627e:	200d      	movs	r0, #13
 8006280:	f7fb f82a 	bl	80012d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8006284:	200d      	movs	r0, #13
 8006286:	f7fb f83c 	bl	8001302 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <HAL_InitTick+0xa8>)
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	4b20      	ldr	r3, [pc, #128]	; (8006310 <HAL_InitTick+0xa8>)
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	0109      	lsls	r1, r1, #4
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <HAL_InitTick+0xa8>)
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	4013      	ands	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062a6:	230c      	movs	r3, #12
 80062a8:	18fa      	adds	r2, r7, r3
 80062aa:	2310      	movs	r3, #16
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	0011      	movs	r1, r2
 80062b0:	0018      	movs	r0, r3
 80062b2:	f7fc fddf 	bl	8002e74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fc fdc7 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 80062ba:	0003      	movs	r3, r0
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	4914      	ldr	r1, [pc, #80]	; (8006314 <HAL_InitTick+0xac>)
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7f9 ff20 	bl	8000108 <__udivsi3>
 80062c8:	0003      	movs	r3, r0
 80062ca:	3b01      	subs	r3, #1
 80062cc:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_InitTick+0xb0>)
 80062d0:	4a12      	ldr	r2, [pc, #72]	; (800631c <HAL_InitTick+0xb4>)
 80062d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_InitTick+0xb0>)
 80062d6:	4a12      	ldr	r2, [pc, #72]	; (8006320 <HAL_InitTick+0xb8>)
 80062d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_InitTick+0xb0>)
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_InitTick+0xb0>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <HAL_InitTick+0xb0>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <HAL_InitTick+0xb0>)
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7fc feb8 	bl	8003064 <HAL_TIM_Base_Init>
 80062f4:	1e03      	subs	r3, r0, #0
 80062f6:	d105      	bne.n	8006304 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <HAL_InitTick+0xb0>)
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7fc fee6 	bl	80030cc <HAL_TIM_Base_Start_IT>
 8006300:	0003      	movs	r3, r0
 8006302:	e000      	b.n	8006306 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b00a      	add	sp, #40	; 0x28
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	40021000 	.word	0x40021000
 8006314:	000f4240 	.word	0x000f4240
 8006318:	20001620 	.word	0x20001620
 800631c:	40012c00 	.word	0x40012c00
 8006320:	000003e7 	.word	0x000003e7

08006324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006332:	e7fe      	b.n	8006332 <HardFault_Handler+0x4>

08006334 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800633a:	0018      	movs	r0, r3
 800633c:	f7fb f8e6 	bl	800150c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <DMA1_Channel2_3_IRQHandler+0x20>)
 8006342:	0018      	movs	r0, r3
 8006344:	f7fb f8e2 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	20001498 	.word	0x20001498
 8006354:	200014dc 	.word	0x200014dc

08006358 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800635c:	4b03      	ldr	r3, [pc, #12]	; (800636c <DMA1_Channel4_5_IRQHandler+0x14>)
 800635e:	0018      	movs	r0, r3
 8006360:	f7fb f8d4 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	20001408 	.word	0x20001408

08006370 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006374:	4b03      	ldr	r3, [pc, #12]	; (8006384 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8006376:	0018      	movs	r0, r3
 8006378:	f7fc feca 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800637c:	46c0      	nop			; (mov r8, r8)
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	20001620 	.word	0x20001620

08006388 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <USART1_IRQHandler+0x14>)
 800638e:	0018      	movs	r0, r3
 8006390:	f7fd fa9e 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20001520 	.word	0x20001520

080063a0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <SystemInit+0x70>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b19      	ldr	r3, [pc, #100]	; (8006410 <SystemInit+0x70>)
 80063aa:	2101      	movs	r1, #1
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <SystemInit+0x70>)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <SystemInit+0x70>)
 80063b6:	4917      	ldr	r1, [pc, #92]	; (8006414 <SystemInit+0x74>)
 80063b8:	400a      	ands	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <SystemInit+0x70>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <SystemInit+0x70>)
 80063c2:	4915      	ldr	r1, [pc, #84]	; (8006418 <SystemInit+0x78>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80063c8:	4b11      	ldr	r3, [pc, #68]	; (8006410 <SystemInit+0x70>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <SystemInit+0x70>)
 80063ce:	4913      	ldr	r1, [pc, #76]	; (800641c <SystemInit+0x7c>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <SystemInit+0x70>)
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <SystemInit+0x70>)
 80063da:	4911      	ldr	r1, [pc, #68]	; (8006420 <SystemInit+0x80>)
 80063dc:	400a      	ands	r2, r1
 80063de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <SystemInit+0x70>)
 80063e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <SystemInit+0x70>)
 80063e6:	210f      	movs	r1, #15
 80063e8:	438a      	bics	r2, r1
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80063ec:	4b08      	ldr	r3, [pc, #32]	; (8006410 <SystemInit+0x70>)
 80063ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <SystemInit+0x70>)
 80063f2:	490c      	ldr	r1, [pc, #48]	; (8006424 <SystemInit+0x84>)
 80063f4:	400a      	ands	r2, r1
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <SystemInit+0x70>)
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	4b04      	ldr	r3, [pc, #16]	; (8006410 <SystemInit+0x70>)
 80063fe:	2101      	movs	r1, #1
 8006400:	438a      	bics	r2, r1
 8006402:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <SystemInit+0x70>)
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]

}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021000 	.word	0x40021000
 8006414:	08ffb80c 	.word	0x08ffb80c
 8006418:	fef6ffff 	.word	0xfef6ffff
 800641c:	fffbffff 	.word	0xfffbffff
 8006420:	ffc0ffff 	.word	0xffc0ffff
 8006424:	fffffeec 	.word	0xfffffeec

08006428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3308      	adds	r3, #8
 8006434:	001a      	movs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	4252      	negs	r2, r2
 8006440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3308      	adds	r3, #8
 8006446:	001a      	movs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3308      	adds	r3, #8
 8006450:	001a      	movs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	46bd      	mov	sp, r7
 8006460:	b002      	add	sp, #8
 8006462:	bd80      	pop	{r7, pc}

08006464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b002      	add	sp, #8
 8006478:	bd80      	pop	{r7, pc}

0800647a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b004      	add	sp, #16
 80064bc:	bd80      	pop	{r7, pc}

080064be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3301      	adds	r3, #1
 80064d2:	d103      	bne.n	80064dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e00c      	b.n	80064f6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3308      	adds	r3, #8
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e002      	b.n	80064ea <vListInsert+0x2c>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d2f6      	bcs.n	80064e4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
}
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	46bd      	mov	sp, r7
 8006526:	b004      	add	sp, #16
 8006528:	bd80      	pop	{r7, pc}

0800652a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6892      	ldr	r2, [r2, #8]
 8006540:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6852      	ldr	r2, [r2, #4]
 800654a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d103      	bne.n	800655e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	1e5a      	subs	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b004      	add	sp, #16
 8006578:	bd80      	pop	{r7, pc}

0800657a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <xQueueGenericReset+0x18>
 800658e:	b672      	cpsid	i
 8006590:	e7fe      	b.n	8006590 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006592:	f001 f923 	bl	80077dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	434b      	muls	r3, r1
 80065a4:	18d2      	adds	r2, r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	1e59      	subs	r1, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	434b      	muls	r3, r1
 80065c8:	18d2      	adds	r2, r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2244      	movs	r2, #68	; 0x44
 80065d2:	21ff      	movs	r1, #255	; 0xff
 80065d4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2245      	movs	r2, #69	; 0x45
 80065da:	21ff      	movs	r1, #255	; 0xff
 80065dc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d013      	beq.n	8006614 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3310      	adds	r3, #16
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 fdf5 	bl	80071e0 <xTaskRemoveFromEventList>
 80065f6:	1e03      	subs	r3, r0, #0
 80065f8:	d00c      	beq.n	8006614 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065fa:	f001 f8df 	bl	80077bc <vPortYield>
 80065fe:	e009      	b.n	8006614 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3310      	adds	r3, #16
 8006604:	0018      	movs	r0, r3
 8006606:	f7ff ff0f 	bl	8006428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	0018      	movs	r0, r3
 8006610:	f7ff ff0a 	bl	8006428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006614:	f001 f8f4 	bl	8007800 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006618:	2301      	movs	r3, #1
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b004      	add	sp, #16
 8006620:	bd80      	pop	{r7, pc}

08006622 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006622:	b590      	push	{r4, r7, lr}
 8006624:	b08b      	sub	sp, #44	; 0x2c
 8006626:	af02      	add	r7, sp, #8
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	1dfb      	adds	r3, r7, #7
 800662e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <xQueueGenericCreate+0x18>
 8006636:	b672      	cpsid	i
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e003      	b.n	800664e <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4353      	muls	r3, r2
 800664c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3348      	adds	r3, #72	; 0x48
 8006652:	0018      	movs	r0, r3
 8006654:	f001 f954 	bl	8007900 <pvPortMalloc>
 8006658:	0003      	movs	r3, r0
 800665a:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3348      	adds	r3, #72	; 0x48
 8006666:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006668:	1dfb      	adds	r3, r7, #7
 800666a:	781c      	ldrb	r4, [r3, #0]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	0023      	movs	r3, r4
 8006678:	f000 f805 	bl	8006686 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800667c:	69bb      	ldr	r3, [r7, #24]
	}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b009      	add	sp, #36	; 0x24
 8006684:	bd90      	pop	{r4, r7, pc}

08006686 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	001a      	movs	r2, r3
 8006694:	1cfb      	adds	r3, r7, #3
 8006696:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e002      	b.n	80066ac <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2101      	movs	r1, #1
 80066bc:	0018      	movs	r0, r3
 80066be:	f7ff ff5c 	bl	800657a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b004      	add	sp, #16
 80066c8:	bd80      	pop	{r7, pc}

080066ca <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b088      	sub	sp, #32
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <xQueueGiveFromISR+0x18>
 80066de:	b672      	cpsid	i
 80066e0:	e7fe      	b.n	80066e0 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <xQueueGiveFromISR+0x24>
 80066ea:	b672      	cpsid	i
 80066ec:	e7fe      	b.n	80066ec <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <xQueueGiveFromISR+0x34>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <xQueueGiveFromISR+0x38>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueGiveFromISR+0x3a>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueGiveFromISR+0x42>
 8006708:	b672      	cpsid	i
 800670a:	e7fe      	b.n	800670a <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800670c:	f001 f890 	bl	8007830 <ulSetInterruptMaskFromISR>
 8006710:	0003      	movs	r3, r0
 8006712:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	429a      	cmp	r2, r3
 8006722:	d22c      	bcs.n	800677e <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006724:	200f      	movs	r0, #15
 8006726:	183b      	adds	r3, r7, r0
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	2145      	movs	r1, #69	; 0x45
 800672c:	5c52      	ldrb	r2, [r2, r1]
 800672e:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006738:	183b      	adds	r3, r7, r0
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b25b      	sxtb	r3, r3
 800673e:	3301      	adds	r3, #1
 8006740:	d111      	bne.n	8006766 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d016      	beq.n	8006778 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	0018      	movs	r0, r3
 8006750:	f000 fd46 	bl	80071e0 <xTaskRemoveFromEventList>
 8006754:	1e03      	subs	r3, r0, #0
 8006756:	d00f      	beq.n	8006778 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e008      	b.n	8006778 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006766:	230f      	movs	r3, #15
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	b259      	sxtb	r1, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2245      	movs	r2, #69	; 0x45
 8006776:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006778:	2301      	movs	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e001      	b.n	8006782 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	0018      	movs	r0, r3
 8006786:	f001 f859 	bl	800783c <vClearInterruptMaskFromISR>

	return xReturn;
 800678a:	69fb      	ldr	r3, [r7, #28]
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b008      	add	sp, #32
 8006792:	bd80      	pop	{r7, pc}

08006794 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueGenericReceive+0x20>
 80067b0:	b672      	cpsid	i
 80067b2:	e7fe      	b.n	80067b2 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <xQueueGenericReceive+0x2e>
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <xQueueGenericReceive+0x32>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <xQueueGenericReceive+0x34>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <xQueueGenericReceive+0x3c>
 80067cc:	b672      	cpsid	i
 80067ce:	e7fe      	b.n	80067ce <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d0:	f000 fe98 	bl	8007504 <xTaskGetSchedulerState>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d102      	bne.n	80067de <xQueueGenericReceive+0x4a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <xQueueGenericReceive+0x4e>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueGenericReceive+0x50>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <xQueueGenericReceive+0x58>
 80067e8:	b672      	cpsid	i
 80067ea:	e7fe      	b.n	80067ea <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ec:	f000 fff6 	bl	80077dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d03a      	beq.n	8006872 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	0011      	movs	r1, r2
 8006808:	0018      	movs	r0, r3
 800680a:	f000 f8a7 	bl	800695c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11a      	bne.n	800684a <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006824:	f000 fee8 	bl	80075f8 <pvTaskIncrementMutexHeldCount>
 8006828:	0002      	movs	r2, r0
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d019      	beq.n	800686a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	3310      	adds	r3, #16
 800683a:	0018      	movs	r0, r3
 800683c:	f000 fcd0 	bl	80071e0 <xTaskRemoveFromEventList>
 8006840:	1e03      	subs	r3, r0, #0
 8006842:	d012      	beq.n	800686a <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8006844:	f000 ffba 	bl	80077bc <vPortYield>
 8006848:	e00f      	b.n	800686a <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	3324      	adds	r3, #36	; 0x24
 800685c:	0018      	movs	r0, r3
 800685e:	f000 fcbf 	bl	80071e0 <xTaskRemoveFromEventList>
 8006862:	1e03      	subs	r3, r0, #0
 8006864:	d001      	beq.n	800686a <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8006866:	f000 ffa9 	bl	80077bc <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800686a:	f000 ffc9 	bl	8007800 <vPortExitCritical>
				return pdPASS;
 800686e:	2301      	movs	r3, #1
 8006870:	e070      	b.n	8006954 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006878:	f000 ffc2 	bl	8007800 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800687c:	2300      	movs	r3, #0
 800687e:	e069      	b.n	8006954 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006886:	2310      	movs	r3, #16
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	0018      	movs	r0, r3
 800688c:	f000 fd04 	bl	8007298 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006894:	f000 ffb4 	bl	8007800 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006898:	f000 fad8 	bl	8006e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689c:	f000 ff9e 	bl	80077dc <vPortEnterCritical>
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2244      	movs	r2, #68	; 0x44
 80068a4:	5c9b      	ldrb	r3, [r3, r2]
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	3301      	adds	r3, #1
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericReceive+0x120>
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2244      	movs	r2, #68	; 0x44
 80068b0:	2100      	movs	r1, #0
 80068b2:	5499      	strb	r1, [r3, r2]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2245      	movs	r2, #69	; 0x45
 80068b8:	5c9b      	ldrb	r3, [r3, r2]
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	d103      	bne.n	80068c8 <xQueueGenericReceive+0x134>
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2245      	movs	r2, #69	; 0x45
 80068c4:	2100      	movs	r1, #0
 80068c6:	5499      	strb	r1, [r3, r2]
 80068c8:	f000 ff9a 	bl	8007800 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068cc:	1d3a      	adds	r2, r7, #4
 80068ce:	2310      	movs	r3, #16
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	0011      	movs	r1, r2
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 fcf9 	bl	80072cc <xTaskCheckForTimeOut>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d12c      	bne.n	8006938 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 f8bf 	bl	8006a64 <prvIsQueueEmpty>
 80068e6:	1e03      	subs	r3, r0, #0
 80068e8:	d01f      	beq.n	800692a <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d108      	bne.n	8006904 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 80068f2:	f000 ff73 	bl	80077dc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 fe1e 	bl	800753c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8006900:	f000 ff7e 	bl	8007800 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	0011      	movs	r1, r2
 800690c:	0018      	movs	r0, r3
 800690e:	f000 fc49 	bl	80071a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	0018      	movs	r0, r3
 8006916:	f000 f847 	bl	80069a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800691a:	f000 faa3 	bl	8006e64 <xTaskResumeAll>
 800691e:	1e03      	subs	r3, r0, #0
 8006920:	d000      	beq.n	8006924 <xQueueGenericReceive+0x190>
 8006922:	e763      	b.n	80067ec <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8006924:	f000 ff4a 	bl	80077bc <vPortYield>
 8006928:	e760      	b.n	80067ec <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 f83b 	bl	80069a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006932:	f000 fa97 	bl	8006e64 <xTaskResumeAll>
 8006936:	e759      	b.n	80067ec <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f834 	bl	80069a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006940:	f000 fa90 	bl	8006e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f88c 	bl	8006a64 <prvIsQueueEmpty>
 800694c:	1e03      	subs	r3, r0, #0
 800694e:	d100      	bne.n	8006952 <xQueueGenericReceive+0x1be>
 8006950:	e74c      	b.n	80067ec <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006952:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006954:	0018      	movs	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	b00a      	add	sp, #40	; 0x28
 800695a:	bd80      	pop	{r7, pc}

0800695c <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	18d2      	adds	r2, r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d303      	bcc.n	8006990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68d9      	ldr	r1, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	0018      	movs	r0, r3
 800699c:	f001 f9a4 	bl	8007ce8 <memcpy>
	}
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069b0:	f000 ff14 	bl	80077dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069b4:	230f      	movs	r3, #15
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	2145      	movs	r1, #69	; 0x45
 80069bc:	5c52      	ldrb	r2, [r2, r1]
 80069be:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c0:	e013      	b.n	80069ea <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3324      	adds	r3, #36	; 0x24
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 fc06 	bl	80071e0 <xTaskRemoveFromEventList>
 80069d4:	1e03      	subs	r3, r0, #0
 80069d6:	d001      	beq.n	80069dc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069d8:	f000 fcc6 	bl	8007368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069dc:	210f      	movs	r1, #15
 80069de:	187b      	adds	r3, r7, r1
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	187b      	adds	r3, r7, r1
 80069e8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ea:	230f      	movs	r3, #15
 80069ec:	18fb      	adds	r3, r7, r3
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dce5      	bgt.n	80069c2 <prvUnlockQueue+0x1a>
 80069f6:	e000      	b.n	80069fa <prvUnlockQueue+0x52>
					break;
 80069f8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2245      	movs	r2, #69	; 0x45
 80069fe:	21ff      	movs	r1, #255	; 0xff
 8006a00:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006a02:	f000 fefd 	bl	8007800 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a06:	f000 fee9 	bl	80077dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a0a:	230e      	movs	r3, #14
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	2144      	movs	r1, #68	; 0x44
 8006a12:	5c52      	ldrb	r2, [r2, r1]
 8006a14:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a16:	e013      	b.n	8006a40 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d016      	beq.n	8006a4e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3310      	adds	r3, #16
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fbdb 	bl	80071e0 <xTaskRemoveFromEventList>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d001      	beq.n	8006a32 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006a2e:	f000 fc9b 	bl	8007368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a32:	210e      	movs	r1, #14
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a40:	230e      	movs	r3, #14
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	b25b      	sxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dce5      	bgt.n	8006a18 <prvUnlockQueue+0x70>
 8006a4c:	e000      	b.n	8006a50 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006a4e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2244      	movs	r2, #68	; 0x44
 8006a54:	21ff      	movs	r1, #255	; 0xff
 8006a56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006a58:	f000 fed2 	bl	8007800 <vPortExitCritical>
}
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b004      	add	sp, #16
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a6c:	f000 feb6 	bl	80077dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e001      	b.n	8006a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f000 febd 	bl	8007800 <vPortExitCritical>

	return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a90:	b590      	push	{r4, r7, lr}
 8006a92:	b08d      	sub	sp, #52	; 0x34
 8006a94:	af04      	add	r7, sp, #16
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	1dbb      	adds	r3, r7, #6
 8006a9e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa0:	1dbb      	adds	r3, r7, #6
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 ff2a 	bl	8007900 <pvPortMalloc>
 8006aac:	0003      	movs	r3, r0
 8006aae:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d010      	beq.n	8006ad8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ab6:	2054      	movs	r0, #84	; 0x54
 8006ab8:	f000 ff22 	bl	8007900 <pvPortMalloc>
 8006abc:	0003      	movs	r3, r0
 8006abe:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
 8006acc:	e006      	b.n	8006adc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 ffbb 	bl	8007a4c <vPortFree>
 8006ad6:	e001      	b.n	8006adc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ae2:	1dbb      	adds	r3, r7, #6
 8006ae4:	881a      	ldrh	r2, [r3, #0]
 8006ae6:	683c      	ldr	r4, [r7, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	9302      	str	r3, [sp, #8]
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	0023      	movs	r3, r4
 8006afe:	f000 f80f 	bl	8006b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f885 	bl	8006c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e002      	b.n	8006b16 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	425b      	negs	r3, r3
 8006b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b16:	69bb      	ldr	r3, [r7, #24]
	}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b009      	add	sp, #36	; 0x24
 8006b1e:	bd90      	pop	{r4, r7, pc}

08006b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4936      	ldr	r1, [pc, #216]	; (8006c10 <prvInitialiseNewTask+0xf0>)
 8006b36:	468c      	mov	ip, r1
 8006b38:	4463      	add	r3, ip
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	18d3      	adds	r3, r2, r3
 8006b3e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2207      	movs	r2, #7
 8006b44:	4393      	bics	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2207      	movs	r2, #7
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d001      	beq.n	8006b54 <prvInitialiseNewTask+0x34>
 8006b50:	b672      	cpsid	i
 8006b52:	e7fe      	b.n	8006b52 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e013      	b.n	8006b82 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	18d3      	adds	r3, r2, r3
 8006b60:	7818      	ldrb	r0, [r3, #0]
 8006b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b64:	2134      	movs	r1, #52	; 0x34
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	18d3      	adds	r3, r2, r3
 8006b6a:	185b      	adds	r3, r3, r1
 8006b6c:	1c02      	adds	r2, r0, #0
 8006b6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	18d3      	adds	r3, r2, r3
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b0f      	cmp	r3, #15
 8006b86:	d9e8      	bls.n	8006b5a <prvInitialiseNewTask+0x3a>
 8006b88:	e000      	b.n	8006b8c <prvInitialiseNewTask+0x6c>
		{
			break;
 8006b8a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	2243      	movs	r2, #67	; 0x43
 8006b90:	2100      	movs	r1, #0
 8006b92:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2b06      	cmp	r3, #6
 8006b98:	d901      	bls.n	8006b9e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b9a:	2306      	movs	r3, #6
 8006b9c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	6a3a      	ldr	r2, [r7, #32]
 8006ba2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2200      	movs	r2, #0
 8006bae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f7ff fc55 	bl	8006464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	3318      	adds	r3, #24
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7ff fc50 	bl	8006464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2207      	movs	r2, #7
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	2200      	movs	r2, #0
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2250      	movs	r2, #80	; 0x50
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 fd68 	bl	80076c4 <pxPortInitialiseStack>
 8006bf4:	0002      	movs	r2, r0
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b006      	add	sp, #24
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	3fffffff 	.word	0x3fffffff

08006c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c1c:	f000 fdde 	bl	80077dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c20:	4b28      	ldr	r3, [pc, #160]	; (8006cc4 <prvAddNewTaskToReadyList+0xb0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <prvAddNewTaskToReadyList+0xb0>)
 8006c28:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <prvAddNewTaskToReadyList+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c32:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <prvAddNewTaskToReadyList+0xb4>)
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c38:	4b22      	ldr	r3, [pc, #136]	; (8006cc4 <prvAddNewTaskToReadyList+0xb0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c40:	f000 fbac 	bl	800739c <prvInitialiseTaskLists>
 8006c44:	e00d      	b.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c46:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <prvAddNewTaskToReadyList+0xb4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d802      	bhi.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <prvAddNewTaskToReadyList+0xb4>)
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c6a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <prvAddNewTaskToReadyList+0x6c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	0013      	movs	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c8e:	189a      	adds	r2, r3, r2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	0019      	movs	r1, r3
 8006c96:	0010      	movs	r0, r2
 8006c98:	f7ff fbef 	bl	800647a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9c:	f000 fdb0 	bl	8007800 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca8:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <prvAddNewTaskToReadyList+0xb4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d201      	bcs.n	8006cba <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb6:	f000 fd81 	bl	80077bc <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	20000128 	.word	0x20000128
 8006cc8:	20000028 	.word	0x20000028
 8006ccc:	20000134 	.word	0x20000134
 8006cd0:	20000144 	.word	0x20000144
 8006cd4:	20000130 	.word	0x20000130
 8006cd8:	2000002c 	.word	0x2000002c

08006cdc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <vTaskDelayUntil+0x18>
 8006cf0:	b672      	cpsid	i
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <vTaskDelayUntil+0x22>
 8006cfa:	b672      	cpsid	i
 8006cfc:	e7fe      	b.n	8006cfc <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8006cfe:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <vTaskDelayUntil+0xb0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <vTaskDelayUntil+0x2e>
 8006d06:	b672      	cpsid	i
 8006d08:	e7fe      	b.n	8006d08 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8006d0a:	f000 f89f 	bl	8006e4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <vTaskDelayUntil+0xb4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	18d3      	adds	r3, r2, r3
 8006d1c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d20b      	bcs.n	8006d40 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d211      	bcs.n	8006d56 <vTaskDelayUntil+0x7a>
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d90d      	bls.n	8006d56 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e00a      	b.n	8006d56 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d303      	bcc.n	8006d52 <vTaskDelayUntil+0x76>
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d901      	bls.n	8006d56 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2100      	movs	r1, #0
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f000 fc56 	bl	800761c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d70:	f000 f878 	bl	8006e64 <xTaskResumeAll>
 8006d74:	0003      	movs	r3, r0
 8006d76:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8006d7e:	f000 fd1d 	bl	80077bc <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b006      	add	sp, #24
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000150 	.word	0x20000150
 8006d90:	2000012c 	.word	0x2000012c

08006d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d010      	beq.n	8006dc8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <vTaskDelay+0x48>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <vTaskDelay+0x1e>
 8006dae:	b672      	cpsid	i
 8006db0:	e7fe      	b.n	8006db0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006db2:	f000 f84b 	bl	8006e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2100      	movs	r1, #0
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 fc2e 	bl	800761c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dc0:	f000 f850 	bl	8006e64 <xTaskResumeAll>
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006dce:	f000 fcf5 	bl	80077bc <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b004      	add	sp, #16
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	20000150 	.word	0x20000150

08006de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006de6:	4913      	ldr	r1, [pc, #76]	; (8006e34 <vTaskStartScheduler+0x54>)
 8006de8:	4813      	ldr	r0, [pc, #76]	; (8006e38 <vTaskStartScheduler+0x58>)
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <vTaskStartScheduler+0x5c>)
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	f7ff fe4b 	bl	8006a90 <xTaskCreate>
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10d      	bne.n	8006e20 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006e04:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <vTaskStartScheduler+0x60>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4252      	negs	r2, r2
 8006e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <vTaskStartScheduler+0x64>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <vTaskStartScheduler+0x68>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e1a:	f000 fcad 	bl	8007778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e1e:	e004      	b.n	8006e2a <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3301      	adds	r3, #1
 8006e24:	d101      	bne.n	8006e2a <vTaskStartScheduler+0x4a>
 8006e26:	b672      	cpsid	i
 8006e28:	e7fe      	b.n	8006e28 <vTaskStartScheduler+0x48>
}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b002      	add	sp, #8
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	08007e00 	.word	0x08007e00
 8006e38:	0800737d 	.word	0x0800737d
 8006e3c:	2000014c 	.word	0x2000014c
 8006e40:	20000148 	.word	0x20000148
 8006e44:	20000134 	.word	0x20000134
 8006e48:	2000012c 	.word	0x2000012c

08006e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <vTaskSuspendAll+0x14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	4b02      	ldr	r3, [pc, #8]	; (8006e60 <vTaskSuspendAll+0x14>)
 8006e58:	601a      	str	r2, [r3, #0]
}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000150 	.word	0x20000150

08006e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e72:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <xTaskResumeAll+0xf8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xTaskResumeAll+0x1a>
 8006e7a:	b672      	cpsid	i
 8006e7c:	e7fe      	b.n	8006e7c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e7e:	f000 fcad 	bl	80077dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e82:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <xTaskResumeAll+0xf8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1e5a      	subs	r2, r3, #1
 8006e88:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <xTaskResumeAll+0xf8>)
 8006e8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8c:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <xTaskResumeAll+0xf8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d15b      	bne.n	8006f4c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e94:	4b32      	ldr	r3, [pc, #200]	; (8006f60 <xTaskResumeAll+0xfc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d057      	beq.n	8006f4c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e9c:	e02f      	b.n	8006efe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <xTaskResumeAll+0x100>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3318      	adds	r3, #24
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7ff fb3d 	bl	800652a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7ff fb38 	bl	800652a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <xTaskResumeAll+0x104>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d903      	bls.n	8006ece <xTaskResumeAll+0x6a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	4b27      	ldr	r3, [pc, #156]	; (8006f68 <xTaskResumeAll+0x104>)
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	0013      	movs	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <xTaskResumeAll+0x108>)
 8006edc:	189a      	adds	r2, r3, r2
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	f7ff fac8 	bl	800647a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	4b20      	ldr	r3, [pc, #128]	; (8006f70 <xTaskResumeAll+0x10c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d302      	bcc.n	8006efe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <xTaskResumeAll+0x110>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006efe:	4b19      	ldr	r3, [pc, #100]	; (8006f64 <xTaskResumeAll+0x100>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1cb      	bne.n	8006e9e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f0c:	f000 fad6 	bl	80074bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <xTaskResumeAll+0x114>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f1c:	f000 f83c 	bl	8006f98 <xTaskIncrementTick>
 8006f20:	1e03      	subs	r3, r0, #0
 8006f22:	d002      	beq.n	8006f2a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <xTaskResumeAll+0x110>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f2      	bne.n	8006f1c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <xTaskResumeAll+0x114>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <xTaskResumeAll+0x110>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f48:	f000 fc38 	bl	80077bc <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f4c:	f000 fc58 	bl	8007800 <vPortExitCritical>

	return xAlreadyYielded;
 8006f50:	68bb      	ldr	r3, [r7, #8]
}
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b004      	add	sp, #16
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20000150 	.word	0x20000150
 8006f60:	20000128 	.word	0x20000128
 8006f64:	200000e8 	.word	0x200000e8
 8006f68:	20000130 	.word	0x20000130
 8006f6c:	2000002c 	.word	0x2000002c
 8006f70:	20000028 	.word	0x20000028
 8006f74:	2000013c 	.word	0x2000013c
 8006f78:	20000138 	.word	0x20000138

08006f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <xTaskGetTickCount+0x18>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f88:	687b      	ldr	r3, [r7, #4]
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b002      	add	sp, #8
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	2000012c 	.word	0x2000012c

08006f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa2:	4b4c      	ldr	r3, [pc, #304]	; (80070d4 <xTaskIncrementTick+0x13c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d000      	beq.n	8006fac <xTaskIncrementTick+0x14>
 8006faa:	e083      	b.n	80070b4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006fac:	4b4a      	ldr	r3, [pc, #296]	; (80070d8 <xTaskIncrementTick+0x140>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fb4:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <xTaskIncrementTick+0x140>)
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d117      	bne.n	8006ff0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fc0:	4b46      	ldr	r3, [pc, #280]	; (80070dc <xTaskIncrementTick+0x144>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <xTaskIncrementTick+0x36>
 8006fca:	b672      	cpsid	i
 8006fcc:	e7fe      	b.n	8006fcc <xTaskIncrementTick+0x34>
 8006fce:	4b43      	ldr	r3, [pc, #268]	; (80070dc <xTaskIncrementTick+0x144>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	4b42      	ldr	r3, [pc, #264]	; (80070e0 <xTaskIncrementTick+0x148>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b40      	ldr	r3, [pc, #256]	; (80070dc <xTaskIncrementTick+0x144>)
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	4b40      	ldr	r3, [pc, #256]	; (80070e0 <xTaskIncrementTick+0x148>)
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	4b40      	ldr	r3, [pc, #256]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f000 fa66 	bl	80074bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff0:	4b3d      	ldr	r3, [pc, #244]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d34e      	bcc.n	8007098 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	4b38      	ldr	r3, [pc, #224]	; (80070dc <xTaskIncrementTick+0x144>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <xTaskIncrementTick+0x70>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <xTaskIncrementTick+0x72>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700e:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <xTaskIncrementTick+0x150>)
 8007010:	2201      	movs	r2, #1
 8007012:	4252      	negs	r2, r2
 8007014:	601a      	str	r2, [r3, #0]
					break;
 8007016:	e03f      	b.n	8007098 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007018:	4b30      	ldr	r3, [pc, #192]	; (80070dc <xTaskIncrementTick+0x144>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d203      	bcs.n	8007038 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007030:	4b2d      	ldr	r3, [pc, #180]	; (80070e8 <xTaskIncrementTick+0x150>)
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
						break;
 8007036:	e02f      	b.n	8007098 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3304      	adds	r3, #4
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff fa74 	bl	800652a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	3318      	adds	r3, #24
 800704e:	0018      	movs	r0, r3
 8007050:	f7ff fa6b 	bl	800652a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	4b24      	ldr	r3, [pc, #144]	; (80070ec <xTaskIncrementTick+0x154>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d903      	bls.n	8007068 <xTaskIncrementTick+0xd0>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	4b21      	ldr	r3, [pc, #132]	; (80070ec <xTaskIncrementTick+0x154>)
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	0013      	movs	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	189b      	adds	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <xTaskIncrementTick+0x158>)
 8007076:	189a      	adds	r2, r3, r2
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3304      	adds	r3, #4
 800707c:	0019      	movs	r1, r3
 800707e:	0010      	movs	r0, r2
 8007080:	f7ff f9fb 	bl	800647a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007088:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <xTaskIncrementTick+0x15c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	429a      	cmp	r2, r3
 8007090:	d3b3      	bcc.n	8006ffa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007096:	e7b0      	b.n	8006ffa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007098:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <xTaskIncrementTick+0x15c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	4914      	ldr	r1, [pc, #80]	; (80070f0 <xTaskIncrementTick+0x158>)
 80070a0:	0013      	movs	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	189b      	adds	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	585b      	ldr	r3, [r3, r1]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d907      	bls.n	80070be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e004      	b.n	80070be <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <xTaskIncrementTick+0x160>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <xTaskIncrementTick+0x160>)
 80070bc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <xTaskIncrementTick+0x164>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b006      	add	sp, #24
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000150 	.word	0x20000150
 80070d8:	2000012c 	.word	0x2000012c
 80070dc:	200000e0 	.word	0x200000e0
 80070e0:	200000e4 	.word	0x200000e4
 80070e4:	20000140 	.word	0x20000140
 80070e8:	20000148 	.word	0x20000148
 80070ec:	20000130 	.word	0x20000130
 80070f0:	2000002c 	.word	0x2000002c
 80070f4:	20000028 	.word	0x20000028
 80070f8:	20000138 	.word	0x20000138
 80070fc:	2000013c 	.word	0x2000013c

08007100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <vTaskSwitchContext+0x90>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710e:	4b21      	ldr	r3, [pc, #132]	; (8007194 <vTaskSwitchContext+0x94>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007114:	e037      	b.n	8007186 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007116:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <vTaskSwitchContext+0x94>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800711c:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <vTaskSwitchContext+0x98>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e007      	b.n	8007134 <vTaskSwitchContext+0x34>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <vTaskSwitchContext+0x2e>
 800712a:	b672      	cpsid	i
 800712c:	e7fe      	b.n	800712c <vTaskSwitchContext+0x2c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	4919      	ldr	r1, [pc, #100]	; (800719c <vTaskSwitchContext+0x9c>)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	0013      	movs	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	189b      	adds	r3, r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	585b      	ldr	r3, [r3, r1]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0ee      	beq.n	8007124 <vTaskSwitchContext+0x24>
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	0013      	movs	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	189b      	adds	r3, r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a12      	ldr	r2, [pc, #72]	; (800719c <vTaskSwitchContext+0x9c>)
 8007152:	189b      	adds	r3, r3, r2
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	429a      	cmp	r2, r3
 800716a:	d104      	bne.n	8007176 <vTaskSwitchContext+0x76>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <vTaskSwitchContext+0xa0>)
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <vTaskSwitchContext+0x98>)
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	46bd      	mov	sp, r7
 800718a:	b002      	add	sp, #8
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	20000150 	.word	0x20000150
 8007194:	2000013c 	.word	0x2000013c
 8007198:	20000130 	.word	0x20000130
 800719c:	2000002c 	.word	0x2000002c
 80071a0:	20000028 	.word	0x20000028

080071a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <vTaskPlaceOnEventList+0x14>
 80071b4:	b672      	cpsid	i
 80071b6:	e7fe      	b.n	80071b6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <vTaskPlaceOnEventList+0x38>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3318      	adds	r3, #24
 80071be:	001a      	movs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	0011      	movs	r1, r2
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7ff f97a 	bl	80064be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2101      	movs	r1, #1
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fa24 	bl	800761c <prvAddCurrentTaskToDelayedList>
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000028 	.word	0x20000028

080071e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <xTaskRemoveFromEventList+0x1a>
 80071f6:	b672      	cpsid	i
 80071f8:	e7fe      	b.n	80071f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3318      	adds	r3, #24
 80071fe:	0018      	movs	r0, r3
 8007200:	f7ff f993 	bl	800652a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <xTaskRemoveFromEventList+0xa0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11d      	bne.n	8007248 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3304      	adds	r3, #4
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff f98a 	bl	800652a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4b1a      	ldr	r3, [pc, #104]	; (8007284 <xTaskRemoveFromEventList+0xa4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d903      	bls.n	800722a <xTaskRemoveFromEventList+0x4a>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	4b17      	ldr	r3, [pc, #92]	; (8007284 <xTaskRemoveFromEventList+0xa4>)
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	0013      	movs	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	189b      	adds	r3, r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4a14      	ldr	r2, [pc, #80]	; (8007288 <xTaskRemoveFromEventList+0xa8>)
 8007238:	189a      	adds	r2, r3, r2
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3304      	adds	r3, #4
 800723e:	0019      	movs	r1, r3
 8007240:	0010      	movs	r0, r2
 8007242:	f7ff f91a 	bl	800647a <vListInsertEnd>
 8007246:	e007      	b.n	8007258 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3318      	adds	r3, #24
 800724c:	001a      	movs	r2, r3
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <xTaskRemoveFromEventList+0xac>)
 8007250:	0011      	movs	r1, r2
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff f911 	bl	800647a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <xTaskRemoveFromEventList+0xb0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	429a      	cmp	r2, r3
 8007264:	d905      	bls.n	8007272 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <xTaskRemoveFromEventList+0xb4>)
 800726c:	2201      	movs	r2, #1
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e001      	b.n	8007276 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007276:	68fb      	ldr	r3, [r7, #12]
}
 8007278:	0018      	movs	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	b004      	add	sp, #16
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000150 	.word	0x20000150
 8007284:	20000130 	.word	0x20000130
 8007288:	2000002c 	.word	0x2000002c
 800728c:	200000e8 	.word	0x200000e8
 8007290:	20000028 	.word	0x20000028
 8007294:	2000013c 	.word	0x2000013c

08007298 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <vTaskSetTimeOutState+0x12>
 80072a6:	b672      	cpsid	i
 80072a8:	e7fe      	b.n	80072a8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <vTaskSetTimeOutState+0x2c>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <vTaskSetTimeOutState+0x30>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	605a      	str	r2, [r3, #4]
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b002      	add	sp, #8
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	20000140 	.word	0x20000140
 80072c8:	2000012c 	.word	0x2000012c

080072cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <xTaskCheckForTimeOut+0x14>
 80072dc:	b672      	cpsid	i
 80072de:	e7fe      	b.n	80072de <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <xTaskCheckForTimeOut+0x1e>
 80072e6:	b672      	cpsid	i
 80072e8:	e7fe      	b.n	80072e8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80072ea:	f000 fa77 	bl	80077dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072ee:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <xTaskCheckForTimeOut+0x94>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	d102      	bne.n	8007302 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e027      	b.n	8007352 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b17      	ldr	r3, [pc, #92]	; (8007364 <xTaskCheckForTimeOut+0x98>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d007      	beq.n	800731e <xTaskCheckForTimeOut+0x52>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e019      	b.n	8007352 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	1ad2      	subs	r2, r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d20f      	bcs.n	800734e <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6859      	ldr	r1, [r3, #4]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	1acb      	subs	r3, r1, r3
 800733a:	18d2      	adds	r2, r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	0018      	movs	r0, r3
 8007344:	f7ff ffa8 	bl	8007298 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e001      	b.n	8007352 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007352:	f000 fa55 	bl	8007800 <vPortExitCritical>

	return xReturn;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	0018      	movs	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	b004      	add	sp, #16
 800735e:	bd80      	pop	{r7, pc}
 8007360:	2000012c 	.word	0x2000012c
 8007364:	20000140 	.word	0x20000140

08007368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800736c:	4b02      	ldr	r3, [pc, #8]	; (8007378 <vTaskMissedYield+0x10>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	2000013c 	.word	0x2000013c

0800737c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007384:	f000 f84e 	bl	8007424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007388:	4b03      	ldr	r3, [pc, #12]	; (8007398 <prvIdleTask+0x1c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d9f9      	bls.n	8007384 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007390:	f000 fa14 	bl	80077bc <vPortYield>
		prvCheckTasksWaitingTermination();
 8007394:	e7f6      	b.n	8007384 <prvIdleTask+0x8>
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	2000002c 	.word	0x2000002c

0800739c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073a2:	2300      	movs	r3, #0
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	e00c      	b.n	80073c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	0013      	movs	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4a14      	ldr	r2, [pc, #80]	; (8007404 <prvInitialiseTaskLists+0x68>)
 80073b4:	189b      	adds	r3, r3, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7ff f836 	bl	8006428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3301      	adds	r3, #1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b06      	cmp	r3, #6
 80073c6:	d9ef      	bls.n	80073a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <prvInitialiseTaskLists+0x6c>)
 80073ca:	0018      	movs	r0, r3
 80073cc:	f7ff f82c 	bl	8006428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <prvInitialiseTaskLists+0x70>)
 80073d2:	0018      	movs	r0, r3
 80073d4:	f7ff f828 	bl	8006428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <prvInitialiseTaskLists+0x74>)
 80073da:	0018      	movs	r0, r3
 80073dc:	f7ff f824 	bl	8006428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073e0:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <prvInitialiseTaskLists+0x78>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7ff f820 	bl	8006428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <prvInitialiseTaskLists+0x7c>)
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7ff f81c 	bl	8006428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <prvInitialiseTaskLists+0x80>)
 80073f2:	4a05      	ldr	r2, [pc, #20]	; (8007408 <prvInitialiseTaskLists+0x6c>)
 80073f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073f6:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <prvInitialiseTaskLists+0x84>)
 80073f8:	4a04      	ldr	r2, [pc, #16]	; (800740c <prvInitialiseTaskLists+0x70>)
 80073fa:	601a      	str	r2, [r3, #0]
}
 80073fc:	46c0      	nop			; (mov r8, r8)
 80073fe:	46bd      	mov	sp, r7
 8007400:	b002      	add	sp, #8
 8007402:	bd80      	pop	{r7, pc}
 8007404:	2000002c 	.word	0x2000002c
 8007408:	200000b8 	.word	0x200000b8
 800740c:	200000cc 	.word	0x200000cc
 8007410:	200000e8 	.word	0x200000e8
 8007414:	200000fc 	.word	0x200000fc
 8007418:	20000114 	.word	0x20000114
 800741c:	200000e0 	.word	0x200000e0
 8007420:	200000e4 	.word	0x200000e4

08007424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800742a:	e027      	b.n	800747c <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 800742c:	f7ff fd0e 	bl	8006e4c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007430:	4b16      	ldr	r3, [pc, #88]	; (800748c <prvCheckTasksWaitingTermination+0x68>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	425a      	negs	r2, r3
 8007436:	4153      	adcs	r3, r2
 8007438:	b2db      	uxtb	r3, r3
 800743a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800743c:	f7ff fd12 	bl	8006e64 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d11a      	bne.n	800747c <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8007446:	f000 f9c9 	bl	80077dc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <prvCheckTasksWaitingTermination+0x68>)
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	3304      	adds	r3, #4
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff f867 	bl	800652a <uxListRemove>
					--uxCurrentNumberOfTasks;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <prvCheckTasksWaitingTermination+0x6c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <prvCheckTasksWaitingTermination+0x6c>)
 8007464:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007466:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <prvCheckTasksWaitingTermination+0x70>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvCheckTasksWaitingTermination+0x70>)
 800746e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8007470:	f000 f9c6 	bl	8007800 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	0018      	movs	r0, r3
 8007478:	f000 f80e 	bl	8007498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <prvCheckTasksWaitingTermination+0x70>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1d3      	bne.n	800742c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200000fc 	.word	0x200000fc
 8007490:	20000128 	.word	0x20000128
 8007494:	20000110 	.word	0x20000110

08007498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	0018      	movs	r0, r3
 80074a6:	f000 fad1 	bl	8007a4c <vPortFree>
			vPortFree( pxTCB );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f000 facd 	bl	8007a4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b002      	add	sp, #8
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <prvResetNextTaskUnblockTime+0x40>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <prvResetNextTaskUnblockTime+0x14>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <prvResetNextTaskUnblockTime+0x16>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d6:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <prvResetNextTaskUnblockTime+0x44>)
 80074d8:	2201      	movs	r2, #1
 80074da:	4252      	negs	r2, r2
 80074dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074de:	e008      	b.n	80074f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <prvResetNextTaskUnblockTime+0x40>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <prvResetNextTaskUnblockTime+0x44>)
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b002      	add	sp, #8
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	200000e0 	.word	0x200000e0
 8007500:	20000148 	.word	0x20000148

08007504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <xTaskGetSchedulerState+0x30>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007512:	2301      	movs	r3, #1
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e008      	b.n	800752a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <xTaskGetSchedulerState+0x34>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007520:	2302      	movs	r3, #2
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	e001      	b.n	800752a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800752a:	687b      	ldr	r3, [r7, #4]
	}
 800752c:	0018      	movs	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	b002      	add	sp, #8
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20000134 	.word	0x20000134
 8007538:	20000150 	.word	0x20000150

0800753c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04a      	beq.n	80075e4 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	4b26      	ldr	r3, [pc, #152]	; (80075ec <vTaskPriorityInherit+0xb0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d243      	bcs.n	80075e4 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	db06      	blt.n	8007572 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007564:	4b21      	ldr	r3, [pc, #132]	; (80075ec <vTaskPriorityInherit+0xb0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	2207      	movs	r2, #7
 800756c:	1ad2      	subs	r2, r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6959      	ldr	r1, [r3, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	0013      	movs	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	189b      	adds	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <vTaskPriorityInherit+0xb4>)
 8007584:	189b      	adds	r3, r3, r2
 8007586:	4299      	cmp	r1, r3
 8007588:	d101      	bne.n	800758e <vTaskPriorityInherit+0x52>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <vTaskPriorityInherit+0x54>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d022      	beq.n	80075da <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3304      	adds	r3, #4
 8007598:	0018      	movs	r0, r3
 800759a:	f7fe ffc6 	bl	800652a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <vTaskPriorityInherit+0xb0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <vTaskPriorityInherit+0xb8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d903      	bls.n	80075bc <vTaskPriorityInherit+0x80>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <vTaskPriorityInherit+0xb8>)
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	0013      	movs	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	189b      	adds	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <vTaskPriorityInherit+0xb4>)
 80075ca:	189a      	adds	r2, r3, r2
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3304      	adds	r3, #4
 80075d0:	0019      	movs	r1, r3
 80075d2:	0010      	movs	r0, r2
 80075d4:	f7fe ff51 	bl	800647a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075d8:	e004      	b.n	80075e4 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <vTaskPriorityInherit+0xb0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b004      	add	sp, #16
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000028 	.word	0x20000028
 80075f0:	2000002c 	.word	0x2000002c
 80075f4:	20000130 	.word	0x20000130

080075f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <pvTaskIncrementMutexHeldCount+0x20>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <pvTaskIncrementMutexHeldCount+0x20>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760a:	3201      	adds	r2, #1
 800760c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800760e:	4b02      	ldr	r3, [pc, #8]	; (8007618 <pvTaskIncrementMutexHeldCount+0x20>)
 8007610:	681b      	ldr	r3, [r3, #0]
	}
 8007612:	0018      	movs	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000028 	.word	0x20000028

0800761c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007626:	4b21      	ldr	r3, [pc, #132]	; (80076ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762c:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3304      	adds	r3, #4
 8007632:	0018      	movs	r0, r3
 8007634:	f7fe ff79 	bl	800652a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3301      	adds	r3, #1
 800763c:	d10b      	bne.n	8007656 <prvAddCurrentTaskToDelayedList+0x3a>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007644:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	1d1a      	adds	r2, r3, #4
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800764c:	0011      	movs	r1, r2
 800764e:	0018      	movs	r0, r3
 8007650:	f7fe ff13 	bl	800647a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007654:	e026      	b.n	80076a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	18d3      	adds	r3, r2, r3
 800765c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	429a      	cmp	r2, r3
 800766c:	d209      	bcs.n	8007682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3304      	adds	r3, #4
 8007678:	0019      	movs	r1, r3
 800767a:	0010      	movs	r0, r2
 800767c:	f7fe ff1f 	bl	80064be <vListInsert>
}
 8007680:	e010      	b.n	80076a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007682:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3304      	adds	r3, #4
 800768c:	0019      	movs	r1, r3
 800768e:	0010      	movs	r0, r2
 8007690:	f7fe ff15 	bl	80064be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	d202      	bcs.n	80076a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800769e:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b004      	add	sp, #16
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	2000012c 	.word	0x2000012c
 80076b0:	20000028 	.word	0x20000028
 80076b4:	20000114 	.word	0x20000114
 80076b8:	200000e4 	.word	0x200000e4
 80076bc:	200000e0 	.word	0x200000e0
 80076c0:	20000148 	.word	0x20000148

080076c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3b04      	subs	r3, #4
 80076d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	0452      	lsls	r2, r2, #17
 80076dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076f0:	4a08      	ldr	r2, [pc, #32]	; (8007714 <pxPortInitialiseStack+0x50>)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b14      	subs	r3, #20
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b20      	subs	r3, #32
 8007706:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	0018      	movs	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	b004      	add	sp, #16
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	08007719 	.word	0x08007719

08007718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800771c:	4b03      	ldr	r3, [pc, #12]	; (800772c <prvTaskExitError+0x14>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	d001      	beq.n	8007728 <prvTaskExitError+0x10>
 8007724:	b672      	cpsid	i
 8007726:	e7fe      	b.n	8007726 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8007728:	b672      	cpsid	i
	for( ;; );
 800772a:	e7fe      	b.n	800772a <prvTaskExitError+0x12>
 800772c:	20000008 	.word	0x20000008

08007730 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007734:	46c0      	nop			; (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	0000      	movs	r0, r0
 800773c:	0000      	movs	r0, r0
	...

08007740 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007740:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <pxCurrentTCBConst2>)
 8007742:	6813      	ldr	r3, [r2, #0]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	3020      	adds	r0, #32
 8007748:	f380 8809 	msr	PSP, r0
 800774c:	2002      	movs	r0, #2
 800774e:	f380 8814 	msr	CONTROL, r0
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007758:	46ae      	mov	lr, r5
 800775a:	bc08      	pop	{r3}
 800775c:	bc04      	pop	{r2}
 800775e:	b662      	cpsie	i
 8007760:	4718      	bx	r3
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	46c0      	nop			; (mov r8, r8)
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46c0      	nop			; (mov r8, r8)
 800776e:	46c0      	nop			; (mov r8, r8)

08007770 <pxCurrentTCBConst2>:
 8007770:	20000028 	.word	0x20000028
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	46c0      	nop			; (mov r8, r8)

08007778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800777c:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <xPortStartScheduler+0x3c>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <xPortStartScheduler+0x3c>)
 8007782:	21ff      	movs	r1, #255	; 0xff
 8007784:	0409      	lsls	r1, r1, #16
 8007786:	430a      	orrs	r2, r1
 8007788:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <xPortStartScheduler+0x3c>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <xPortStartScheduler+0x3c>)
 8007790:	21ff      	movs	r1, #255	; 0xff
 8007792:	0609      	lsls	r1, r1, #24
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007798:	f000 f898 	bl	80078cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <xPortStartScheduler+0x40>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80077a2:	f7ff ffcd 	bl	8007740 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80077a6:	f7ff ffb7 	bl	8007718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	0018      	movs	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	e000ed20 	.word	0xe000ed20
 80077b8:	20000008 	.word	0x20000008

080077bc <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <vPortYield+0x1c>)
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	0552      	lsls	r2, r2, #21
 80077c6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80077c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80077cc:	f3bf 8f6f 	isb	sy
}
 80077d0:	46c0      	nop			; (mov r8, r8)
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80077e0:	b672      	cpsid	i
    uxCriticalNesting++;
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <vPortEnterCritical+0x20>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <vPortEnterCritical+0x20>)
 80077ea:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80077ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80077f0:	f3bf 8f6f 	isb	sy
}
 80077f4:	46c0      	nop			; (mov r8, r8)
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	20000008 	.word	0x20000008

08007800 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <vPortExitCritical+0x2c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <vPortExitCritical+0x10>
 800780c:	b672      	cpsid	i
 800780e:	e7fe      	b.n	800780e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <vPortExitCritical+0x2c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <vPortExitCritical+0x2c>)
 8007818:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800781a:	4b04      	ldr	r3, [pc, #16]	; (800782c <vPortExitCritical+0x2c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d100      	bne.n	8007824 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007822:	b662      	cpsie	i
    }
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	20000008 	.word	0x20000008

08007830 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007830:	f3ef 8010 	mrs	r0, PRIMASK
 8007834:	b672      	cpsid	i
 8007836:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8007838:	2300      	movs	r3, #0
}
 800783a:	0018      	movs	r0, r3

0800783c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800783c:	f380 8810 	msr	PRIMASK, r0
 8007840:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8007842:	46c0      	nop			; (mov r8, r8)
	...

08007850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007850:	f3ef 8009 	mrs	r0, PSP
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <pxCurrentTCBConst>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	3820      	subs	r0, #32
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800785e:	4644      	mov	r4, r8
 8007860:	464d      	mov	r5, r9
 8007862:	4656      	mov	r6, sl
 8007864:	465f      	mov	r7, fp
 8007866:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007868:	b508      	push	{r3, lr}
 800786a:	b672      	cpsid	i
 800786c:	f7ff fc48 	bl	8007100 <vTaskSwitchContext>
 8007870:	b662      	cpsie	i
 8007872:	bc0c      	pop	{r2, r3}
 8007874:	6811      	ldr	r1, [r2, #0]
 8007876:	6808      	ldr	r0, [r1, #0]
 8007878:	3010      	adds	r0, #16
 800787a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800787c:	46a0      	mov	r8, r4
 800787e:	46a9      	mov	r9, r5
 8007880:	46b2      	mov	sl, r6
 8007882:	46bb      	mov	fp, r7
 8007884:	f380 8809 	msr	PSP, r0
 8007888:	3820      	subs	r0, #32
 800788a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800788c:	4718      	bx	r3
 800788e:	46c0      	nop			; (mov r8, r8)

08007890 <pxCurrentTCBConst>:
 8007890:	20000028 	.word	0x20000028
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	46c0      	nop			; (mov r8, r8)

08007898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800789e:	f7ff ffc7 	bl	8007830 <ulSetInterruptMaskFromISR>
 80078a2:	0003      	movs	r3, r0
 80078a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078a6:	f7ff fb77 	bl	8006f98 <xTaskIncrementTick>
 80078aa:	1e03      	subs	r3, r0, #0
 80078ac:	d003      	beq.n	80078b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <SysTick_Handler+0x30>)
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	0552      	lsls	r2, r2, #21
 80078b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff ffbf 	bl	800783c <vClearInterruptMaskFromISR>
}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b002      	add	sp, #8
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078d0:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <vPortSetupTimerInterrupt+0x28>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	23fa      	movs	r3, #250	; 0xfa
 80078d6:	0099      	lsls	r1, r3, #2
 80078d8:	0010      	movs	r0, r2
 80078da:	f7f8 fc15 	bl	8000108 <__udivsi3>
 80078de:	0003      	movs	r3, r0
 80078e0:	001a      	movs	r2, r3
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <vPortSetupTimerInterrupt+0x2c>)
 80078e4:	3a01      	subs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <vPortSetupTimerInterrupt+0x30>)
 80078ea:	2207      	movs	r2, #7
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000004 	.word	0x20000004
 80078f8:	e000e014 	.word	0xe000e014
 80078fc:	e000e010 	.word	0xe000e010

08007900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800790c:	f7ff fa9e 	bl	8006e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007910:	4b49      	ldr	r3, [pc, #292]	; (8007a38 <pvPortMalloc+0x138>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007918:	f000 f8e0 	bl	8007adc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800791c:	4b47      	ldr	r3, [pc, #284]	; (8007a3c <pvPortMalloc+0x13c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4013      	ands	r3, r2
 8007924:	d000      	beq.n	8007928 <pvPortMalloc+0x28>
 8007926:	e079      	b.n	8007a1c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d012      	beq.n	8007954 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800792e:	2208      	movs	r2, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	189b      	adds	r3, r3, r2
 8007934:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2207      	movs	r2, #7
 800793a:	4013      	ands	r3, r2
 800793c:	d00a      	beq.n	8007954 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2207      	movs	r2, #7
 8007942:	4393      	bics	r3, r2
 8007944:	3308      	adds	r3, #8
 8007946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2207      	movs	r2, #7
 800794c:	4013      	ands	r3, r2
 800794e:	d001      	beq.n	8007954 <pvPortMalloc+0x54>
 8007950:	b672      	cpsid	i
 8007952:	e7fe      	b.n	8007952 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d060      	beq.n	8007a1c <pvPortMalloc+0x11c>
 800795a:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <pvPortMalloc+0x140>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d85b      	bhi.n	8007a1c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007964:	4b37      	ldr	r3, [pc, #220]	; (8007a44 <pvPortMalloc+0x144>)
 8007966:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007968:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <pvPortMalloc+0x144>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800796e:	e004      	b.n	800797a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <pvPortMalloc+0x8c>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f1      	bne.n	8007970 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800798c:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <pvPortMalloc+0x138>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	429a      	cmp	r2, r3
 8007994:	d042      	beq.n	8007a1c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2208      	movs	r2, #8
 800799c:	189b      	adds	r3, r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	2308      	movs	r3, #8
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d916      	bls.n	80079e6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	18d3      	adds	r3, r2, r3
 80079be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2207      	movs	r2, #7
 80079c4:	4013      	ands	r3, r2
 80079c6:	d001      	beq.n	80079cc <pvPortMalloc+0xcc>
 80079c8:	b672      	cpsid	i
 80079ca:	e7fe      	b.n	80079ca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f000 f8db 	bl	8007b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <pvPortMalloc+0x140>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <pvPortMalloc+0x140>)
 80079f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <pvPortMalloc+0x140>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <pvPortMalloc+0x148>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d203      	bcs.n	8007a08 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a00:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <pvPortMalloc+0x140>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <pvPortMalloc+0x148>)
 8007a06:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <pvPortMalloc+0x13c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a1c:	f7ff fa22 	bl	8006e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2207      	movs	r2, #7
 8007a24:	4013      	ands	r3, r2
 8007a26:	d001      	beq.n	8007a2c <pvPortMalloc+0x12c>
 8007a28:	b672      	cpsid	i
 8007a2a:	e7fe      	b.n	8007a2a <pvPortMalloc+0x12a>
	return pvReturn;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	0018      	movs	r0, r3
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b006      	add	sp, #24
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	20000d5c 	.word	0x20000d5c
 8007a3c:	20000d68 	.word	0x20000d68
 8007a40:	20000d60 	.word	0x20000d60
 8007a44:	20000d54 	.word	0x20000d54
 8007a48:	20000d64 	.word	0x20000d64

08007a4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d035      	beq.n	8007aca <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a5e:	2308      	movs	r3, #8
 8007a60:	425b      	negs	r3, r3
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	18d3      	adds	r3, r2, r3
 8007a66:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	4b18      	ldr	r3, [pc, #96]	; (8007ad4 <vPortFree+0x88>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4013      	ands	r3, r2
 8007a76:	d101      	bne.n	8007a7c <vPortFree+0x30>
 8007a78:	b672      	cpsid	i
 8007a7a:	e7fe      	b.n	8007a7a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <vPortFree+0x3c>
 8007a84:	b672      	cpsid	i
 8007a86:	e7fe      	b.n	8007a86 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <vPortFree+0x88>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4013      	ands	r3, r2
 8007a92:	d01a      	beq.n	8007aca <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <vPortFree+0x88>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aac:	f7ff f9ce 	bl	8006e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <vPortFree+0x8c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	18d2      	adds	r2, r2, r3
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <vPortFree+0x8c>)
 8007abc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f000 f86b 	bl	8007b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ac6:	f7ff f9cd 	bl	8006e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b004      	add	sp, #16
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	20000d68 	.word	0x20000d68
 8007ad8:	20000d60 	.word	0x20000d60

08007adc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ae2:	23c0      	movs	r3, #192	; 0xc0
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae8:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <prvHeapInit+0xa8>)
 8007aea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2207      	movs	r2, #7
 8007af0:	4013      	ands	r3, r2
 8007af2:	d00c      	beq.n	8007b0e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3307      	adds	r3, #7
 8007af8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2207      	movs	r2, #7
 8007afe:	4393      	bics	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <prvHeapInit+0xa8>)
 8007b0a:	18d3      	adds	r3, r2, r3
 8007b0c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <prvHeapInit+0xac>)
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <prvHeapInit+0xac>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	18d3      	adds	r3, r2, r3
 8007b24:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b26:	2208      	movs	r2, #8
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1a9b      	subs	r3, r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2207      	movs	r2, #7
 8007b32:	4393      	bics	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <prvHeapInit+0xb0>)
 8007b3a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007b3c:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <prvHeapInit+0xb0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2200      	movs	r2, #0
 8007b42:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b44:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <prvHeapInit+0xb0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	1ad2      	subs	r2, r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <prvHeapInit+0xb0>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <prvHeapInit+0xb4>)
 8007b68:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <prvHeapInit+0xb8>)
 8007b70:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <prvHeapInit+0xbc>)
 8007b74:	2280      	movs	r2, #128	; 0x80
 8007b76:	0612      	lsls	r2, r2, #24
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b004      	add	sp, #16
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	20000154 	.word	0x20000154
 8007b88:	20000d54 	.word	0x20000d54
 8007b8c:	20000d5c 	.word	0x20000d5c
 8007b90:	20000d64 	.word	0x20000d64
 8007b94:	20000d60 	.word	0x20000d60
 8007b98:	20000d68 	.word	0x20000d68

08007b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba4:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <prvInsertBlockIntoFreeList+0xa8>)
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e002      	b.n	8007bb0 <prvInsertBlockIntoFreeList+0x14>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d8f7      	bhi.n	8007baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	18d3      	adds	r3, r2, r3
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d108      	bne.n	8007bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	18d2      	adds	r2, r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	18d2      	adds	r2, r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d118      	bne.n	8007c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <prvInsertBlockIntoFreeList+0xac>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d00d      	beq.n	8007c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	18d2      	adds	r2, r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e008      	b.n	8007c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <prvInsertBlockIntoFreeList+0xac>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e003      	b.n	8007c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d002      	beq.n	8007c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b004      	add	sp, #16
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	20000d54 	.word	0x20000d54
 8007c48:	20000d5c 	.word	0x20000d5c

08007c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007c4c:	480d      	ldr	r0, [pc, #52]	; (8007c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007c4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007c50:	480d      	ldr	r0, [pc, #52]	; (8007c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8007c52:	490e      	ldr	r1, [pc, #56]	; (8007c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007c54:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <LoopForever+0xe>)
  movs r3, #0
 8007c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c58:	e002      	b.n	8007c60 <LoopCopyDataInit>

08007c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c5e:	3304      	adds	r3, #4

08007c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c64:	d3f9      	bcc.n	8007c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c66:	4a0b      	ldr	r2, [pc, #44]	; (8007c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007c68:	4c0b      	ldr	r4, [pc, #44]	; (8007c98 <LoopForever+0x16>)
  movs r3, #0
 8007c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c6c:	e001      	b.n	8007c72 <LoopFillZerobss>

08007c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c70:	3204      	adds	r2, #4

08007c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c74:	d3fb      	bcc.n	8007c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007c76:	f7fe fb93 	bl	80063a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8007c7a:	f000 f811 	bl	8007ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007c7e:	f7fd fb91 	bl	80053a4 <main>

08007c82 <LoopForever>:

LoopForever:
    b LoopForever
 8007c82:	e7fe      	b.n	8007c82 <LoopForever>
  ldr   r0, =_estack
 8007c84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8007c90:	08007f70 	.word	0x08007f70
  ldr r2, =_sbss
 8007c94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8007c98:	20001660 	.word	0x20001660

08007c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c9c:	e7fe      	b.n	8007c9c <ADC1_IRQHandler>
	...

08007ca0 <__libc_init_array>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	4d0c      	ldr	r5, [pc, #48]	; (8007cd8 <__libc_init_array+0x38>)
 8007ca6:	4c0d      	ldr	r4, [pc, #52]	; (8007cdc <__libc_init_array+0x3c>)
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	42a6      	cmp	r6, r4
 8007cae:	d109      	bne.n	8007cc4 <__libc_init_array+0x24>
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	f000 f82b 	bl	8007d0c <_init>
 8007cb6:	4d0a      	ldr	r5, [pc, #40]	; (8007ce0 <__libc_init_array+0x40>)
 8007cb8:	4c0a      	ldr	r4, [pc, #40]	; (8007ce4 <__libc_init_array+0x44>)
 8007cba:	1b64      	subs	r4, r4, r5
 8007cbc:	10a4      	asrs	r4, r4, #2
 8007cbe:	42a6      	cmp	r6, r4
 8007cc0:	d105      	bne.n	8007cce <__libc_init_array+0x2e>
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	00b3      	lsls	r3, r6, #2
 8007cc6:	58eb      	ldr	r3, [r5, r3]
 8007cc8:	4798      	blx	r3
 8007cca:	3601      	adds	r6, #1
 8007ccc:	e7ee      	b.n	8007cac <__libc_init_array+0xc>
 8007cce:	00b3      	lsls	r3, r6, #2
 8007cd0:	58eb      	ldr	r3, [r5, r3]
 8007cd2:	4798      	blx	r3
 8007cd4:	3601      	adds	r6, #1
 8007cd6:	e7f2      	b.n	8007cbe <__libc_init_array+0x1e>
 8007cd8:	08007f68 	.word	0x08007f68
 8007cdc:	08007f68 	.word	0x08007f68
 8007ce0:	08007f68 	.word	0x08007f68
 8007ce4:	08007f6c 	.word	0x08007f6c

08007ce8 <memcpy>:
 8007ce8:	2300      	movs	r3, #0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d100      	bne.n	8007cf2 <memcpy+0xa>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	5ccc      	ldrb	r4, [r1, r3]
 8007cf4:	54c4      	strb	r4, [r0, r3]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	e7f8      	b.n	8007cec <memcpy+0x4>

08007cfa <memset>:
 8007cfa:	0003      	movs	r3, r0
 8007cfc:	1812      	adds	r2, r2, r0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d100      	bne.n	8007d04 <memset+0xa>
 8007d02:	4770      	bx	lr
 8007d04:	7019      	strb	r1, [r3, #0]
 8007d06:	3301      	adds	r3, #1
 8007d08:	e7f9      	b.n	8007cfe <memset+0x4>
	...

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr
