
RemoteRacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f94  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d4  080061d4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080061d4  080061d4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d4  080061d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080061dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001510  20000008  080061e4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  080061e4  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203e4  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bfb  00000000  00000000  00040414  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  00044010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  000453b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011c4f  00000000  00000000  000465b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013876  00000000  00000000  00058207  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054346  00000000  00000000  0006ba7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfdc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  000bfe40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800603c 	.word	0x0800603c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800603c 	.word	0x0800603c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	0244      	lsls	r4, r0, #9
 800022c:	b5e0      	push	{r5, r6, r7, lr}
 800022e:	0046      	lsls	r6, r0, #1
 8000230:	4688      	mov	r8, r1
 8000232:	0a64      	lsrs	r4, r4, #9
 8000234:	0e36      	lsrs	r6, r6, #24
 8000236:	0fc7      	lsrs	r7, r0, #31
 8000238:	2e00      	cmp	r6, #0
 800023a:	d063      	beq.n	8000304 <__aeabi_fdiv+0xe4>
 800023c:	2eff      	cmp	r6, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431c      	orrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469b      	mov	fp, r3
 800024e:	3e7f      	subs	r6, #127	; 0x7f
 8000250:	4643      	mov	r3, r8
 8000252:	4642      	mov	r2, r8
 8000254:	025d      	lsls	r5, r3, #9
 8000256:	0fd2      	lsrs	r2, r2, #31
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0a6d      	lsrs	r5, r5, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	4690      	mov	r8, r2
 8000260:	4692      	mov	sl, r2
 8000262:	d065      	beq.n	8000330 <__aeabi_fdiv+0x110>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d055      	beq.n	8000314 <__aeabi_fdiv+0xf4>
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	00ed      	lsls	r5, r5, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	4315      	orrs	r5, r2
 8000274:	1af6      	subs	r6, r6, r3
 8000276:	4643      	mov	r3, r8
 8000278:	464a      	mov	r2, r9
 800027a:	407b      	eors	r3, r7
 800027c:	2a0f      	cmp	r2, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e08d      	b.n	800039e <__aeabi_fdiv+0x17e>
 8000282:	486d      	ldr	r0, [pc, #436]	; (8000438 <__aeabi_fdiv+0x218>)
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	5882      	ldr	r2, [r0, r2]
 8000288:	4697      	mov	pc, r2
 800028a:	2c00      	cmp	r4, #0
 800028c:	d154      	bne.n	8000338 <__aeabi_fdiv+0x118>
 800028e:	2308      	movs	r3, #8
 8000290:	4699      	mov	r9, r3
 8000292:	3b06      	subs	r3, #6
 8000294:	26ff      	movs	r6, #255	; 0xff
 8000296:	469b      	mov	fp, r3
 8000298:	e7da      	b.n	8000250 <__aeabi_fdiv+0x30>
 800029a:	2500      	movs	r5, #0
 800029c:	4653      	mov	r3, sl
 800029e:	2902      	cmp	r1, #2
 80002a0:	d01b      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002a2:	2903      	cmp	r1, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e0bf      	b.n	8000428 <__aeabi_fdiv+0x208>
 80002a8:	2901      	cmp	r1, #1
 80002aa:	d028      	beq.n	80002fe <__aeabi_fdiv+0xde>
 80002ac:	0030      	movs	r0, r6
 80002ae:	307f      	adds	r0, #127	; 0x7f
 80002b0:	2800      	cmp	r0, #0
 80002b2:	dd20      	ble.n	80002f6 <__aeabi_fdiv+0xd6>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	0030      	movs	r0, r6
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <__aeabi_fdiv+0x21c>)
 80002ca:	3080      	adds	r0, #128	; 0x80
 80002cc:	4015      	ands	r5, r2
 80002ce:	28fe      	cmp	r0, #254	; 0xfe
 80002d0:	dc03      	bgt.n	80002da <__aeabi_fdiv+0xba>
 80002d2:	01ac      	lsls	r4, r5, #6
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	b2c2      	uxtb	r2, r0
 80002d8:	e001      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002da:	22ff      	movs	r2, #255	; 0xff
 80002dc:	2400      	movs	r4, #0
 80002de:	0264      	lsls	r4, r4, #9
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	0a60      	lsrs	r0, r4, #9
 80002e4:	07db      	lsls	r3, r3, #31
 80002e6:	4310      	orrs	r0, r2
 80002e8:	4318      	orrs	r0, r3
 80002ea:	bc3c      	pop	{r2, r3, r4, r5}
 80002ec:	4690      	mov	r8, r2
 80002ee:	4699      	mov	r9, r3
 80002f0:	46a2      	mov	sl, r4
 80002f2:	46ab      	mov	fp, r5
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	2201      	movs	r2, #1
 80002f8:	1a10      	subs	r0, r2, r0
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dd7c      	ble.n	80003f8 <__aeabi_fdiv+0x1d8>
 80002fe:	2200      	movs	r2, #0
 8000300:	2400      	movs	r4, #0
 8000302:	e7ec      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d11d      	bne.n	8000344 <__aeabi_fdiv+0x124>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2600      	movs	r6, #0
 8000310:	469b      	mov	fp, r3
 8000312:	e79d      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000314:	3eff      	subs	r6, #255	; 0xff
 8000316:	2d00      	cmp	r5, #0
 8000318:	d120      	bne.n	800035c <__aeabi_fdiv+0x13c>
 800031a:	2102      	movs	r1, #2
 800031c:	4643      	mov	r3, r8
 800031e:	464a      	mov	r2, r9
 8000320:	407b      	eors	r3, r7
 8000322:	430a      	orrs	r2, r1
 8000324:	2a0f      	cmp	r2, #15
 8000326:	d8d8      	bhi.n	80002da <__aeabi_fdiv+0xba>
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <__aeabi_fdiv+0x220>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	5882      	ldr	r2, [r0, r2]
 800032e:	4697      	mov	pc, r2
 8000330:	2d00      	cmp	r5, #0
 8000332:	d119      	bne.n	8000368 <__aeabi_fdiv+0x148>
 8000334:	2101      	movs	r1, #1
 8000336:	e7f1      	b.n	800031c <__aeabi_fdiv+0xfc>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469b      	mov	fp, r3
 8000342:	e785      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fa39 	bl	80007bc <__clzsi2>
 800034a:	2676      	movs	r6, #118	; 0x76
 800034c:	1f43      	subs	r3, r0, #5
 800034e:	409c      	lsls	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4276      	negs	r6, r6
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	4699      	mov	r9, r3
 8000358:	469b      	mov	fp, r3
 800035a:	e779      	b.n	8000250 <__aeabi_fdiv+0x30>
 800035c:	464a      	mov	r2, r9
 800035e:	2303      	movs	r3, #3
 8000360:	431a      	orrs	r2, r3
 8000362:	4691      	mov	r9, r2
 8000364:	2103      	movs	r1, #3
 8000366:	e786      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000368:	0028      	movs	r0, r5
 800036a:	f000 fa27 	bl	80007bc <__clzsi2>
 800036e:	1f43      	subs	r3, r0, #5
 8000370:	1836      	adds	r6, r6, r0
 8000372:	409d      	lsls	r5, r3
 8000374:	3676      	adds	r6, #118	; 0x76
 8000376:	2100      	movs	r1, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	2480      	movs	r4, #128	; 0x80
 800037c:	2300      	movs	r3, #0
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	e7ac      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000384:	2500      	movs	r5, #0
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421c      	tst	r4, r3
 800038c:	d028      	beq.n	80003e0 <__aeabi_fdiv+0x1c0>
 800038e:	421d      	tst	r5, r3
 8000390:	d126      	bne.n	80003e0 <__aeabi_fdiv+0x1c0>
 8000392:	432b      	orrs	r3, r5
 8000394:	025c      	lsls	r4, r3, #9
 8000396:	0a64      	lsrs	r4, r4, #9
 8000398:	4643      	mov	r3, r8
 800039a:	22ff      	movs	r2, #255	; 0xff
 800039c:	e79f      	b.n	80002de <__aeabi_fdiv+0xbe>
 800039e:	0162      	lsls	r2, r4, #5
 80003a0:	016c      	lsls	r4, r5, #5
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d224      	bcs.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003a6:	211b      	movs	r1, #27
 80003a8:	2500      	movs	r5, #0
 80003aa:	3e01      	subs	r6, #1
 80003ac:	2701      	movs	r7, #1
 80003ae:	0010      	movs	r0, r2
 80003b0:	006d      	lsls	r5, r5, #1
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2800      	cmp	r0, #0
 80003b6:	db01      	blt.n	80003bc <__aeabi_fdiv+0x19c>
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d801      	bhi.n	80003c0 <__aeabi_fdiv+0x1a0>
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	433d      	orrs	r5, r7
 80003c0:	3901      	subs	r1, #1
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d1f3      	bne.n	80003ae <__aeabi_fdiv+0x18e>
 80003c6:	0014      	movs	r4, r2
 80003c8:	1e62      	subs	r2, r4, #1
 80003ca:	4194      	sbcs	r4, r2
 80003cc:	4325      	orrs	r5, r4
 80003ce:	e76d      	b.n	80002ac <__aeabi_fdiv+0x8c>
 80003d0:	46ba      	mov	sl, r7
 80003d2:	4659      	mov	r1, fp
 80003d4:	0025      	movs	r5, r4
 80003d6:	4653      	mov	r3, sl
 80003d8:	2902      	cmp	r1, #2
 80003da:	d000      	beq.n	80003de <__aeabi_fdiv+0x1be>
 80003dc:	e761      	b.n	80002a2 <__aeabi_fdiv+0x82>
 80003de:	e77c      	b.n	80002da <__aeabi_fdiv+0xba>
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0264      	lsls	r4, r4, #9
 80003e8:	0a64      	lsrs	r4, r4, #9
 80003ea:	003b      	movs	r3, r7
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	e776      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003f0:	1b12      	subs	r2, r2, r4
 80003f2:	211a      	movs	r1, #26
 80003f4:	2501      	movs	r5, #1
 80003f6:	e7d9      	b.n	80003ac <__aeabi_fdiv+0x18c>
 80003f8:	369e      	adds	r6, #158	; 0x9e
 80003fa:	002a      	movs	r2, r5
 80003fc:	40b5      	lsls	r5, r6
 80003fe:	002c      	movs	r4, r5
 8000400:	40c2      	lsrs	r2, r0
 8000402:	1e65      	subs	r5, r4, #1
 8000404:	41ac      	sbcs	r4, r5
 8000406:	4314      	orrs	r4, r2
 8000408:	0762      	lsls	r2, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 800040c:	220f      	movs	r2, #15
 800040e:	4022      	ands	r2, r4
 8000410:	2a04      	cmp	r2, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 8000414:	3404      	adds	r4, #4
 8000416:	0162      	lsls	r2, r4, #5
 8000418:	d403      	bmi.n	8000422 <__aeabi_fdiv+0x202>
 800041a:	01a4      	lsls	r4, r4, #6
 800041c:	0a64      	lsrs	r4, r4, #9
 800041e:	2200      	movs	r2, #0
 8000420:	e75d      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000422:	2201      	movs	r2, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e75a      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	432c      	orrs	r4, r5
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e753      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	080060fc 	.word	0x080060fc
 800043c:	f7ffffff 	.word	0xf7ffffff
 8000440:	0800613c 	.word	0x0800613c

08000444 <__aeabi_fmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	464e      	mov	r6, r9
 8000448:	4657      	mov	r7, sl
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0243      	lsls	r3, r0, #9
 8000452:	0a5b      	lsrs	r3, r3, #9
 8000454:	0045      	lsls	r5, r0, #1
 8000456:	b083      	sub	sp, #12
 8000458:	1c0f      	adds	r7, r1, #0
 800045a:	4699      	mov	r9, r3
 800045c:	0e2d      	lsrs	r5, r5, #24
 800045e:	0fc6      	lsrs	r6, r0, #31
 8000460:	2d00      	cmp	r5, #0
 8000462:	d057      	beq.n	8000514 <__aeabi_fmul+0xd0>
 8000464:	2dff      	cmp	r5, #255	; 0xff
 8000466:	d024      	beq.n	80004b2 <__aeabi_fmul+0x6e>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	04c0      	lsls	r0, r0, #19
 800046e:	4318      	orrs	r0, r3
 8000470:	2300      	movs	r3, #0
 8000472:	4681      	mov	r9, r0
 8000474:	469a      	mov	sl, r3
 8000476:	469b      	mov	fp, r3
 8000478:	3d7f      	subs	r5, #127	; 0x7f
 800047a:	027c      	lsls	r4, r7, #9
 800047c:	007a      	lsls	r2, r7, #1
 800047e:	0ffb      	lsrs	r3, r7, #31
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	0e12      	lsrs	r2, r2, #24
 8000484:	4698      	mov	r8, r3
 8000486:	d023      	beq.n	80004d0 <__aeabi_fmul+0x8c>
 8000488:	2aff      	cmp	r2, #255	; 0xff
 800048a:	d04b      	beq.n	8000524 <__aeabi_fmul+0xe0>
 800048c:	00e3      	lsls	r3, r4, #3
 800048e:	2480      	movs	r4, #128	; 0x80
 8000490:	2000      	movs	r0, #0
 8000492:	04e4      	lsls	r4, r4, #19
 8000494:	3a7f      	subs	r2, #127	; 0x7f
 8000496:	431c      	orrs	r4, r3
 8000498:	18ad      	adds	r5, r5, r2
 800049a:	1c6b      	adds	r3, r5, #1
 800049c:	4647      	mov	r7, r8
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	4653      	mov	r3, sl
 80004a2:	4077      	eors	r7, r6
 80004a4:	003a      	movs	r2, r7
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d848      	bhi.n	800053c <__aeabi_fmul+0xf8>
 80004aa:	497d      	ldr	r1, [pc, #500]	; (80006a0 <__aeabi_fmul+0x25c>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	58cb      	ldr	r3, [r1, r3]
 80004b0:	469f      	mov	pc, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fmul+0x74>
 80004b6:	e085      	b.n	80005c4 <__aeabi_fmul+0x180>
 80004b8:	3308      	adds	r3, #8
 80004ba:	469a      	mov	sl, r3
 80004bc:	3b06      	subs	r3, #6
 80004be:	469b      	mov	fp, r3
 80004c0:	027c      	lsls	r4, r7, #9
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	25ff      	movs	r5, #255	; 0xff
 80004c8:	0a64      	lsrs	r4, r4, #9
 80004ca:	0e12      	lsrs	r2, r2, #24
 80004cc:	4698      	mov	r8, r3
 80004ce:	d1db      	bne.n	8000488 <__aeabi_fmul+0x44>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fmul+0x92>
 80004d4:	e090      	b.n	80005f8 <__aeabi_fmul+0x1b4>
 80004d6:	4652      	mov	r2, sl
 80004d8:	2301      	movs	r3, #1
 80004da:	431a      	orrs	r2, r3
 80004dc:	4692      	mov	sl, r2
 80004de:	2001      	movs	r0, #1
 80004e0:	e7db      	b.n	800049a <__aeabi_fmul+0x56>
 80004e2:	464c      	mov	r4, r9
 80004e4:	4658      	mov	r0, fp
 80004e6:	0017      	movs	r7, r2
 80004e8:	2802      	cmp	r0, #2
 80004ea:	d024      	beq.n	8000536 <__aeabi_fmul+0xf2>
 80004ec:	2803      	cmp	r0, #3
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fmul+0xae>
 80004f0:	e0cf      	b.n	8000692 <__aeabi_fmul+0x24e>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	2801      	cmp	r0, #1
 80004f8:	d14d      	bne.n	8000596 <__aeabi_fmul+0x152>
 80004fa:	0258      	lsls	r0, r3, #9
 80004fc:	05d2      	lsls	r2, r2, #23
 80004fe:	0a40      	lsrs	r0, r0, #9
 8000500:	07ff      	lsls	r7, r7, #31
 8000502:	4310      	orrs	r0, r2
 8000504:	4338      	orrs	r0, r7
 8000506:	b003      	add	sp, #12
 8000508:	bc3c      	pop	{r2, r3, r4, r5}
 800050a:	4690      	mov	r8, r2
 800050c:	4699      	mov	r9, r3
 800050e:	46a2      	mov	sl, r4
 8000510:	46ab      	mov	fp, r5
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	2b00      	cmp	r3, #0
 8000516:	d15b      	bne.n	80005d0 <__aeabi_fmul+0x18c>
 8000518:	2304      	movs	r3, #4
 800051a:	469a      	mov	sl, r3
 800051c:	3b03      	subs	r3, #3
 800051e:	2500      	movs	r5, #0
 8000520:	469b      	mov	fp, r3
 8000522:	e7aa      	b.n	800047a <__aeabi_fmul+0x36>
 8000524:	35ff      	adds	r5, #255	; 0xff
 8000526:	2c00      	cmp	r4, #0
 8000528:	d160      	bne.n	80005ec <__aeabi_fmul+0x1a8>
 800052a:	4652      	mov	r2, sl
 800052c:	2302      	movs	r3, #2
 800052e:	431a      	orrs	r2, r3
 8000530:	4692      	mov	sl, r2
 8000532:	2002      	movs	r0, #2
 8000534:	e7b1      	b.n	800049a <__aeabi_fmul+0x56>
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	2300      	movs	r3, #0
 800053a:	e7de      	b.n	80004fa <__aeabi_fmul+0xb6>
 800053c:	464b      	mov	r3, r9
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	469c      	mov	ip, r3
 8000542:	464b      	mov	r3, r9
 8000544:	0426      	lsls	r6, r4, #16
 8000546:	0c36      	lsrs	r6, r6, #16
 8000548:	0418      	lsls	r0, r3, #16
 800054a:	4661      	mov	r1, ip
 800054c:	0033      	movs	r3, r6
 800054e:	0c22      	lsrs	r2, r4, #16
 8000550:	4664      	mov	r4, ip
 8000552:	0c00      	lsrs	r0, r0, #16
 8000554:	4343      	muls	r3, r0
 8000556:	434e      	muls	r6, r1
 8000558:	4350      	muls	r0, r2
 800055a:	4354      	muls	r4, r2
 800055c:	1980      	adds	r0, r0, r6
 800055e:	0c1a      	lsrs	r2, r3, #16
 8000560:	1812      	adds	r2, r2, r0
 8000562:	4296      	cmp	r6, r2
 8000564:	d903      	bls.n	800056e <__aeabi_fmul+0x12a>
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	468c      	mov	ip, r1
 800056c:	4464      	add	r4, ip
 800056e:	041b      	lsls	r3, r3, #16
 8000570:	0c1b      	lsrs	r3, r3, #16
 8000572:	0410      	lsls	r0, r2, #16
 8000574:	18c0      	adds	r0, r0, r3
 8000576:	0183      	lsls	r3, r0, #6
 8000578:	1e5e      	subs	r6, r3, #1
 800057a:	41b3      	sbcs	r3, r6
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	4318      	orrs	r0, r3
 8000580:	0c13      	lsrs	r3, r2, #16
 8000582:	191b      	adds	r3, r3, r4
 8000584:	019b      	lsls	r3, r3, #6
 8000586:	4303      	orrs	r3, r0
 8000588:	001c      	movs	r4, r3
 800058a:	0123      	lsls	r3, r4, #4
 800058c:	d579      	bpl.n	8000682 <__aeabi_fmul+0x23e>
 800058e:	2301      	movs	r3, #1
 8000590:	0862      	lsrs	r2, r4, #1
 8000592:	401c      	ands	r4, r3
 8000594:	4314      	orrs	r4, r2
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	2a00      	cmp	r2, #0
 800059c:	dd4d      	ble.n	800063a <__aeabi_fmul+0x1f6>
 800059e:	0763      	lsls	r3, r4, #29
 80005a0:	d004      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005a2:	230f      	movs	r3, #15
 80005a4:	4023      	ands	r3, r4
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fmul+0x168>
 80005aa:	3404      	adds	r4, #4
 80005ac:	0123      	lsls	r3, r4, #4
 80005ae:	d503      	bpl.n	80005b8 <__aeabi_fmul+0x174>
 80005b0:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <__aeabi_fmul+0x260>)
 80005b2:	9a01      	ldr	r2, [sp, #4]
 80005b4:	401c      	ands	r4, r3
 80005b6:	3280      	adds	r2, #128	; 0x80
 80005b8:	2afe      	cmp	r2, #254	; 0xfe
 80005ba:	dcbc      	bgt.n	8000536 <__aeabi_fmul+0xf2>
 80005bc:	01a3      	lsls	r3, r4, #6
 80005be:	0a5b      	lsrs	r3, r3, #9
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	e79a      	b.n	80004fa <__aeabi_fmul+0xb6>
 80005c4:	230c      	movs	r3, #12
 80005c6:	469a      	mov	sl, r3
 80005c8:	3b09      	subs	r3, #9
 80005ca:	25ff      	movs	r5, #255	; 0xff
 80005cc:	469b      	mov	fp, r3
 80005ce:	e754      	b.n	800047a <__aeabi_fmul+0x36>
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f8f3 	bl	80007bc <__clzsi2>
 80005d6:	464a      	mov	r2, r9
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	2576      	movs	r5, #118	; 0x76
 80005dc:	409a      	lsls	r2, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	426d      	negs	r5, r5
 80005e2:	4691      	mov	r9, r2
 80005e4:	1a2d      	subs	r5, r5, r0
 80005e6:	469a      	mov	sl, r3
 80005e8:	469b      	mov	fp, r3
 80005ea:	e746      	b.n	800047a <__aeabi_fmul+0x36>
 80005ec:	4652      	mov	r2, sl
 80005ee:	2303      	movs	r3, #3
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4692      	mov	sl, r2
 80005f4:	2003      	movs	r0, #3
 80005f6:	e750      	b.n	800049a <__aeabi_fmul+0x56>
 80005f8:	0020      	movs	r0, r4
 80005fa:	f000 f8df 	bl	80007bc <__clzsi2>
 80005fe:	1f43      	subs	r3, r0, #5
 8000600:	1a2d      	subs	r5, r5, r0
 8000602:	409c      	lsls	r4, r3
 8000604:	3d76      	subs	r5, #118	; 0x76
 8000606:	2000      	movs	r0, #0
 8000608:	e747      	b.n	800049a <__aeabi_fmul+0x56>
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	2700      	movs	r7, #0
 800060e:	03db      	lsls	r3, r3, #15
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	e772      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000614:	4642      	mov	r2, r8
 8000616:	e766      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000618:	464c      	mov	r4, r9
 800061a:	0032      	movs	r2, r6
 800061c:	4658      	mov	r0, fp
 800061e:	e762      	b.n	80004e6 <__aeabi_fmul+0xa2>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	464a      	mov	r2, r9
 8000624:	03db      	lsls	r3, r3, #15
 8000626:	421a      	tst	r2, r3
 8000628:	d022      	beq.n	8000670 <__aeabi_fmul+0x22c>
 800062a:	421c      	tst	r4, r3
 800062c:	d120      	bne.n	8000670 <__aeabi_fmul+0x22c>
 800062e:	4323      	orrs	r3, r4
 8000630:	025b      	lsls	r3, r3, #9
 8000632:	0a5b      	lsrs	r3, r3, #9
 8000634:	4647      	mov	r7, r8
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0xb6>
 800063a:	2301      	movs	r3, #1
 800063c:	1a9a      	subs	r2, r3, r2
 800063e:	2a1b      	cmp	r2, #27
 8000640:	dc21      	bgt.n	8000686 <__aeabi_fmul+0x242>
 8000642:	0023      	movs	r3, r4
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	40d3      	lsrs	r3, r2
 8000648:	319e      	adds	r1, #158	; 0x9e
 800064a:	408c      	lsls	r4, r1
 800064c:	001a      	movs	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	1e5c      	subs	r4, r3, #1
 8000652:	41a3      	sbcs	r3, r4
 8000654:	4313      	orrs	r3, r2
 8000656:	075a      	lsls	r2, r3, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x220>
 800065a:	220f      	movs	r2, #15
 800065c:	401a      	ands	r2, r3
 800065e:	2a04      	cmp	r2, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x220>
 8000662:	3304      	adds	r3, #4
 8000664:	015a      	lsls	r2, r3, #5
 8000666:	d411      	bmi.n	800068c <__aeabi_fmul+0x248>
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	0a5b      	lsrs	r3, r3, #9
 800066c:	2200      	movs	r2, #0
 800066e:	e744      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	464a      	mov	r2, r9
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	4313      	orrs	r3, r2
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	0037      	movs	r7, r6
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	e73b      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000682:	9501      	str	r5, [sp, #4]
 8000684:	e787      	b.n	8000596 <__aeabi_fmul+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	e736      	b.n	80004fa <__aeabi_fmul+0xb6>
 800068c:	2201      	movs	r2, #1
 800068e:	2300      	movs	r3, #0
 8000690:	e733      	b.n	80004fa <__aeabi_fmul+0xb6>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	03db      	lsls	r3, r3, #15
 8000696:	4323      	orrs	r3, r4
 8000698:	025b      	lsls	r3, r3, #9
 800069a:	0a5b      	lsrs	r3, r3, #9
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	e72c      	b.n	80004fa <__aeabi_fmul+0xb6>
 80006a0:	0800617c 	.word	0x0800617c
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_i2f>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d03d      	beq.n	800072a <__aeabi_i2f+0x82>
 80006ae:	17c3      	asrs	r3, r0, #31
 80006b0:	18c5      	adds	r5, r0, r3
 80006b2:	405d      	eors	r5, r3
 80006b4:	0fc4      	lsrs	r4, r0, #31
 80006b6:	0028      	movs	r0, r5
 80006b8:	f000 f880 	bl	80007bc <__clzsi2>
 80006bc:	229e      	movs	r2, #158	; 0x9e
 80006be:	1a12      	subs	r2, r2, r0
 80006c0:	2a96      	cmp	r2, #150	; 0x96
 80006c2:	dc07      	bgt.n	80006d4 <__aeabi_i2f+0x2c>
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	2808      	cmp	r0, #8
 80006c8:	dd33      	ble.n	8000732 <__aeabi_i2f+0x8a>
 80006ca:	3808      	subs	r0, #8
 80006cc:	4085      	lsls	r5, r0
 80006ce:	0268      	lsls	r0, r5, #9
 80006d0:	0a40      	lsrs	r0, r0, #9
 80006d2:	e023      	b.n	800071c <__aeabi_i2f+0x74>
 80006d4:	2a99      	cmp	r2, #153	; 0x99
 80006d6:	dd0b      	ble.n	80006f0 <__aeabi_i2f+0x48>
 80006d8:	2305      	movs	r3, #5
 80006da:	0029      	movs	r1, r5
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	0003      	movs	r3, r0
 80006e2:	331b      	adds	r3, #27
 80006e4:	409d      	lsls	r5, r3
 80006e6:	002b      	movs	r3, r5
 80006e8:	1e5d      	subs	r5, r3, #1
 80006ea:	41ab      	sbcs	r3, r5
 80006ec:	4319      	orrs	r1, r3
 80006ee:	000d      	movs	r5, r1
 80006f0:	2805      	cmp	r0, #5
 80006f2:	dd01      	ble.n	80006f8 <__aeabi_i2f+0x50>
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409d      	lsls	r5, r3
 80006f8:	002b      	movs	r3, r5
 80006fa:	490f      	ldr	r1, [pc, #60]	; (8000738 <__aeabi_i2f+0x90>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	076e      	lsls	r6, r5, #29
 8000700:	d009      	beq.n	8000716 <__aeabi_i2f+0x6e>
 8000702:	260f      	movs	r6, #15
 8000704:	4035      	ands	r5, r6
 8000706:	2d04      	cmp	r5, #4
 8000708:	d005      	beq.n	8000716 <__aeabi_i2f+0x6e>
 800070a:	3304      	adds	r3, #4
 800070c:	015d      	lsls	r5, r3, #5
 800070e:	d502      	bpl.n	8000716 <__aeabi_i2f+0x6e>
 8000710:	229f      	movs	r2, #159	; 0x9f
 8000712:	400b      	ands	r3, r1
 8000714:	1a12      	subs	r2, r2, r0
 8000716:	019b      	lsls	r3, r3, #6
 8000718:	0a58      	lsrs	r0, r3, #9
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	0240      	lsls	r0, r0, #9
 800071e:	05d2      	lsls	r2, r2, #23
 8000720:	0a40      	lsrs	r0, r0, #9
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4310      	orrs	r0, r2
 8000726:	4320      	orrs	r0, r4
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	2400      	movs	r4, #0
 800072c:	2200      	movs	r2, #0
 800072e:	2000      	movs	r0, #0
 8000730:	e7f4      	b.n	800071c <__aeabi_i2f+0x74>
 8000732:	0268      	lsls	r0, r5, #9
 8000734:	0a40      	lsrs	r0, r0, #9
 8000736:	e7f1      	b.n	800071c <__aeabi_i2f+0x74>
 8000738:	fbffffff 	.word	0xfbffffff

0800073c <__aeabi_ui2f>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	1e04      	subs	r4, r0, #0
 8000740:	d034      	beq.n	80007ac <__aeabi_ui2f+0x70>
 8000742:	f000 f83b 	bl	80007bc <__clzsi2>
 8000746:	229e      	movs	r2, #158	; 0x9e
 8000748:	1a12      	subs	r2, r2, r0
 800074a:	2a96      	cmp	r2, #150	; 0x96
 800074c:	dc07      	bgt.n	800075e <__aeabi_ui2f+0x22>
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	2808      	cmp	r0, #8
 8000752:	dd2e      	ble.n	80007b2 <__aeabi_ui2f+0x76>
 8000754:	3808      	subs	r0, #8
 8000756:	4084      	lsls	r4, r0
 8000758:	0260      	lsls	r0, r4, #9
 800075a:	0a40      	lsrs	r0, r0, #9
 800075c:	e021      	b.n	80007a2 <__aeabi_ui2f+0x66>
 800075e:	2a99      	cmp	r2, #153	; 0x99
 8000760:	dd09      	ble.n	8000776 <__aeabi_ui2f+0x3a>
 8000762:	0003      	movs	r3, r0
 8000764:	0021      	movs	r1, r4
 8000766:	331b      	adds	r3, #27
 8000768:	4099      	lsls	r1, r3
 800076a:	1e4b      	subs	r3, r1, #1
 800076c:	4199      	sbcs	r1, r3
 800076e:	2305      	movs	r3, #5
 8000770:	1a1b      	subs	r3, r3, r0
 8000772:	40dc      	lsrs	r4, r3
 8000774:	430c      	orrs	r4, r1
 8000776:	2805      	cmp	r0, #5
 8000778:	dd01      	ble.n	800077e <__aeabi_ui2f+0x42>
 800077a:	1f43      	subs	r3, r0, #5
 800077c:	409c      	lsls	r4, r3
 800077e:	0023      	movs	r3, r4
 8000780:	490d      	ldr	r1, [pc, #52]	; (80007b8 <__aeabi_ui2f+0x7c>)
 8000782:	400b      	ands	r3, r1
 8000784:	0765      	lsls	r5, r4, #29
 8000786:	d009      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000788:	250f      	movs	r5, #15
 800078a:	402c      	ands	r4, r5
 800078c:	2c04      	cmp	r4, #4
 800078e:	d005      	beq.n	800079c <__aeabi_ui2f+0x60>
 8000790:	3304      	adds	r3, #4
 8000792:	015c      	lsls	r4, r3, #5
 8000794:	d502      	bpl.n	800079c <__aeabi_ui2f+0x60>
 8000796:	229f      	movs	r2, #159	; 0x9f
 8000798:	400b      	ands	r3, r1
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	0a58      	lsrs	r0, r3, #9
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	05d2      	lsls	r2, r2, #23
 80007a6:	0a40      	lsrs	r0, r0, #9
 80007a8:	4310      	orrs	r0, r2
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	2200      	movs	r2, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	e7f7      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b2:	0260      	lsls	r0, r4, #9
 80007b4:	0a40      	lsrs	r0, r0, #9
 80007b6:	e7f4      	b.n	80007a2 <__aeabi_ui2f+0x66>
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__clzsi2>:
 80007bc:	211c      	movs	r1, #28
 80007be:	2301      	movs	r3, #1
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	4298      	cmp	r0, r3
 80007c4:	d301      	bcc.n	80007ca <__clzsi2+0xe>
 80007c6:	0c00      	lsrs	r0, r0, #16
 80007c8:	3910      	subs	r1, #16
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	4298      	cmp	r0, r3
 80007ce:	d301      	bcc.n	80007d4 <__clzsi2+0x18>
 80007d0:	0a00      	lsrs	r0, r0, #8
 80007d2:	3908      	subs	r1, #8
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	4298      	cmp	r0, r3
 80007d8:	d301      	bcc.n	80007de <__clzsi2+0x22>
 80007da:	0900      	lsrs	r0, r0, #4
 80007dc:	3904      	subs	r1, #4
 80007de:	a202      	add	r2, pc, #8	; (adr r2, 80007e8 <__clzsi2+0x2c>)
 80007e0:	5c10      	ldrb	r0, [r2, r0]
 80007e2:	1840      	adds	r0, r0, r1
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	02020304 	.word	0x02020304
 80007ec:	01010101 	.word	0x01010101
	...

080007f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_Init+0x24>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_Init+0x24>)
 8000802:	2110      	movs	r1, #16
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000808:	2000      	movs	r0, #0
 800080a:	f004 faef 	bl	8004dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080e:	f004 f949 	bl	8004aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  uwTick++;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_IncTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	4b02      	ldr	r3, [pc, #8]	; (8000834 <HAL_IncTick+0x14>)
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000d68 	.word	0x20000d68

08000838 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000d68 	.word	0x20000d68

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff fff0 	bl	8000838 <HAL_GetTick>
 8000858:	0003      	movs	r3, r0
 800085a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	d002      	beq.n	800086c <HAL_Delay+0x20>
  {
     wait++;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3301      	adds	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	f7ff ffe3 	bl	8000838 <HAL_GetTick>
 8000872:	0002      	movs	r2, r0
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	d8f7      	bhi.n	800086e <HAL_Delay+0x22>
  {
  }
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b004      	add	sp, #16
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	0002      	movs	r2, r0
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	231f      	movs	r3, #31
 800089c:	401a      	ands	r2, r3
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <NVIC_EnableIRQ+0x28>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	4091      	lsls	r1, r2
 80008a4:	000a      	movs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b7f      	cmp	r3, #127	; 0x7f
 80008c8:	d932      	bls.n	8000930 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <NVIC_SetPriority+0xd4>)
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	230f      	movs	r3, #15
 80008d4:	400b      	ands	r3, r1
 80008d6:	3b08      	subs	r3, #8
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	3306      	adds	r3, #6
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	3304      	adds	r3, #4
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1dfa      	adds	r2, r7, #7
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	0011      	movs	r1, r2
 80008ea:	2203      	movs	r2, #3
 80008ec:	400a      	ands	r2, r1
 80008ee:	00d2      	lsls	r2, r2, #3
 80008f0:	21ff      	movs	r1, #255	; 0xff
 80008f2:	4091      	lsls	r1, r2
 80008f4:	000a      	movs	r2, r1
 80008f6:	43d2      	mvns	r2, r2
 80008f8:	401a      	ands	r2, r3
 80008fa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	019b      	lsls	r3, r3, #6
 8000900:	22ff      	movs	r2, #255	; 0xff
 8000902:	401a      	ands	r2, r3
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0018      	movs	r0, r3
 800090a:	2303      	movs	r3, #3
 800090c:	4003      	ands	r3, r0
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <NVIC_SetPriority+0xd4>)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001c      	movs	r4, r3
 800091a:	230f      	movs	r3, #15
 800091c:	4023      	ands	r3, r4
 800091e:	3b08      	subs	r3, #8
 8000920:	089b      	lsrs	r3, r3, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	3306      	adds	r3, #6
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	18c3      	adds	r3, r0, r3
 800092a:	3304      	adds	r3, #4
 800092c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800092e:	e027      	b.n	8000980 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	089b      	lsrs	r3, r3, #2
 800093a:	33c0      	adds	r3, #192	; 0xc0
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	589b      	ldr	r3, [r3, r2]
 8000940:	1dfa      	adds	r2, r7, #7
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	0011      	movs	r1, r2
 8000946:	2203      	movs	r2, #3
 8000948:	400a      	ands	r2, r1
 800094a:	00d2      	lsls	r2, r2, #3
 800094c:	21ff      	movs	r1, #255	; 0xff
 800094e:	4091      	lsls	r1, r2
 8000950:	000a      	movs	r2, r1
 8000952:	43d2      	mvns	r2, r2
 8000954:	401a      	ands	r2, r3
 8000956:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	019b      	lsls	r3, r3, #6
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	401a      	ands	r2, r3
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0018      	movs	r0, r3
 8000966:	2303      	movs	r3, #3
 8000968:	4003      	ands	r3, r0
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <NVIC_SetPriority+0xd8>)
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	430a      	orrs	r2, r1
 800097a:	33c0      	adds	r3, #192	; 0xc0
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	501a      	str	r2, [r3, r0]
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b003      	add	sp, #12
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	e000e100 	.word	0xe000e100

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	210f      	movs	r1, #15
 800099c:	187b      	adds	r3, r7, r1
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff81 	bl	80008b4 <NVIC_SetPriority>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	0002      	movs	r2, r0
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff5b 	bl	8000888 <NVIC_EnableIRQ>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e042      	b.n	8000a78 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2221      	movs	r2, #33	; 0x21
 80009f6:	2102      	movs	r1, #2
 80009f8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_DMA_Init+0xa4>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f998 	bl	8000d78 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2221      	movs	r2, #33	; 0x21
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}  
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b004      	add	sp, #16
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	ffffc00f 	.word	0xffffc00f

08000a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a92:	2317      	movs	r3, #23
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	5c9b      	ldrb	r3, [r3, r2]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d101      	bne.n	8000aa8 <HAL_DMA_Start_IT+0x24>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e04f      	b.n	8000b48 <HAL_DMA_Start_IT+0xc4>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2101      	movs	r1, #1
 8000aae:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2221      	movs	r2, #33	; 0x21
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d13a      	bne.n	8000b32 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	438a      	bics	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f91d 	bl	8000d20 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d008      	beq.n	8000b00 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	210e      	movs	r1, #14
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e00f      	b.n	8000b20 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b3a:	2317      	movs	r3, #23
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	2202      	movs	r2, #2
 8000b40:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000b42:	2317      	movs	r3, #23
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
} 
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2221      	movs	r2, #33	; 0x21
 8000b64:	5c9b      	ldrb	r3, [r3, r2]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d007      	beq.n	8000b7c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e028      	b.n	8000bce <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	210e      	movs	r1, #14
 8000b88:	438a      	bics	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2101      	movs	r1, #1
 8000b98:	438a      	bics	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	000a      	movs	r2, r1
 8000baa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2221      	movs	r2, #33	; 0x21
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	0010      	movs	r0, r2
 8000bcc:	4798      	blx	r3
    } 
  }
  return status;
 8000bce:	230f      	movs	r3, #15
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b004      	add	sp, #16
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	d024      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x72>
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2204      	movs	r2, #4
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d020      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2220      	movs	r2, #32
 8000c14:	4013      	ands	r3, r2
 8000c16:	d107      	bne.n	8000c28 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2104      	movs	r1, #4
 8000c24:	438a      	bics	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	2104      	movs	r1, #4
 8000c32:	4091      	lsls	r1, r2
 8000c34:	000a      	movs	r2, r1
 8000c36:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d100      	bne.n	8000c42 <HAL_DMA_IRQHandler+0x66>
 8000c40:	e06a      	b.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	0010      	movs	r0, r2
 8000c4a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c4c:	e064      	b.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2202      	movs	r2, #2
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d02b      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xda>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2202      	movs	r2, #2
 8000c62:	4013      	ands	r3, r2
 8000c64:	d027      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d10b      	bne.n	8000c8a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	438a      	bics	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2221      	movs	r2, #33	; 0x21
 8000c86:	2101      	movs	r1, #1
 8000c88:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c92:	2102      	movs	r1, #2
 8000c94:	4091      	lsls	r1, r2
 8000c96:	000a      	movs	r2, r1
 8000c98:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d036      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	0010      	movs	r0, r2
 8000cb2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cb4:	e030      	b.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	2208      	movs	r2, #8
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d028      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2208      	movs	r2, #8
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d024      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	210e      	movs	r1, #14
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2221      	movs	r2, #33	; 0x21
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	0010      	movs	r0, r2
 8000d14:	4798      	blx	r3
    }
   }
}  
 8000d16:	e7ff      	b.n	8000d18 <HAL_DMA_IRQHandler+0x13c>
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b004      	add	sp, #16
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	2101      	movs	r1, #1
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d108      	bne.n	8000d60 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d5e:	e007      	b.n	8000d70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <DMA_CalcBaseAndBitshift+0x30>)
 8000d86:	4694      	mov	ip, r2
 8000d88:	4463      	add	r3, ip
 8000d8a:	2114      	movs	r1, #20
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff f9bb 	bl	8000108 <__udivsi3>
 8000d92:	0003      	movs	r3, r0
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <DMA_CalcBaseAndBitshift+0x34>)
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	bffdfff8 	.word	0xbffdfff8
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dc6:	e14f      	b.n	8001068 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d100      	bne.n	8000de0 <HAL_GPIO_Init+0x30>
 8000dde:	e140      	b.n	8001062 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	58d3      	ldr	r3, [r2, r3]
 8000dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2207      	movs	r2, #7
 8000e02:	4013      	ands	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2107      	movs	r1, #7
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	6939      	ldr	r1, [r7, #16]
 8000e36:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d00b      	beq.n	8000e8c <HAL_GPIO_Init+0xdc>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e80:	2b11      	cmp	r3, #17
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	055b      	lsls	r3, r3, #21
 8000f26:	4013      	ands	r3, r2
 8000f28:	d100      	bne.n	8000f2c <HAL_GPIO_Init+0x17c>
 8000f2a:	e09a      	b.n	8001062 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	4b53      	ldr	r3, [pc, #332]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	4b51      	ldr	r3, [pc, #324]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	589b      	ldr	r3, [r3, r2]
 8000f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	2390      	movs	r3, #144	; 0x90
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ea>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1e6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1e2>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_GPIO_Init+0x2e0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1de>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	025b      	lsls	r3, r3, #9
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	035b      	lsls	r3, r3, #13
 8001026:	4013      	ands	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	039b      	lsls	r3, r3, #14
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2c6>
 8001074:	e6a8      	b.n	8000dc8 <HAL_GPIO_Init+0x18>
  } 
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b006      	add	sp, #24
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	0008      	movs	r0, r1
 80010a2:	0011      	movs	r1, r2
 80010a4:	1cbb      	adds	r3, r7, #2
 80010a6:	1c02      	adds	r2, r0, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	1c7b      	adds	r3, r7, #1
 80010ac:	1c0a      	adds	r2, r1, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	1c7b      	adds	r3, r7, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	1cbb      	adds	r3, r7, #2
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e082      	b.n	80011ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2241      	movs	r2, #65	; 0x41
 80010ea:	5c9b      	ldrb	r3, [r3, r2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f003 fcf5 	bl	8004aec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2241      	movs	r2, #65	; 0x41
 8001106:	2124      	movs	r1, #36	; 0x24
 8001108:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4934      	ldr	r1, [pc, #208]	; (80011f4 <HAL_I2C_Init+0x120>)
 8001124:	400a      	ands	r2, r1
 8001126:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4931      	ldr	r1, [pc, #196]	; (80011f8 <HAL_I2C_Init+0x124>)
 8001134:	400a      	ands	r2, r1
 8001136:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0209      	lsls	r1, r1, #8
 800114c:	430a      	orrs	r2, r1
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e007      	b.n	8001162 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2184      	movs	r1, #132	; 0x84
 800115c:	0209      	lsls	r1, r1, #8
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d104      	bne.n	8001174 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	491f      	ldr	r1, [pc, #124]	; (80011fc <HAL_I2C_Init+0x128>)
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	491a      	ldr	r1, [pc, #104]	; (80011f8 <HAL_I2C_Init+0x124>)
 8001190:	400a      	ands	r2, r1
 8001192:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	431a      	orrs	r2, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	021a      	lsls	r2, r3, #8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69d9      	ldr	r1, [r3, #28]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2241      	movs	r2, #65	; 0x41
 80011d8:	2120      	movs	r1, #32
 80011da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2242      	movs	r2, #66	; 0x42
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f0ffffff 	.word	0xf0ffffff
 80011f8:	ffff7fff 	.word	0xffff7fff
 80011fc:	02008000 	.word	0x02008000

08001200 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	000c      	movs	r4, r1
 800120a:	0010      	movs	r0, r2
 800120c:	0019      	movs	r1, r3
 800120e:	230a      	movs	r3, #10
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	1c22      	adds	r2, r4, #0
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	2308      	movs	r3, #8
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	1c0a      	adds	r2, r1, #0
 8001222:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2241      	movs	r2, #65	; 0x41
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b20      	cmp	r3, #32
 8001232:	d000      	beq.n	8001236 <HAL_I2C_Mem_Write+0x36>
 8001234:	e11c      	b.n	8001470 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_I2C_Mem_Write+0x46>
 800123c:	232c      	movs	r3, #44	; 0x2c
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e113      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_I2C_Mem_Write+0x58>
 8001254:	2302      	movs	r3, #2
 8001256:	e10c      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	2101      	movs	r1, #1
 800125e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001260:	f7ff faea 	bl	8000838 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	0219      	lsls	r1, r3, #8
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2319      	movs	r3, #25
 8001274:	2201      	movs	r2, #1
 8001276:	f000 fb3f 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e0f7      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2241      	movs	r2, #65	; 0x41
 8001286:	2121      	movs	r1, #33	; 0x21
 8001288:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2242      	movs	r2, #66	; 0x42
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	222c      	movs	r2, #44	; 0x2c
 80012a2:	18ba      	adds	r2, r7, r2
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	881c      	ldrh	r4, [r3, #0]
 80012b2:	2308      	movs	r3, #8
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	230a      	movs	r3, #10
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	8819      	ldrh	r1, [r3, #0]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	0023      	movs	r3, r4
 80012ca:	f000 fa19 	bl	8001700 <I2C_RequestMemoryWrite>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d00f      	beq.n	80012f2 <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d105      	bne.n	80012e6 <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2240      	movs	r2, #64	; 0x40
 80012de:	2100      	movs	r1, #0
 80012e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0c5      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	2100      	movs	r1, #0
 80012ec:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0bf      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d911      	bls.n	8001320 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	b2da      	uxtb	r2, r3
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	045c      	lsls	r4, r3, #17
 800130c:	230a      	movs	r3, #10
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	0023      	movs	r3, r4
 800131a:	f000 fbff 	bl	8001b1c <I2C_TransferConfig>
 800131e:	e012      	b.n	8001346 <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132e:	b2da      	uxtb	r2, r3
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	049c      	lsls	r4, r3, #18
 8001334:	230a      	movs	r3, #10
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0023      	movs	r3, r4
 8001342:	f000 fbeb 	bl	8001b1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	0018      	movs	r0, r3
 800134e:	f000 fb0c 	bl	800196a <I2C_WaitOnTXISFlagUntilTimeout>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d007      	beq.n	8001366 <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	2b04      	cmp	r3, #4
 800135c:	d101      	bne.n	8001362 <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e087      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e085      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	6251      	str	r1, [r2, #36]	; 0x24
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137c:	b29b      	uxth	r3, r3
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	3b01      	subs	r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001396:	2b00      	cmp	r3, #0
 8001398:	d13b      	bne.n	8001412 <HAL_I2C_Mem_Write+0x212>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d036      	beq.n	8001412 <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	0013      	movs	r3, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	f000 faa1 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e059      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2bff      	cmp	r3, #255	; 0xff
 80013c6:	d911      	bls.n	80013ec <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	22ff      	movs	r2, #255	; 0xff
 80013cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	045c      	lsls	r4, r3, #17
 80013d8:	230a      	movs	r3, #10
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	8819      	ldrh	r1, [r3, #0]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	0023      	movs	r3, r4
 80013e6:	f000 fb99 	bl	8001b1c <I2C_TransferConfig>
 80013ea:	e012      	b.n	8001412 <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	049c      	lsls	r4, r3, #18
 8001400:	230a      	movs	r3, #10
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	8819      	ldrh	r1, [r3, #0]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	0023      	movs	r3, r4
 800140e:	f000 fb85 	bl	8001b1c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29b      	uxth	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d194      	bne.n	8001346 <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fae0 	bl	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d007      	beq.n	800143c <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	2b04      	cmp	r3, #4
 8001432:	d101      	bne.n	8001438 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e01c      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e01a      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2220      	movs	r2, #32
 8001442:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <HAL_I2C_Mem_Write+0x27c>)
 8001450:	400a      	ands	r2, r1
 8001452:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2241      	movs	r2, #65	; 0x41
 8001458:	2120      	movs	r1, #32
 800145a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2242      	movs	r2, #66	; 0x42
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8001470:	2302      	movs	r3, #2
  }
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b007      	add	sp, #28
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	fe00e800 	.word	0xfe00e800

08001480 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	000c      	movs	r4, r1
 800148a:	0010      	movs	r0, r2
 800148c:	0019      	movs	r1, r3
 800148e:	230a      	movs	r3, #10
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	1c22      	adds	r2, r4, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	2308      	movs	r3, #8
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	1c02      	adds	r2, r0, #0
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	1c0a      	adds	r2, r1, #0
 80014a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2241      	movs	r2, #65	; 0x41
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	d000      	beq.n	80014b6 <HAL_I2C_Mem_Read+0x36>
 80014b4:	e11c      	b.n	80016f0 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_I2C_Mem_Read+0x46>
 80014bc:	232c      	movs	r3, #44	; 0x2c
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e113      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_I2C_Mem_Read+0x58>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e10c      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	2101      	movs	r1, #1
 80014de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014e0:	f7ff f9aa 	bl	8000838 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	0219      	lsls	r1, r3, #8
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2319      	movs	r3, #25
 80014f4:	2201      	movs	r2, #1
 80014f6:	f000 f9ff 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0f7      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2241      	movs	r2, #65	; 0x41
 8001506:	2122      	movs	r1, #34	; 0x22
 8001508:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2242      	movs	r2, #66	; 0x42
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	222c      	movs	r2, #44	; 0x2c
 8001522:	18ba      	adds	r2, r7, r2
 8001524:	8812      	ldrh	r2, [r2, #0]
 8001526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800152e:	1dbb      	adds	r3, r7, #6
 8001530:	881c      	ldrh	r4, [r3, #0]
 8001532:	2308      	movs	r3, #8
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	230a      	movs	r3, #10
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	8819      	ldrh	r1, [r3, #0]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	0023      	movs	r3, r4
 800154a:	f000 f947 	bl	80017dc <I2C_RequestMemoryRead>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d00f      	beq.n	8001572 <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	2b04      	cmp	r3, #4
 8001558:	d105      	bne.n	8001566 <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0c5      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2240      	movs	r2, #64	; 0x40
 800156a:	2100      	movs	r1, #0
 800156c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0bf      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	2bff      	cmp	r3, #255	; 0xff
 800157a:	d912      	bls.n	80015a2 <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	b2da      	uxtb	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	045c      	lsls	r4, r3, #17
 800158c:	230a      	movs	r3, #10
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	2390      	movs	r3, #144	; 0x90
 8001596:	019b      	lsls	r3, r3, #6
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	0023      	movs	r3, r4
 800159c:	f000 fabe 	bl	8001b1c <I2C_TransferConfig>
 80015a0:	e013      	b.n	80015ca <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	049c      	lsls	r4, r3, #18
 80015b6:	230a      	movs	r3, #10
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	8819      	ldrh	r1, [r3, #0]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	2390      	movs	r3, #144	; 0x90
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	0023      	movs	r3, r4
 80015c6:	f000 faa9 	bl	8001b1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80015ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	0013      	movs	r3, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	f000 f98e 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e086      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	1c59      	adds	r1, r3, #1
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6251      	str	r1, [r2, #36]	; 0x24
 80015f4:	b2c2      	uxtb	r2, r0
 80015f6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	2b00      	cmp	r3, #0
 8001618:	d13b      	bne.n	8001692 <HAL_I2C_Mem_Read+0x212>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d036      	beq.n	8001692 <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	0013      	movs	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	f000 f961 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e059      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d911      	bls.n	800166c <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	22ff      	movs	r2, #255	; 0xff
 800164c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	b2da      	uxtb	r2, r3
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	045c      	lsls	r4, r3, #17
 8001658:	230a      	movs	r3, #10
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	8819      	ldrh	r1, [r3, #0]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	0023      	movs	r3, r4
 8001666:	f000 fa59 	bl	8001b1c <I2C_TransferConfig>
 800166a:	e012      	b.n	8001692 <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167a:	b2da      	uxtb	r2, r3
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	049c      	lsls	r4, r3, #18
 8001680:	230a      	movs	r3, #10
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	8819      	ldrh	r1, [r3, #0]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	0023      	movs	r3, r4
 800168e:	f000 fa45 	bl	8001b1c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d196      	bne.n	80015ca <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f9a0 	bl	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d007      	beq.n	80016bc <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d101      	bne.n	80016b8 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e01c      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e01a      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2220      	movs	r2, #32
 80016c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	490b      	ldr	r1, [pc, #44]	; (80016fc <HAL_I2C_Mem_Read+0x27c>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2241      	movs	r2, #65	; 0x41
 80016d8:	2120      	movs	r1, #32
 80016da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2242      	movs	r2, #66	; 0x42
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b007      	add	sp, #28
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	fe00e800 	.word	0xfe00e800

08001700 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	000c      	movs	r4, r1
 800170a:	0010      	movs	r0, r2
 800170c:	0019      	movs	r1, r3
 800170e:	250a      	movs	r5, #10
 8001710:	197b      	adds	r3, r7, r5
 8001712:	1c22      	adds	r2, r4, #0
 8001714:	801a      	strh	r2, [r3, #0]
 8001716:	2308      	movs	r3, #8
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	1dbb      	adds	r3, r7, #6
 8001720:	1c0a      	adds	r2, r1, #0
 8001722:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001724:	1dbb      	adds	r3, r7, #6
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	045c      	lsls	r4, r3, #17
 800172e:	197b      	adds	r3, r7, r5
 8001730:	8819      	ldrh	r1, [r3, #0]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	019b      	lsls	r3, r3, #6
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	0023      	movs	r3, r4
 800173c:	f000 f9ee 	bl	8001b1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	6a39      	ldr	r1, [r7, #32]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f90f 	bl	800196a <I2C_WaitOnTXISFlagUntilTimeout>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d007      	beq.n	8001760 <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	2b04      	cmp	r3, #4
 8001756:	d101      	bne.n	800175c <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e03b      	b.n	80017d4 <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e039      	b.n	80017d4 <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001760:	1dbb      	adds	r3, r7, #6
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001768:	2308      	movs	r3, #8
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
 8001776:	e01f      	b.n	80017b8 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001778:	2308      	movs	r3, #8
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178c:	6a39      	ldr	r1, [r7, #32]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0018      	movs	r0, r3
 8001792:	f000 f8ea 	bl	800196a <I2C_WaitOnTXISFlagUntilTimeout>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d007      	beq.n	80017aa <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d101      	bne.n	80017a6 <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e016      	b.n	80017d4 <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e014      	b.n	80017d4 <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017aa:	2308      	movs	r3, #8
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0013      	movs	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	f000 f897 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	1e03      	subs	r3, r0, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e000      	b.n	80017d4 <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b004      	add	sp, #16
 80017da:	bdb0      	pop	{r4, r5, r7, pc}

080017dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	000c      	movs	r4, r1
 80017e6:	0010      	movs	r0, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	250a      	movs	r5, #10
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	1c22      	adds	r2, r4, #0
 80017f0:	801a      	strh	r2, [r3, #0]
 80017f2:	2308      	movs	r3, #8
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	1c02      	adds	r2, r0, #0
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	1c0a      	adds	r2, r1, #0
 80017fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001800:	1dbb      	adds	r3, r7, #6
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	197b      	adds	r3, r7, r5
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	019b      	lsls	r3, r3, #6
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	f000 f982 	bl	8001b1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f8a3 	bl	800196a <I2C_WaitOnTXISFlagUntilTimeout>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d007      	beq.n	8001838 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	2b04      	cmp	r3, #4
 800182e:	d101      	bne.n	8001834 <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e03b      	b.n	80018ac <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e039      	b.n	80018ac <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001838:	1dbb      	adds	r3, r7, #6
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001840:	2308      	movs	r3, #8
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
 800184e:	e01f      	b.n	8001890 <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001850:	2308      	movs	r3, #8
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f87e 	bl	800196a <I2C_WaitOnTXISFlagUntilTimeout>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d007      	beq.n	8001882 <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	2b04      	cmp	r3, #4
 8001878:	d101      	bne.n	800187e <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e016      	b.n	80018ac <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e014      	b.n	80018ac <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001882:	2308      	movs	r3, #8
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001890:	6a3a      	ldr	r2, [r7, #32]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	0013      	movs	r3, r2
 800189a:	2200      	movs	r2, #0
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	f000 f82b 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e000      	b.n	80018ac <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}

080018b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d103      	bne.n	80018d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d007      	beq.n	80018f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	619a      	str	r2, [r3, #24]
  }
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	e01b      	b.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	d018      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001916:	f7fe ff8f 	bl	8000838 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d20d      	bcs.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2120      	movs	r1, #32
 800192c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2242      	movs	r2, #66	; 0x42
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	2100      	movs	r1, #0
 800193c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e00f      	b.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	4013      	ands	r3, r2
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	425a      	negs	r2, r3
 8001952:	4153      	adcs	r3, r2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	001a      	movs	r2, r3
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d0d4      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}

0800196a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001976:	e02b      	b.n	80019d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0018      	movs	r0, r3
 8001980:	f000 f86e 	bl	8001a60 <I2C_IsAcknowledgeFailed>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e029      	b.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3301      	adds	r3, #1
 8001990:	d01e      	beq.n	80019d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001998:	f7fe ff4e 	bl	8000838 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d213      	bcs.n	80019d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	2220      	movs	r2, #32
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2241      	movs	r2, #65	; 0x41
 80019b8:	2120      	movs	r1, #32
 80019ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2242      	movs	r2, #66	; 0x42
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e007      	b.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d1cc      	bne.n	8001978 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f4:	e028      	b.n	8001a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f82f 	bl	8001a60 <I2C_IsAcknowledgeFailed>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e026      	b.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a10:	f7fe ff12 	bl	8000838 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d213      	bcs.n	8001a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	2220      	movs	r2, #32
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2241      	movs	r2, #65	; 0x41
 8001a30:	2120      	movs	r1, #32
 8001a32:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2242      	movs	r2, #66	; 0x42
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e007      	b.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d1cf      	bne.n	80019f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2210      	movs	r2, #16
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d148      	bne.n	8001b0c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a7a:	e01b      	b.n	8001ab4 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	d018      	beq.n	8001ab4 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <I2C_IsAcknowledgeFailed+0x38>
 8001a88:	f7fe fed6 	bl	8000838 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d20d      	bcs.n	8001ab4 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2241      	movs	r2, #65	; 0x41
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2242      	movs	r2, #66	; 0x42
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	2100      	movs	r1, #0
 8001aae:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e02c      	b.n	8001b0e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2220      	movs	r2, #32
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d1dc      	bne.n	8001a7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff feed 	bl	80018b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <I2C_IsAcknowledgeFailed+0xb8>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2204      	movs	r2, #4
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2241      	movs	r2, #65	; 0x41
 8001af4:	2120      	movs	r1, #32
 8001af6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2242      	movs	r2, #66	; 0x42
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	fe00e800 	.word	0xfe00e800

08001b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	0008      	movs	r0, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	240a      	movs	r4, #10
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	1c02      	adds	r2, r0, #0
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	2009      	movs	r0, #9
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	1c0a      	adds	r2, r1, #0
 8001b38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <I2C_TransferConfig+0x68>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	059b      	lsls	r3, r3, #22
 8001b54:	0d9a      	lsrs	r2, r3, #22
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	0419      	lsls	r1, r3, #16
 8001b5c:	23ff      	movs	r3, #255	; 0xff
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	400b      	ands	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	605a      	str	r2, [r3, #4]
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b007      	add	sp, #28
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	fc009800 	.word	0xfc009800

08001b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2241      	movs	r2, #65	; 0x41
 8001b96:	5c9b      	ldrb	r3, [r3, r2]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d138      	bne.n	8001c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e032      	b.n	8001c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2241      	movs	r2, #65	; 0x41
 8001bb8:	2124      	movs	r1, #36	; 0x24
 8001bba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4911      	ldr	r1, [pc, #68]	; (8001c1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	2120      	movs	r1, #32
 8001c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	ffffefff 	.word	0xffffefff

08001c20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2241      	movs	r2, #65	; 0x41
 8001c32:	5c9b      	ldrb	r3, [r3, r2]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d139      	bne.n	8001cae <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2240      	movs	r2, #64	; 0x40
 8001c3e:	5c9b      	ldrb	r3, [r3, r2]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e033      	b.n	8001cb0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2241      	movs	r2, #65	; 0x41
 8001c54:	2124      	movs	r1, #36	; 0x24
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2101      	movs	r1, #1
 8001c64:	438a      	bics	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2241      	movs	r2, #65	; 0x41
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2240      	movs	r2, #64	; 0x40
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	fffff0ff 	.word	0xfffff0ff

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d100      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x18>
 8001cd2:	e08d      	b.n	8001df0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cd4:	4bc3      	ldr	r3, [pc, #780]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d00e      	beq.n	8001cfe <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce0:	4bc0      	ldr	r3, [pc, #768]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d116      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
 8001cec:	4bbd      	ldr	r3, [pc, #756]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10d      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	4bb9      	ldr	r3, [pc, #740]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x50>
 8001d0a:	e070      	b.n	8001dee <HAL_RCC_OscConfig+0x132>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d000      	beq.n	8001d16 <HAL_RCC_OscConfig+0x5a>
 8001d14:	e06b      	b.n	8001dee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e2b6      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_OscConfig+0x76>
 8001d22:	4bb0      	ldr	r3, [pc, #704]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4baf      	ldr	r3, [pc, #700]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0249      	lsls	r1, r1, #9
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e02f      	b.n	8001d92 <HAL_RCC_OscConfig+0xd6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x98>
 8001d3a:	4baa      	ldr	r3, [pc, #680]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4ba9      	ldr	r3, [pc, #676]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d40:	49a9      	ldr	r1, [pc, #676]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	4ba7      	ldr	r3, [pc, #668]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba6      	ldr	r3, [pc, #664]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d4c:	49a7      	ldr	r1, [pc, #668]	; (8001fec <HAL_RCC_OscConfig+0x330>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e01e      	b.n	8001d92 <HAL_RCC_OscConfig+0xd6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10e      	bne.n	8001d7a <HAL_RCC_OscConfig+0xbe>
 8001d5c:	4ba1      	ldr	r3, [pc, #644]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4ba0      	ldr	r3, [pc, #640]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	02c9      	lsls	r1, r1, #11
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	4b9e      	ldr	r3, [pc, #632]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0249      	lsls	r1, r1, #9
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0xd6>
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d80:	4999      	ldr	r1, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b96      	ldr	r3, [pc, #600]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001d8c:	4997      	ldr	r1, [pc, #604]	; (8001fec <HAL_RCC_OscConfig+0x330>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fd4d 	bl	8000838 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7fe fd48 	bl	8000838 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e268      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe8>
 8001dc2:	e015      	b.n	8001df0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fd38 	bl	8000838 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dce:	f7fe fd33 	bl	8000838 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e253      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x112>
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_RCC_OscConfig+0x140>
 8001dfa:	e069      	b.n	8001ed0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	220c      	movs	r2, #12
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e06:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x190>
 8001e12:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	025b      	lsls	r3, r3, #9
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b71      	ldr	r3, [pc, #452]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x178>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e229      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	22f8      	movs	r2, #248	; 0xf8
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e041      	b.n	8001ed0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d024      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fcea 	bl	8000838 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe fce5 	bl	8000838 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e205      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f1      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	22f8      	movs	r2, #248	; 0xf8
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00da      	lsls	r2, r3, #3
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e018      	b.n	8001ed0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fcc5 	bl	8000838 <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe fcc0 	bl	8000838 <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1e0      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d1f1      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fca3 	bl	8000838 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe fc9e 	bl	8000838 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1be      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	d0f1      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x23c>
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	438a      	bics	r2, r1
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7fe fc89 	bl	8000838 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fc84 	bl	8000838 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1a4      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d1f1      	bne.n	8001f2c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d100      	bne.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f52:	e0b5      	b.n	80020c0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f54:	2317      	movs	r3, #23
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	055b      	lsls	r3, r3, #21
 8001f64:	4013      	ands	r3, r2
 8001f66:	d111      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0549      	lsls	r1, r1, #21
 8001f72:	430a      	orrs	r2, r1
 8001f74:	61da      	str	r2, [r3, #28]
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	055b      	lsls	r3, r3, #21
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f84:	2317      	movs	r3, #23
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCC_OscConfig+0x334>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d11a      	bne.n	8001fce <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_RCC_OscConfig+0x334>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_RCC_OscConfig+0x334>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0049      	lsls	r1, r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fc47 	bl	8000838 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fc42 	bl	8000838 <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e162      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x334>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x338>
 8001fd6:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_RCC_OscConfig+0x328>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	e035      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	fffeffff 	.word	0xfffeffff
 8001fec:	fffbffff 	.word	0xfffbffff
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x35a>
 8001ffc:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002002:	2101      	movs	r1, #1
 8002004:	438a      	bics	r2, r1
 8002006:	621a      	str	r2, [r3, #32]
 8002008:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800200e:	2104      	movs	r1, #4
 8002010:	438a      	bics	r2, r1
 8002012:	621a      	str	r2, [r3, #32]
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x37c>
 800201e:	4b9c      	ldr	r3, [pc, #624]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002020:	6a1a      	ldr	r2, [r3, #32]
 8002022:	4b9b      	ldr	r3, [pc, #620]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002024:	2104      	movs	r1, #4
 8002026:	430a      	orrs	r2, r1
 8002028:	621a      	str	r2, [r3, #32]
 800202a:	4b99      	ldr	r3, [pc, #612]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	4b98      	ldr	r3, [pc, #608]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	621a      	str	r2, [r3, #32]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
 8002038:	4b95      	ldr	r3, [pc, #596]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	621a      	str	r2, [r3, #32]
 8002044:	4b92      	ldr	r3, [pc, #584]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d014      	beq.n	8002082 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe fbee 	bl	8000838 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e009      	b.n	8002076 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fbe9 	bl	8000838 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a89      	ldr	r2, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x5d8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e108      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x3a6>
 8002080:	e013      	b.n	80020aa <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fbd9 	bl	8000838 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe fbd4 	bl	8000838 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x5d8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0f3      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020ba:	4977      	ldr	r1, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x5dc>)
 80020bc:	400a      	ands	r2, r1
 80020be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2210      	movs	r2, #16
 80020c6:	4013      	ands	r3, r2
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d12a      	bne.n	8002128 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020d2:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d6:	4b6e      	ldr	r3, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020d8:	2104      	movs	r1, #4
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e2:	4b6b      	ldr	r3, [pc, #428]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fba5 	bl	8000838 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020f4:	f7fe fba0 	bl	8000838 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0c0      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002106:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d0f1      	beq.n	80020f4 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	22f8      	movs	r2, #248	; 0xf8
 8002116:	4393      	bics	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	00da      	lsls	r2, r3, #3
 8002120:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002122:	430a      	orrs	r2, r1
 8002124:	635a      	str	r2, [r3, #52]	; 0x34
 8002126:	e034      	b.n	8002192 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	3305      	adds	r3, #5
 800212e:	d111      	bne.n	8002154 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002136:	2104      	movs	r1, #4
 8002138:	438a      	bics	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	22f8      	movs	r2, #248	; 0xf8
 8002142:	4393      	bics	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
 8002152:	e01e      	b.n	8002192 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002154:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800215a:	2104      	movs	r1, #4
 800215c:	430a      	orrs	r2, r1
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002166:	2101      	movs	r1, #1
 8002168:	438a      	bics	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fb64 	bl	8000838 <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002176:	f7fe fb5f 	bl	8000838 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e07f      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d1f1      	bne.n	8002176 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d100      	bne.n	800219c <HAL_RCC_OscConfig+0x4e0>
 800219a:	e074      	b.n	8002286 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	220c      	movs	r2, #12
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d100      	bne.n	80021aa <HAL_RCC_OscConfig+0x4ee>
 80021a8:	e06b      	b.n	8002282 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d14c      	bne.n	800224c <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021b8:	4938      	ldr	r1, [pc, #224]	; (800229c <HAL_RCC_OscConfig+0x5e0>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fb3b 	bl	8000838 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe fb36 	bl	8000838 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e056      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	049b      	lsls	r3, r3, #18
 80021e2:	4013      	ands	r3, r2
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	220f      	movs	r2, #15
 80021ec:	4393      	bics	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x5e4>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	431a      	orrs	r2, r3
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0449      	lsls	r1, r1, #17
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fb09 	bl	8000838 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fb04 	bl	8000838 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e024      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	049b      	lsls	r3, r3, #18
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x570>
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002252:	4912      	ldr	r1, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x5e0>)
 8002254:	400a      	ands	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe faee 	bl	8000838 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fae9 	bl	8000838 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e009      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x5d4>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	049b      	lsls	r3, r3, #18
 800227c:	4013      	ands	r3, r2
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x5a6>
 8002280:	e001      	b.n	8002286 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b006      	add	sp, #24
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	efffffff 	.word	0xefffffff
 800229c:	feffffff 	.word	0xfeffffff
 80022a0:	ffc2ffff 	.word	0xffc2ffff

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d911      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022d2:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b6      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	22f0      	movs	r2, #240	; 0xf0
 80022f4:	4393      	bics	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b58      	ldr	r3, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_ClockConfig+0x6a>
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b52      	ldr	r3, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d114      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e095      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	049b      	lsls	r3, r3, #18
 8002336:	4013      	ands	r3, r2
 8002338:	d108      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e089      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e082      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234c:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7fe fa6a 	bl	8000838 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d111      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	e009      	b.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7fe fa61 	bl	8000838 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e065      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	220c      	movs	r2, #12
 800238c:	4013      	ands	r3, r2
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1ef      	bne.n	8002372 <HAL_RCC_ClockConfig+0xce>
 8002392:	e024      	b.n	80023de <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d11b      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7fe fa4b 	bl	8000838 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e04f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	220c      	movs	r2, #12
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_ClockConfig+0xfa>
 80023be:	e00e      	b.n	80023de <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fa3a 	bl	8000838 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	4a26      	ldr	r2, [pc, #152]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03e      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	220c      	movs	r2, #12
 80023da:	4013      	ands	r3, r2
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4013      	ands	r3, r2
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d211      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4393      	bics	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e020      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	0001      	movs	r1, r0
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	220f      	movs	r2, #15
 800243c:	4013      	ands	r3, r2
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	000a      	movs	r2, r1
 8002444:	40da      	lsrs	r2, r3
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1cc>)
 8002448:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800244a:	2000      	movs	r0, #0
 800244c:	f002 fcce 	bl	8004dec <HAL_InitTick>
  
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	00001388 	.word	0x00001388
 8002468:	fffff8ff 	.word	0xfffff8ff
 800246c:	080061bc 	.word	0x080061bc
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b08f      	sub	sp, #60	; 0x3c
 8002478:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800247a:	2314      	movs	r3, #20
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002480:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002482:	c313      	stmia	r3!, {r0, r1, r4}
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_RCC_GetSysClockFreq+0xbc>)
 800248c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800248e:	c313      	stmia	r3!, {r0, r1, r4}
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	220c      	movs	r2, #12
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d002      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x4a>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d003      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x50>
 80024bc:	e02d      	b.n	800251a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024c2:	e02d      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	220f      	movs	r2, #15
 80024ca:	4013      	ands	r3, r2
 80024cc:	2214      	movs	r2, #20
 80024ce:	18ba      	adds	r2, r7, r2
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	220f      	movs	r2, #15
 80024da:	4013      	ands	r3, r2
 80024dc:	1d3a      	adds	r2, r7, #4
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ee:	4812      	ldr	r0, [pc, #72]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f0:	f7fd fe0a 	bl	8000108 <__udivsi3>
 80024f4:	0003      	movs	r3, r0
 80024f6:	001a      	movs	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	4353      	muls	r3, r2
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
 80024fe:	e009      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002502:	000a      	movs	r2, r1
 8002504:	0152      	lsls	r2, r2, #5
 8002506:	1a52      	subs	r2, r2, r1
 8002508:	0193      	lsls	r3, r2, #6
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	185b      	adds	r3, r3, r1
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800251e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b00f      	add	sp, #60	; 0x3c
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	08006054 	.word	0x08006054
 8002530:	08006064 	.word	0x08006064
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_RCC_GetHCLKFreq+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002554:	f7ff fff2 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002558:	0001      	movs	r1, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	2207      	movs	r2, #7
 8002562:	4013      	ands	r3, r2
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	40d9      	lsrs	r1, r3
 800256a:	000b      	movs	r3, r1
}    
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40021000 	.word	0x40021000
 8002578:	080061cc 	.word	0x080061cc

0800257c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_RCC_GetClockConfig+0x4c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_GetClockConfig+0x4c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	22f0      	movs	r2, #240	; 0xf0
 800259e:	401a      	ands	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_GetClockConfig+0x4c>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	23e0      	movs	r3, #224	; 0xe0
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetClockConfig+0x50>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	401a      	ands	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	025b      	lsls	r3, r3, #9
 80025e8:	4013      	ands	r3, r2
 80025ea:	d100      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025ec:	e08f      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2317      	movs	r3, #23
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	055b      	lsls	r3, r3, #21
 80025fe:	4013      	ands	r3, r2
 8002600:	d111      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b54      	ldr	r3, [pc, #336]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0549      	lsls	r1, r1, #21
 800260c:	430a      	orrs	r2, r1
 800260e:	61da      	str	r2, [r3, #28]
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	055b      	lsls	r3, r3, #21
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2317      	movs	r3, #23
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4013      	ands	r3, r2
 8002630:	d11a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0049      	lsls	r1, r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002640:	f7fe f8fa 	bl	8000838 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe f8f5 	bl	8000838 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	; 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e077      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d0f0      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002668:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	23c0      	movs	r3, #192	; 0xc0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d034      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	429a      	cmp	r2, r3
 8002688:	d02c      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a33      	ldr	r2, [pc, #204]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0249      	lsls	r1, r1, #9
 800269e:	430a      	orrs	r2, r1
 80026a0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026a8:	492d      	ldr	r1, [pc, #180]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe f8bc 	bl	8000838 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e009      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe f8b7 	bl	8000838 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e038      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a1c      	ldr	r2, [pc, #112]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f8:	2317      	movs	r3, #23
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002708:	4917      	ldr	r1, [pc, #92]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800270a:	400a      	ands	r2, r1
 800270c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	2203      	movs	r2, #3
 800271e:	4393      	bics	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002728:	430a      	orrs	r2, r1
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2220      	movs	r2, #32
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2210      	movs	r2, #16
 800273c:	4393      	bics	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002746:	430a      	orrs	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b006      	add	sp, #24
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
 800275c:	fffffcff 	.word	0xfffffcff
 8002760:	fffeffff 	.word	0xfffeffff
 8002764:	00001388 	.word	0x00001388
 8002768:	efffffff 	.word	0xefffffff

0800276c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08a      	b.n	8002894 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	225d      	movs	r2, #93	; 0x5d
 8002788:	5c9b      	ldrb	r3, [r3, r2]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	225c      	movs	r2, #92	; 0x5c
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f002 f9f4 	bl	8004b88 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	225d      	movs	r2, #93	; 0x5d
 80027a4:	2102      	movs	r1, #2
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2140      	movs	r1, #64	; 0x40
 80027b4:	438a      	bics	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	23e0      	movs	r3, #224	; 0xe0
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d902      	bls.n	80027ca <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e002      	b.n	80027d0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	23f0      	movs	r3, #240	; 0xf0
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	429a      	cmp	r2, r3
 80027da:	d008      	beq.n	80027ee <HAL_SPI_Init+0x82>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	23e0      	movs	r3, #224	; 0xe0
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d002      	beq.n	80027ee <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	23e0      	movs	r3, #224	; 0xe0
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	429a      	cmp	r2, r3
 8002800:	d903      	bls.n	800280a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
 8002808:	e002      	b.n	8002810 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	400b      	ands	r3, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	431a      	orrs	r2, r3
 800283e:	0011      	movs	r1, r2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	2204      	movs	r2, #4
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	431a      	orrs	r2, r3
 8002868:	0011      	movs	r1, r2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4907      	ldr	r1, [pc, #28]	; (800289c <HAL_SPI_Init+0x130>)
 8002880:	400a      	ands	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	225d      	movs	r2, #93	; 0x5d
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	fffff7ff 	.word	0xfffff7ff

080028a0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e01e      	b.n	80028f0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223d      	movs	r2, #61	; 0x3d
 80028b6:	5c9b      	ldrb	r3, [r3, r2]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	223c      	movs	r2, #60	; 0x3c
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f815 	bl	80028f8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	223d      	movs	r2, #61	; 0x3d
 80028d2:	2102      	movs	r1, #2
 80028d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f000 f961 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223d      	movs	r2, #61	; 0x3d
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2202      	movs	r2, #2
 800294a:	4013      	ands	r3, r2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d124      	bne.n	800299a <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11d      	bne.n	800299a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2203      	movs	r2, #3
 8002964:	4252      	negs	r2, r2
 8002966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f8fa 	bl	8002b76 <HAL_TIM_IC_CaptureCallback>
 8002982:	e007      	b.n	8002994 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 f8ed 	bl	8002b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f8f9 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2204      	movs	r2, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d125      	bne.n	80029f4 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2204      	movs	r2, #4
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d11e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2205      	movs	r2, #5
 80029bc:	4252      	negs	r2, r2
 80029be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	23c0      	movs	r3, #192	; 0xc0
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f8cd 	bl	8002b76 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e007      	b.n	80029ee <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f8c0 	bl	8002b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f8cc 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2208      	movs	r2, #8
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d124      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d11d      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2209      	movs	r2, #9
 8002a16:	4252      	negs	r2, r2
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2203      	movs	r2, #3
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f8a1 	bl	8002b76 <HAL_TIM_IC_CaptureCallback>
 8002a34:	e007      	b.n	8002a46 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f894 	bl	8002b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f8a0 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2210      	movs	r2, #16
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d125      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11e      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2211      	movs	r2, #17
 8002a6e:	4252      	negs	r2, r2
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	23c0      	movs	r3, #192	; 0xc0
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f874 	bl	8002b76 <HAL_TIM_IC_CaptureCallback>
 8002a8e:	e007      	b.n	8002aa0 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f867 	bl	8002b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 f873 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4252      	negs	r2, r2
 8002aca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f001 fe94 	bl	80047fc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d10f      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d108      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2281      	movs	r2, #129	; 0x81
 8002af6:	4252      	negs	r2, r2
 8002af8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 f8d3 	bl	8002ca8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d10f      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d108      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2241      	movs	r2, #65	; 0x41
 8002b24:	4252      	negs	r2, r2
 8002b26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f833 	bl	8002b96 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2220      	movs	r2, #32
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d10f      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d108      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2221      	movs	r2, #33	; 0x21
 8002b52:	4252      	negs	r2, r2
 8002b54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f89d 	bl	8002c98 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b002      	add	sp, #8
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TIM_Base_SetConfig+0xd4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x24>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <TIM_Base_SetConfig+0xd8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2270      	movs	r2, #112	; 0x70
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TIM_Base_SetConfig+0xd4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <TIM_Base_SetConfig+0x66>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <TIM_Base_SetConfig+0xd8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x66>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <TIM_Base_SetConfig+0xdc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x66>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <TIM_Base_SetConfig+0xe0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x66>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <TIM_Base_SetConfig+0xe4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x66>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <TIM_Base_SetConfig+0xe8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a20      	ldr	r2, [pc, #128]	; (8002c94 <TIM_Base_SetConfig+0xec>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	4393      	bics	r3, r2
 8002c26:	001a      	movs	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <TIM_Base_SetConfig+0xd4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0xbe>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <TIM_Base_SetConfig+0xe0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0xbe>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <TIM_Base_SetConfig+0xe4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0xbe>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <TIM_Base_SetConfig+0xe8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d103      	bne.n	8002c6e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	615a      	str	r2, [r3, #20]
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40002000 	.word	0x40002000
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800
 8002c94:	fffffcff 	.word	0xfffffcff

08002c98 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e047      	b.n	8002d5a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2269      	movs	r2, #105	; 0x69
 8002cce:	5c9b      	ldrb	r3, [r3, r2]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2268      	movs	r2, #104	; 0x68
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f001 ff9d 	bl	8004c20 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2269      	movs	r2, #105	; 0x69
 8002cea:	2124      	movs	r1, #36	; 0x24
 8002cec:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 faef 	bl	80032e4 <UART_SetConfig>
 8002d06:	0003      	movs	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e024      	b.n	8002d5a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fc58 	bl	80035d0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_UART_Init+0xac>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fcf0 	bl	8003738 <UART_CheckIdleState>
 8002d58:	0003      	movs	r3, r0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	fffff7ff 	.word	0xfffff7ff

08002d68 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	1dbb      	adds	r3, r7, #6
 8002d76:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2269      	movs	r2, #105	; 0x69
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d000      	beq.n	8002d8a <HAL_UART_Transmit+0x22>
 8002d88:	e08c      	b.n	8002ea4 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_UART_Transmit+0x30>
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e084      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d109      	bne.n	8002dbc <HAL_UART_Transmit+0x54>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e074      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2268      	movs	r2, #104	; 0x68
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Transmit+0x62>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e06d      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2268      	movs	r2, #104	; 0x68
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2269      	movs	r2, #105	; 0x69
 8002ddc:	2121      	movs	r1, #33	; 0x21
 8002dde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002de0:	f7fd fd2a 	bl	8000838 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1dba      	adds	r2, r7, #6
 8002dec:	2150      	movs	r1, #80	; 0x50
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1dba      	adds	r2, r7, #6
 8002df6:	2152      	movs	r1, #82	; 0x52
 8002df8:	8812      	ldrh	r2, [r2, #0]
 8002dfa:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8002dfc:	e035      	b.n	8002e6a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2252      	movs	r2, #82	; 0x52
 8002e02:	5a9b      	ldrh	r3, [r3, r2]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b299      	uxth	r1, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2252      	movs	r2, #82	; 0x52
 8002e0e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	0013      	movs	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	f000 fca3 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e03d      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d111      	bne.n	8002e5a <HAL_UART_Transmit+0xf2>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	05d2      	lsls	r2, r2, #23
 8002e4c:	0dd2      	lsrs	r2, r2, #23
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3302      	adds	r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e007      	b.n	8002e6a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	60ba      	str	r2, [r7, #8]
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b292      	uxth	r2, r2
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2252      	movs	r2, #82	; 0x52
 8002e6e:	5a9b      	ldrh	r3, [r3, r2]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c3      	bne.n	8002dfe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	0013      	movs	r3, r2
 8002e80:	2200      	movs	r2, #0
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	f000 fc70 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00a      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2269      	movs	r2, #105	; 0x69
 8002e94:	2120      	movs	r1, #32
 8002e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2268      	movs	r2, #104	; 0x68
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b006      	add	sp, #24
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	1dbb      	adds	r3, r7, #6
 8002ebc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2269      	movs	r2, #105	; 0x69
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d166      	bne.n	8002f98 <HAL_UART_Transmit_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_UART_Transmit_DMA+0x28>
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e05e      	b.n	8002f9a <HAL_UART_Transmit_DMA+0xea>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy into TDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	015b      	lsls	r3, r3, #5
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d109      	bne.n	8002efc <HAL_UART_Transmit_DMA+0x4c>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_UART_Transmit_DMA+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e04e      	b.n	8002f9a <HAL_UART_Transmit_DMA+0xea>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2268      	movs	r2, #104	; 0x68
 8002f00:	5c9b      	ldrb	r3, [r3, r2]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Transmit_DMA+0x5a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e047      	b.n	8002f9a <HAL_UART_Transmit_DMA+0xea>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2268      	movs	r2, #104	; 0x68
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1dba      	adds	r2, r7, #6
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1dba      	adds	r2, r7, #6
 8002f26:	2152      	movs	r1, #82	; 0x52
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2269      	movs	r2, #105	; 0x69
 8002f36:	2121      	movs	r1, #33	; 0x21
 8002f38:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_UART_Transmit_DMA+0xf4>)
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_UART_Transmit_DMA+0xf8>)
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_UART_Transmit_DMA+0xfc>)
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	2200      	movs	r2, #0
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	0019      	movs	r1, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	1dbb      	adds	r3, r7, #6
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f7fd fd88 	bl	8000a84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2240      	movs	r2, #64	; 0x40
 8002f7a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2268      	movs	r2, #104	; 0x68
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	08003865 	.word	0x08003865
 8002fa8:	080038b9 	.word	0x080038b9
 8002fac:	08003967 	.word	0x08003967

08002fb0 <HAL_UART_Receive_DMA>:
  *         (as received data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	1dbb      	adds	r3, r7, #6
 8002fbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	226a      	movs	r2, #106	; 0x6a
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d000      	beq.n	8002fcc <HAL_UART_Receive_DMA+0x1c>
 8002fca:	e06e      	b.n	80030aa <HAL_UART_Receive_DMA+0xfa>
  {
    if((pData == NULL ) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_Receive_DMA+0x2a>
 8002fd2:	1dbb      	adds	r3, r7, #6
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Receive_DMA+0x2e>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e066      	b.n	80030ac <HAL_UART_Receive_DMA+0xfc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy from RDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	015b      	lsls	r3, r3, #5
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d109      	bne.n	8002ffe <HAL_UART_Receive_DMA+0x4e>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <HAL_UART_Receive_DMA+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d001      	beq.n	8002ffe <HAL_UART_Receive_DMA+0x4e>
      {
        return  HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e056      	b.n	80030ac <HAL_UART_Receive_DMA+0xfc>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2268      	movs	r2, #104	; 0x68
 8003002:	5c9b      	ldrb	r3, [r3, r2]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_UART_Receive_DMA+0x5c>
 8003008:	2302      	movs	r3, #2
 800300a:	e04f      	b.n	80030ac <HAL_UART_Receive_DMA+0xfc>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2268      	movs	r2, #104	; 0x68
 8003010:	2101      	movs	r1, #1
 8003012:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1dba      	adds	r2, r7, #6
 800301e:	2158      	movs	r1, #88	; 0x58
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	226a      	movs	r2, #106	; 0x6a
 800302e:	2122      	movs	r1, #34	; 0x22
 8003030:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003036:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_UART_Receive_DMA+0x104>)
 8003038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_UART_Receive_DMA+0x108>)
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003046:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_UART_Receive_DMA+0x10c>)
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	0019      	movs	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	001a      	movs	r2, r3
 8003064:	1dbb      	adds	r3, r7, #6
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	f7fd fd0c 	bl	8000a84 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2268      	movs	r2, #104	; 0x68
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	0049      	lsls	r1, r1, #1
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	080038d9 	.word	0x080038d9
 80030b8:	08003949 	.word	0x08003949
 80030bc:	08003967 	.word	0x08003967

080030c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	220f      	movs	r2, #15
 80030dc:	4013      	ands	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4013      	ands	r3, r2
 80030ec:	d008      	beq.n	8003100 <HAL_UART_IRQHandler+0x40>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2220      	movs	r2, #32
 80030f2:	4013      	ands	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fcf9 	bl	8003af0 <UART_Receive_IT>
      return;
 80030fe:	e0d3      	b.n	80032a8 <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d100      	bne.n	8003110 <HAL_UART_IRQHandler+0x50>
 800310e:	e0af      	b.n	8003270 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d105      	bne.n	8003124 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	2390      	movs	r3, #144	; 0x90
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d100      	bne.n	8003124 <HAL_UART_IRQHandler+0x64>
 8003122:	e0a5      	b.n	8003270 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2201      	movs	r2, #1
 8003128:	4013      	ands	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_UART_IRQHandler+0x8a>
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4013      	ands	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003142:	2201      	movs	r2, #1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2202      	movs	r2, #2
 8003160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003166:	2204      	movs	r2, #4
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2204      	movs	r2, #4
 8003172:	4013      	ands	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2204      	movs	r2, #4
 8003184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318a:	2202      	movs	r2, #2
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2208      	movs	r2, #8
 8003196:	4013      	ands	r3, r2
 8003198:	d011      	beq.n	80031be <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2220      	movs	r2, #32
 800319e:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80031a0:	d103      	bne.n	80031aa <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2208      	movs	r2, #8
 80031b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b6:	2208      	movs	r2, #8
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <HAL_UART_IRQHandler+0x108>
 80031c6:	e06e      	b.n	80032a6 <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d007      	beq.n	80031e0 <HAL_UART_IRQHandler+0x120>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2220      	movs	r2, #32
 80031d4:	4013      	ands	r3, r2
 80031d6:	d003      	beq.n	80031e0 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fc88 	bl	8003af0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	d105      	bne.n	80031f6 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80031f4:	d032      	beq.n	800325c <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fb15 	bl	8003828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	d023      	beq.n	8003252 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	438a      	bics	r2, r1
 8003218:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_UART_IRQHandler+0x1f0>)
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322e:	0018      	movs	r0, r3
 8003230:	f7fd fc8e 	bl	8000b50 <HAL_DMA_Abort_IT>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d019      	beq.n	800326c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800323c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003242:	0018      	movs	r0, r3
 8003244:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	e011      	b.n	800326c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f842 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00c      	b.n	800326c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 f83d 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325a:	e007      	b.n	800326c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f838 	bl	80032d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800326a:	e01c      	b.n	80032a6 <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	46c0      	nop			; (mov r8, r8)
    return;
 800326e:	e01a      	b.n	80032a6 <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	4013      	ands	r3, r2
 8003276:	d008      	beq.n	800328a <HAL_UART_IRQHandler+0x1ca>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	4013      	ands	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fbc3 	bl	8003a0e <UART_Transmit_IT>
    return;
 8003288:	e00e      	b.n	80032a8 <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2240      	movs	r2, #64	; 0x40
 800328e:	4013      	ands	r3, r2
 8003290:	d00a      	beq.n	80032a8 <HAL_UART_IRQHandler+0x1e8>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	4013      	ands	r3, r2
 8003298:	d006      	beq.n	80032a8 <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 fc0d 	bl	8003abc <UART_EndTransmit_IT>
    return;
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	e000      	b.n	80032a8 <HAL_UART_IRQHandler+0x1e8>
    return;
 80032a6:	46c0      	nop			; (mov r8, r8)
  }

}
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	080039e1 	.word	0x080039e1

080032b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80032f0:	2317      	movs	r3, #23
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2210      	movs	r2, #16
 80032f6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80032f8:	230a      	movs	r3, #10
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8003300:	2314      	movs	r3, #20
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2200      	movs	r2, #0
 8003306:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003308:	2313      	movs	r3, #19
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4aa0      	ldr	r2, [pc, #640]	; (80035b0 <UART_SetConfig+0x2cc>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a9b      	ldr	r2, [pc, #620]	; (80035b4 <UART_SetConfig+0x2d0>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a93      	ldr	r2, [pc, #588]	; (80035b8 <UART_SetConfig+0x2d4>)
 800336a:	4013      	ands	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a8f      	ldr	r2, [pc, #572]	; (80035bc <UART_SetConfig+0x2d8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d125      	bne.n	80033ce <UART_SetConfig+0xea>
 8003382:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <UART_SetConfig+0x2dc>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	2203      	movs	r2, #3
 8003388:	4013      	ands	r3, r2
 800338a:	2b01      	cmp	r3, #1
 800338c:	d00f      	beq.n	80033ae <UART_SetConfig+0xca>
 800338e:	d304      	bcc.n	800339a <UART_SetConfig+0xb6>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d011      	beq.n	80033b8 <UART_SetConfig+0xd4>
 8003394:	2b03      	cmp	r3, #3
 8003396:	d005      	beq.n	80033a4 <UART_SetConfig+0xc0>
 8003398:	e013      	b.n	80033c2 <UART_SetConfig+0xde>
 800339a:	2317      	movs	r3, #23
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e022      	b.n	80033ea <UART_SetConfig+0x106>
 80033a4:	2317      	movs	r3, #23
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e01d      	b.n	80033ea <UART_SetConfig+0x106>
 80033ae:	2317      	movs	r3, #23
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2204      	movs	r2, #4
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e018      	b.n	80033ea <UART_SetConfig+0x106>
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2208      	movs	r2, #8
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e013      	b.n	80033ea <UART_SetConfig+0x106>
 80033c2:	2317      	movs	r3, #23
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2210      	movs	r2, #16
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	e00d      	b.n	80033ea <UART_SetConfig+0x106>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <UART_SetConfig+0x2e0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xfe>
 80033d8:	2317      	movs	r3, #23
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0x106>
 80033e2:	2317      	movs	r3, #23
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2210      	movs	r2, #16
 80033e8:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d000      	beq.n	80033f8 <UART_SetConfig+0x114>
 80033f6:	e077      	b.n	80034e8 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 80033f8:	2317      	movs	r3, #23
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d01c      	beq.n	800343c <UART_SetConfig+0x158>
 8003402:	dc02      	bgt.n	800340a <UART_SetConfig+0x126>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <UART_SetConfig+0x130>
 8003408:	e04f      	b.n	80034aa <UART_SetConfig+0x1c6>
 800340a:	2b04      	cmp	r3, #4
 800340c:	d027      	beq.n	800345e <UART_SetConfig+0x17a>
 800340e:	2b08      	cmp	r3, #8
 8003410:	d039      	beq.n	8003486 <UART_SetConfig+0x1a2>
 8003412:	e04a      	b.n	80034aa <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003414:	f7ff f89c 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003418:	0003      	movs	r3, r0
 800341a:	005a      	lsls	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	18d2      	adds	r2, r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0019      	movs	r1, r3
 800342a:	0010      	movs	r0, r2
 800342c:	f7fc fe6c 	bl	8000108 <__udivsi3>
 8003430:	0003      	movs	r3, r0
 8003432:	001a      	movs	r2, r3
 8003434:	2314      	movs	r3, #20
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	801a      	strh	r2, [r3, #0]
        break;
 800343a:	e03b      	b.n	80034b4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	4a61      	ldr	r2, [pc, #388]	; (80035c8 <UART_SetConfig+0x2e4>)
 8003444:	189a      	adds	r2, r3, r2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f7fc fe5b 	bl	8000108 <__udivsi3>
 8003452:	0003      	movs	r3, r0
 8003454:	001a      	movs	r2, r3
 8003456:	2314      	movs	r3, #20
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	801a      	strh	r2, [r3, #0]
        break;
 800345c:	e02a      	b.n	80034b4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800345e:	f7ff f809 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8003462:	0003      	movs	r3, r0
 8003464:	005a      	lsls	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	18d2      	adds	r2, r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	0019      	movs	r1, r3
 8003474:	0010      	movs	r0, r2
 8003476:	f7fc fe47 	bl	8000108 <__udivsi3>
 800347a:	0003      	movs	r3, r0
 800347c:	001a      	movs	r2, r3
 800347e:	2314      	movs	r3, #20
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	801a      	strh	r2, [r3, #0]
        break;
 8003484:	e016      	b.n	80034b4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	0252      	lsls	r2, r2, #9
 8003490:	189a      	adds	r2, r3, r2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0019      	movs	r1, r3
 8003498:	0010      	movs	r0, r2
 800349a:	f7fc fe35 	bl	8000108 <__udivsi3>
 800349e:	0003      	movs	r3, r0
 80034a0:	001a      	movs	r2, r3
 80034a2:	2314      	movs	r3, #20
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	801a      	strh	r2, [r3, #0]
        break;
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80034aa:	2313      	movs	r3, #19
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
        break;
 80034b2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80034b4:	200a      	movs	r0, #10
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	2414      	movs	r4, #20
 80034ba:	193a      	adds	r2, r7, r4
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	210f      	movs	r1, #15
 80034c0:	438a      	bics	r2, r1
 80034c2:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	105b      	asrs	r3, r3, #1
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2207      	movs	r2, #7
 80034ce:	4013      	ands	r3, r2
 80034d0:	b299      	uxth	r1, r3
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	183a      	adds	r2, r7, r0
 80034d6:	8812      	ldrh	r2, [r2, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	183a      	adds	r2, r7, r0
 80034e2:	8812      	ldrh	r2, [r2, #0]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e05b      	b.n	80035a0 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 80034e8:	2317      	movs	r3, #23
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d01b      	beq.n	800352a <UART_SetConfig+0x246>
 80034f2:	dc02      	bgt.n	80034fa <UART_SetConfig+0x216>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <UART_SetConfig+0x220>
 80034f8:	e04d      	b.n	8003596 <UART_SetConfig+0x2b2>
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d026      	beq.n	800354c <UART_SetConfig+0x268>
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d037      	beq.n	8003572 <UART_SetConfig+0x28e>
 8003502:	e048      	b.n	8003596 <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003504:	f7ff f824 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003508:	0002      	movs	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	18d2      	adds	r2, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0019      	movs	r1, r3
 8003518:	0010      	movs	r0, r2
 800351a:	f7fc fdf5 	bl	8000108 <__udivsi3>
 800351e:	0003      	movs	r3, r0
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
        break;
 8003528:	e03a      	b.n	80035a0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	4a26      	ldr	r2, [pc, #152]	; (80035cc <UART_SetConfig+0x2e8>)
 8003532:	189a      	adds	r2, r3, r2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0019      	movs	r1, r3
 800353a:	0010      	movs	r0, r2
 800353c:	f7fc fde4 	bl	8000108 <__udivsi3>
 8003540:	0003      	movs	r3, r0
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60da      	str	r2, [r3, #12]
        break;
 800354a:	e029      	b.n	80035a0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800354c:	f7fe ff92 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8003550:	0002      	movs	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	18d2      	adds	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	0019      	movs	r1, r3
 8003560:	0010      	movs	r0, r2
 8003562:	f7fc fdd1 	bl	8000108 <__udivsi3>
 8003566:	0003      	movs	r3, r0
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
        break;
 8003570:	e016      	b.n	80035a0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	0212      	lsls	r2, r2, #8
 800357c:	189a      	adds	r2, r3, r2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0019      	movs	r1, r3
 8003584:	0010      	movs	r0, r2
 8003586:	f7fc fdbf 	bl	8000108 <__udivsi3>
 800358a:	0003      	movs	r3, r0
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        break;
 8003594:	e004      	b.n	80035a0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003596:	2313      	movs	r3, #19
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
        break;
 800359e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80035a0:	2313      	movs	r3, #19
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]

}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b007      	add	sp, #28
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	ffff69f3 	.word	0xffff69f3
 80035b4:	ffffcfff 	.word	0xffffcfff
 80035b8:	fffff4ff 	.word	0xfffff4ff
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40004400 	.word	0x40004400
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d00b      	beq.n	80035fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a4a      	ldr	r2, [pc, #296]	; (8003714 <UART_AdvFeatureConfig+0x144>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d00b      	beq.n	800361c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a43      	ldr	r2, [pc, #268]	; (8003718 <UART_AdvFeatureConfig+0x148>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2204      	movs	r2, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d00b      	beq.n	800363e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a3b      	ldr	r2, [pc, #236]	; (800371c <UART_AdvFeatureConfig+0x14c>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2208      	movs	r2, #8
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <UART_AdvFeatureConfig+0x150>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	d00b      	beq.n	8003682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <UART_AdvFeatureConfig+0x154>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2220      	movs	r2, #32
 8003688:	4013      	ands	r3, r2
 800368a:	d00b      	beq.n	80036a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a25      	ldr	r2, [pc, #148]	; (8003728 <UART_AdvFeatureConfig+0x158>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	4013      	ands	r3, r2
 80036ac:	d01d      	beq.n	80036ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <UART_AdvFeatureConfig+0x15c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	035b      	lsls	r3, r3, #13
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d10b      	bne.n	80036ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <UART_AdvFeatureConfig+0x160>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	4013      	ands	r3, r2
 80036f2:	d00b      	beq.n	800370c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <UART_AdvFeatureConfig+0x164>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffdffff 	.word	0xfffdffff
 8003718:	fffeffff 	.word	0xfffeffff
 800371c:	fffbffff 	.word	0xfffbffff
 8003720:	ffff7fff 	.word	0xffff7fff
 8003724:	ffffefff 	.word	0xffffefff
 8003728:	ffffdfff 	.word	0xffffdfff
 800372c:	ffefffff 	.word	0xffefffff
 8003730:	ff9fffff 	.word	0xff9fffff
 8003734:	fff7ffff 	.word	0xfff7ffff

08003738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2269      	movs	r2, #105	; 0x69
 800374a:	2120      	movs	r1, #32
 800374c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	226a      	movs	r2, #106	; 0x6a
 8003752:	2120      	movs	r1, #32
 8003754:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2268      	movs	r2, #104	; 0x68
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003778:	e02b      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	3301      	adds	r3, #1
 800377e:	d028      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003786:	f7fd f857 	bl	8000838 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	429a      	cmp	r2, r3
 8003794:	d21d      	bcs.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <UART_WaitOnFlagUntilTimeout+0x94>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	438a      	bics	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2269      	movs	r2, #105	; 0x69
 80037ba:	2120      	movs	r1, #32
 80037bc:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	226a      	movs	r2, #106	; 0x6a
 80037c2:	2120      	movs	r1, #32
 80037c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2268      	movs	r2, #104	; 0x68
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e00f      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	425a      	negs	r2, r3
 80037e2:	4153      	adcs	r3, r2
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	001a      	movs	r2, r3
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d0c4      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	fffffe5f 	.word	0xfffffe5f

08003800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	21c0      	movs	r1, #192	; 0xc0
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2269      	movs	r2, #105	; 0x69
 800381c:	2120      	movs	r1, #32
 800381e:	5499      	strb	r1, [r3, r2]
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4909      	ldr	r1, [pc, #36]	; (8003860 <UART_EndRxTransfer+0x38>)
 800383c:	400a      	ands	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2101      	movs	r1, #1
 800384c:	438a      	bics	r2, r1
 800384e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	226a      	movs	r2, #106	; 0x6a
 8003854:	2120      	movs	r1, #32
 8003856:	5499      	strb	r1, [r3, r2]
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	fffffedf 	.word	0xfffffedf

08003864 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2220      	movs	r2, #32
 800387a:	4013      	ands	r3, r2
 800387c:	d114      	bne.n	80038a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2252      	movs	r2, #82	; 0x52
 8003882:	2100      	movs	r1, #0
 8003884:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	438a      	bics	r2, r1
 8003894:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80038a6:	e003      	b.n	80038b0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff fd02 	bl	80032b4 <HAL_UART_TxCpltCallback>
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b004      	add	sp, #16
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff fcfb 	bl	80032c4 <HAL_UART_TxHalfCpltCallback>
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b004      	add	sp, #16
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2220      	movs	r2, #32
 80038ee:	4013      	ands	r3, r2
 80038f0:	d11f      	bne.n	8003932 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	225a      	movs	r2, #90	; 0x5a
 80038f6:	2100      	movs	r1, #0
 80038f8:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	490f      	ldr	r1, [pc, #60]	; (8003944 <UART_DMAReceiveCplt+0x6c>)
 8003906:	400a      	ands	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	438a      	bics	r2, r1
 8003918:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	438a      	bics	r2, r1
 8003928:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	226a      	movs	r2, #106	; 0x6a
 800392e:	2120      	movs	r1, #32
 8003930:	5499      	strb	r1, [r3, r2]
  }

  HAL_UART_RxCpltCallback(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 ff41 	bl	80047bc <HAL_UART_RxCpltCallback>
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	fffffeff 	.word	0xfffffeff

08003948 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 ff3f 	bl	80047dc <HAL_UART_RxHalfCpltCallback>
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}

08003966 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2269      	movs	r2, #105	; 0x69
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b21      	cmp	r3, #33	; 0x21
 800397e:	d10d      	bne.n	800399c <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	4013      	ands	r3, r2
 800398a:	d007      	beq.n	800399c <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2252      	movs	r2, #82	; 0x52
 8003990:	2100      	movs	r1, #0
 8003992:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0018      	movs	r0, r3
 8003998:	f7ff ff32 	bl	8003800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	226a      	movs	r2, #106	; 0x6a
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b22      	cmp	r3, #34	; 0x22
 80039a6:	d10d      	bne.n	80039c4 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	4013      	ands	r3, r2
 80039b2:	d007      	beq.n	80039c4 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	225a      	movs	r2, #90	; 0x5a
 80039b8:	2100      	movs	r1, #0
 80039ba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff ff32 	bl	8003828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c8:	2210      	movs	r2, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff fc7e 	bl	80032d4 <HAL_UART_ErrorCallback>
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	225a      	movs	r2, #90	; 0x5a
 80039f2:	2100      	movs	r1, #0
 80039f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2252      	movs	r2, #82	; 0x52
 80039fa:	2100      	movs	r1, #0
 80039fc:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fc67 	bl	80032d4 <HAL_UART_ErrorCallback>
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2269      	movs	r2, #105	; 0x69
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b21      	cmp	r3, #33	; 0x21
 8003a20:	d147      	bne.n	8003ab2 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2252      	movs	r2, #82	; 0x52
 8003a26:	5a9b      	ldrh	r3, [r3, r2]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d111      	bne.n	8003a52 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	438a      	bics	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e030      	b.n	8003ab4 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	015b      	lsls	r3, r3, #5
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d114      	bne.n	8003a88 <UART_Transmit_IT+0x7a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	05d2      	lsls	r2, r2, #23
 8003a76:	0dd2      	lsrs	r2, r2, #23
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a86:	e009      	b.n	8003a9c <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b292      	uxth	r2, r2
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2252      	movs	r2, #82	; 0x52
 8003aa0:	5a9b      	ldrh	r3, [r3, r2]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b299      	uxth	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2252      	movs	r2, #82	; 0x52
 8003aac:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
  }
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	438a      	bics	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2269      	movs	r2, #105	; 0x69
 8003ad8:	2120      	movs	r1, #32
 8003ada:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7ff fbe8 	bl	80032b4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003af8:	230e      	movs	r3, #14
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	215c      	movs	r1, #92	; 0x5c
 8003b00:	5a52      	ldrh	r2, [r2, r1]
 8003b02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	226a      	movs	r2, #106	; 0x6a
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	d15b      	bne.n	8003bc8 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	230c      	movs	r3, #12
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b1a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	015b      	lsls	r3, r3, #5
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d116      	bne.n	8003b56 <UART_Receive_IT+0x66>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d112      	bne.n	8003b56 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003b36:	230c      	movs	r3, #12
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	220e      	movs	r2, #14
 8003b3c:	18ba      	adds	r2, r7, r2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
 8003b54:	e010      	b.n	8003b78 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b56:	230c      	movs	r3, #12
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b2d9      	uxtb	r1, r3
 8003b5e:	230e      	movs	r3, #14
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b2d8      	uxtb	r0, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	1c5c      	adds	r4, r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6554      	str	r4, [r2, #84]	; 0x54
 8003b70:	0002      	movs	r2, r0
 8003b72:	400a      	ands	r2, r1
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	225a      	movs	r2, #90	; 0x5a
 8003b7c:	5a9b      	ldrh	r3, [r3, r2]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	215a      	movs	r1, #90	; 0x5a
 8003b88:	1c18      	adds	r0, r3, #0
 8003b8a:	5250      	strh	r0, [r2, r1]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d119      	bne.n	8003bc4 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4912      	ldr	r1, [pc, #72]	; (8003be4 <UART_Receive_IT+0xf4>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2101      	movs	r1, #1
 8003bac:	438a      	bics	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	226a      	movs	r2, #106	; 0x6a
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 fdfe 	bl	80047bc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e00a      	b.n	8003bda <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e008      	b.n	8003bda <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b005      	add	sp, #20
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	fffffedf 	.word	0xfffffedf

08003be8 <ble_init>:
#include "BLE.h"

void ble_init(UART_HandleTypeDef *BLE_UART) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	HAL_UART_MspInit(BLE_UART);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f001 f814 	bl	8004c20 <HAL_UART_MspInit>
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <ble_send>:

void ble_send(UART_HandleTypeDef *BLE_UART, ble_data_packet_tx_t *packet) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(BLE_UART, (uint8_t *) packet, sizeof(*packet));
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	22ed      	movs	r2, #237	; 0xed
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff f94d 	bl	8002eb0 <HAL_UART_Transmit_DMA>
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <gps_init>:
uint8_t rxBuffer[GPS_RX_BUFFER_SIZE]; // incoming data buffer to be filled by DMA

/*
 * Initialize the GPS module to a higher baud rate (9600 -> 57600), to only output GPRMC data, and to output at 10Hz rate
 */
uint8_t gps_init(UART_HandleTypeDef *GPS_UART) {
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b09f      	sub	sp, #124	; 0x7c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8003c28:	2064      	movs	r0, #100	; 0x64
 8003c2a:	f7fc fe0f 	bl	800084c <HAL_Delay>
	uint8_t command_baud_57600[GPS_BAUD_57600_SIZE] = GPS_BAUD_57600;
 8003c2e:	2564      	movs	r5, #100	; 0x64
 8003c30:	197b      	adds	r3, r7, r5
 8003c32:	4a4c      	ldr	r2, [pc, #304]	; (8003d64 <gps_init+0x144>)
 8003c34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c36:	c313      	stmia	r3!, {r0, r1, r4}
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	6019      	str	r1, [r3, #0]
 8003c3c:	8891      	ldrh	r1, [r2, #4]
 8003c3e:	8099      	strh	r1, [r3, #4]
 8003c40:	7992      	ldrb	r2, [r2, #6]
 8003c42:	719a      	strb	r2, [r3, #6]
	uint8_t command_gprmc[GPS_GPRMC_ONLY_SIZE] = GPS_GPRMC_ONLY;
 8003c44:	2330      	movs	r3, #48	; 0x30
 8003c46:	18fa      	adds	r2, r7, r3
 8003c48:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <gps_init+0x148>)
 8003c4a:	0010      	movs	r0, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	2333      	movs	r3, #51	; 0x33
 8003c50:	001a      	movs	r2, r3
 8003c52:	f002 f9e1 	bl	8006018 <memcpy>
	uint8_t command_pqtxt[GPS_PQTXT_SIZE] = GPS_PQTXT;
 8003c56:	231c      	movs	r3, #28
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <gps_init+0x14c>)
 8003c5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c5e:	c313      	stmia	r3!, {r0, r1, r4}
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	6019      	str	r1, [r3, #0]
 8003c64:	7912      	ldrb	r2, [r2, #4]
 8003c66:	711a      	strb	r2, [r3, #4]
	uint8_t command_10hz[GPS_10HZ_SIZE] = GPS_10HZ;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	4a40      	ldr	r2, [pc, #256]	; (8003d70 <gps_init+0x150>)
 8003c6e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c70:	c313      	stmia	r3!, {r0, r1, r4}
 8003c72:	6811      	ldr	r1, [r2, #0]
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	7912      	ldrb	r2, [r2, #4]
 8003c78:	711a      	strb	r2, [r3, #4]
	txBufferInsertIndex = txBuffer;
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <gps_init+0x154>)
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <gps_init+0x158>)
 8003c7e:	601a      	str	r2, [r3, #0]
	txBufferReadIndex = txBuffer;
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <gps_init+0x15c>)
 8003c82:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <gps_init+0x158>)
 8003c84:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef result = HAL_UART_Transmit(GPS_UART, command_baud_57600, GPS_BAUD_57600_SIZE, GPS_UART_TIMEOUT);
 8003c86:	2677      	movs	r6, #119	; 0x77
 8003c88:	19bc      	adds	r4, r7, r6
 8003c8a:	23fa      	movs	r3, #250	; 0xfa
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1979      	adds	r1, r7, r5
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	2213      	movs	r2, #19
 8003c94:	f7ff f868 	bl	8002d68 <HAL_UART_Transmit>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003c9c:	19bb      	adds	r3, r7, r6
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <gps_init+0x88>
		return 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e058      	b.n	8003d5a <gps_init+0x13a>
	}

	GPS_UART->Init.BaudRate = 57600;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	22e1      	movs	r2, #225	; 0xe1
 8003cac:	0212      	lsls	r2, r2, #8
 8003cae:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(GPS_UART) != HAL_OK) {
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff f800 	bl	8002cb8 <HAL_UART_Init>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <gps_init+0xa0>
		return 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e04c      	b.n	8003d5a <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	f7fc fdc3 	bl	800084c <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_gprmc, GPS_GPRMC_ONLY_SIZE, GPS_UART_TIMEOUT);
 8003cc6:	2577      	movs	r5, #119	; 0x77
 8003cc8:	197c      	adds	r4, r7, r5
 8003cca:	23fa      	movs	r3, #250	; 0xfa
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	2230      	movs	r2, #48	; 0x30
 8003cd0:	18b9      	adds	r1, r7, r2
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	2233      	movs	r2, #51	; 0x33
 8003cd6:	f7ff f847 	bl	8002d68 <HAL_UART_Transmit>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003cde:	197b      	adds	r3, r7, r5
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <gps_init+0xca>
		return 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e037      	b.n	8003d5a <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003cea:	2064      	movs	r0, #100	; 0x64
 8003cec:	f7fc fdae 	bl	800084c <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_pqtxt, GPS_PQTXT_SIZE, GPS_UART_TIMEOUT);
 8003cf0:	2577      	movs	r5, #119	; 0x77
 8003cf2:	197c      	adds	r4, r7, r5
 8003cf4:	23fa      	movs	r3, #250	; 0xfa
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	221c      	movs	r2, #28
 8003cfa:	18b9      	adds	r1, r7, r2
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	2211      	movs	r2, #17
 8003d00:	f7ff f832 	bl	8002d68 <HAL_UART_Transmit>
 8003d04:	0003      	movs	r3, r0
 8003d06:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003d08:	197b      	adds	r3, r7, r5
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <gps_init+0xf4>
		return 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e022      	b.n	8003d5a <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003d14:	2064      	movs	r0, #100	; 0x64
 8003d16:	f7fc fd99 	bl	800084c <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_10hz, GPS_10HZ_SIZE, GPS_UART_TIMEOUT);
 8003d1a:	2577      	movs	r5, #119	; 0x77
 8003d1c:	197c      	adds	r4, r7, r5
 8003d1e:	23fa      	movs	r3, #250	; 0xfa
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	2208      	movs	r2, #8
 8003d24:	18b9      	adds	r1, r7, r2
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	2211      	movs	r2, #17
 8003d2a:	f7ff f81d 	bl	8002d68 <HAL_UART_Transmit>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8003d32:	197b      	adds	r3, r7, r5
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <gps_init+0x11e>
		return 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e00d      	b.n	8003d5a <gps_init+0x13a>
	}

	HAL_Delay(100);
 8003d3e:	2064      	movs	r0, #100	; 0x64
 8003d40:	f7fc fd84 	bl	800084c <HAL_Delay>

	// Initialize DMA for GPS_UART
	HAL_UART_MspInit(GPS_UART);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 ff6a 	bl	8004c20 <HAL_UART_MspInit>

	// Begin Receiving DMA for GPS_UART
	HAL_UART_Receive_DMA(GPS_UART, rxBuffer, GPS_RX_BUFFER_SIZE);
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <gps_init+0x160>)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2240      	movs	r2, #64	; 0x40
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff f92c 	bl	8002fb0 <HAL_UART_Receive_DMA>
	return 1;
 8003d58:	2301      	movs	r3, #1
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b01f      	add	sp, #124	; 0x7c
 8003d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	08006074 	.word	0x08006074
 8003d68:	08006088 	.word	0x08006088
 8003d6c:	080060bc 	.word	0x080060bc
 8003d70:	080060d0 	.word	0x080060d0
 8003d74:	20000d70 	.word	0x20000d70
 8003d78:	20000db4 	.word	0x20000db4
 8003d7c:	20000d6c 	.word	0x20000d6c
 8003d80:	20000d74 	.word	0x20000d74

08003d84 <gps_recieve_full>:

void gps_recieve_full() {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer + GPS_RX_BUFFER_HALF_SIZE, GPS_RX_BUFFER_HALF_SIZE);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <gps_recieve_full+0x34>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	490b      	ldr	r1, [pc, #44]	; (8003dbc <gps_recieve_full+0x38>)
 8003d8e:	2220      	movs	r2, #32
 8003d90:	0018      	movs	r0, r3
 8003d92:	f002 f941 	bl	8006018 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <gps_recieve_full+0x34>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <gps_recieve_full+0x3c>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d004      	beq.n	8003daa <gps_recieve_full+0x26>
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <gps_recieve_full+0x34>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3320      	adds	r3, #32
 8003da6:	001a      	movs	r2, r3
 8003da8:	e000      	b.n	8003dac <gps_recieve_full+0x28>
 8003daa:	4a06      	ldr	r2, [pc, #24]	; (8003dc4 <gps_recieve_full+0x40>)
 8003dac:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <gps_recieve_full+0x34>)
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	20000d70 	.word	0x20000d70
 8003dbc:	20000d94 	.word	0x20000d94
 8003dc0:	20001174 	.word	0x20001174
 8003dc4:	20000db4 	.word	0x20000db4

08003dc8 <gps_recieve_half>:

void gps_recieve_half() {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	memcpy(txBufferInsertIndex, rxBuffer, GPS_RX_BUFFER_HALF_SIZE);
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <gps_recieve_half+0x34>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	490b      	ldr	r1, [pc, #44]	; (8003e00 <gps_recieve_half+0x38>)
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f002 f91f 	bl	8006018 <memcpy>
	txBufferInsertIndex = (txBufferInsertIndex == txBuffer + GPS_TX_BUFFER_LAST_POS) ? txBuffer : txBufferInsertIndex + GPS_RX_BUFFER_HALF_SIZE;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <gps_recieve_half+0x34>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <gps_recieve_half+0x3c>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d004      	beq.n	8003dee <gps_recieve_half+0x26>
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <gps_recieve_half+0x34>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3320      	adds	r3, #32
 8003dea:	001a      	movs	r2, r3
 8003dec:	e000      	b.n	8003df0 <gps_recieve_half+0x28>
 8003dee:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <gps_recieve_half+0x40>)
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <gps_recieve_half+0x34>)
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	20000d70 	.word	0x20000d70
 8003e00:	20000d74 	.word	0x20000d74
 8003e04:	20001174 	.word	0x20001174
 8003e08:	20000db4 	.word	0x20000db4

08003e0c <gps_get_data>:

uint8_t ** gps_get_data(){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
	read_params[0] = NULL;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <gps_get_data+0xa4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
	read_params[1] = NULL;
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <gps_get_data+0xa4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	605a      	str	r2, [r3, #4]
	txBufferReadIndex = txBufferReadIndex == txBuffer + GPS_TX_BUFFER_SIZE ? txBuffer : txBufferReadIndex;
 8003e1e:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <gps_get_data+0xa8>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <gps_get_data+0xac>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d002      	beq.n	8003e2e <gps_get_data+0x22>
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <gps_get_data+0xa8>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	e000      	b.n	8003e30 <gps_get_data+0x24>
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <gps_get_data+0xb0>)
 8003e30:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <gps_get_data+0xa8>)
 8003e32:	601a      	str	r2, [r3, #0]
	uint8_t * tmp = txBufferReadIndex;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <gps_get_data+0xa8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 8003e3a:	e023      	b.n	8003e84 <gps_get_data+0x78>
		if(*tmp == '$') {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b24      	cmp	r3, #36	; 0x24
 8003e42:	d103      	bne.n	8003e4c <gps_get_data+0x40>
			read_params[0] = tmp;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <gps_get_data+0xa4>)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e012      	b.n	8003e72 <gps_get_data+0x66>
		} else if (*tmp == '\n') {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b0a      	cmp	r3, #10
 8003e52:	d10e      	bne.n	8003e72 <gps_get_data+0x66>
			if (read_params[0] == NULL) {
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <gps_get_data+0xa4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <gps_get_data+0x5c>
				txBufferReadIndex = tmp + 1; // if txBufferReadIndex is somehow in the middle of a command, reset it here -- this may happen on startup
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <gps_get_data+0xa8>)
 8003e62:	601a      	str	r2, [r3, #0]
				return read_params;
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <gps_get_data+0xa4>)
 8003e66:	e01f      	b.n	8003ea8 <gps_get_data+0x9c>
			}
			read_params[1] = tmp + 1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <gps_get_data+0xa4>)
 8003e6e:	605a      	str	r2, [r3, #4]
			break;
 8003e70:	e00d      	b.n	8003e8e <gps_get_data+0x82>
		}
		tmp = (tmp == txBuffer + (GPS_TX_BUFFER_SIZE - 1)) ? txBuffer : tmp + 1;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <gps_get_data+0xb4>)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d002      	beq.n	8003e80 <gps_get_data+0x74>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	e000      	b.n	8003e82 <gps_get_data+0x76>
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <gps_get_data+0xb0>)
 8003e82:	607b      	str	r3, [r7, #4]
	while (tmp != txBufferInsertIndex) {
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <gps_get_data+0xb8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d1d6      	bne.n	8003e3c <gps_get_data+0x30>
	}

	if (read_params[0] != NULL && read_params[1] != NULL) {
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <gps_get_data+0xa4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <gps_get_data+0x9a>
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <gps_get_data+0xa4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <gps_get_data+0x9a>
		txBufferReadIndex = read_params[1];
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <gps_get_data+0xa4>)
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <gps_get_data+0xa8>)
 8003ea4:	601a      	str	r2, [r3, #0]
	}

	return read_params;
 8003ea6:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <gps_get_data+0xa4>)
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	200011b4 	.word	0x200011b4
 8003eb4:	20000d6c 	.word	0x20000d6c
 8003eb8:	200011b4 	.word	0x200011b4
 8003ebc:	20000db4 	.word	0x20000db4
 8003ec0:	200011b3 	.word	0x200011b3
 8003ec4:	20000d70 	.word	0x20000d70

08003ec8 <initMMA8452Q>:
#include <MMA8452Q.h>


// Initializes accelerometer
// returns 1 if successful else 0
uint8_t initMMA8452Q(uint8_t addr, MMA8452Q_Scale scale, MMA8452Q_Data_Rate rate){
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	0004      	movs	r4, r0
 8003ed0:	0008      	movs	r0, r1
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	1dfb      	adds	r3, r7, #7
 8003ed6:	1c22      	adds	r2, r4, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	1dbb      	adds	r3, r7, #6
 8003edc:	1c02      	adds	r2, r0, #0
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	1d7b      	adds	r3, r7, #5
 8003ee2:	1c0a      	adds	r2, r1, #0
 8003ee4:	701a      	strb	r2, [r3, #0]

	// verify device identity
	if (readRegister(WHO_AM_I) != 0x2A){
 8003ee6:	200d      	movs	r0, #13
 8003ee8:	f000 f8fe 	bl	80040e8 <readRegister>
 8003eec:	0003      	movs	r3, r0
 8003eee:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef0:	d001      	beq.n	8003ef6 <initMMA8452Q+0x2e>
		return 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e00e      	b.n	8003f14 <initMMA8452Q+0x4c>
	}

	// switch to standby to change registers
	standby();
 8003ef6:	f000 f87c 	bl	8003ff2 <standby>

	// set the scale and data rate
	setScale(scale);
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f80c 	bl	8003f1c <setScale>
	setDataRate(rate);
 8003f04:	1d7b      	adds	r3, r7, #5
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 f83f 	bl	8003f8c <setDataRate>

	// set the device to active state and return successfully
	active();
 8003f0e:	f000 f886 	bl	800401e <active>
	return 1;
 8003f12:	2301      	movs	r3, #1
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd90      	pop	{r4, r7, pc}

08003f1c <setScale>:

// sets the full-scale range of the accelerometers
// possible values for scale are SCALE_2G, SCALE_4G, SCALE_8G
void setScale(MMA8452Q_Scale scale){
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	0002      	movs	r2, r0
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	701a      	strb	r2, [r3, #0]
	// set the global scale variable (used to calculate measured data)
	SCALE = scale;
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <setScale+0x6c>)
 8003f2a:	1dfa      	adds	r2, r7, #7
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	701a      	strb	r2, [r3, #0]

	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8003f30:	f000 f88b 	bl	800404a <isActive>
 8003f34:	0003      	movs	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <setScale+0x22>
		standby();
 8003f3a:	f000 f85a 	bl	8003ff2 <standby>
	}

	// read config, change scale bits, then re-write register
	uint8_t config = readRegister(XYZ_DATA_CFG);	// read current config
 8003f3e:	200f      	movs	r0, #15
 8003f40:	0005      	movs	r5, r0
 8003f42:	183c      	adds	r4, r7, r0
 8003f44:	200e      	movs	r0, #14
 8003f46:	f000 f8cf 	bl	80040e8 <readRegister>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	7023      	strb	r3, [r4, #0]
	config &= 0xFC;									// mask out the scale bits
 8003f4e:	0028      	movs	r0, r5
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	183a      	adds	r2, r7, r0
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	2103      	movs	r1, #3
 8003f58:	438a      	bics	r2, r1
 8003f5a:	701a      	strb	r2, [r3, #0]
	config |= (scale >> 2);							// 00 = 2G, 01 = 4G, 10 = 8G
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	b2d9      	uxtb	r1, r3
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	183a      	adds	r2, r7, r0
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	701a      	strb	r2, [r3, #0]
	writeRegister(XYZ_DATA_CFG, config);			// write config with new scale
 8003f6e:	183b      	adds	r3, r7, r0
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	0019      	movs	r1, r3
 8003f74:	200e      	movs	r0, #14
 8003f76:	f000 f8a3 	bl	80040c0 <writeRegister>

	// return to active state once complete
	active();
 8003f7a:	f000 f850 	bl	800401e <active>
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b004      	add	sp, #16
 8003f84:	bdb0      	pop	{r4, r5, r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	200012b8 	.word	0x200012b8

08003f8c <setDataRate>:

// sets the data rate
void setDataRate(MMA8452Q_Data_Rate data_rate){
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	0002      	movs	r2, r0
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	701a      	strb	r2, [r3, #0]
	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8003f98:	f000 f857 	bl	800404a <isActive>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <setDataRate+0x1a>
		standby();
 8003fa2:	f000 f826 	bl	8003ff2 <standby>
	}

	// read control, change rate bits, then re-write register
	uint8_t control = readRegister(CTRL_REG1);		// read current settings
 8003fa6:	200f      	movs	r0, #15
 8003fa8:	0005      	movs	r5, r0
 8003faa:	183c      	adds	r4, r7, r0
 8003fac:	202a      	movs	r0, #42	; 0x2a
 8003fae:	f000 f89b 	bl	80040e8 <readRegister>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	7023      	strb	r3, [r4, #0]
	control &= 0xC7;								// mask out the data rate bits
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	183b      	adds	r3, r7, r0
 8003fba:	183a      	adds	r2, r7, r0
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	2138      	movs	r1, #56	; 0x38
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	701a      	strb	r2, [r3, #0]
	control |= (data_rate << 3);					// shift data rate bits
 8003fc4:	1dfb      	adds	r3, r7, #7
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	183b      	adds	r3, r7, r0
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b25a      	sxtb	r2, r3
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	701a      	strb	r2, [r3, #0]
	writeRegister(CTRL_REG1, control);				// write settings with new data rate
 8003fda:	183b      	adds	r3, r7, r0
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	0019      	movs	r1, r3
 8003fe0:	202a      	movs	r0, #42	; 0x2a
 8003fe2:	f000 f86d 	bl	80040c0 <writeRegister>

	// return to active state once complete
	active();
 8003fe6:	f000 f81a 	bl	800401e <active>
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bdb0      	pop	{r4, r5, r7, pc}

08003ff2 <standby>:

// sets the MMA8452 to standby mode
void standby(void){
 8003ff2:	b590      	push	{r4, r7, lr}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
	// clear the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8003ff8:	1dfc      	adds	r4, r7, #7
 8003ffa:	202a      	movs	r0, #42	; 0x2a
 8003ffc:	f000 f874 	bl	80040e8 <readRegister>
 8004000:	0003      	movs	r3, r0
 8004002:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control & ~(0x01)));
 8004004:	1dfb      	adds	r3, r7, #7
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2201      	movs	r2, #1
 800400a:	4393      	bics	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	0019      	movs	r1, r3
 8004010:	202a      	movs	r0, #42	; 0x2a
 8004012:	f000 f855 	bl	80040c0 <writeRegister>
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b003      	add	sp, #12
 800401c:	bd90      	pop	{r4, r7, pc}

0800401e <active>:

// sets the MMA8452 to active mode
void active(void){
 800401e:	b590      	push	{r4, r7, lr}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
	// set the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 8004024:	1dfc      	adds	r4, r7, #7
 8004026:	202a      	movs	r0, #42	; 0x2a
 8004028:	f000 f85e 	bl	80040e8 <readRegister>
 800402c:	0003      	movs	r3, r0
 800402e:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control | 0x01));
 8004030:	1dfb      	adds	r3, r7, #7
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	4313      	orrs	r3, r2
 8004038:	b2db      	uxtb	r3, r3
 800403a:	0019      	movs	r1, r3
 800403c:	202a      	movs	r0, #42	; 0x2a
 800403e:	f000 f83f 	bl	80040c0 <writeRegister>
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b003      	add	sp, #12
 8004048:	bd90      	pop	{r4, r7, pc}

0800404a <isActive>:

// returns 1 if in Active state, otherwise returns 0
uint8_t isActive(void){
 800404a:	b590      	push	{r4, r7, lr}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
	uint8_t currentState = readRegister(SYSMOD);
 8004050:	1dfc      	adds	r4, r7, #7
 8004052:	200b      	movs	r0, #11
 8004054:	f000 f848 	bl	80040e8 <readRegister>
 8004058:	0003      	movs	r3, r0
 800405a:	7023      	strb	r3, [r4, #0]
	currentState &= 0x03;
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	1dfa      	adds	r2, r7, #7
 8004060:	7812      	ldrb	r2, [r2, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	400a      	ands	r2, r1
 8004066:	701a      	strb	r2, [r3, #0]

	// Wake and Sleep are both active SYSMOD states
	if (currentState == SYSMOD_STANDBY)
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <isActive+0x2a>
		return 0;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <isActive+0x2c>
	return 1;
 8004074:	2301      	movs	r3, #1
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b003      	add	sp, #12
 800407c:	bd90      	pop	{r4, r7, pc}
	...

08004080 <writeRegisters>:
	Y = (float)y / (float)(1 << 11) * (float)(SCALE);
	Z = (float)z / (float)(1 << 11) * (float)(SCALE);
}

// write an array of "len" bytes ("buffer")
void writeRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af04      	add	r7, sp, #16
 8004086:	6039      	str	r1, [r7, #0]
 8004088:	0011      	movs	r1, r2
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	1c02      	adds	r2, r0, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	1c0a      	adds	r2, r1, #0
 8004094:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b29a      	uxth	r2, r3
 800409c:	4807      	ldr	r0, [pc, #28]	; (80040bc <writeRegisters+0x3c>)
 800409e:	230a      	movs	r3, #10
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2301      	movs	r3, #1
 80040ae:	213a      	movs	r1, #58	; 0x3a
 80040b0:	f7fd f8a6 	bl	8001200 <HAL_I2C_Mem_Write>
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20001304 	.word	0x20001304

080040c0 <writeRegister>:

// write a single byte of data to a register in the MMA8452Q
void writeRegister(MMA8452Q_Register reg, uint8_t data){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	0002      	movs	r2, r0
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	1dbb      	adds	r3, r7, #6
 80040ce:	1c0a      	adds	r2, r1, #0
 80040d0:	701a      	strb	r2, [r3, #0]
	writeRegisters(reg, &data, 1);
 80040d2:	1db9      	adds	r1, r7, #6
 80040d4:	1dfb      	adds	r3, r7, #7
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff ffd0 	bl	8004080 <writeRegisters>
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <readRegister>:

uint8_t readRegister(MMA8452Q_Register reg){
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	0002      	movs	r2, r0
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	readRegisters(reg, &buffer, 1);
 80040f4:	240f      	movs	r4, #15
 80040f6:	1939      	adds	r1, r7, r4
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f806 	bl	8004110 <readRegisters>
	return buffer;
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b005      	add	sp, #20
 800410e:	bd90      	pop	{r4, r7, pc}

08004110 <readRegisters>:

void readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af04      	add	r7, sp, #16
 8004116:	6039      	str	r1, [r7, #0]
 8004118:	0011      	movs	r1, r2
 800411a:	1dfb      	adds	r3, r7, #7
 800411c:	1c02      	adds	r2, r0, #0
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	1c0a      	adds	r2, r1, #0
 8004124:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8004126:	1dfb      	adds	r3, r7, #7
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	4807      	ldr	r0, [pc, #28]	; (800414c <readRegisters+0x3c>)
 800412e:	230a      	movs	r3, #10
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2301      	movs	r3, #1
 800413e:	213a      	movs	r1, #58	; 0x3a
 8004140:	f7fd f99e 	bl	8001480 <HAL_I2C_Mem_Read>
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20001304 	.word	0x20001304

08004150 <getRawX>:

// Returns raw X acceleration data
short getRawX(void){
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_X_MSB, rawData, 2);
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	2202      	movs	r2, #2
 800415a:	0019      	movs	r1, r3
 800415c:	2001      	movs	r0, #1
 800415e:	f7ff ffd7 	bl	8004110 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	b21a      	sxth	r2, r3
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b21b      	sxth	r3, r3
 8004174:	111b      	asrs	r3, r3, #4
 8004176:	b21b      	sxth	r3, r3
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <getRawY>:

// Returns raw Y acceleration data
short getRawY(void){
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Y_MSB, rawData, 2);
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	2202      	movs	r2, #2
 800418a:	0019      	movs	r1, r3
 800418c:	2003      	movs	r0, #3
 800418e:	f7ff ffbf 	bl	8004110 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	b21a      	sxth	r2, r3
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	b21b      	sxth	r3, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	111b      	asrs	r3, r3, #4
 80041a6:	b21b      	sxth	r3, r3
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <getRawZ>:

// Returns raw Z acceleration data
short getRawZ(void){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
	uint8_t rawData[2];
	readRegisters(OUT_Z_MSB, rawData, 2);
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2202      	movs	r2, #2
 80041ba:	0019      	movs	r1, r3
 80041bc:	2005      	movs	r0, #5
 80041be:	f7ff ffa7 	bl	8004110 <readRegisters>
	return ((short)(rawData[0] << 8 | rawData[1])) >> 4;
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	111b      	asrs	r3, r3, #4
 80041d6:	b21b      	sxth	r3, r3
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <getX>:

// Returns calculated X acceleration data
float getX(void){
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
	short x = getRawX();
 80041e6:	1dbc      	adds	r4, r7, #6
 80041e8:	f7ff ffb2 	bl	8004150 <getRawX>
 80041ec:	0003      	movs	r3, r0
 80041ee:	8023      	strh	r3, [r4, #0]
	return (float)x / (float)(1 << 11) * (float)(SCALE);
 80041f0:	1dbb      	adds	r3, r7, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	5e9b      	ldrsh	r3, [r3, r2]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fc fa56 	bl	80006a8 <__aeabi_i2f>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	218a      	movs	r1, #138	; 0x8a
 8004200:	05c9      	lsls	r1, r1, #23
 8004202:	1c18      	adds	r0, r3, #0
 8004204:	f7fc f80c 	bl	8000220 <__aeabi_fdiv>
 8004208:	1c03      	adds	r3, r0, #0
 800420a:	1c1c      	adds	r4, r3, #0
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <getX+0x4c>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fc fa93 	bl	800073c <__aeabi_ui2f>
 8004216:	1c03      	adds	r3, r0, #0
 8004218:	1c19      	adds	r1, r3, #0
 800421a:	1c20      	adds	r0, r4, #0
 800421c:	f7fc f912 	bl	8000444 <__aeabi_fmul>
 8004220:	1c03      	adds	r3, r0, #0
}
 8004222:	1c18      	adds	r0, r3, #0
 8004224:	46bd      	mov	sp, r7
 8004226:	b003      	add	sp, #12
 8004228:	bd90      	pop	{r4, r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	200012b8 	.word	0x200012b8

08004230 <getY>:

// Returns calculated X acceleration data
float getY(void){
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
	short Y = getRawY();
 8004236:	1dbc      	adds	r4, r7, #6
 8004238:	f7ff ffa2 	bl	8004180 <getRawY>
 800423c:	0003      	movs	r3, r0
 800423e:	8023      	strh	r3, [r4, #0]
	return (float)Y / (float)(1 << 11) * (float)(SCALE);
 8004240:	1dbb      	adds	r3, r7, #6
 8004242:	2200      	movs	r2, #0
 8004244:	5e9b      	ldrsh	r3, [r3, r2]
 8004246:	0018      	movs	r0, r3
 8004248:	f7fc fa2e 	bl	80006a8 <__aeabi_i2f>
 800424c:	1c03      	adds	r3, r0, #0
 800424e:	218a      	movs	r1, #138	; 0x8a
 8004250:	05c9      	lsls	r1, r1, #23
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7fb ffe4 	bl	8000220 <__aeabi_fdiv>
 8004258:	1c03      	adds	r3, r0, #0
 800425a:	1c1c      	adds	r4, r3, #0
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <getY+0x4c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fc fa6b 	bl	800073c <__aeabi_ui2f>
 8004266:	1c03      	adds	r3, r0, #0
 8004268:	1c19      	adds	r1, r3, #0
 800426a:	1c20      	adds	r0, r4, #0
 800426c:	f7fc f8ea 	bl	8000444 <__aeabi_fmul>
 8004270:	1c03      	adds	r3, r0, #0
}
 8004272:	1c18      	adds	r0, r3, #0
 8004274:	46bd      	mov	sp, r7
 8004276:	b003      	add	sp, #12
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	200012b8 	.word	0x200012b8

08004280 <getZ>:

// Returns calculated X acceleration data
float getZ(void){
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
	short z = getRawZ();
 8004286:	1dbc      	adds	r4, r7, #6
 8004288:	f7ff ff92 	bl	80041b0 <getRawZ>
 800428c:	0003      	movs	r3, r0
 800428e:	8023      	strh	r3, [r4, #0]
	return (float)z / (float)(1 << 11) * (float)(SCALE);
 8004290:	1dbb      	adds	r3, r7, #6
 8004292:	2200      	movs	r2, #0
 8004294:	5e9b      	ldrsh	r3, [r3, r2]
 8004296:	0018      	movs	r0, r3
 8004298:	f7fc fa06 	bl	80006a8 <__aeabi_i2f>
 800429c:	1c03      	adds	r3, r0, #0
 800429e:	218a      	movs	r1, #138	; 0x8a
 80042a0:	05c9      	lsls	r1, r1, #23
 80042a2:	1c18      	adds	r0, r3, #0
 80042a4:	f7fb ffbc 	bl	8000220 <__aeabi_fdiv>
 80042a8:	1c03      	adds	r3, r0, #0
 80042aa:	1c1c      	adds	r4, r3, #0
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <getZ+0x4c>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fc fa43 	bl	800073c <__aeabi_ui2f>
 80042b6:	1c03      	adds	r3, r0, #0
 80042b8:	1c19      	adds	r1, r3, #0
 80042ba:	1c20      	adds	r0, r4, #0
 80042bc:	f7fc f8c2 	bl	8000444 <__aeabi_fmul>
 80042c0:	1c03      	adds	r3, r0, #0
}
 80042c2:	1c18      	adds	r0, r3, #0
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b003      	add	sp, #12
 80042c8:	bd90      	pop	{r4, r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	200012b8 	.word	0x200012b8

080042d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042d4:	f7fc fa90 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042d8:	f000 f822 	bl	8004320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042dc:	f000 f982 	bl	80045e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80042e0:	f000 f95a 	bl	8004598 <MX_DMA_Init>
  MX_I2C1_Init();
 80042e4:	f000 f876 	bl	80043d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80042e8:	f000 f8b4 	bl	8004454 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80042ec:	f000 f8f0 	bl	80044d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80042f0:	f000 f91e 	bl	8004530 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initMMA8452Q(MMA8452Q_Address, SCALE_2G, DR_800_Hz);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2102      	movs	r1, #2
 80042f8:	201d      	movs	r0, #29
 80042fa:	f7ff fde5 	bl	8003ec8 <initMMA8452Q>
  ble_init(&huart1);
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <main+0x48>)
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fc71 	bl	8003be8 <ble_init>
  gps_init(&huart2);
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <main+0x4c>)
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff fc89 	bl	8003c20 <gps_init>
  RTOS_INIT_TASKS();
 800430e:	f000 fa93 	bl	8004838 <RTOS_INIT_TASKS>
  RTOS_INIT();
 8004312:	f000 fa8a 	bl	800482a <RTOS_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004316:	e7fe      	b.n	8004316 <main+0x46>
 8004318:	20001394 	.word	0x20001394
 800431c:	20001468 	.word	0x20001468

08004320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b095      	sub	sp, #84	; 0x54
 8004324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004326:	2420      	movs	r4, #32
 8004328:	193b      	adds	r3, r7, r4
 800432a:	0018      	movs	r0, r3
 800432c:	2330      	movs	r3, #48	; 0x30
 800432e:	001a      	movs	r2, r3
 8004330:	2100      	movs	r1, #0
 8004332:	f001 fe7a 	bl	800602a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004336:	2310      	movs	r3, #16
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	0018      	movs	r0, r3
 800433c:	2310      	movs	r3, #16
 800433e:	001a      	movs	r2, r3
 8004340:	2100      	movs	r1, #0
 8004342:	f001 fe72 	bl	800602a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004346:	003b      	movs	r3, r7
 8004348:	0018      	movs	r0, r3
 800434a:	2310      	movs	r3, #16
 800434c:	001a      	movs	r2, r3
 800434e:	2100      	movs	r1, #0
 8004350:	f001 fe6b 	bl	800602a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004354:	0021      	movs	r1, r4
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2202      	movs	r2, #2
 800435a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800435c:	187b      	adds	r3, r7, r1
 800435e:	2201      	movs	r2, #1
 8004360:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004362:	187b      	adds	r3, r7, r1
 8004364:	2210      	movs	r2, #16
 8004366:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004368:	187b      	adds	r3, r7, r1
 800436a:	2200      	movs	r2, #0
 800436c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800436e:	187b      	adds	r3, r7, r1
 8004370:	0018      	movs	r0, r3
 8004372:	f7fd fca3 	bl	8001cbc <HAL_RCC_OscConfig>
 8004376:	1e03      	subs	r3, r0, #0
 8004378:	d001      	beq.n	800437e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800437a:	f000 fa51 	bl	8004820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800437e:	2110      	movs	r1, #16
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2207      	movs	r2, #7
 8004384:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800438c:	187b      	adds	r3, r7, r1
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004392:	187b      	adds	r3, r7, r1
 8004394:	2200      	movs	r2, #0
 8004396:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004398:	187b      	adds	r3, r7, r1
 800439a:	2100      	movs	r1, #0
 800439c:	0018      	movs	r0, r3
 800439e:	f7fd ff81 	bl	80022a4 <HAL_RCC_ClockConfig>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d001      	beq.n	80043aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80043a6:	f000 fa3b 	bl	8004820 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80043aa:	003b      	movs	r3, r7
 80043ac:	2221      	movs	r2, #33	; 0x21
 80043ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80043b0:	003b      	movs	r3, r7
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80043b6:	003b      	movs	r3, r7
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043bc:	003b      	movs	r3, r7
 80043be:	0018      	movs	r0, r3
 80043c0:	f7fe f906 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d001      	beq.n	80043cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80043c8:	f000 fa2a 	bl	8004820 <Error_Handler>
  }
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b015      	add	sp, #84	; 0x54
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <MX_I2C1_Init+0x74>)
 80043da:	4a1c      	ldr	r2, [pc, #112]	; (800444c <MX_I2C1_Init+0x78>)
 80043dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <MX_I2C1_Init+0x74>)
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <MX_I2C1_Init+0x7c>)
 80043e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043e4:	4b18      	ldr	r3, [pc, #96]	; (8004448 <MX_I2C1_Init+0x74>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <MX_I2C1_Init+0x74>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <MX_I2C1_Init+0x74>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <MX_I2C1_Init+0x74>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <MX_I2C1_Init+0x74>)
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <MX_I2C1_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <MX_I2C1_Init+0x74>)
 800440a:	2200      	movs	r2, #0
 800440c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800440e:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <MX_I2C1_Init+0x74>)
 8004410:	0018      	movs	r0, r3
 8004412:	f7fc fe5f 	bl	80010d4 <HAL_I2C_Init>
 8004416:	1e03      	subs	r3, r0, #0
 8004418:	d001      	beq.n	800441e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800441a:	f000 fa01 	bl	8004820 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <MX_I2C1_Init+0x74>)
 8004420:	2100      	movs	r1, #0
 8004422:	0018      	movs	r0, r3
 8004424:	f7fd fbb0 	bl	8001b88 <HAL_I2CEx_ConfigAnalogFilter>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800442c:	f000 f9f8 	bl	8004820 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <MX_I2C1_Init+0x74>)
 8004432:	2100      	movs	r1, #0
 8004434:	0018      	movs	r0, r3
 8004436:	f7fd fbf3 	bl	8001c20 <HAL_I2CEx_ConfigDigitalFilter>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d001      	beq.n	8004442 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800443e:	f000 f9ef 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20001304 	.word	0x20001304
 800444c:	40005400 	.word	0x40005400
 8004450:	2000090e 	.word	0x2000090e

08004454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <MX_SPI1_Init+0x74>)
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <MX_SPI1_Init+0x78>)
 800445c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004460:	2282      	movs	r2, #130	; 0x82
 8004462:	0052      	lsls	r2, r2, #1
 8004464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <MX_SPI1_Init+0x74>)
 800446e:	22c0      	movs	r2, #192	; 0xc0
 8004470:	0092      	lsls	r2, r2, #2
 8004472:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <MX_SPI1_Init+0x74>)
 800447c:	2200      	movs	r2, #0
 800447e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	0092      	lsls	r2, r2, #2
 8004486:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <MX_SPI1_Init+0x74>)
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004490:	2200      	movs	r2, #0
 8004492:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <MX_SPI1_Init+0x74>)
 8004496:	2200      	movs	r2, #0
 8004498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <MX_SPI1_Init+0x74>)
 800449c:	2200      	movs	r2, #0
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <MX_SPI1_Init+0x74>)
 80044a2:	2207      	movs	r2, #7
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <MX_SPI1_Init+0x74>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <MX_SPI1_Init+0x74>)
 80044ae:	2208      	movs	r2, #8
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <MX_SPI1_Init+0x74>)
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fe f959 	bl	800276c <HAL_SPI_Init>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d001      	beq.n	80044c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80044be:	f000 f9af 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20001404 	.word	0x20001404
 80044cc:	40013000 	.word	0x40013000

080044d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <MX_USART1_UART_Init+0x5c>)
 80044d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044dc:	2296      	movs	r2, #150	; 0x96
 80044de:	0212      	lsls	r2, r2, #8
 80044e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044f6:	220c      	movs	r2, #12
 80044f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <MX_USART1_UART_Init+0x58>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <MX_USART1_UART_Init+0x58>)
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <MX_USART1_UART_Init+0x58>)
 8004508:	2200      	movs	r2, #0
 800450a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <MX_USART1_UART_Init+0x58>)
 800450e:	2200      	movs	r2, #0
 8004510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <MX_USART1_UART_Init+0x58>)
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fbcf 	bl	8002cb8 <HAL_UART_Init>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d001      	beq.n	8004522 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800451e:	f000 f97f 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20001394 	.word	0x20001394
 800452c:	40013800 	.word	0x40013800

08004530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <MX_USART2_UART_Init+0x64>)
 8004538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <MX_USART2_UART_Init+0x60>)
 800453c:	2296      	movs	r2, #150	; 0x96
 800453e:	0192      	lsls	r2, r2, #6
 8004540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <MX_USART2_UART_Init+0x60>)
 800454a:	2200      	movs	r2, #0
 800454c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004556:	220c      	movs	r2, #12
 8004558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <MX_USART2_UART_Init+0x60>)
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <MX_USART2_UART_Init+0x60>)
 800456e:	2210      	movs	r2, #16
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <MX_USART2_UART_Init+0x60>)
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	0152      	lsls	r2, r2, #5
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <MX_USART2_UART_Init+0x60>)
 800457c:	0018      	movs	r0, r3
 800457e:	f7fe fb9b 	bl	8002cb8 <HAL_UART_Init>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d001      	beq.n	800458a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8004586:	f000 f94b 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20001468 	.word	0x20001468
 8004594:	40004400 	.word	0x40004400

08004598 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <MX_DMA_Init+0x48>)
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <MX_DMA_Init+0x48>)
 80045a4:	2101      	movs	r1, #1
 80045a6:	430a      	orrs	r2, r1
 80045a8:	615a      	str	r2, [r3, #20]
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <MX_DMA_Init+0x48>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	200a      	movs	r0, #10
 80045bc:	f7fc f9e8 	bl	8000990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80045c0:	200a      	movs	r0, #10
 80045c2:	f7fc f9fa 	bl	80009ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	200b      	movs	r0, #11
 80045cc:	f7fc f9e0 	bl	8000990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80045d0:	200b      	movs	r0, #11
 80045d2:	f7fc f9f2 	bl	80009ba <HAL_NVIC_EnableIRQ>

}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40021000 	.word	0x40021000

080045e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b08b      	sub	sp, #44	; 0x2c
 80045e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ea:	2414      	movs	r4, #20
 80045ec:	193b      	adds	r3, r7, r4
 80045ee:	0018      	movs	r0, r3
 80045f0:	2314      	movs	r3, #20
 80045f2:	001a      	movs	r2, r3
 80045f4:	2100      	movs	r1, #0
 80045f6:	f001 fd18 	bl	800602a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fa:	4b68      	ldr	r3, [pc, #416]	; (800479c <MX_GPIO_Init+0x1b8>)
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	4b67      	ldr	r3, [pc, #412]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	0309      	lsls	r1, r1, #12
 8004604:	430a      	orrs	r2, r1
 8004606:	615a      	str	r2, [r3, #20]
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <MX_GPIO_Init+0x1b8>)
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	031b      	lsls	r3, r3, #12
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004616:	4b61      	ldr	r3, [pc, #388]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	4b60      	ldr	r3, [pc, #384]	; (800479c <MX_GPIO_Init+0x1b8>)
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	03c9      	lsls	r1, r1, #15
 8004620:	430a      	orrs	r2, r1
 8004622:	615a      	str	r2, [r3, #20]
 8004624:	4b5d      	ldr	r3, [pc, #372]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	03db      	lsls	r3, r3, #15
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004632:	4b5a      	ldr	r3, [pc, #360]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	4b59      	ldr	r3, [pc, #356]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	0289      	lsls	r1, r1, #10
 800463c:	430a      	orrs	r2, r1
 800463e:	615a      	str	r2, [r3, #20]
 8004640:	4b56      	ldr	r3, [pc, #344]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	029b      	lsls	r3, r3, #10
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	4b52      	ldr	r3, [pc, #328]	; (800479c <MX_GPIO_Init+0x1b8>)
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	02c9      	lsls	r1, r1, #11
 8004658:	430a      	orrs	r2, r1
 800465a:	615a      	str	r2, [r3, #20]
 800465c:	4b4f      	ldr	r3, [pc, #316]	; (800479c <MX_GPIO_Init+0x1b8>)
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	02db      	lsls	r3, r3, #11
 8004664:	4013      	ands	r3, r2
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 800466a:	494d      	ldr	r1, [pc, #308]	; (80047a0 <MX_GPIO_Init+0x1bc>)
 800466c:	4b4d      	ldr	r3, [pc, #308]	; (80047a4 <MX_GPIO_Init+0x1c0>)
 800466e:	2200      	movs	r2, #0
 8004670:	0018      	movs	r0, r3
 8004672:	f7fc fd11 	bl	8001098 <HAL_GPIO_WritePin>
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE_GPIO_3_GPIO_Port, SPARE_GPIO_3_Pin, GPIO_PIN_RESET);
 8004676:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <MX_GPIO_Init+0x1c4>)
 8004678:	2200      	movs	r2, #0
 800467a:	2101      	movs	r1, #1
 800467c:	0018      	movs	r0, r3
 800467e:	f7fc fd0b 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8004682:	494a      	ldr	r1, [pc, #296]	; (80047ac <MX_GPIO_Init+0x1c8>)
 8004684:	2390      	movs	r3, #144	; 0x90
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	2200      	movs	r2, #0
 800468a:	0018      	movs	r0, r3
 800468c:	f7fc fd04 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin, GPIO_PIN_RESET);
 8004690:	23f0      	movs	r3, #240	; 0xf0
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	4846      	ldr	r0, [pc, #280]	; (80047b0 <MX_GPIO_Init+0x1cc>)
 8004696:	2200      	movs	r2, #0
 8004698:	0019      	movs	r1, r3
 800469a:	f7fc fcfd 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPARE_GPIO_0_Pin SPARE_GPIO_1_Pin SPARE_GPIO_2_Pin LCD_DC_Pin 
                           LCD_CCS_Pin LCD_8BIT_1_Pin LCD_8BIT_5_Pin LCD_8BIT_0_Pin 
                           LCD_8BIT_4_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 800469e:	193b      	adds	r3, r7, r4
 80046a0:	4a3f      	ldr	r2, [pc, #252]	; (80047a0 <MX_GPIO_Init+0x1bc>)
 80046a2:	601a      	str	r2, [r3, #0]
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a4:	193b      	adds	r3, r7, r4
 80046a6:	2201      	movs	r2, #1
 80046a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	193b      	adds	r3, r7, r4
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	193b      	adds	r3, r7, r4
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b6:	193b      	adds	r3, r7, r4
 80046b8:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <MX_GPIO_Init+0x1c0>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	0010      	movs	r0, r2
 80046be:	f7fc fb77 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_GPIO_3_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_3_Pin;
 80046c2:	193b      	adds	r3, r7, r4
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046c8:	193b      	adds	r3, r7, r4
 80046ca:	2201      	movs	r2, #1
 80046cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	193b      	adds	r3, r7, r4
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	193b      	adds	r3, r7, r4
 80046d6:	2200      	movs	r2, #0
 80046d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPARE_GPIO_3_GPIO_Port, &GPIO_InitStruct);
 80046da:	193b      	adds	r3, r7, r4
 80046dc:	4a32      	ldr	r2, [pc, #200]	; (80047a8 <MX_GPIO_Init+0x1c4>)
 80046de:	0019      	movs	r1, r3
 80046e0:	0010      	movs	r0, r2
 80046e2:	f7fc fb65 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_1PPS_Pin */
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046ec:	193b      	adds	r3, r7, r4
 80046ee:	2200      	movs	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	193b      	adds	r3, r7, r4
 80046f4:	2200      	movs	r2, #0
 80046f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80046f8:	193a      	adds	r2, r7, r4
 80046fa:	2390      	movs	r3, #144	; 0x90
 80046fc:	05db      	lsls	r3, r3, #23
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f7fc fb55 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_FORCE_ON_Pin LCD_SEL_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin;
 8004706:	193b      	adds	r3, r7, r4
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <MX_GPIO_Init+0x1c8>)
 800470a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800470c:	193b      	adds	r3, r7, r4
 800470e:	2201      	movs	r2, #1
 8004710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	193b      	adds	r3, r7, r4
 8004714:	2200      	movs	r2, #0
 8004716:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	193b      	adds	r3, r7, r4
 800471a:	2200      	movs	r2, #0
 800471c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471e:	193a      	adds	r2, r7, r4
 8004720:	2390      	movs	r3, #144	; 0x90
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f7fc fb42 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_YP_Pin LCD_XM_Pin LCD_YM_Pin LCD_XP_Pin */
  GPIO_InitStruct.Pin = LCD_YP_Pin|LCD_XM_Pin|LCD_YM_Pin|LCD_XP_Pin;
 800472c:	193b      	adds	r3, r7, r4
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <MX_GPIO_Init+0x1d0>)
 8004730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004732:	193b      	adds	r3, r7, r4
 8004734:	2203      	movs	r2, #3
 8004736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	193b      	adds	r3, r7, r4
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473e:	193b      	adds	r3, r7, r4
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <MX_GPIO_Init+0x1cc>)
 8004742:	0019      	movs	r1, r3
 8004744:	0010      	movs	r0, r2
 8004746:	f7fc fb33 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_8BIT_3_Pin LCD_8BIT_7_Pin LCD_8BIT_2_Pin LCD_8BIT_6_Pin */
  GPIO_InitStruct.Pin = LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin;
 800474a:	0021      	movs	r1, r4
 800474c:	187b      	adds	r3, r7, r1
 800474e:	22f0      	movs	r2, #240	; 0xf0
 8004750:	0212      	lsls	r2, r2, #8
 8004752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004754:	187b      	adds	r3, r7, r1
 8004756:	2201      	movs	r2, #1
 8004758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	187b      	adds	r3, r7, r1
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004760:	187b      	adds	r3, r7, r1
 8004762:	2200      	movs	r2, #0
 8004764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004766:	000c      	movs	r4, r1
 8004768:	187b      	adds	r3, r7, r1
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <MX_GPIO_Init+0x1cc>)
 800476c:	0019      	movs	r1, r3
 800476e:	0010      	movs	r0, r2
 8004770:	f7fc fb1e 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8004774:	0021      	movs	r1, r4
 8004776:	187b      	adds	r3, r7, r1
 8004778:	2260      	movs	r2, #96	; 0x60
 800477a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800477c:	187b      	adds	r3, r7, r1
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <MX_GPIO_Init+0x1d4>)
 8004780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004788:	187b      	adds	r3, r7, r1
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <MX_GPIO_Init+0x1cc>)
 800478c:	0019      	movs	r1, r3
 800478e:	0010      	movs	r0, r2
 8004790:	f7fc fb0e 	bl	8000db0 <HAL_GPIO_Init>

}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b00b      	add	sp, #44	; 0x2c
 800479a:	bd90      	pop	{r4, r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	0000eff0 	.word	0x0000eff0
 80047a4:	48000800 	.word	0x48000800
 80047a8:	48001400 	.word	0x48001400
 80047ac:	00008012 	.word	0x00008012
 80047b0:	48000400 	.word	0x48000400
 80047b4:	00000407 	.word	0x00000407
 80047b8:	10110000 	.word	0x10110000

080047bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <HAL_UART_RxCpltCallback+0x1c>)
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_RxCpltCallback+0x14>
		gps_recieve_full();
 80047cc:	f7ff fada 	bl	8003d84 <gps_recieve_full>
	}
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20001468 	.word	0x20001468

080047dc <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d101      	bne.n	80047f0 <HAL_UART_RxHalfCpltCallback+0x14>
		gps_recieve_half();
 80047ec:	f7ff faec 	bl	8003dc8 <gps_recieve_half>
	}
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20001468 	.word	0x20001468

080047fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800480e:	f7fc f807 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	40012c00 	.word	0x40012c00

08004820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <RTOS_INIT>:
#include "racing_tasks.h"

void RTOS_INIT() {
 800482a:	b580      	push	{r7, lr}
 800482c:	af00      	add	r7, sp, #0
	vTaskStartScheduler();
 800482e:	f000 fde3 	bl	80053f8 <vTaskStartScheduler>
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <RTOS_INIT_TASKS>:

void RTOS_INIT_TASKS() {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af02      	add	r7, sp, #8
	xTaskCreate(task_send_ble_packet, "send_ble_packet", 256, NULL, 0, task_send_ble_packet_handle);
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <RTOS_INIT_TASKS+0x24>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	0052      	lsls	r2, r2, #1
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <RTOS_INIT_TASKS+0x28>)
 8004848:	4806      	ldr	r0, [pc, #24]	; (8004864 <RTOS_INIT_TASKS+0x2c>)
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	f000 fc4e 	bl	80050f2 <xTaskCreate>
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200012ac 	.word	0x200012ac
 8004860:	080060e4 	.word	0x080060e4
 8004864:	08004869 	.word	0x08004869

08004868 <task_send_ble_packet>:

void task_send_ble_packet() {
 8004868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 800486e:	2332      	movs	r3, #50	; 0x32
 8004870:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8004872:	f000 fe8f 	bl	8005594 <xTaskGetTickCount>
 8004876:	0003      	movs	r3, r0
 8004878:	607b      	str	r3, [r7, #4]
	for(;;) {
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	0011      	movs	r1, r2
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fd5d 	bl	8005340 <vTaskDelayUntil>
		uint8_t ** gps_read_data = gps_get_data();
 8004886:	f7ff fac1 	bl	8003e0c <gps_get_data>
 800488a:	0003      	movs	r3, r0
 800488c:	613b      	str	r3, [r7, #16]
        if (gps_read_data[0] != NULL && gps_read_data[1] != NULL) {
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f1      	beq.n	800487a <task_send_ble_packet+0x12>
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3304      	adds	r3, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ec      	beq.n	800487a <task_send_ble_packet+0x12>
        	if ( gps_read_data[1] >  gps_read_data[0]) {
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3304      	adds	r3, #4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d919      	bls.n	80048e2 <task_send_ble_packet+0x7a>
        		unsigned int size = gps_read_data[1] - gps_read_data[0];
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	001a      	movs	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	60bb      	str	r3, [r7, #8]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	4b73      	ldr	r3, [pc, #460]	; (8004a94 <task_send_ble_packet+0x22c>)
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 fba6 	bl	8006018 <memcpy>
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	4b71      	ldr	r3, [pc, #452]	; (8004a94 <task_send_ble_packet+0x22c>)
 80048d0:	18d0      	adds	r0, r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	22dc      	movs	r2, #220	; 0xdc
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	001a      	movs	r2, r3
 80048da:	2100      	movs	r1, #0
 80048dc:	f001 fba5 	bl	800602a <memset>
 80048e0:	e02d      	b.n	800493e <task_send_ble_packet+0xd6>
        	} else {
        		unsigned int size = (txBuffer + GPS_TX_BUFFER_SIZE) - gps_read_data[0];
 80048e2:	4b6d      	ldr	r3, [pc, #436]	; (8004a98 <task_send_ble_packet+0x230>)
 80048e4:	001a      	movs	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	60fb      	str	r3, [r7, #12]
        		memcpy(ble_tx_packet.gps_data, gps_read_data[0], size);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <task_send_ble_packet+0x22c>)
 80048f6:	0018      	movs	r0, r3
 80048f8:	f001 fb8e 	bl	8006018 <memcpy>
        		memcpy(ble_tx_packet.gps_data + size, txBuffer, gps_read_data[1] - txBuffer);
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004900:	18d0      	adds	r0, r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	3304      	adds	r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	001a      	movs	r2, r3
 800490a:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <task_send_ble_packet+0x234>)
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	001a      	movs	r2, r3
 8004910:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <task_send_ble_packet+0x234>)
 8004912:	0019      	movs	r1, r3
 8004914:	f001 fb80 	bl	8006018 <memcpy>
        		size += (gps_read_data[1] - txBuffer);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	001a      	movs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	18d2      	adds	r2, r2, r3
 8004924:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <task_send_ble_packet+0x234>)
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	60fb      	str	r3, [r7, #12]
        		memset(ble_tx_packet.gps_data + size, 0, GPS_MAX_COMMAND_LENGTH - size);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <task_send_ble_packet+0x22c>)
 800492e:	18d0      	adds	r0, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	22dc      	movs	r2, #220	; 0xdc
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	001a      	movs	r2, r3
 8004938:	2100      	movs	r1, #0
 800493a:	f001 fb76 	bl	800602a <memset>
        	}
        	ble_tx_packet.imu_data[0] = getX();
 800493e:	f7ff fc4f 	bl	80041e0 <getX>
 8004942:	1c01      	adds	r1, r0, #0
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004946:	22dc      	movs	r2, #220	; 0xdc
 8004948:	20ff      	movs	r0, #255	; 0xff
 800494a:	4008      	ands	r0, r1
 800494c:	0005      	movs	r5, r0
 800494e:	5c98      	ldrb	r0, [r3, r2]
 8004950:	2400      	movs	r4, #0
 8004952:	4020      	ands	r0, r4
 8004954:	1c04      	adds	r4, r0, #0
 8004956:	1c28      	adds	r0, r5, #0
 8004958:	4320      	orrs	r0, r4
 800495a:	5498      	strb	r0, [r3, r2]
 800495c:	0a08      	lsrs	r0, r1, #8
 800495e:	24ff      	movs	r4, #255	; 0xff
 8004960:	4020      	ands	r0, r4
 8004962:	0006      	movs	r6, r0
 8004964:	1898      	adds	r0, r3, r2
 8004966:	7844      	ldrb	r4, [r0, #1]
 8004968:	2500      	movs	r5, #0
 800496a:	402c      	ands	r4, r5
 800496c:	1c25      	adds	r5, r4, #0
 800496e:	1c34      	adds	r4, r6, #0
 8004970:	432c      	orrs	r4, r5
 8004972:	7044      	strb	r4, [r0, #1]
 8004974:	0c08      	lsrs	r0, r1, #16
 8004976:	24ff      	movs	r4, #255	; 0xff
 8004978:	4020      	ands	r0, r4
 800497a:	0006      	movs	r6, r0
 800497c:	1898      	adds	r0, r3, r2
 800497e:	7884      	ldrb	r4, [r0, #2]
 8004980:	2500      	movs	r5, #0
 8004982:	402c      	ands	r4, r5
 8004984:	1c25      	adds	r5, r4, #0
 8004986:	1c34      	adds	r4, r6, #0
 8004988:	432c      	orrs	r4, r5
 800498a:	7084      	strb	r4, [r0, #2]
 800498c:	0e08      	lsrs	r0, r1, #24
 800498e:	189b      	adds	r3, r3, r2
 8004990:	78da      	ldrb	r2, [r3, #3]
 8004992:	2100      	movs	r1, #0
 8004994:	400a      	ands	r2, r1
 8004996:	1c11      	adds	r1, r2, #0
 8004998:	1c02      	adds	r2, r0, #0
 800499a:	430a      	orrs	r2, r1
 800499c:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[0] = getY();
 800499e:	f7ff fc47 	bl	8004230 <getY>
 80049a2:	1c01      	adds	r1, r0, #0
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <task_send_ble_packet+0x22c>)
 80049a6:	22dc      	movs	r2, #220	; 0xdc
 80049a8:	20ff      	movs	r0, #255	; 0xff
 80049aa:	4008      	ands	r0, r1
 80049ac:	0005      	movs	r5, r0
 80049ae:	5c98      	ldrb	r0, [r3, r2]
 80049b0:	2400      	movs	r4, #0
 80049b2:	4020      	ands	r0, r4
 80049b4:	1c04      	adds	r4, r0, #0
 80049b6:	1c28      	adds	r0, r5, #0
 80049b8:	4320      	orrs	r0, r4
 80049ba:	5498      	strb	r0, [r3, r2]
 80049bc:	0a08      	lsrs	r0, r1, #8
 80049be:	24ff      	movs	r4, #255	; 0xff
 80049c0:	4020      	ands	r0, r4
 80049c2:	0006      	movs	r6, r0
 80049c4:	1898      	adds	r0, r3, r2
 80049c6:	7844      	ldrb	r4, [r0, #1]
 80049c8:	2500      	movs	r5, #0
 80049ca:	402c      	ands	r4, r5
 80049cc:	1c25      	adds	r5, r4, #0
 80049ce:	1c34      	adds	r4, r6, #0
 80049d0:	432c      	orrs	r4, r5
 80049d2:	7044      	strb	r4, [r0, #1]
 80049d4:	0c08      	lsrs	r0, r1, #16
 80049d6:	24ff      	movs	r4, #255	; 0xff
 80049d8:	4020      	ands	r0, r4
 80049da:	0006      	movs	r6, r0
 80049dc:	1898      	adds	r0, r3, r2
 80049de:	7884      	ldrb	r4, [r0, #2]
 80049e0:	2500      	movs	r5, #0
 80049e2:	402c      	ands	r4, r5
 80049e4:	1c25      	adds	r5, r4, #0
 80049e6:	1c34      	adds	r4, r6, #0
 80049e8:	432c      	orrs	r4, r5
 80049ea:	7084      	strb	r4, [r0, #2]
 80049ec:	0e08      	lsrs	r0, r1, #24
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	78da      	ldrb	r2, [r3, #3]
 80049f2:	2100      	movs	r1, #0
 80049f4:	400a      	ands	r2, r1
 80049f6:	1c11      	adds	r1, r2, #0
 80049f8:	1c02      	adds	r2, r0, #0
 80049fa:	430a      	orrs	r2, r1
 80049fc:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.imu_data[0] = getZ();
 80049fe:	f7ff fc3f 	bl	8004280 <getZ>
 8004a02:	1c01      	adds	r1, r0, #0
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a06:	22dc      	movs	r2, #220	; 0xdc
 8004a08:	20ff      	movs	r0, #255	; 0xff
 8004a0a:	4008      	ands	r0, r1
 8004a0c:	0005      	movs	r5, r0
 8004a0e:	5c98      	ldrb	r0, [r3, r2]
 8004a10:	2400      	movs	r4, #0
 8004a12:	4020      	ands	r0, r4
 8004a14:	1c04      	adds	r4, r0, #0
 8004a16:	1c28      	adds	r0, r5, #0
 8004a18:	4320      	orrs	r0, r4
 8004a1a:	5498      	strb	r0, [r3, r2]
 8004a1c:	0a08      	lsrs	r0, r1, #8
 8004a1e:	24ff      	movs	r4, #255	; 0xff
 8004a20:	4020      	ands	r0, r4
 8004a22:	0006      	movs	r6, r0
 8004a24:	1898      	adds	r0, r3, r2
 8004a26:	7844      	ldrb	r4, [r0, #1]
 8004a28:	2500      	movs	r5, #0
 8004a2a:	402c      	ands	r4, r5
 8004a2c:	1c25      	adds	r5, r4, #0
 8004a2e:	1c34      	adds	r4, r6, #0
 8004a30:	432c      	orrs	r4, r5
 8004a32:	7044      	strb	r4, [r0, #1]
 8004a34:	0c08      	lsrs	r0, r1, #16
 8004a36:	24ff      	movs	r4, #255	; 0xff
 8004a38:	4020      	ands	r0, r4
 8004a3a:	0006      	movs	r6, r0
 8004a3c:	1898      	adds	r0, r3, r2
 8004a3e:	7884      	ldrb	r4, [r0, #2]
 8004a40:	2500      	movs	r5, #0
 8004a42:	402c      	ands	r4, r5
 8004a44:	1c25      	adds	r5, r4, #0
 8004a46:	1c34      	adds	r4, r6, #0
 8004a48:	432c      	orrs	r4, r5
 8004a4a:	7084      	strb	r4, [r0, #2]
 8004a4c:	0e08      	lsrs	r0, r1, #24
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	78da      	ldrb	r2, [r3, #3]
 8004a52:	2100      	movs	r1, #0
 8004a54:	400a      	ands	r2, r1
 8004a56:	1c11      	adds	r1, r2, #0
 8004a58:	1c02      	adds	r2, r0, #0
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	70da      	strb	r2, [r3, #3]
        	ble_tx_packet.ending[0] = '-';
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a60:	22e8      	movs	r2, #232	; 0xe8
 8004a62:	212d      	movs	r1, #45	; 0x2d
 8004a64:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[1] = '-';
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a68:	22e9      	movs	r2, #233	; 0xe9
 8004a6a:	212d      	movs	r1, #45	; 0x2d
 8004a6c:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[2] = '-';
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a70:	22ea      	movs	r2, #234	; 0xea
 8004a72:	212d      	movs	r1, #45	; 0x2d
 8004a74:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[3] = '\r';
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a78:	22eb      	movs	r2, #235	; 0xeb
 8004a7a:	210d      	movs	r1, #13
 8004a7c:	5499      	strb	r1, [r3, r2]
        	ble_tx_packet.ending[4] = '\n';
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a80:	22ec      	movs	r2, #236	; 0xec
 8004a82:	210a      	movs	r1, #10
 8004a84:	5499      	strb	r1, [r3, r2]

        	ble_send(&huart1, &ble_tx_packet);
 8004a86:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <task_send_ble_packet+0x22c>)
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <task_send_ble_packet+0x238>)
 8004a8a:	0011      	movs	r1, r2
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7ff f8b7 	bl	8003c00 <ble_send>
	for(;;) {
 8004a92:	e6f2      	b.n	800487a <task_send_ble_packet+0x12>
 8004a94:	200011bc 	.word	0x200011bc
 8004a98:	200011b4 	.word	0x200011b4
 8004a9c:	20000db4 	.word	0x20000db4
 8004aa0:	20001394 	.word	0x20001394

08004aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_MspInit+0x44>)
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <HAL_MspInit+0x44>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	619a      	str	r2, [r3, #24]
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_MspInit+0x44>)
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_MspInit+0x44>)
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_MspInit+0x44>)
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	0549      	lsls	r1, r1, #21
 8004acc:	430a      	orrs	r2, r1
 8004ace:	61da      	str	r2, [r3, #28]
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_MspInit+0x44>)
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	055b      	lsls	r3, r3, #21
 8004ad8:	4013      	ands	r3, r2
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b002      	add	sp, #8
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40021000 	.word	0x40021000

08004aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	2314      	movs	r3, #20
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	0018      	movs	r0, r3
 8004afa:	2314      	movs	r3, #20
 8004afc:	001a      	movs	r2, r3
 8004afe:	2100      	movs	r1, #0
 8004b00:	f001 fa93 	bl	800602a <memset>
  if(hi2c->Instance==I2C1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_I2C_MspInit+0x90>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d132      	bne.n	8004b74 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	02c9      	lsls	r1, r1, #11
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	615a      	str	r2, [r3, #20]
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	02db      	lsls	r3, r3, #11
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin|IMU_SCL_Pin;
 8004b2a:	2114      	movs	r1, #20
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	22c0      	movs	r2, #192	; 0xc0
 8004b30:	0052      	lsls	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	2212      	movs	r2, #18
 8004b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	2203      	movs	r2, #3
 8004b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	2201      	movs	r2, #1
 8004b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <HAL_I2C_MspInit+0x98>)
 8004b50:	0019      	movs	r1, r3
 8004b52:	0010      	movs	r0, r2
 8004b54:	f7fc f92c 	bl	8000db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	0389      	lsls	r1, r1, #14
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_I2C_MspInit+0x94>)
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	039b      	lsls	r3, r3, #14
 8004b6e:	4013      	ands	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b00a      	add	sp, #40	; 0x28
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40005400 	.word	0x40005400
 8004b80:	40021000 	.word	0x40021000
 8004b84:	48000400 	.word	0x48000400

08004b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	2314      	movs	r3, #20
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	0018      	movs	r0, r3
 8004b96:	2314      	movs	r3, #20
 8004b98:	001a      	movs	r2, r3
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	f001 fa45 	bl	800602a <memset>
  if(hspi->Instance==SPI1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_SPI_MspInit+0x90>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d132      	bne.n	8004c10 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004baa:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	0149      	lsls	r1, r1, #5
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	0289      	lsls	r1, r1, #10
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	615a      	str	r2, [r3, #20]
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <HAL_SPI_MspInit+0x94>)
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	029b      	lsls	r3, r3, #10
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8004be2:	2114      	movs	r1, #20
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	22e0      	movs	r2, #224	; 0xe0
 8004be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	2202      	movs	r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	187b      	adds	r3, r7, r1
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	187a      	adds	r2, r7, r1
 8004c04:	2390      	movs	r3, #144	; 0x90
 8004c06:	05db      	lsls	r3, r3, #23
 8004c08:	0011      	movs	r1, r2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7fc f8d0 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b00a      	add	sp, #40	; 0x28
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40013000 	.word	0x40013000
 8004c1c:	40021000 	.word	0x40021000

08004c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	231c      	movs	r3, #28
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	2314      	movs	r3, #20
 8004c30:	001a      	movs	r2, r3
 8004c32:	2100      	movs	r1, #0
 8004c34:	f001 f9f9 	bl	800602a <memset>
  if(huart->Instance==USART1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a64      	ldr	r2, [pc, #400]	; (8004dd0 <HAL_UART_MspInit+0x1b0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d163      	bne.n	8004d0a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c42:	4b64      	ldr	r3, [pc, #400]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	01c9      	lsls	r1, r1, #7
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]
 8004c50:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0289      	lsls	r1, r1, #10
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	615a      	str	r2, [r3, #20]
 8004c6c:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	4013      	ands	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8004c7a:	211c      	movs	r1, #28
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	22c0      	movs	r2, #192	; 0xc0
 8004c80:	00d2      	lsls	r2, r2, #3
 8004c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	2202      	movs	r2, #2
 8004c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	187b      	adds	r3, r7, r1
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	2203      	movs	r2, #3
 8004c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	2201      	movs	r2, #1
 8004c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9c:	187a      	adds	r2, r7, r1
 8004c9e:	2390      	movs	r3, #144	; 0x90
 8004ca0:	05db      	lsls	r3, r3, #23
 8004ca2:	0011      	movs	r1, r2
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7fc f883 	bl	8000db0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004caa:	4b4b      	ldr	r3, [pc, #300]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cac:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <HAL_UART_MspInit+0x1bc>)
 8004cae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cb0:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb6:	4b48      	ldr	r3, [pc, #288]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cbc:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc2:	4b45      	ldr	r3, [pc, #276]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc8:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004cce:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004cd4:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	0152      	lsls	r2, r2, #5
 8004cda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7fb fe7c 	bl	80009dc <HAL_DMA_Init>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004ce8:	f7ff fd9a 	bl	8004820 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <HAL_UART_MspInit+0x1b8>)
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	201b      	movs	r0, #27
 8004cfe:	f7fb fe47 	bl	8000990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d02:	201b      	movs	r0, #27
 8004d04:	f7fb fe59 	bl	80009ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d08:	e05e      	b.n	8004dc8 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_UART_MspInit+0x1c0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d159      	bne.n	8004dc8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d14:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	0289      	lsls	r1, r1, #10
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	61da      	str	r2, [r3, #28]
 8004d22:	4b2c      	ldr	r3, [pc, #176]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	0289      	lsls	r1, r1, #10
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <HAL_UART_MspInit+0x1b4>)
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	029b      	lsls	r3, r3, #10
 8004d46:	4013      	ands	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8004d4c:	211c      	movs	r1, #28
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	220c      	movs	r2, #12
 8004d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	2202      	movs	r2, #2
 8004d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2203      	movs	r2, #3
 8004d64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2201      	movs	r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	187a      	adds	r2, r7, r1
 8004d6e:	2390      	movs	r3, #144	; 0x90
 8004d70:	05db      	lsls	r3, r3, #23
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7fc f81b 	bl	8000db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <HAL_UART_MspInit+0x1c8>)
 8004d7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d86:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d8e:	2280      	movs	r2, #128	; 0x80
 8004d90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004da0:	2220      	movs	r2, #32
 8004da2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004da6:	22c0      	movs	r2, #192	; 0xc0
 8004da8:	0192      	lsls	r2, r2, #6
 8004daa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fb fe14 	bl	80009dc <HAL_DMA_Init>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004db8:	f7ff fd32 	bl	8004820 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004dc0:	665a      	str	r2, [r3, #100]	; 0x64
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_UART_MspInit+0x1c4>)
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b00c      	add	sp, #48	; 0x30
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	20001350 	.word	0x20001350
 8004ddc:	4002001c 	.word	0x4002001c
 8004de0:	40004400 	.word	0x40004400
 8004de4:	200012c0 	.word	0x200012c0
 8004de8:	40020058 	.word	0x40020058

08004dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	0019      	movs	r1, r3
 8004e02:	200d      	movs	r0, #13
 8004e04:	f7fb fdc4 	bl	8000990 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8004e08:	200d      	movs	r0, #13
 8004e0a:	f7fb fdd6 	bl	80009ba <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004e0e:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <HAL_InitTick+0xa8>)
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_InitTick+0xa8>)
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	0109      	lsls	r1, r1, #4
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_InitTick+0xa8>)
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	18fa      	adds	r2, r7, r3
 8004e2e:	2310      	movs	r3, #16
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	0011      	movs	r1, r2
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7fd fba1 	bl	800257c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e3a:	f7fd fb89 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	4914      	ldr	r1, [pc, #80]	; (8004e98 <HAL_InitTick+0xac>)
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fb f95e 	bl	8000108 <__udivsi3>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e54:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <HAL_InitTick+0xb4>)
 8004e56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e5a:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <HAL_InitTick+0xb8>)
 8004e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7fd fd14 	bl	80028a0 <HAL_TIM_Base_Init>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004e7c:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <HAL_InitTick+0xb0>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fd fd42 	bl	8002908 <HAL_TIM_Base_Start_IT>
 8004e84:	0003      	movs	r3, r0
 8004e86:	e000      	b.n	8004e8a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b00a      	add	sp, #40	; 0x28
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	40021000 	.word	0x40021000
 8004e98:	000f4240 	.word	0x000f4240
 8004e9c:	200014d8 	.word	0x200014d8
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	000003e7 	.word	0x000003e7

08004ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eb6:	e7fe      	b.n	8004eb6 <HardFault_Handler+0x4>

08004eb8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <DMA1_Channel2_3_IRQHandler+0x14>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fb fe8c 	bl	8000bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20001350 	.word	0x20001350

08004ed0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <DMA1_Channel4_5_IRQHandler+0x14>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fb fe80 	bl	8000bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	200012c0 	.word	0x200012c0

08004ee8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7fd fd23 	bl	800293a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	200014d8 	.word	0x200014d8

08004f00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <USART1_IRQHandler+0x14>)
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fe f8da 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20001394 	.word	0x20001394

08004f18 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <SystemInit+0x70>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <SystemInit+0x70>)
 8004f22:	2101      	movs	r1, #1
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <SystemInit+0x70>)
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <SystemInit+0x70>)
 8004f2e:	4917      	ldr	r1, [pc, #92]	; (8004f8c <SystemInit+0x74>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <SystemInit+0x70>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <SystemInit+0x70>)
 8004f3a:	4915      	ldr	r1, [pc, #84]	; (8004f90 <SystemInit+0x78>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <SystemInit+0x70>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <SystemInit+0x70>)
 8004f46:	4913      	ldr	r1, [pc, #76]	; (8004f94 <SystemInit+0x7c>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <SystemInit+0x70>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <SystemInit+0x70>)
 8004f52:	4911      	ldr	r1, [pc, #68]	; (8004f98 <SystemInit+0x80>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <SystemInit+0x70>)
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <SystemInit+0x70>)
 8004f5e:	210f      	movs	r1, #15
 8004f60:	438a      	bics	r2, r1
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <SystemInit+0x70>)
 8004f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <SystemInit+0x70>)
 8004f6a:	490c      	ldr	r1, [pc, #48]	; (8004f9c <SystemInit+0x84>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <SystemInit+0x70>)
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <SystemInit+0x70>)
 8004f76:	2101      	movs	r1, #1
 8004f78:	438a      	bics	r2, r1
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <SystemInit+0x70>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]

}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	08ffb80c 	.word	0x08ffb80c
 8004f90:	fef6ffff 	.word	0xfef6ffff
 8004f94:	fffbffff 	.word	0xfffbffff
 8004f98:	ffc0ffff 	.word	0xffc0ffff
 8004f9c:	fffffeec 	.word	0xfffffeec

08004fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3308      	adds	r3, #8
 8004fac:	001a      	movs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4252      	negs	r2, r2
 8004fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	001a      	movs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b004      	add	sp, #16
 8005034:	bd80      	pop	{r7, pc}

08005036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3301      	adds	r3, #1
 800504a:	d103      	bne.n	8005054 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e00c      	b.n	800506e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3308      	adds	r3, #8
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e002      	b.n	8005062 <vListInsert+0x2c>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d2f6      	bcs.n	800505c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6892      	ldr	r2, [r2, #8]
 80050b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6852      	ldr	r2, [r2, #4]
 80050c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d103      	bne.n	80050d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b004      	add	sp, #16
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050f2:	b590      	push	{r4, r7, lr}
 80050f4:	b08d      	sub	sp, #52	; 0x34
 80050f6:	af04      	add	r7, sp, #16
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	1dbb      	adds	r3, r7, #6
 8005100:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	1dbb      	adds	r3, r7, #6
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fd91 	bl	8005c30 <pvPortMalloc>
 800510e:	0003      	movs	r3, r0
 8005110:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005118:	2054      	movs	r0, #84	; 0x54
 800511a:	f000 fd89 	bl	8005c30 <pvPortMalloc>
 800511e:	0003      	movs	r3, r0
 8005120:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
 800512e:	e006      	b.n	800513e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 fe22 	bl	8005d7c <vPortFree>
 8005138:	e001      	b.n	800513e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005144:	1dbb      	adds	r3, r7, #6
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	683c      	ldr	r4, [r7, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	2300      	movs	r3, #0
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	0023      	movs	r3, r4
 8005160:	f000 f810 	bl	8005184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f886 	bl	8005278 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800516c:	2301      	movs	r3, #1
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	e002      	b.n	8005178 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005172:	2301      	movs	r3, #1
 8005174:	425b      	negs	r3, r3
 8005176:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005178:	69bb      	ldr	r3, [r7, #24]
	}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b009      	add	sp, #36	; 0x24
 8005180:	bd90      	pop	{r4, r7, pc}
	...

08005184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4936      	ldr	r1, [pc, #216]	; (8005274 <prvInitialiseNewTask+0xf0>)
 800519a:	468c      	mov	ip, r1
 800519c:	4463      	add	r3, ip
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2207      	movs	r2, #7
 80051a8:	4393      	bics	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2207      	movs	r2, #7
 80051b0:	4013      	ands	r3, r2
 80051b2:	d001      	beq.n	80051b8 <prvInitialiseNewTask+0x34>
 80051b4:	b672      	cpsid	i
 80051b6:	e7fe      	b.n	80051b6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e013      	b.n	80051e6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	18d3      	adds	r3, r2, r3
 80051c4:	7818      	ldrb	r0, [r3, #0]
 80051c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c8:	2134      	movs	r1, #52	; 0x34
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	185b      	adds	r3, r3, r1
 80051d0:	1c02      	adds	r2, r0, #0
 80051d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3301      	adds	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d9e8      	bls.n	80051be <prvInitialiseNewTask+0x3a>
 80051ec:	e000      	b.n	80051f0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80051ee:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2243      	movs	r2, #67	; 0x43
 80051f4:	2100      	movs	r1, #0
 80051f6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d901      	bls.n	8005202 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fe:	2306      	movs	r3, #6
 8005200:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	2200      	movs	r2, #0
 8005212:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	3304      	adds	r3, #4
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff fedf 	bl	8004fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	3318      	adds	r3, #24
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff feda 	bl	8004fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2207      	movs	r2, #7
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	2200      	movs	r2, #0
 8005242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	2250      	movs	r2, #80	; 0x50
 8005248:	2100      	movs	r1, #0
 800524a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	0018      	movs	r0, r3
 8005254:	f000 fbca 	bl	80059ec <pxPortInitialiseStack>
 8005258:	0002      	movs	r2, r0
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b006      	add	sp, #24
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	3fffffff 	.word	0x3fffffff

08005278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005280:	f000 fc44 	bl	8005b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <prvAddNewTaskToReadyList+0xb0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <prvAddNewTaskToReadyList+0xb0>)
 800528c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <prvAddNewTaskToReadyList+0xb4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005296:	4b25      	ldr	r3, [pc, #148]	; (800532c <prvAddNewTaskToReadyList+0xb4>)
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800529c:	4b22      	ldr	r3, [pc, #136]	; (8005328 <prvAddNewTaskToReadyList+0xb0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052a4:	f000 fa9a 	bl	80057dc <prvInitialiseTaskLists>
 80052a8:	e00d      	b.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <prvAddNewTaskToReadyList+0xb8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <prvAddNewTaskToReadyList+0xb4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d802      	bhi.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <prvAddNewTaskToReadyList+0xb4>)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052c6:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <prvAddNewTaskToReadyList+0xbc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <prvAddNewTaskToReadyList+0xbc>)
 80052ce:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <prvAddNewTaskToReadyList+0xc0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <prvAddNewTaskToReadyList+0x6c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b15      	ldr	r3, [pc, #84]	; (8005338 <prvAddNewTaskToReadyList+0xc0>)
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	0013      	movs	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 80052f2:	189a      	adds	r2, r3, r2
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	0019      	movs	r1, r3
 80052fa:	0010      	movs	r0, r2
 80052fc:	f7ff fe79 	bl	8004ff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005300:	f000 fc16 	bl	8005b30 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvAddNewTaskToReadyList+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <prvAddNewTaskToReadyList+0xb4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	429a      	cmp	r2, r3
 8005318:	d201      	bcs.n	800531e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800531a:	f000 fbe7 	bl	8005aec <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b002      	add	sp, #8
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	20000124 	.word	0x20000124
 800532c:	20000024 	.word	0x20000024
 8005330:	20000130 	.word	0x20000130
 8005334:	20000140 	.word	0x20000140
 8005338:	2000012c 	.word	0x2000012c
 800533c:	20000028 	.word	0x20000028

08005340 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <vTaskDelayUntil+0x18>
 8005354:	b672      	cpsid	i
 8005356:	e7fe      	b.n	8005356 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <vTaskDelayUntil+0x22>
 800535e:	b672      	cpsid	i
 8005360:	e7fe      	b.n	8005360 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8005362:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <vTaskDelayUntil+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <vTaskDelayUntil+0x2e>
 800536a:	b672      	cpsid	i
 800536c:	e7fe      	b.n	800536c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 800536e:	f000 f879 	bl	8005464 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <vTaskDelayUntil+0xb4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d20b      	bcs.n	80053a4 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	429a      	cmp	r2, r3
 8005394:	d211      	bcs.n	80053ba <vTaskDelayUntil+0x7a>
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d90d      	bls.n	80053ba <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e00a      	b.n	80053ba <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d303      	bcc.n	80053b6 <vTaskDelayUntil+0x76>
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d901      	bls.n	80053ba <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2100      	movs	r1, #0
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 fab8 	bl	8005944 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80053d4:	f000 f852 	bl	800547c <xTaskResumeAll>
 80053d8:	0003      	movs	r3, r0
 80053da:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 80053e2:	f000 fb83 	bl	8005aec <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b006      	add	sp, #24
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	2000014c 	.word	0x2000014c
 80053f4:	20000128 	.word	0x20000128

080053f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80053fe:	4913      	ldr	r1, [pc, #76]	; (800544c <vTaskStartScheduler+0x54>)
 8005400:	4813      	ldr	r0, [pc, #76]	; (8005450 <vTaskStartScheduler+0x58>)
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <vTaskStartScheduler+0x5c>)
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	f7ff fe70 	bl	80050f2 <xTaskCreate>
 8005412:	0003      	movs	r3, r0
 8005414:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10d      	bne.n	8005438 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800541c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <vTaskStartScheduler+0x60>)
 8005420:	2201      	movs	r2, #1
 8005422:	4252      	negs	r2, r2
 8005424:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <vTaskStartScheduler+0x64>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <vTaskStartScheduler+0x68>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005432:	f000 fb39 	bl	8005aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005436:	e004      	b.n	8005442 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3301      	adds	r3, #1
 800543c:	d101      	bne.n	8005442 <vTaskStartScheduler+0x4a>
 800543e:	b672      	cpsid	i
 8005440:	e7fe      	b.n	8005440 <vTaskStartScheduler+0x48>
}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b002      	add	sp, #8
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	080060f4 	.word	0x080060f4
 8005450:	080057bd 	.word	0x080057bd
 8005454:	20000148 	.word	0x20000148
 8005458:	20000144 	.word	0x20000144
 800545c:	20000130 	.word	0x20000130
 8005460:	20000128 	.word	0x20000128

08005464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <vTaskSuspendAll+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	4b02      	ldr	r3, [pc, #8]	; (8005478 <vTaskSuspendAll+0x14>)
 8005470:	601a      	str	r2, [r3, #0]
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	2000014c 	.word	0x2000014c

0800547c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800548a:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <xTaskResumeAll+0xf8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <xTaskResumeAll+0x1a>
 8005492:	b672      	cpsid	i
 8005494:	e7fe      	b.n	8005494 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005496:	f000 fb39 	bl	8005b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <xTaskResumeAll+0xf8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1e5a      	subs	r2, r3, #1
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <xTaskResumeAll+0xf8>)
 80054a2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a4:	4b33      	ldr	r3, [pc, #204]	; (8005574 <xTaskResumeAll+0xf8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d15b      	bne.n	8005564 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ac:	4b32      	ldr	r3, [pc, #200]	; (8005578 <xTaskResumeAll+0xfc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d057      	beq.n	8005564 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b4:	e02f      	b.n	8005516 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054b6:	4b31      	ldr	r3, [pc, #196]	; (800557c <xTaskResumeAll+0x100>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3318      	adds	r3, #24
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7ff fded 	bl	80050a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3304      	adds	r3, #4
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7ff fde8 	bl	80050a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <xTaskResumeAll+0x104>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d903      	bls.n	80054e6 <xTaskResumeAll+0x6a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b27      	ldr	r3, [pc, #156]	; (8005580 <xTaskResumeAll+0x104>)
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	0013      	movs	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <xTaskResumeAll+0x108>)
 80054f4:	189a      	adds	r2, r3, r2
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7ff fd78 	bl	8004ff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <xTaskResumeAll+0x10c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005510:	4b1e      	ldr	r3, [pc, #120]	; (800558c <xTaskResumeAll+0x110>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <xTaskResumeAll+0x100>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1cb      	bne.n	80054b6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005524:	f000 f9ea 	bl	80058fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <xTaskResumeAll+0x114>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00f      	beq.n	8005554 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005534:	f000 f83c 	bl	80055b0 <xTaskIncrementTick>
 8005538:	1e03      	subs	r3, r0, #0
 800553a:	d002      	beq.n	8005542 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <xTaskResumeAll+0x110>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f2      	bne.n	8005534 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xTaskResumeAll+0x114>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <xTaskResumeAll+0x110>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005560:	f000 fac4 	bl	8005aec <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005564:	f000 fae4 	bl	8005b30 <vPortExitCritical>

	return xAlreadyYielded;
 8005568:	68bb      	ldr	r3, [r7, #8]
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b004      	add	sp, #16
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	2000014c 	.word	0x2000014c
 8005578:	20000124 	.word	0x20000124
 800557c:	200000e4 	.word	0x200000e4
 8005580:	2000012c 	.word	0x2000012c
 8005584:	20000028 	.word	0x20000028
 8005588:	20000024 	.word	0x20000024
 800558c:	20000138 	.word	0x20000138
 8005590:	20000134 	.word	0x20000134

08005594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800559a:	4b04      	ldr	r3, [pc, #16]	; (80055ac <xTaskGetTickCount+0x18>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055a0:	687b      	ldr	r3, [r7, #4]
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b002      	add	sp, #8
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	20000128 	.word	0x20000128

080055b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ba:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <xTaskIncrementTick+0x13c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d000      	beq.n	80055c4 <xTaskIncrementTick+0x14>
 80055c2:	e083      	b.n	80056cc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80055c4:	4b4a      	ldr	r3, [pc, #296]	; (80056f0 <xTaskIncrementTick+0x140>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055cc:	4b48      	ldr	r3, [pc, #288]	; (80056f0 <xTaskIncrementTick+0x140>)
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d117      	bne.n	8005608 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80055d8:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <xTaskIncrementTick+0x144>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <xTaskIncrementTick+0x36>
 80055e2:	b672      	cpsid	i
 80055e4:	e7fe      	b.n	80055e4 <xTaskIncrementTick+0x34>
 80055e6:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <xTaskIncrementTick+0x144>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <xTaskIncrementTick+0x148>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <xTaskIncrementTick+0x144>)
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <xTaskIncrementTick+0x148>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	4b40      	ldr	r3, [pc, #256]	; (80056fc <xTaskIncrementTick+0x14c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <xTaskIncrementTick+0x14c>)
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f000 f97a 	bl	80058fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005608:	4b3d      	ldr	r3, [pc, #244]	; (8005700 <xTaskIncrementTick+0x150>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d34e      	bcc.n	80056b0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005612:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <xTaskIncrementTick+0x144>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xTaskIncrementTick+0x70>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xTaskIncrementTick+0x72>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <xTaskIncrementTick+0x150>)
 8005628:	2201      	movs	r2, #1
 800562a:	4252      	negs	r2, r2
 800562c:	601a      	str	r2, [r3, #0]
					break;
 800562e:	e03f      	b.n	80056b0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005630:	4b30      	ldr	r3, [pc, #192]	; (80056f4 <xTaskIncrementTick+0x144>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d203      	bcs.n	8005650 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005648:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <xTaskIncrementTick+0x150>)
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
						break;
 800564e:	e02f      	b.n	80056b0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3304      	adds	r3, #4
 8005654:	0018      	movs	r0, r3
 8005656:	f7ff fd24 	bl	80050a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3318      	adds	r3, #24
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fd1b 	bl	80050a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b24      	ldr	r3, [pc, #144]	; (8005704 <xTaskIncrementTick+0x154>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d903      	bls.n	8005680 <xTaskIncrementTick+0xd0>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4b21      	ldr	r3, [pc, #132]	; (8005704 <xTaskIncrementTick+0x154>)
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	0013      	movs	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	189b      	adds	r3, r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <xTaskIncrementTick+0x158>)
 800568e:	189a      	adds	r2, r3, r2
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3304      	adds	r3, #4
 8005694:	0019      	movs	r1, r3
 8005696:	0010      	movs	r0, r2
 8005698:	f7ff fcab 	bl	8004ff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <xTaskIncrementTick+0x15c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3b3      	bcc.n	8005612 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ae:	e7b0      	b.n	8005612 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056b0:	4b16      	ldr	r3, [pc, #88]	; (800570c <xTaskIncrementTick+0x15c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4914      	ldr	r1, [pc, #80]	; (8005708 <xTaskIncrementTick+0x158>)
 80056b8:	0013      	movs	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	189b      	adds	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	585b      	ldr	r3, [r3, r1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d907      	bls.n	80056d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e004      	b.n	80056d6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xTaskIncrementTick+0x160>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <xTaskIncrementTick+0x160>)
 80056d4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <xTaskIncrementTick+0x164>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80056de:	2301      	movs	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056e2:	697b      	ldr	r3, [r7, #20]
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b006      	add	sp, #24
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	2000014c 	.word	0x2000014c
 80056f0:	20000128 	.word	0x20000128
 80056f4:	200000dc 	.word	0x200000dc
 80056f8:	200000e0 	.word	0x200000e0
 80056fc:	2000013c 	.word	0x2000013c
 8005700:	20000144 	.word	0x20000144
 8005704:	2000012c 	.word	0x2000012c
 8005708:	20000028 	.word	0x20000028
 800570c:	20000024 	.word	0x20000024
 8005710:	20000134 	.word	0x20000134
 8005714:	20000138 	.word	0x20000138

08005718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <vTaskSwitchContext+0x90>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <vTaskSwitchContext+0x94>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800572c:	e037      	b.n	800579e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800572e:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <vTaskSwitchContext+0x94>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <vTaskSwitchContext+0x98>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	e007      	b.n	800574c <vTaskSwitchContext+0x34>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <vTaskSwitchContext+0x2e>
 8005742:	b672      	cpsid	i
 8005744:	e7fe      	b.n	8005744 <vTaskSwitchContext+0x2c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	4919      	ldr	r1, [pc, #100]	; (80057b4 <vTaskSwitchContext+0x9c>)
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	0013      	movs	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	189b      	adds	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	585b      	ldr	r3, [r3, r1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0ee      	beq.n	800573c <vTaskSwitchContext+0x24>
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	0013      	movs	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	189b      	adds	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <vTaskSwitchContext+0x9c>)
 800576a:	189b      	adds	r3, r3, r2
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	429a      	cmp	r2, r3
 8005782:	d104      	bne.n	800578e <vTaskSwitchContext+0x76>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <vTaskSwitchContext+0xa0>)
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <vTaskSwitchContext+0x98>)
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	2000014c 	.word	0x2000014c
 80057ac:	20000138 	.word	0x20000138
 80057b0:	2000012c 	.word	0x2000012c
 80057b4:	20000028 	.word	0x20000028
 80057b8:	20000024 	.word	0x20000024

080057bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c4:	f000 f84e 	bl	8005864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <prvIdleTask+0x1c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d9f9      	bls.n	80057c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057d0:	f000 f98c 	bl	8005aec <vPortYield>
		prvCheckTasksWaitingTermination();
 80057d4:	e7f6      	b.n	80057c4 <prvIdleTask+0x8>
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	20000028 	.word	0x20000028

080057dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	e00c      	b.n	8005802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	0013      	movs	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <prvInitialiseTaskLists+0x68>)
 80057f4:	189b      	adds	r3, r3, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7ff fbd2 	bl	8004fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3301      	adds	r3, #1
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b06      	cmp	r3, #6
 8005806:	d9ef      	bls.n	80057e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005808:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <prvInitialiseTaskLists+0x6c>)
 800580a:	0018      	movs	r0, r3
 800580c:	f7ff fbc8 	bl	8004fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005810:	4b0e      	ldr	r3, [pc, #56]	; (800584c <prvInitialiseTaskLists+0x70>)
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff fbc4 	bl	8004fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <prvInitialiseTaskLists+0x74>)
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fbc0 	bl	8004fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <prvInitialiseTaskLists+0x78>)
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fbbc 	bl	8004fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <prvInitialiseTaskLists+0x7c>)
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff fbb8 	bl	8004fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <prvInitialiseTaskLists+0x80>)
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <prvInitialiseTaskLists+0x6c>)
 8005834:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <prvInitialiseTaskLists+0x84>)
 8005838:	4a04      	ldr	r2, [pc, #16]	; (800584c <prvInitialiseTaskLists+0x70>)
 800583a:	601a      	str	r2, [r3, #0]
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b002      	add	sp, #8
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000028 	.word	0x20000028
 8005848:	200000b4 	.word	0x200000b4
 800584c:	200000c8 	.word	0x200000c8
 8005850:	200000e4 	.word	0x200000e4
 8005854:	200000f8 	.word	0x200000f8
 8005858:	20000110 	.word	0x20000110
 800585c:	200000dc 	.word	0x200000dc
 8005860:	200000e0 	.word	0x200000e0

08005864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586a:	e027      	b.n	80058bc <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 800586c:	f7ff fdfa 	bl	8005464 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005870:	4b16      	ldr	r3, [pc, #88]	; (80058cc <prvCheckTasksWaitingTermination+0x68>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	425a      	negs	r2, r3
 8005876:	4153      	adcs	r3, r2
 8005878:	b2db      	uxtb	r3, r3
 800587a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800587c:	f7ff fdfe 	bl	800547c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11a      	bne.n	80058bc <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005886:	f000 f941 	bl	8005b0c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <prvCheckTasksWaitingTermination+0x68>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	3304      	adds	r3, #4
 8005896:	0018      	movs	r0, r3
 8005898:	f7ff fc03 	bl	80050a2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <prvCheckTasksWaitingTermination+0x6c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <prvCheckTasksWaitingTermination+0x6c>)
 80058a4:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <prvCheckTasksWaitingTermination+0x70>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <prvCheckTasksWaitingTermination+0x70>)
 80058ae:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80058b0:	f000 f93e 	bl	8005b30 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f80e 	bl	80058d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <prvCheckTasksWaitingTermination+0x70>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1d3      	bne.n	800586c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	200000f8 	.word	0x200000f8
 80058d0:	20000124 	.word	0x20000124
 80058d4:	2000010c 	.word	0x2000010c

080058d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 fa49 	bl	8005d7c <vPortFree>
			vPortFree( pxTCB );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fa45 	bl	8005d7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b002      	add	sp, #8
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <prvResetNextTaskUnblockTime+0x40>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <prvResetNextTaskUnblockTime+0x14>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <prvResetNextTaskUnblockTime+0x16>
 8005910:	2300      	movs	r3, #0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvResetNextTaskUnblockTime+0x44>)
 8005918:	2201      	movs	r2, #1
 800591a:	4252      	negs	r2, r2
 800591c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800591e:	e008      	b.n	8005932 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvResetNextTaskUnblockTime+0x40>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <prvResetNextTaskUnblockTime+0x44>)
 8005930:	601a      	str	r2, [r3, #0]
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	46bd      	mov	sp, r7
 8005936:	b002      	add	sp, #8
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	200000dc 	.word	0x200000dc
 8005940:	20000144 	.word	0x20000144

08005944 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3304      	adds	r3, #4
 800595a:	0018      	movs	r0, r3
 800595c:	f7ff fba1 	bl	80050a2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3301      	adds	r3, #1
 8005964:	d10b      	bne.n	800597e <prvAddCurrentTaskToDelayedList+0x3a>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005974:	0011      	movs	r1, r2
 8005976:	0018      	movs	r0, r3
 8005978:	f7ff fb3b 	bl	8004ff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800597c:	e026      	b.n	80059cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	18d3      	adds	r3, r2, r3
 8005984:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	429a      	cmp	r2, r3
 8005994:	d209      	bcs.n	80059aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3304      	adds	r3, #4
 80059a0:	0019      	movs	r1, r3
 80059a2:	0010      	movs	r0, r2
 80059a4:	f7ff fb47 	bl	8005036 <vListInsert>
}
 80059a8:	e010      	b.n	80059cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059aa:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3304      	adds	r3, #4
 80059b4:	0019      	movs	r1, r3
 80059b6:	0010      	movs	r0, r2
 80059b8:	f7ff fb3d 	bl	8005036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d202      	bcs.n	80059cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b004      	add	sp, #16
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000128 	.word	0x20000128
 80059d8:	20000024 	.word	0x20000024
 80059dc:	20000110 	.word	0x20000110
 80059e0:	200000e0 	.word	0x200000e0
 80059e4:	200000dc 	.word	0x200000dc
 80059e8:	20000144 	.word	0x20000144

080059ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b04      	subs	r3, #4
 80059fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2280      	movs	r2, #128	; 0x80
 8005a02:	0452      	lsls	r2, r2, #17
 8005a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b04      	subs	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <pxPortInitialiseStack+0x50>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b14      	subs	r3, #20
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b20      	subs	r3, #32
 8005a2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b004      	add	sp, #16
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	08005a41 	.word	0x08005a41

08005a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a44:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <prvTaskExitError+0x14>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <prvTaskExitError+0x10>
 8005a4c:	b672      	cpsid	i
 8005a4e:	e7fe      	b.n	8005a4e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8005a50:	b672      	cpsid	i
	for( ;; );
 8005a52:	e7fe      	b.n	8005a52 <prvTaskExitError+0x12>
 8005a54:	20000004 	.word	0x20000004

08005a58 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005a70:	4a0b      	ldr	r2, [pc, #44]	; (8005aa0 <pxCurrentTCBConst2>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	3020      	adds	r0, #32
 8005a78:	f380 8809 	msr	PSP, r0
 8005a7c:	2002      	movs	r0, #2
 8005a7e:	f380 8814 	msr	CONTROL, r0
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005a88:	46ae      	mov	lr, r5
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	bc04      	pop	{r2}
 8005a8e:	b662      	cpsie	i
 8005a90:	4718      	bx	r3
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46c0      	nop			; (mov r8, r8)

08005aa0 <pxCurrentTCBConst2>:
 8005aa0:	20000024 	.word	0x20000024
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46c0      	nop			; (mov r8, r8)

08005aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <xPortStartScheduler+0x3c>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <xPortStartScheduler+0x3c>)
 8005ab2:	21ff      	movs	r1, #255	; 0xff
 8005ab4:	0409      	lsls	r1, r1, #16
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <xPortStartScheduler+0x3c>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <xPortStartScheduler+0x3c>)
 8005ac0:	21ff      	movs	r1, #255	; 0xff
 8005ac2:	0609      	lsls	r1, r1, #24
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ac8:	f000 f898 	bl	8005bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <xPortStartScheduler+0x40>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005ad2:	f7ff ffcd 	bl	8005a70 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8005ad6:	f7ff ffb3 	bl	8005a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	e000ed20 	.word	0xe000ed20
 8005ae8:	20000004 	.word	0x20000004

08005aec <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <vPortYield+0x1c>)
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	0552      	lsls	r2, r2, #21
 8005af6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8005af8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005afc:	f3bf 8f6f 	isb	sy
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005b10:	b672      	cpsid	i
    uxCriticalNesting++;
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <vPortEnterCritical+0x20>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <vPortEnterCritical+0x20>)
 8005b1a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8005b1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005b20:	f3bf 8f6f 	isb	sy
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	20000004 	.word	0x20000004

08005b30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <vPortExitCritical+0x2c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <vPortExitCritical+0x10>
 8005b3c:	b672      	cpsid	i
 8005b3e:	e7fe      	b.n	8005b3e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <vPortExitCritical+0x2c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <vPortExitCritical+0x2c>)
 8005b48:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <vPortExitCritical+0x2c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d100      	bne.n	8005b54 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005b52:	b662      	cpsie	i
    }
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	20000004 	.word	0x20000004

08005b60 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005b60:	f3ef 8010 	mrs	r0, PRIMASK
 8005b64:	b672      	cpsid	i
 8005b66:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3

08005b6c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8005b6c:	f380 8810 	msr	PRIMASK, r0
 8005b70:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8005b72:	46c0      	nop			; (mov r8, r8)
	...

08005b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <pxCurrentTCBConst>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	3820      	subs	r0, #32
 8005b8a:	6010      	str	r0, [r2, #0]
 8005b8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005b8e:	4644      	mov	r4, r8
 8005b90:	464d      	mov	r5, r9
 8005b92:	4656      	mov	r6, sl
 8005b94:	465f      	mov	r7, fp
 8005b96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005b98:	b508      	push	{r3, lr}
 8005b9a:	b672      	cpsid	i
 8005b9c:	f7ff fdbc 	bl	8005718 <vTaskSwitchContext>
 8005ba0:	b662      	cpsie	i
 8005ba2:	bc0c      	pop	{r2, r3}
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	6808      	ldr	r0, [r1, #0]
 8005ba8:	3010      	adds	r0, #16
 8005baa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005bac:	46a0      	mov	r8, r4
 8005bae:	46a9      	mov	r9, r5
 8005bb0:	46b2      	mov	sl, r6
 8005bb2:	46bb      	mov	fp, r7
 8005bb4:	f380 8809 	msr	PSP, r0
 8005bb8:	3820      	subs	r0, #32
 8005bba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005bbc:	4718      	bx	r3
 8005bbe:	46c0      	nop			; (mov r8, r8)

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	20000024 	.word	0x20000024
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46c0      	nop			; (mov r8, r8)

08005bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bce:	f7ff ffc7 	bl	8005b60 <ulSetInterruptMaskFromISR>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bd6:	f7ff fceb 	bl	80055b0 <xTaskIncrementTick>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d003      	beq.n	8005be6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <SysTick_Handler+0x30>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	0552      	lsls	r2, r2, #21
 8005be4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff ffbf 	bl	8005b6c <vClearInterruptMaskFromISR>
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <vPortSetupTimerInterrupt+0x28>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	23fa      	movs	r3, #250	; 0xfa
 8005c06:	0099      	lsls	r1, r3, #2
 8005c08:	0010      	movs	r0, r2
 8005c0a:	f7fa fa7d 	bl	8000108 <__udivsi3>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	001a      	movs	r2, r3
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <vPortSetupTimerInterrupt+0x2c>)
 8005c14:	3a01      	subs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <vPortSetupTimerInterrupt+0x30>)
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000000 	.word	0x20000000
 8005c28:	e000e014 	.word	0xe000e014
 8005c2c:	e000e010 	.word	0xe000e010

08005c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005c3c:	f7ff fc12 	bl	8005464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c40:	4b49      	ldr	r3, [pc, #292]	; (8005d68 <pvPortMalloc+0x138>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c48:	f000 f8e0 	bl	8005e0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c4c:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <pvPortMalloc+0x13c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4013      	ands	r3, r2
 8005c54:	d000      	beq.n	8005c58 <pvPortMalloc+0x28>
 8005c56:	e079      	b.n	8005d4c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005c5e:	2208      	movs	r2, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2207      	movs	r2, #7
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d00a      	beq.n	8005c84 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2207      	movs	r2, #7
 8005c72:	4393      	bics	r3, r2
 8005c74:	3308      	adds	r3, #8
 8005c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2207      	movs	r2, #7
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d001      	beq.n	8005c84 <pvPortMalloc+0x54>
 8005c80:	b672      	cpsid	i
 8005c82:	e7fe      	b.n	8005c82 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d060      	beq.n	8005d4c <pvPortMalloc+0x11c>
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <pvPortMalloc+0x140>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d85b      	bhi.n	8005d4c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c94:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <pvPortMalloc+0x144>)
 8005c96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <pvPortMalloc+0x144>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9e:	e004      	b.n	8005caa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <pvPortMalloc+0x8c>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cbc:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <pvPortMalloc+0x138>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d042      	beq.n	8005d4c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	189b      	adds	r3, r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d916      	bls.n	8005d16 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	18d3      	adds	r3, r2, r3
 8005cee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2207      	movs	r2, #7
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d001      	beq.n	8005cfc <pvPortMalloc+0xcc>
 8005cf8:	b672      	cpsid	i
 8005cfa:	e7fe      	b.n	8005cfa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f000 f8db 	bl	8005ecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <pvPortMalloc+0x140>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <pvPortMalloc+0x140>)
 8005d22:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <pvPortMalloc+0x140>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <pvPortMalloc+0x148>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d203      	bcs.n	8005d38 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <pvPortMalloc+0x140>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <pvPortMalloc+0x148>)
 8005d36:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <pvPortMalloc+0x13c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d4c:	f7ff fb96 	bl	800547c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2207      	movs	r2, #7
 8005d54:	4013      	ands	r3, r2
 8005d56:	d001      	beq.n	8005d5c <pvPortMalloc+0x12c>
 8005d58:	b672      	cpsid	i
 8005d5a:	e7fe      	b.n	8005d5a <pvPortMalloc+0x12a>
	return pvReturn;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	0018      	movs	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b006      	add	sp, #24
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000d58 	.word	0x20000d58
 8005d6c:	20000d64 	.word	0x20000d64
 8005d70:	20000d5c 	.word	0x20000d5c
 8005d74:	20000d50 	.word	0x20000d50
 8005d78:	20000d60 	.word	0x20000d60

08005d7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d035      	beq.n	8005dfa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d8e:	2308      	movs	r3, #8
 8005d90:	425b      	negs	r3, r3
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	18d3      	adds	r3, r2, r3
 8005d96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <vPortFree+0x88>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4013      	ands	r3, r2
 8005da6:	d101      	bne.n	8005dac <vPortFree+0x30>
 8005da8:	b672      	cpsid	i
 8005daa:	e7fe      	b.n	8005daa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <vPortFree+0x3c>
 8005db4:	b672      	cpsid	i
 8005db6:	e7fe      	b.n	8005db6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <vPortFree+0x88>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d01a      	beq.n	8005dfa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <vPortFree+0x88>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ddc:	f7ff fb42 	bl	8005464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <vPortFree+0x8c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	18d2      	adds	r2, r2, r3
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <vPortFree+0x8c>)
 8005dec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 f86b 	bl	8005ecc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005df6:	f7ff fb41 	bl	800547c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	20000d64 	.word	0x20000d64
 8005e08:	20000d5c 	.word	0x20000d5c

08005e0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e12:	23c0      	movs	r3, #192	; 0xc0
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e18:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <prvHeapInit+0xa8>)
 8005e1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2207      	movs	r2, #7
 8005e20:	4013      	ands	r3, r2
 8005e22:	d00c      	beq.n	8005e3e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3307      	adds	r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	4393      	bics	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	4b1e      	ldr	r3, [pc, #120]	; (8005eb4 <prvHeapInit+0xa8>)
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <prvHeapInit+0xac>)
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <prvHeapInit+0xac>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e56:	2208      	movs	r2, #8
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2207      	movs	r2, #7
 8005e62:	4393      	bics	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <prvHeapInit+0xb0>)
 8005e6a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005e6c:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <prvHeapInit+0xb0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e74:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <prvHeapInit+0xb0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <prvHeapInit+0xb0>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <prvHeapInit+0xb4>)
 8005e98:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <prvHeapInit+0xb8>)
 8005ea0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <prvHeapInit+0xbc>)
 8005ea4:	2280      	movs	r2, #128	; 0x80
 8005ea6:	0612      	lsls	r2, r2, #24
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b004      	add	sp, #16
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	20000150 	.word	0x20000150
 8005eb8:	20000d50 	.word	0x20000d50
 8005ebc:	20000d58 	.word	0x20000d58
 8005ec0:	20000d60 	.word	0x20000d60
 8005ec4:	20000d5c 	.word	0x20000d5c
 8005ec8:	20000d64 	.word	0x20000d64

08005ecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ed4:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <prvInsertBlockIntoFreeList+0xa8>)
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e002      	b.n	8005ee0 <prvInsertBlockIntoFreeList+0x14>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d8f7      	bhi.n	8005eda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d108      	bne.n	8005f0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	18d2      	adds	r2, r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	18d2      	adds	r2, r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d118      	bne.n	8005f54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvInsertBlockIntoFreeList+0xac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d00d      	beq.n	8005f4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	18d2      	adds	r2, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e008      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <prvInsertBlockIntoFreeList+0xac>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e003      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d002      	beq.n	8005f6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b004      	add	sp, #16
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	20000d50 	.word	0x20000d50
 8005f78:	20000d58 	.word	0x20000d58

08005f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f80:	480d      	ldr	r0, [pc, #52]	; (8005fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f82:	490e      	ldr	r1, [pc, #56]	; (8005fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f84:	4a0e      	ldr	r2, [pc, #56]	; (8005fc0 <LoopForever+0xe>)
  movs r3, #0
 8005f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f88:	e002      	b.n	8005f90 <LoopCopyDataInit>

08005f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f8e:	3304      	adds	r3, #4

08005f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f94:	d3f9      	bcc.n	8005f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f96:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f98:	4c0b      	ldr	r4, [pc, #44]	; (8005fc8 <LoopForever+0x16>)
  movs r3, #0
 8005f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f9c:	e001      	b.n	8005fa2 <LoopFillZerobss>

08005f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fa0:	3204      	adds	r2, #4

08005fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fa4:	d3fb      	bcc.n	8005f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005fa6:	f7fe ffb7 	bl	8004f18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005faa:	f000 f811 	bl	8005fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fae:	f7fe f98f 	bl	80042d0 <main>

08005fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8005fb2:	e7fe      	b.n	8005fb2 <LoopForever>
  ldr   r0, =_estack
 8005fb4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fbc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8005fc0:	080061dc 	.word	0x080061dc
  ldr r2, =_sbss
 8005fc4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8005fc8:	20001518 	.word	0x20001518

08005fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fcc:	e7fe      	b.n	8005fcc <ADC1_IRQHandler>
	...

08005fd0 <__libc_init_array>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	4d0c      	ldr	r5, [pc, #48]	; (8006008 <__libc_init_array+0x38>)
 8005fd6:	4c0d      	ldr	r4, [pc, #52]	; (800600c <__libc_init_array+0x3c>)
 8005fd8:	1b64      	subs	r4, r4, r5
 8005fda:	10a4      	asrs	r4, r4, #2
 8005fdc:	42a6      	cmp	r6, r4
 8005fde:	d109      	bne.n	8005ff4 <__libc_init_array+0x24>
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	f000 f82b 	bl	800603c <_init>
 8005fe6:	4d0a      	ldr	r5, [pc, #40]	; (8006010 <__libc_init_array+0x40>)
 8005fe8:	4c0a      	ldr	r4, [pc, #40]	; (8006014 <__libc_init_array+0x44>)
 8005fea:	1b64      	subs	r4, r4, r5
 8005fec:	10a4      	asrs	r4, r4, #2
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	d105      	bne.n	8005ffe <__libc_init_array+0x2e>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	00b3      	lsls	r3, r6, #2
 8005ff6:	58eb      	ldr	r3, [r5, r3]
 8005ff8:	4798      	blx	r3
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7ee      	b.n	8005fdc <__libc_init_array+0xc>
 8005ffe:	00b3      	lsls	r3, r6, #2
 8006000:	58eb      	ldr	r3, [r5, r3]
 8006002:	4798      	blx	r3
 8006004:	3601      	adds	r6, #1
 8006006:	e7f2      	b.n	8005fee <__libc_init_array+0x1e>
 8006008:	080061d4 	.word	0x080061d4
 800600c:	080061d4 	.word	0x080061d4
 8006010:	080061d4 	.word	0x080061d4
 8006014:	080061d8 	.word	0x080061d8

08006018 <memcpy>:
 8006018:	2300      	movs	r3, #0
 800601a:	b510      	push	{r4, lr}
 800601c:	429a      	cmp	r2, r3
 800601e:	d100      	bne.n	8006022 <memcpy+0xa>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	5ccc      	ldrb	r4, [r1, r3]
 8006024:	54c4      	strb	r4, [r0, r3]
 8006026:	3301      	adds	r3, #1
 8006028:	e7f8      	b.n	800601c <memcpy+0x4>

0800602a <memset>:
 800602a:	0003      	movs	r3, r0
 800602c:	1812      	adds	r2, r2, r0
 800602e:	4293      	cmp	r3, r2
 8006030:	d100      	bne.n	8006034 <memset+0xa>
 8006032:	4770      	bx	lr
 8006034:	7019      	strb	r1, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	e7f9      	b.n	800602e <memset+0x4>
	...

0800603c <_init>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr

08006048 <_fini>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr
