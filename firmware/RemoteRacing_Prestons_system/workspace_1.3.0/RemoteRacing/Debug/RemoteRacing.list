
RemoteRacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009708  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080097c8  080097c8  000197c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000116c  200001e0  08009d08  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  08009d08  0002134c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021933  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f2a  00000000  00000000  00041b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00045a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  00046f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fea2  00000000  00000000  000481d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e0c  00000000  00000000  0005807a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000544a2  00000000  00000000  0006ce86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1328  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ac  00000000  00000000  000c13a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080097b0 	.word	0x080097b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	080097b0 	.word	0x080097b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08009860 	.word	0x08009860
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	080098a0 	.word	0x080098a0
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3308      	adds	r3, #8
 8002018:	001a      	movs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	4252      	negs	r2, r2
 8002024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3308      	adds	r3, #8
 800202a:	001a      	movs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3308      	adds	r3, #8
 8002034:	001a      	movs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	d103      	bne.n	80020c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e00c      	b.n	80020da <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3308      	adds	r3, #8
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e002      	b.n	80020ce <vListInsert+0x2c>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d2f6      	bcs.n	80020c8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}

0800210e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6852      	ldr	r2, [r2, #4]
 800212e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d103      	bne.n	8002142 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}

0800215e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <xQueueGenericReset+0x18>
 8002172:	b672      	cpsid	i
 8002174:	e7fe      	b.n	8002174 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002176:	f001 fa39 	bl	80035ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	434b      	muls	r3, r1
 8002188:	18d2      	adds	r2, r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	1e59      	subs	r1, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	434b      	muls	r3, r1
 80021ac:	18d2      	adds	r2, r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2244      	movs	r2, #68	; 0x44
 80021b6:	21ff      	movs	r1, #255	; 0xff
 80021b8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2245      	movs	r2, #69	; 0x45
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3310      	adds	r3, #16
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 fead 	bl	8002f34 <xTaskRemoveFromEventList>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d00c      	beq.n	80021f8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021de:	f001 f9f5 	bl	80035cc <vPortYield>
 80021e2:	e009      	b.n	80021f8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3310      	adds	r3, #16
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff ff0f 	bl	800200c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3324      	adds	r3, #36	; 0x24
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff0a 	bl	800200c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021f8:	f001 fa0a 	bl	8003610 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b004      	add	sp, #16
 8002204:	bd80      	pop	{r7, pc}

08002206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002206:	b590      	push	{r4, r7, lr}
 8002208:	b08b      	sub	sp, #44	; 0x2c
 800220a:	af02      	add	r7, sp, #8
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <xQueueGenericCreate+0x18>
 800221a:	b672      	cpsid	i
 800221c:	e7fe      	b.n	800221c <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e003      	b.n	8002232 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	4353      	muls	r3, r2
 8002230:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3348      	adds	r3, #72	; 0x48
 8002236:	0018      	movs	r0, r3
 8002238:	f001 fa6a 	bl	8003710 <pvPortMalloc>
 800223c:	0003      	movs	r3, r0
 800223e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	3348      	adds	r3, #72	; 0x48
 800224a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	781c      	ldrb	r4, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	0023      	movs	r3, r4
 800225c:	f000 f805 	bl	800226a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8002260:	69bb      	ldr	r3, [r7, #24]
	}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b009      	add	sp, #36	; 0x24
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	001a      	movs	r2, r3
 8002278:	1cfb      	adds	r3, r7, #3
 800227a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e002      	b.n	8002290 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2101      	movs	r1, #1
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff ff5c 	bl	800215e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}

080022ae <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	; 0x28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <xQueueGenericSend+0x20>
 80022ca:	b672      	cpsid	i
 80022cc:	e7fe      	b.n	80022cc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d103      	bne.n	80022dc <xQueueGenericSend+0x2e>
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <xQueueGenericSend+0x32>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <xQueueGenericSend+0x34>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <xQueueGenericSend+0x3c>
 80022e6:	b672      	cpsid	i
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d103      	bne.n	80022f8 <xQueueGenericSend+0x4a>
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <xQueueGenericSend+0x4e>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <xQueueGenericSend+0x50>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <xQueueGenericSend+0x58>
 8002302:	b672      	cpsid	i
 8002304:	e7fe      	b.n	8002304 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002306:	f000 ffa7 	bl	8003258 <xTaskGetSchedulerState>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d102      	bne.n	8002314 <xQueueGenericSend+0x66>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <xQueueGenericSend+0x6a>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <xQueueGenericSend+0x6c>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <xQueueGenericSend+0x74>
 800231e:	b672      	cpsid	i
 8002320:	e7fe      	b.n	8002320 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002322:	f001 f963 	bl	80035ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <xQueueGenericSend+0x8a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d11e      	bne.n	8002376 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f9c2 	bl	80026c8 <prvCopyDataToQueue>
 8002344:	0003      	movs	r3, r0
 8002346:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	3324      	adds	r3, #36	; 0x24
 8002354:	0018      	movs	r0, r3
 8002356:	f000 fded 	bl	8002f34 <xTaskRemoveFromEventList>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d007      	beq.n	800236e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800235e:	f001 f935 	bl	80035cc <vPortYield>
 8002362:	e004      	b.n	800236e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800236a:	f001 f92f 	bl	80035cc <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800236e:	f001 f94f 	bl	8003610 <vPortExitCritical>
				return pdPASS;
 8002372:	2301      	movs	r3, #1
 8002374:	e05b      	b.n	800242e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800237c:	f001 f948 	bl	8003610 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002380:	2300      	movs	r3, #0
 8002382:	e054      	b.n	800242e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800238a:	2314      	movs	r3, #20
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	0018      	movs	r0, r3
 8002390:	f000 fe2c 	bl	8002fec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002394:	2301      	movs	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002398:	f001 f93a 	bl	8003610 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800239c:	f000 fc0e 	bl	8002bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023a0:	f001 f924 	bl	80035ec <vPortEnterCritical>
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2244      	movs	r2, #68	; 0x44
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	d103      	bne.n	80023b8 <xQueueGenericSend+0x10a>
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2244      	movs	r2, #68	; 0x44
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2245      	movs	r2, #69	; 0x45
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	d103      	bne.n	80023cc <xQueueGenericSend+0x11e>
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2245      	movs	r2, #69	; 0x45
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]
 80023cc:	f001 f920 	bl	8003610 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023d0:	1d3a      	adds	r2, r7, #4
 80023d2:	2314      	movs	r3, #20
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 fe21 	bl	8003020 <xTaskCheckForTimeOut>
 80023de:	1e03      	subs	r3, r0, #0
 80023e0:	d11e      	bne.n	8002420 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fa74 	bl	80028d2 <prvIsQueueFull>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d011      	beq.n	8002412 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	3310      	adds	r3, #16
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	0011      	movs	r1, r2
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fd7e 	bl	8002ef8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f9f3 	bl	80027ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002404:	f000 fbe6 	bl	8002bd4 <xTaskResumeAll>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d18a      	bne.n	8002322 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800240c:	f001 f8de 	bl	80035cc <vPortYield>
 8002410:	e787      	b.n	8002322 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f9e8 	bl	80027ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800241a:	f000 fbdb 	bl	8002bd4 <xTaskResumeAll>
 800241e:	e780      	b.n	8002322 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f9e1 	bl	80027ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002428:	f000 fbd4 	bl	8002bd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800242c:	2300      	movs	r3, #0
		}
	}
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b00a      	add	sp, #40	; 0x28
 8002434:	bd80      	pop	{r7, pc}

08002436 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b088      	sub	sp, #32
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <xQueueGiveFromISR+0x18>
 800244a:	b672      	cpsid	i
 800244c:	e7fe      	b.n	800244c <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <xQueueGiveFromISR+0x24>
 8002456:	b672      	cpsid	i
 8002458:	e7fe      	b.n	8002458 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <xQueueGiveFromISR+0x34>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <xQueueGiveFromISR+0x38>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGiveFromISR+0x3a>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <xQueueGiveFromISR+0x42>
 8002474:	b672      	cpsid	i
 8002476:	e7fe      	b.n	8002476 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002478:	f001 f8e2 	bl	8003640 <ulSetInterruptMaskFromISR>
 800247c:	0003      	movs	r3, r0
 800247e:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d22c      	bcs.n	80024ea <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002490:	200f      	movs	r0, #15
 8002492:	183b      	adds	r3, r7, r0
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	2145      	movs	r1, #69	; 0x45
 8002498:	5c52      	ldrb	r2, [r2, r1]
 800249a:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024a4:	183b      	adds	r3, r7, r0
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	d111      	bne.n	80024d2 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3324      	adds	r3, #36	; 0x24
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fd3a 	bl	8002f34 <xTaskRemoveFromEventList>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d00f      	beq.n	80024e4 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e008      	b.n	80024e4 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024d2:	230f      	movs	r3, #15
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	b259      	sxtb	r1, r3
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2245      	movs	r2, #69	; 0x45
 80024e2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80024e4:	2301      	movs	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	e001      	b.n	80024ee <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 f8ab 	bl	800364c <vClearInterruptMaskFromISR>

	return xReturn;
 80024f6:	69fb      	ldr	r3, [r7, #28]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b008      	add	sp, #32
 80024fe:	bd80      	pop	{r7, pc}

08002500 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <xQueueGenericReceive+0x20>
 800251c:	b672      	cpsid	i
 800251e:	e7fe      	b.n	800251e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <xQueueGenericReceive+0x2e>
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <xQueueGenericReceive+0x32>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <xQueueGenericReceive+0x34>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <xQueueGenericReceive+0x3c>
 8002538:	b672      	cpsid	i
 800253a:	e7fe      	b.n	800253a <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800253c:	f000 fe8c 	bl	8003258 <xTaskGetSchedulerState>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d102      	bne.n	800254a <xQueueGenericReceive+0x4a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <xQueueGenericReceive+0x4e>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <xQueueGenericReceive+0x50>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <xQueueGenericReceive+0x58>
 8002554:	b672      	cpsid	i
 8002556:	e7fe      	b.n	8002556 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002558:	f001 f848 	bl	80035ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03a      	beq.n	80025de <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f912 	bl	800279e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11a      	bne.n	80025b6 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002590:	f000 ff38 	bl	8003404 <pvTaskIncrementMutexHeldCount>
 8002594:	0002      	movs	r2, r0
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	3310      	adds	r3, #16
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fcc4 	bl	8002f34 <xTaskRemoveFromEventList>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d012      	beq.n	80025d6 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80025b0:	f001 f80c 	bl	80035cc <vPortYield>
 80025b4:	e00f      	b.n	80025d6 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fcb3 	bl	8002f34 <xTaskRemoveFromEventList>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80025d2:	f000 fffb 	bl	80035cc <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80025d6:	f001 f81b 	bl	8003610 <vPortExitCritical>
				return pdPASS;
 80025da:	2301      	movs	r3, #1
 80025dc:	e070      	b.n	80026c0 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025e4:	f001 f814 	bl	8003610 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e069      	b.n	80026c0 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80025f2:	2310      	movs	r3, #16
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fcf8 	bl	8002fec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002600:	f001 f806 	bl	8003610 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002604:	f000 fada 	bl	8002bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002608:	f000 fff0 	bl	80035ec <vPortEnterCritical>
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2244      	movs	r2, #68	; 0x44
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	d103      	bne.n	8002620 <xQueueGenericReceive+0x120>
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	2244      	movs	r2, #68	; 0x44
 800261c:	2100      	movs	r1, #0
 800261e:	5499      	strb	r1, [r3, r2]
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2245      	movs	r2, #69	; 0x45
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	d103      	bne.n	8002634 <xQueueGenericReceive+0x134>
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2245      	movs	r2, #69	; 0x45
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]
 8002634:	f000 ffec 	bl	8003610 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002638:	1d3a      	adds	r2, r7, #4
 800263a:	2310      	movs	r3, #16
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	0011      	movs	r1, r2
 8002640:	0018      	movs	r0, r3
 8002642:	f000 fced 	bl	8003020 <xTaskCheckForTimeOut>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d12c      	bne.n	80026a4 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 f92a 	bl	80028a6 <prvIsQueueEmpty>
 8002652:	1e03      	subs	r3, r0, #0
 8002654:	d01f      	beq.n	8002696 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 800265e:	f000 ffc5 	bl	80035ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fe12 	bl	8003290 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800266c:	f000 ffd0 	bl	8003610 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f000 fc3d 	bl	8002ef8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f8b2 	bl	80027ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002686:	f000 faa5 	bl	8002bd4 <xTaskResumeAll>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d000      	beq.n	8002690 <xQueueGenericReceive+0x190>
 800268e:	e763      	b.n	8002558 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8002690:	f000 ff9c 	bl	80035cc <vPortYield>
 8002694:	e760      	b.n	8002558 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f8a6 	bl	80027ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800269e:	f000 fa99 	bl	8002bd4 <xTaskResumeAll>
 80026a2:	e759      	b.n	8002558 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f89f 	bl	80027ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ac:	f000 fa92 	bl	8002bd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f8f7 	bl	80028a6 <prvIsQueueEmpty>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d100      	bne.n	80026be <xQueueGenericReceive+0x1be>
 80026bc:	e74c      	b.n	8002558 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b00a      	add	sp, #40	; 0x28
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d14e      	bne.n	800278c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 fe2a 	bl	800334c <xTaskPriorityDisinherit>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e043      	b.n	800278c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6898      	ldr	r0, [r3, #8]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0019      	movs	r1, r3
 8002716:	f005 fae3 	bl	8007ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	18d2      	adds	r2, r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	d32b      	bcc.n	800278c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e026      	b.n	800278c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68d8      	ldr	r0, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0019      	movs	r1, r3
 800274a:	f005 fac9 	bl	8007ce0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	425b      	negs	r3, r3
 8002758:	18d2      	adds	r2, r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d207      	bcs.n	800277a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	425b      	negs	r3, r3
 8002774:	18d2      	adds	r2, r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d105      	bne.n	800278c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3b01      	subs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002794:	697b      	ldr	r3, [r7, #20]
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}

0800279e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d018      	beq.n	80027e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	18d2      	adds	r2, r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d303      	bcc.n	80027d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f005 fa7f 	bl	8007ce0 <memcpy>
	}
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}

080027ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027f2:	f000 fefb 	bl	80035ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027f6:	230f      	movs	r3, #15
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	2145      	movs	r1, #69	; 0x45
 80027fe:	5c52      	ldrb	r2, [r2, r1]
 8002800:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002802:	e013      	b.n	800282c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d016      	beq.n	800283a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3324      	adds	r3, #36	; 0x24
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fb8f 	bl	8002f34 <xTaskRemoveFromEventList>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800281a:	f000 fc4f 	bl	80030bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800281e:	210f      	movs	r1, #15
 8002820:	187b      	adds	r3, r7, r1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	3b01      	subs	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	187b      	adds	r3, r7, r1
 800282a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	dce5      	bgt.n	8002804 <prvUnlockQueue+0x1a>
 8002838:	e000      	b.n	800283c <prvUnlockQueue+0x52>
					break;
 800283a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2245      	movs	r2, #69	; 0x45
 8002840:	21ff      	movs	r1, #255	; 0xff
 8002842:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002844:	f000 fee4 	bl	8003610 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002848:	f000 fed0 	bl	80035ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800284c:	230e      	movs	r3, #14
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	2144      	movs	r1, #68	; 0x44
 8002854:	5c52      	ldrb	r2, [r2, r1]
 8002856:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002858:	e013      	b.n	8002882 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3310      	adds	r3, #16
 8002866:	0018      	movs	r0, r3
 8002868:	f000 fb64 	bl	8002f34 <xTaskRemoveFromEventList>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d001      	beq.n	8002874 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002870:	f000 fc24 	bl	80030bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002874:	210e      	movs	r1, #14
 8002876:	187b      	adds	r3, r7, r1
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	187b      	adds	r3, r7, r1
 8002880:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002882:	230e      	movs	r3, #14
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b25b      	sxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	dce5      	bgt.n	800285a <prvUnlockQueue+0x70>
 800288e:	e000      	b.n	8002892 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002890:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2244      	movs	r2, #68	; 0x44
 8002896:	21ff      	movs	r1, #255	; 0xff
 8002898:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800289a:	f000 feb9 	bl	8003610 <vPortExitCritical>
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028ae:	f000 fe9d 	bl	80035ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e001      	b.n	80028c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028c4:	f000 fea4 	bl	8003610 <vPortExitCritical>

	return xReturn;
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028da:	f000 fe87 	bl	80035ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d102      	bne.n	80028f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e001      	b.n	80028f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028f4:	f000 fe8c 	bl	8003610 <vPortExitCritical>

	return xReturn;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}

08002902 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b08d      	sub	sp, #52	; 0x34
 8002906:	af04      	add	r7, sp, #16
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fef9 	bl	8003710 <pvPortMalloc>
 800291e:	0003      	movs	r3, r0
 8002920:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002928:	2054      	movs	r0, #84	; 0x54
 800292a:	f000 fef1 	bl	8003710 <pvPortMalloc>
 800292e:	0003      	movs	r3, r0
 8002930:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e006      	b.n	800294e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 ff8a 	bl	800385c <vPortFree>
 8002948:	e001      	b.n	800294e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d016      	beq.n	8002982 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002954:	1dbb      	adds	r3, r7, #6
 8002956:	881a      	ldrh	r2, [r3, #0]
 8002958:	683c      	ldr	r4, [r7, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	2300      	movs	r3, #0
 8002960:	9303      	str	r3, [sp, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	0023      	movs	r3, r4
 8002970:	f000 f810 	bl	8002994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f886 	bl	8002a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800297c:	2301      	movs	r3, #1
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e002      	b.n	8002988 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002982:	2301      	movs	r3, #1
 8002984:	425b      	negs	r3, r3
 8002986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002988:	69bb      	ldr	r3, [r7, #24]
	}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b009      	add	sp, #36	; 0x24
 8002990:	bd90      	pop	{r4, r7, pc}
	...

08002994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4936      	ldr	r1, [pc, #216]	; (8002a84 <prvInitialiseNewTask+0xf0>)
 80029aa:	468c      	mov	ip, r1
 80029ac:	4463      	add	r3, ip
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	18d3      	adds	r3, r2, r3
 80029b2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2207      	movs	r2, #7
 80029b8:	4393      	bics	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	d001      	beq.n	80029c8 <prvInitialiseNewTask+0x34>
 80029c4:	b672      	cpsid	i
 80029c6:	e7fe      	b.n	80029c6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	e013      	b.n	80029f6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	18d3      	adds	r3, r2, r3
 80029d4:	7818      	ldrb	r0, [r3, #0]
 80029d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d8:	2134      	movs	r1, #52	; 0x34
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	18d3      	adds	r3, r2, r3
 80029de:	185b      	adds	r3, r3, r1
 80029e0:	1c02      	adds	r2, r0, #0
 80029e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3301      	adds	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b0f      	cmp	r3, #15
 80029fa:	d9e8      	bls.n	80029ce <prvInitialiseNewTask+0x3a>
 80029fc:	e000      	b.n	8002a00 <prvInitialiseNewTask+0x6c>
		{
			break;
 80029fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	2243      	movs	r2, #67	; 0x43
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d901      	bls.n	8002a12 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2200      	movs	r2, #0
 8002a22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	3304      	adds	r3, #4
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fb0d 	bl	8002048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	3318      	adds	r3, #24
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff fb08 	bl	8002048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2207      	movs	r2, #7
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	2200      	movs	r2, #0
 8002a52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	2250      	movs	r2, #80	; 0x50
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fd34 	bl	80034d0 <pxPortInitialiseStack>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b006      	add	sp, #24
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	3fffffff 	.word	0x3fffffff

08002a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a90:	f000 fdac 	bl	80035ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <prvAddNewTaskToReadyList+0xb0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <prvAddNewTaskToReadyList+0xb0>)
 8002a9c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <prvAddNewTaskToReadyList+0xb4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <prvAddNewTaskToReadyList+0xb4>)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <prvAddNewTaskToReadyList+0xb0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d110      	bne.n	8002ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ab4:	f000 fb1c 	bl	80030f0 <prvInitialiseTaskLists>
 8002ab8:	e00d      	b.n	8002ad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <prvAddNewTaskToReadyList+0xb8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <prvAddNewTaskToReadyList+0xb4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d802      	bhi.n	8002ad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <prvAddNewTaskToReadyList+0xb4>)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <prvAddNewTaskToReadyList+0xbc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <prvAddNewTaskToReadyList+0xbc>)
 8002ade:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <prvAddNewTaskToReadyList+0xc0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d903      	bls.n	8002af4 <prvAddNewTaskToReadyList+0x6c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <prvAddNewTaskToReadyList+0xc0>)
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	0013      	movs	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <prvAddNewTaskToReadyList+0xc4>)
 8002b02:	189a      	adds	r2, r3, r2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	f7ff faa7 	bl	800205e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b10:	f000 fd7e 	bl	8003610 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <prvAddNewTaskToReadyList+0xb8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <prvAddNewTaskToReadyList+0xb4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d201      	bcs.n	8002b2e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b2a:	f000 fd4f 	bl	80035cc <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b002      	add	sp, #8
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	200002fc 	.word	0x200002fc
 8002b3c:	200001fc 	.word	0x200001fc
 8002b40:	20000308 	.word	0x20000308
 8002b44:	20000318 	.word	0x20000318
 8002b48:	20000304 	.word	0x20000304
 8002b4c:	20000200 	.word	0x20000200

08002b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002b56:	4913      	ldr	r1, [pc, #76]	; (8002ba4 <vTaskStartScheduler+0x54>)
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <vTaskStartScheduler+0x58>)
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <vTaskStartScheduler+0x5c>)
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	f7ff fecc 	bl	8002902 <xTaskCreate>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10d      	bne.n	8002b90 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002b74:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <vTaskStartScheduler+0x60>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4252      	negs	r2, r2
 8002b7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <vTaskStartScheduler+0x64>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <vTaskStartScheduler+0x68>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b8a:	f000 fcfd 	bl	8003588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b8e:	e004      	b.n	8002b9a <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	d101      	bne.n	8002b9a <vTaskStartScheduler+0x4a>
 8002b96:	b672      	cpsid	i
 8002b98:	e7fe      	b.n	8002b98 <vTaskStartScheduler+0x48>
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	080097c8 	.word	0x080097c8
 8002ba8:	080030d1 	.word	0x080030d1
 8002bac:	20000320 	.word	0x20000320
 8002bb0:	2000031c 	.word	0x2000031c
 8002bb4:	20000308 	.word	0x20000308
 8002bb8:	20000300 	.word	0x20000300

08002bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <vTaskSuspendAll+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <vTaskSuspendAll+0x14>)
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000324 	.word	0x20000324

08002bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <xTaskResumeAll+0xf8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <xTaskResumeAll+0x1a>
 8002bea:	b672      	cpsid	i
 8002bec:	e7fe      	b.n	8002bec <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bee:	f000 fcfd 	bl	80035ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bf2:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <xTaskResumeAll+0xf8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1e5a      	subs	r2, r3, #1
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <xTaskResumeAll+0xf8>)
 8002bfa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <xTaskResumeAll+0xf8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d15b      	bne.n	8002cbc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <xTaskResumeAll+0xfc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d057      	beq.n	8002cbc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c0c:	e02f      	b.n	8002c6e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <xTaskResumeAll+0x100>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3318      	adds	r3, #24
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff fa77 	bl	800210e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3304      	adds	r3, #4
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7ff fa72 	bl	800210e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <xTaskResumeAll+0x104>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d903      	bls.n	8002c3e <xTaskResumeAll+0x6a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <xTaskResumeAll+0x104>)
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	0013      	movs	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	189b      	adds	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <xTaskResumeAll+0x108>)
 8002c4c:	189a      	adds	r2, r3, r2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f7ff fa02 	bl	800205e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <xTaskResumeAll+0x10c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <xTaskResumeAll+0x110>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <xTaskResumeAll+0x100>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1cb      	bne.n	8002c0e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c7c:	f000 fac8 	bl	8003210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <xTaskResumeAll+0x114>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00f      	beq.n	8002cac <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c8c:	f000 f82e 	bl	8002cec <xTaskIncrementTick>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d002      	beq.n	8002c9a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <xTaskResumeAll+0x110>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f2      	bne.n	8002c8c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <xTaskResumeAll+0x114>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <xTaskResumeAll+0x110>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cb8:	f000 fc88 	bl	80035cc <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cbc:	f000 fca8 	bl	8003610 <vPortExitCritical>

	return xAlreadyYielded;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	20000324 	.word	0x20000324
 8002cd0:	200002fc 	.word	0x200002fc
 8002cd4:	200002bc 	.word	0x200002bc
 8002cd8:	20000304 	.word	0x20000304
 8002cdc:	20000200 	.word	0x20000200
 8002ce0:	200001fc 	.word	0x200001fc
 8002ce4:	20000310 	.word	0x20000310
 8002ce8:	2000030c 	.word	0x2000030c

08002cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <xTaskIncrementTick+0x13c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d000      	beq.n	8002d00 <xTaskIncrementTick+0x14>
 8002cfe:	e083      	b.n	8002e08 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002d00:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <xTaskIncrementTick+0x140>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <xTaskIncrementTick+0x140>)
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d117      	bne.n	8002d44 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <xTaskIncrementTick+0x144>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <xTaskIncrementTick+0x36>
 8002d1e:	b672      	cpsid	i
 8002d20:	e7fe      	b.n	8002d20 <xTaskIncrementTick+0x34>
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <xTaskIncrementTick+0x144>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <xTaskIncrementTick+0x148>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <xTaskIncrementTick+0x144>)
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <xTaskIncrementTick+0x148>)
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <xTaskIncrementTick+0x14c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <xTaskIncrementTick+0x14c>)
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f000 fa66 	bl	8003210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d44:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <xTaskIncrementTick+0x150>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d34e      	bcc.n	8002dec <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4e:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <xTaskIncrementTick+0x144>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xTaskIncrementTick+0x70>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xTaskIncrementTick+0x72>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <xTaskIncrementTick+0x150>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	4252      	negs	r2, r2
 8002d68:	601a      	str	r2, [r3, #0]
					break;
 8002d6a:	e03f      	b.n	8002dec <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <xTaskIncrementTick+0x144>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d203      	bcs.n	8002d8c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <xTaskIncrementTick+0x150>)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
						break;
 8002d8a:	e02f      	b.n	8002dec <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff f9bc 	bl	800210e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3318      	adds	r3, #24
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7ff f9b3 	bl	800210e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <xTaskIncrementTick+0x154>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d903      	bls.n	8002dbc <xTaskIncrementTick+0xd0>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <xTaskIncrementTick+0x154>)
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	189b      	adds	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <xTaskIncrementTick+0x158>)
 8002dca:	189a      	adds	r2, r3, r2
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	0010      	movs	r0, r2
 8002dd4:	f7ff f943 	bl	800205e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <xTaskIncrementTick+0x15c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3b3      	bcc.n	8002d4e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dea:	e7b0      	b.n	8002d4e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <xTaskIncrementTick+0x15c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	4914      	ldr	r1, [pc, #80]	; (8002e44 <xTaskIncrementTick+0x158>)
 8002df4:	0013      	movs	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	585b      	ldr	r3, [r3, r1]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d907      	bls.n	8002e12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e004      	b.n	8002e12 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <xTaskIncrementTick+0x160>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <xTaskIncrementTick+0x160>)
 8002e10:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <xTaskIncrementTick+0x164>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e1e:	697b      	ldr	r3, [r7, #20]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000324 	.word	0x20000324
 8002e2c:	20000300 	.word	0x20000300
 8002e30:	200002b4 	.word	0x200002b4
 8002e34:	200002b8 	.word	0x200002b8
 8002e38:	20000314 	.word	0x20000314
 8002e3c:	2000031c 	.word	0x2000031c
 8002e40:	20000304 	.word	0x20000304
 8002e44:	20000200 	.word	0x20000200
 8002e48:	200001fc 	.word	0x200001fc
 8002e4c:	2000030c 	.word	0x2000030c
 8002e50:	20000310 	.word	0x20000310

08002e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <vTaskSwitchContext+0x90>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <vTaskSwitchContext+0x94>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e68:	e037      	b.n	8002eda <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <vTaskSwitchContext+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <vTaskSwitchContext+0x98>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	e007      	b.n	8002e88 <vTaskSwitchContext+0x34>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <vTaskSwitchContext+0x2e>
 8002e7e:	b672      	cpsid	i
 8002e80:	e7fe      	b.n	8002e80 <vTaskSwitchContext+0x2c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	4919      	ldr	r1, [pc, #100]	; (8002ef0 <vTaskSwitchContext+0x9c>)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	585b      	ldr	r3, [r3, r1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <vTaskSwitchContext+0x24>
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <vTaskSwitchContext+0x9c>)
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d104      	bne.n	8002eca <vTaskSwitchContext+0x76>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <vTaskSwitchContext+0xa0>)
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <vTaskSwitchContext+0x98>)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	20000324 	.word	0x20000324
 8002ee8:	20000310 	.word	0x20000310
 8002eec:	20000304 	.word	0x20000304
 8002ef0:	20000200 	.word	0x20000200
 8002ef4:	200001fc 	.word	0x200001fc

08002ef8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <vTaskPlaceOnEventList+0x14>
 8002f08:	b672      	cpsid	i
 8002f0a:	e7fe      	b.n	8002f0a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <vTaskPlaceOnEventList+0x38>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3318      	adds	r3, #24
 8002f12:	001a      	movs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0011      	movs	r1, r2
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff f8c2 	bl	80020a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 fa80 	bl	8003428 <prvAddCurrentTaskToDelayedList>
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200001fc 	.word	0x200001fc

08002f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <xTaskRemoveFromEventList+0x1a>
 8002f4a:	b672      	cpsid	i
 8002f4c:	e7fe      	b.n	8002f4c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3318      	adds	r3, #24
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff f8db 	bl	800210e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <xTaskRemoveFromEventList+0xa0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11d      	bne.n	8002f9c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3304      	adds	r3, #4
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff f8d2 	bl	800210e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <xTaskRemoveFromEventList+0xa4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d903      	bls.n	8002f7e <xTaskRemoveFromEventList+0x4a>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <xTaskRemoveFromEventList+0xa4>)
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	0013      	movs	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <xTaskRemoveFromEventList+0xa8>)
 8002f8c:	189a      	adds	r2, r3, r2
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3304      	adds	r3, #4
 8002f92:	0019      	movs	r1, r3
 8002f94:	0010      	movs	r0, r2
 8002f96:	f7ff f862 	bl	800205e <vListInsertEnd>
 8002f9a:	e007      	b.n	8002fac <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <xTaskRemoveFromEventList+0xac>)
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7ff f859 	bl	800205e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <xTaskRemoveFromEventList+0xb0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d905      	bls.n	8002fc6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <xTaskRemoveFromEventList+0xb4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e001      	b.n	8002fca <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000324 	.word	0x20000324
 8002fd8:	20000304 	.word	0x20000304
 8002fdc:	20000200 	.word	0x20000200
 8002fe0:	200002bc 	.word	0x200002bc
 8002fe4:	200001fc 	.word	0x200001fc
 8002fe8:	20000310 	.word	0x20000310

08002fec <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <vTaskSetTimeOutState+0x12>
 8002ffa:	b672      	cpsid	i
 8002ffc:	e7fe      	b.n	8002ffc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <vTaskSetTimeOutState+0x2c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <vTaskSetTimeOutState+0x30>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	20000314 	.word	0x20000314
 800301c:	20000300 	.word	0x20000300

08003020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xTaskCheckForTimeOut+0x14>
 8003030:	b672      	cpsid	i
 8003032:	e7fe      	b.n	8003032 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <xTaskCheckForTimeOut+0x1e>
 800303a:	b672      	cpsid	i
 800303c:	e7fe      	b.n	800303c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800303e:	f000 fad5 	bl	80035ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <xTaskCheckForTimeOut+0x94>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	d102      	bne.n	8003056 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e027      	b.n	80030a6 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <xTaskCheckForTimeOut+0x98>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d007      	beq.n	8003072 <xTaskCheckForTimeOut+0x52>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800306c:	2301      	movs	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e019      	b.n	80030a6 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	1ad2      	subs	r2, r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d20f      	bcs.n	80030a2 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1acb      	subs	r3, r1, r3
 800308e:	18d2      	adds	r2, r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff ffa8 	bl	8002fec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e001      	b.n	80030a6 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030a6:	f000 fab3 	bl	8003610 <vPortExitCritical>

	return xReturn;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000300 	.word	0x20000300
 80030b8:	20000314 	.word	0x20000314

080030bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <vTaskMissedYield+0x10>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000310 	.word	0x20000310

080030d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030d8:	f000 f84e 	bl	8003178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <prvIdleTask+0x1c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d9f9      	bls.n	80030d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030e4:	f000 fa72 	bl	80035cc <vPortYield>
		prvCheckTasksWaitingTermination();
 80030e8:	e7f6      	b.n	80030d8 <prvIdleTask+0x8>
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20000200 	.word	0x20000200

080030f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	e00c      	b.n	8003116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	0013      	movs	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	189b      	adds	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <prvInitialiseTaskLists+0x68>)
 8003108:	189b      	adds	r3, r3, r2
 800310a:	0018      	movs	r0, r3
 800310c:	f7fe ff7e 	bl	800200c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d9ef      	bls.n	80030fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <prvInitialiseTaskLists+0x6c>)
 800311e:	0018      	movs	r0, r3
 8003120:	f7fe ff74 	bl	800200c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <prvInitialiseTaskLists+0x70>)
 8003126:	0018      	movs	r0, r3
 8003128:	f7fe ff70 	bl	800200c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <prvInitialiseTaskLists+0x74>)
 800312e:	0018      	movs	r0, r3
 8003130:	f7fe ff6c 	bl	800200c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <prvInitialiseTaskLists+0x78>)
 8003136:	0018      	movs	r0, r3
 8003138:	f7fe ff68 	bl	800200c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <prvInitialiseTaskLists+0x7c>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fe ff64 	bl	800200c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <prvInitialiseTaskLists+0x80>)
 8003146:	4a05      	ldr	r2, [pc, #20]	; (800315c <prvInitialiseTaskLists+0x6c>)
 8003148:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <prvInitialiseTaskLists+0x84>)
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <prvInitialiseTaskLists+0x70>)
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000200 	.word	0x20000200
 800315c:	2000028c 	.word	0x2000028c
 8003160:	200002a0 	.word	0x200002a0
 8003164:	200002bc 	.word	0x200002bc
 8003168:	200002d0 	.word	0x200002d0
 800316c:	200002e8 	.word	0x200002e8
 8003170:	200002b4 	.word	0x200002b4
 8003174:	200002b8 	.word	0x200002b8

08003178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800317e:	e027      	b.n	80031d0 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8003180:	f7ff fd1c 	bl	8002bbc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <prvCheckTasksWaitingTermination+0x68>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	425a      	negs	r2, r3
 800318a:	4153      	adcs	r3, r2
 800318c:	b2db      	uxtb	r3, r3
 800318e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003190:	f7ff fd20 	bl	8002bd4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11a      	bne.n	80031d0 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800319a:	f000 fa27 	bl	80035ec <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <prvCheckTasksWaitingTermination+0x68>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7fe ffaf 	bl	800210e <uxListRemove>
					--uxCurrentNumberOfTasks;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <prvCheckTasksWaitingTermination+0x6c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <prvCheckTasksWaitingTermination+0x6c>)
 80031b8:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <prvCheckTasksWaitingTermination+0x70>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <prvCheckTasksWaitingTermination+0x70>)
 80031c2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80031c4:	f000 fa24 	bl	8003610 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f80e 	bl	80031ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <prvCheckTasksWaitingTermination+0x70>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1d3      	bne.n	8003180 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200002d0 	.word	0x200002d0
 80031e4:	200002fc 	.word	0x200002fc
 80031e8:	200002e4 	.word	0x200002e4

080031ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fb2f 	bl	800385c <vPortFree>
			vPortFree( pxTCB );
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 fb2b 	bl	800385c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <prvResetNextTaskUnblockTime+0x40>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <prvResetNextTaskUnblockTime+0x14>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <prvResetNextTaskUnblockTime+0x16>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvResetNextTaskUnblockTime+0x44>)
 800322c:	2201      	movs	r2, #1
 800322e:	4252      	negs	r2, r2
 8003230:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003232:	e008      	b.n	8003246 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <prvResetNextTaskUnblockTime+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <prvResetNextTaskUnblockTime+0x44>)
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	200002b4 	.word	0x200002b4
 8003254:	2000031c 	.word	0x2000031c

08003258 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <xTaskGetSchedulerState+0x30>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003266:	2301      	movs	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	e008      	b.n	800327e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <xTaskGetSchedulerState+0x34>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003274:	2302      	movs	r3, #2
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	e001      	b.n	800327e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800327e:	687b      	ldr	r3, [r7, #4]
	}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000308 	.word	0x20000308
 800328c:	20000324 	.word	0x20000324

08003290 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04a      	beq.n	8003338 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <vTaskPriorityInherit+0xb0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d243      	bcs.n	8003338 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db06      	blt.n	80032c6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b8:	4b21      	ldr	r3, [pc, #132]	; (8003340 <vTaskPriorityInherit+0xb0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	2207      	movs	r2, #7
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6959      	ldr	r1, [r3, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	0013      	movs	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <vTaskPriorityInherit+0xb4>)
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	4299      	cmp	r1, r3
 80032dc:	d101      	bne.n	80032e2 <vTaskPriorityInherit+0x52>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <vTaskPriorityInherit+0x54>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3304      	adds	r3, #4
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7fe ff0e 	bl	800210e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <vTaskPriorityInherit+0xb0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <vTaskPriorityInherit+0xb8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d903      	bls.n	8003310 <vTaskPriorityInherit+0x80>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <vTaskPriorityInherit+0xb8>)
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	0013      	movs	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	189b      	adds	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <vTaskPriorityInherit+0xb4>)
 800331e:	189a      	adds	r2, r3, r2
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3304      	adds	r3, #4
 8003324:	0019      	movs	r1, r3
 8003326:	0010      	movs	r0, r2
 8003328:	f7fe fe99 	bl	800205e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800332c:	e004      	b.n	8003338 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <vTaskPriorityInherit+0xb0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200001fc 	.word	0x200001fc
 8003344:	20000200 	.word	0x20000200
 8003348:	20000304 	.word	0x20000304

0800334c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d044      	beq.n	80033ec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003362:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <xTaskPriorityDisinherit+0xac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <xTaskPriorityDisinherit+0x24>
 800336c:	b672      	cpsid	i
 800336e:	e7fe      	b.n	800336e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <xTaskPriorityDisinherit+0x30>
 8003378:	b672      	cpsid	i
 800337a:	e7fe      	b.n	800337a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	429a      	cmp	r2, r3
 8003390:	d02c      	beq.n	80033ec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	2b00      	cmp	r3, #0
 8003398:	d128      	bne.n	80033ec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3304      	adds	r3, #4
 800339e:	0018      	movs	r0, r3
 80033a0:	f7fe feb5 	bl	800210e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2207      	movs	r2, #7
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <xTaskPriorityDisinherit+0xb0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d903      	bls.n	80033cc <xTaskPriorityDisinherit+0x80>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <xTaskPriorityDisinherit+0xb0>)
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	0013      	movs	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <xTaskPriorityDisinherit+0xb4>)
 80033da:	189a      	adds	r2, r3, r2
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3304      	adds	r3, #4
 80033e0:	0019      	movs	r1, r3
 80033e2:	0010      	movs	r0, r2
 80033e4:	f7fe fe3b 	bl	800205e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033ec:	68fb      	ldr	r3, [r7, #12]
	}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b004      	add	sp, #16
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	200001fc 	.word	0x200001fc
 80033fc:	20000304 	.word	0x20000304
 8003400:	20000200 	.word	0x20000200

08003404 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <pvTaskIncrementMutexHeldCount+0x20>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <pvTaskIncrementMutexHeldCount+0x20>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003416:	3201      	adds	r2, #1
 8003418:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800341a:	4b02      	ldr	r3, [pc, #8]	; (8003424 <pvTaskIncrementMutexHeldCount+0x20>)
 800341c:	681b      	ldr	r3, [r3, #0]
	}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200001fc 	.word	0x200001fc

08003428 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <prvAddCurrentTaskToDelayedList+0x94>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3304      	adds	r3, #4
 800343e:	0018      	movs	r0, r3
 8003440:	f7fe fe65 	bl	800210e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3301      	adds	r3, #1
 8003448:	d10b      	bne.n	8003462 <prvAddCurrentTaskToDelayedList+0x3a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1d1a      	adds	r2, r3, #4
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003458:	0011      	movs	r1, r2
 800345a:	0018      	movs	r0, r3
 800345c:	f7fe fdff 	bl	800205e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003460:	e026      	b.n	80034b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	18d3      	adds	r3, r2, r3
 8003468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <prvAddCurrentTaskToDelayedList+0x94>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	d209      	bcs.n	800348e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3304      	adds	r3, #4
 8003484:	0019      	movs	r1, r3
 8003486:	0010      	movs	r0, r2
 8003488:	f7fe fe0b 	bl	80020a2 <vListInsert>
}
 800348c:	e010      	b.n	80034b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3304      	adds	r3, #4
 8003498:	0019      	movs	r1, r3
 800349a:	0010      	movs	r0, r2
 800349c:	f7fe fe01 	bl	80020a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d202      	bcs.n	80034b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000300 	.word	0x20000300
 80034bc:	200001fc 	.word	0x200001fc
 80034c0:	200002e8 	.word	0x200002e8
 80034c4:	200002b8 	.word	0x200002b8
 80034c8:	200002b4 	.word	0x200002b4
 80034cc:	2000031c 	.word	0x2000031c

080034d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b04      	subs	r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	0452      	lsls	r2, r2, #17
 80034e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3b04      	subs	r3, #4
 80034ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b04      	subs	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034fc:	4a08      	ldr	r2, [pc, #32]	; (8003520 <pxPortInitialiseStack+0x50>)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b14      	subs	r3, #20
 8003506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b20      	subs	r3, #32
 8003512:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	08003525 	.word	0x08003525

08003524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <prvTaskExitError+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	d001      	beq.n	8003534 <prvTaskExitError+0x10>
 8003530:	b672      	cpsid	i
 8003532:	e7fe      	b.n	8003532 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8003534:	b672      	cpsid	i
	for( ;; );
 8003536:	e7fe      	b.n	8003536 <prvTaskExitError+0x12>
 8003538:	20000000 	.word	0x20000000

0800353c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003550 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <pxCurrentTCBConst2>)
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	3020      	adds	r0, #32
 8003558:	f380 8809 	msr	PSP, r0
 800355c:	2002      	movs	r0, #2
 800355e:	f380 8814 	msr	CONTROL, r0
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003568:	46ae      	mov	lr, r5
 800356a:	bc08      	pop	{r3}
 800356c:	bc04      	pop	{r2}
 800356e:	b662      	cpsie	i
 8003570:	4718      	bx	r3
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46c0      	nop			; (mov r8, r8)

08003580 <pxCurrentTCBConst2>:
 8003580:	200001fc 	.word	0x200001fc
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46c0      	nop			; (mov r8, r8)

08003588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <xPortStartScheduler+0x3c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <xPortStartScheduler+0x3c>)
 8003592:	21ff      	movs	r1, #255	; 0xff
 8003594:	0409      	lsls	r1, r1, #16
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <xPortStartScheduler+0x3c>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <xPortStartScheduler+0x3c>)
 80035a0:	21ff      	movs	r1, #255	; 0xff
 80035a2:	0609      	lsls	r1, r1, #24
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035a8:	f000 f898 	bl	80036dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <xPortStartScheduler+0x40>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80035b2:	f7ff ffcd 	bl	8003550 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80035b6:	f7ff ffb5 	bl	8003524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	e000ed20 	.word	0xe000ed20
 80035c8:	20000000 	.word	0x20000000

080035cc <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <vPortYield+0x1c>)
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0552      	lsls	r2, r2, #21
 80035d6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80035d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80035dc:	f3bf 8f6f 	isb	sy
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80035f0:	b672      	cpsid	i
    uxCriticalNesting++;
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <vPortEnterCritical+0x20>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <vPortEnterCritical+0x20>)
 80035fa:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80035fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003600:	f3bf 8f6f 	isb	sy
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	20000000 	.word	0x20000000

08003610 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <vPortExitCritical+0x2c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <vPortExitCritical+0x10>
 800361c:	b672      	cpsid	i
 800361e:	e7fe      	b.n	800361e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <vPortExitCritical+0x2c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <vPortExitCritical+0x2c>)
 8003628:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <vPortExitCritical+0x2c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d100      	bne.n	8003634 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003632:	b662      	cpsie	i
    }
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	20000000 	.word	0x20000000

08003640 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003640:	f3ef 8010 	mrs	r0, PRIMASK
 8003644:	b672      	cpsid	i
 8003646:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3

0800364c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800364c:	f380 8810 	msr	PRIMASK, r0
 8003650:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8003652:	46c0      	nop			; (mov r8, r8)
	...

08003660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003660:	f3ef 8009 	mrs	r0, PSP
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <pxCurrentTCBConst>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	3820      	subs	r0, #32
 800366a:	6010      	str	r0, [r2, #0]
 800366c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800366e:	4644      	mov	r4, r8
 8003670:	464d      	mov	r5, r9
 8003672:	4656      	mov	r6, sl
 8003674:	465f      	mov	r7, fp
 8003676:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003678:	b508      	push	{r3, lr}
 800367a:	b672      	cpsid	i
 800367c:	f7ff fbea 	bl	8002e54 <vTaskSwitchContext>
 8003680:	b662      	cpsie	i
 8003682:	bc0c      	pop	{r2, r3}
 8003684:	6811      	ldr	r1, [r2, #0]
 8003686:	6808      	ldr	r0, [r1, #0]
 8003688:	3010      	adds	r0, #16
 800368a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800368c:	46a0      	mov	r8, r4
 800368e:	46a9      	mov	r9, r5
 8003690:	46b2      	mov	sl, r6
 8003692:	46bb      	mov	fp, r7
 8003694:	f380 8809 	msr	PSP, r0
 8003698:	3820      	subs	r0, #32
 800369a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800369c:	4718      	bx	r3
 800369e:	46c0      	nop			; (mov r8, r8)

080036a0 <pxCurrentTCBConst>:
 80036a0:	200001fc 	.word	0x200001fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46c0      	nop			; (mov r8, r8)

080036a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80036ae:	f7ff ffc7 	bl	8003640 <ulSetInterruptMaskFromISR>
 80036b2:	0003      	movs	r3, r0
 80036b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036b6:	f7ff fb19 	bl	8002cec <xTaskIncrementTick>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d003      	beq.n	80036c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <SysTick_Handler+0x30>)
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	0552      	lsls	r2, r2, #21
 80036c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff ffbf 	bl	800364c <vClearInterruptMaskFromISR>
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <vPortSetupTimerInterrupt+0x28>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	23fa      	movs	r3, #250	; 0xfa
 80036e6:	0099      	lsls	r1, r3, #2
 80036e8:	0010      	movs	r0, r2
 80036ea:	f7fc fd1f 	bl	800012c <__udivsi3>
 80036ee:	0003      	movs	r3, r0
 80036f0:	001a      	movs	r2, r3
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <vPortSetupTimerInterrupt+0x2c>)
 80036f4:	3a01      	subs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <vPortSetupTimerInterrupt+0x30>)
 80036fa:	2207      	movs	r2, #7
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000004 	.word	0x20000004
 8003708:	e000e014 	.word	0xe000e014
 800370c:	e000e010 	.word	0xe000e010

08003710 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800371c:	f7ff fa4e 	bl	8002bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003720:	4b49      	ldr	r3, [pc, #292]	; (8003848 <pvPortMalloc+0x138>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003728:	f000 f8e0 	bl	80038ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <pvPortMalloc+0x13c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4013      	ands	r3, r2
 8003734:	d000      	beq.n	8003738 <pvPortMalloc+0x28>
 8003736:	e079      	b.n	800382c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800373e:	2208      	movs	r2, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	189b      	adds	r3, r3, r2
 8003744:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2207      	movs	r2, #7
 800374a:	4013      	ands	r3, r2
 800374c:	d00a      	beq.n	8003764 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2207      	movs	r2, #7
 8003752:	4393      	bics	r3, r2
 8003754:	3308      	adds	r3, #8
 8003756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2207      	movs	r2, #7
 800375c:	4013      	ands	r3, r2
 800375e:	d001      	beq.n	8003764 <pvPortMalloc+0x54>
 8003760:	b672      	cpsid	i
 8003762:	e7fe      	b.n	8003762 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d060      	beq.n	800382c <pvPortMalloc+0x11c>
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <pvPortMalloc+0x140>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d85b      	bhi.n	800382c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <pvPortMalloc+0x144>)
 8003776:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <pvPortMalloc+0x144>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800377e:	e004      	b.n	800378a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	d903      	bls.n	800379c <pvPortMalloc+0x8c>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f1      	bne.n	8003780 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <pvPortMalloc+0x138>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d042      	beq.n	800382c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2208      	movs	r2, #8
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	2308      	movs	r3, #8
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d916      	bls.n	80037f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2207      	movs	r2, #7
 80037d4:	4013      	ands	r3, r2
 80037d6:	d001      	beq.n	80037dc <pvPortMalloc+0xcc>
 80037d8:	b672      	cpsid	i
 80037da:	e7fe      	b.n	80037da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f8db 	bl	80039ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <pvPortMalloc+0x140>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <pvPortMalloc+0x140>)
 8003802:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <pvPortMalloc+0x140>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <pvPortMalloc+0x148>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d203      	bcs.n	8003818 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <pvPortMalloc+0x140>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <pvPortMalloc+0x148>)
 8003816:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <pvPortMalloc+0x13c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800382c:	f7ff f9d2 	bl	8002bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2207      	movs	r2, #7
 8003834:	4013      	ands	r3, r2
 8003836:	d001      	beq.n	800383c <pvPortMalloc+0x12c>
 8003838:	b672      	cpsid	i
 800383a:	e7fe      	b.n	800383a <pvPortMalloc+0x12a>
	return pvReturn;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b006      	add	sp, #24
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	20000f30 	.word	0x20000f30
 800384c:	20000f3c 	.word	0x20000f3c
 8003850:	20000f34 	.word	0x20000f34
 8003854:	20000f28 	.word	0x20000f28
 8003858:	20000f38 	.word	0x20000f38

0800385c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d035      	beq.n	80038da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800386e:	2308      	movs	r3, #8
 8003870:	425b      	negs	r3, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <vPortFree+0x88>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4013      	ands	r3, r2
 8003886:	d101      	bne.n	800388c <vPortFree+0x30>
 8003888:	b672      	cpsid	i
 800388a:	e7fe      	b.n	800388a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <vPortFree+0x3c>
 8003894:	b672      	cpsid	i
 8003896:	e7fe      	b.n	8003896 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <vPortFree+0x88>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4013      	ands	r3, r2
 80038a2:	d01a      	beq.n	80038da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <vPortFree+0x88>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038bc:	f7ff f97e 	bl	8002bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <vPortFree+0x8c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	18d2      	adds	r2, r2, r3
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <vPortFree+0x8c>)
 80038cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f86b 	bl	80039ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038d6:	f7ff f97d 	bl	8002bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	20000f3c 	.word	0x20000f3c
 80038e8:	20000f34 	.word	0x20000f34

080038ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038f2:	23c0      	movs	r3, #192	; 0xc0
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <prvHeapInit+0xa8>)
 80038fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2207      	movs	r2, #7
 8003900:	4013      	ands	r3, r2
 8003902:	d00c      	beq.n	800391e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3307      	adds	r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2207      	movs	r2, #7
 800390e:	4393      	bics	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <prvHeapInit+0xa8>)
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <prvHeapInit+0xac>)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <prvHeapInit+0xac>)
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	18d3      	adds	r3, r2, r3
 8003934:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003936:	2208      	movs	r2, #8
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2207      	movs	r2, #7
 8003942:	4393      	bics	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <prvHeapInit+0xb0>)
 800394a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <prvHeapInit+0xb0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <prvHeapInit+0xb0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <prvHeapInit+0xb0>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvHeapInit+0xb4>)
 8003978:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <prvHeapInit+0xb8>)
 8003980:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <prvHeapInit+0xbc>)
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	0612      	lsls	r2, r2, #24
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000328 	.word	0x20000328
 8003998:	20000f28 	.word	0x20000f28
 800399c:	20000f30 	.word	0x20000f30
 80039a0:	20000f38 	.word	0x20000f38
 80039a4:	20000f34 	.word	0x20000f34
 80039a8:	20000f3c 	.word	0x20000f3c

080039ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <prvInsertBlockIntoFreeList+0xa8>)
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e002      	b.n	80039c0 <prvInsertBlockIntoFreeList+0x14>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d8f7      	bhi.n	80039ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d108      	bne.n	80039ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	18d2      	adds	r2, r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	18d2      	adds	r2, r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d118      	bne.n	8003a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <prvInsertBlockIntoFreeList+0xac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d00d      	beq.n	8003a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	18d2      	adds	r2, r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e008      	b.n	8003a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <prvInsertBlockIntoFreeList+0xac>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e003      	b.n	8003a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d002      	beq.n	8003a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000f28 	.word	0x20000f28
 8003a58:	20000f30 	.word	0x20000f30

08003a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a60:	f000 ffde 	bl	8004a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a64:	f000 f81a 	bl	8003a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a68:	f000 f97e 	bl	8003d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a6c:	f000 f956 	bl	8003d1c <MX_DMA_Init>
  MX_I2C1_Init();
 8003a70:	f000 f86e 	bl	8003b50 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003a74:	f000 f8ac 	bl	8003bd0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003a78:	f000 f8e8 	bl	8003c4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003a7c:	f000 f91a 	bl	8003cb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initMMA8452Q(0x1D, SCALE_2G, DR_800_Hz);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2102      	movs	r1, #2
 8003a84:	201d      	movs	r0, #29
 8003a86:	f000 fe87 	bl	8004798 <initMMA8452Q>
  gps_init();
 8003a8a:	f000 fdcd 	bl	8004628 <gps_init>
  ble_init();
 8003a8e:	f000 fdbf 	bl	8004610 <ble_init>
  RTOS_INIT_TASKS();
 8003a92:	f000 fab9 	bl	8004008 <RTOS_INIT_TASKS>
  RTOS_INIT();
 8003a96:	f000 fa9b 	bl	8003fd0 <RTOS_INIT>
  // Code should never go past this point
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <main+0x3e>

08003a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b095      	sub	sp, #84	; 0x54
 8003aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa2:	2420      	movs	r4, #32
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	2330      	movs	r3, #48	; 0x30
 8003aaa:	001a      	movs	r2, r3
 8003aac:	2100      	movs	r1, #0
 8003aae:	f004 f920 	bl	8007cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	2310      	movs	r3, #16
 8003aba:	001a      	movs	r2, r3
 8003abc:	2100      	movs	r1, #0
 8003abe:	f004 f918 	bl	8007cf2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	001a      	movs	r2, r3
 8003aca:	2100      	movs	r1, #0
 8003acc:	f004 f911 	bl	8007cf2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ad0:	0021      	movs	r1, r4
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	2201      	movs	r2, #1
 8003adc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	0018      	movs	r0, r3
 8003aee:	f002 f9f9 	bl	8005ee4 <HAL_RCC_OscConfig>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d001      	beq.n	8003afa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003af6:	f000 fa65 	bl	8003fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003afa:	2110      	movs	r1, #16
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2207      	movs	r2, #7
 8003b00:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	2100      	movs	r1, #0
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f002 fcd7 	bl	80064cc <HAL_RCC_ClockConfig>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d001      	beq.n	8003b26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003b22:	f000 fa4f 	bl	8003fc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003b26:	003b      	movs	r3, r7
 8003b28:	2221      	movs	r2, #33	; 0x21
 8003b2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b2c:	003b      	movs	r3, r7
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003b32:	003b      	movs	r3, r7
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b38:	003b      	movs	r3, r7
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f002 fe5c 	bl	80067f8 <HAL_RCCEx_PeriphCLKConfig>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003b44:	f000 fa3e 	bl	8003fc4 <Error_Handler>
  }
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b015      	add	sp, #84	; 0x54
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <MX_I2C1_Init+0x78>)
 8003b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <MX_I2C1_Init+0x7c>)
 8003b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f001 fbb5 	bl	80052fc <HAL_I2C_Init>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b96:	f000 fa15 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f002 f906 	bl	8005db0 <HAL_I2CEx_ConfigAnalogFilter>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ba8:	f000 fa0c 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <MX_I2C1_Init+0x74>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f002 f949 	bl	8005e48 <HAL_I2CEx_ConfigDigitalFilter>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bba:	f000 fa03 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000f6c 	.word	0x20000f6c
 8003bc8:	40005400 	.word	0x40005400
 8003bcc:	2000090e 	.word	0x2000090e

08003bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <MX_SPI1_Init+0x78>)
 8003bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bdc:	2282      	movs	r2, #130	; 0x82
 8003bde:	0052      	lsls	r2, r2, #1
 8003be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bea:	22c0      	movs	r2, #192	; 0xc0
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c1e:	2207      	movs	r2, #7
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <MX_SPI1_Init+0x74>)
 8003c30:	0018      	movs	r0, r3
 8003c32:	f002 feaf 	bl	8006994 <HAL_SPI_Init>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d001      	beq.n	8003c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003c3a:	f000 f9c3 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200010b0 	.word	0x200010b0
 8003c48:	40013000 	.word	0x40013000

08003c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c52:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <MX_USART1_UART_Init+0x64>)
 8003c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c58:	2296      	movs	r2, #150	; 0x96
 8003c5a:	0192      	lsls	r2, r2, #6
 8003c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c72:	220c      	movs	r2, #12
 8003c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003c8e:	4b07      	ldr	r3, [pc, #28]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	0152      	lsls	r2, r2, #5
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <MX_USART1_UART_Init+0x60>)
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f003 f921 	bl	8006ee0 <HAL_UART_Init>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003ca2:	f000 f98f 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20001040 	.word	0x20001040
 8003cb0:	40013800 	.word	0x40013800

08003cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cba:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <MX_USART2_UART_Init+0x64>)
 8003cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cc0:	2296      	movs	r2, #150	; 0x96
 8003cc2:	0212      	lsls	r2, r2, #8
 8003cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cda:	220c      	movs	r2, #12
 8003cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	0152      	lsls	r2, r2, #5
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <MX_USART2_UART_Init+0x60>)
 8003d00:	0018      	movs	r0, r3
 8003d02:	f003 f8ed 	bl	8006ee0 <HAL_UART_Init>
 8003d06:	1e03      	subs	r3, r0, #0
 8003d08:	d001      	beq.n	8003d0e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003d0a:	f000 f95b 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20001114 	.word	0x20001114
 8003d18:	40004400 	.word	0x40004400

08003d1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <MX_DMA_Init+0x48>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <MX_DMA_Init+0x48>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <MX_DMA_Init+0x48>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2201      	movs	r2, #1
 8003d34:	4013      	ands	r3, r2
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	200a      	movs	r0, #10
 8003d40:	f000 ff3a 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003d44:	200a      	movs	r0, #10
 8003d46:	f000 ff4c 	bl	8004be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	200b      	movs	r0, #11
 8003d50:	f000 ff32 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003d54:	200b      	movs	r0, #11
 8003d56:	f000 ff44 	bl	8004be2 <HAL_NVIC_EnableIRQ>

}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000

08003d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b08b      	sub	sp, #44	; 0x2c
 8003d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6e:	2414      	movs	r4, #20
 8003d70:	193b      	adds	r3, r7, r4
 8003d72:	0018      	movs	r0, r3
 8003d74:	2314      	movs	r3, #20
 8003d76:	001a      	movs	r2, r3
 8003d78:	2100      	movs	r1, #0
 8003d7a:	f003 ffba 	bl	8007cf2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d7e:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	0309      	lsls	r1, r1, #12
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	615a      	str	r2, [r3, #20]
 8003d8c:	4b64      	ldr	r3, [pc, #400]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	031b      	lsls	r3, r3, #12
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	4b60      	ldr	r3, [pc, #384]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	03c9      	lsls	r1, r1, #15
 8003da4:	430a      	orrs	r2, r1
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	03db      	lsls	r3, r3, #15
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0289      	lsls	r1, r1, #10
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	615a      	str	r2, [r3, #20]
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd2:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	02c9      	lsls	r1, r1, #11
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	615a      	str	r2, [r3, #20]
 8003de0:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <MX_GPIO_Init+0x1b8>)
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	02db      	lsls	r3, r3, #11
 8003de8:	4013      	ands	r3, r2
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 8003dee:	494d      	ldr	r1, [pc, #308]	; (8003f24 <MX_GPIO_Init+0x1bc>)
 8003df0:	4b4d      	ldr	r3, [pc, #308]	; (8003f28 <MX_GPIO_Init+0x1c0>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	0018      	movs	r0, r3
 8003df6:	f001 fa63 	bl	80052c0 <HAL_GPIO_WritePin>
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPARE_GPIO_3_GPIO_Port, SPARE_GPIO_3_Pin, GPIO_PIN_RESET);
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <MX_GPIO_Init+0x1c4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2101      	movs	r1, #1
 8003e00:	0018      	movs	r0, r3
 8003e02:	f001 fa5d 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003e06:	494a      	ldr	r1, [pc, #296]	; (8003f30 <MX_GPIO_Init+0x1c8>)
 8003e08:	2390      	movs	r3, #144	; 0x90
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f001 fa56 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin, GPIO_PIN_RESET);
 8003e14:	23f0      	movs	r3, #240	; 0xf0
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	4846      	ldr	r0, [pc, #280]	; (8003f34 <MX_GPIO_Init+0x1cc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	f001 fa4f 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPARE_GPIO_0_Pin SPARE_GPIO_1_Pin SPARE_GPIO_2_Pin LCD_DC_Pin 
                           LCD_CCS_Pin LCD_8BIT_1_Pin LCD_8BIT_5_Pin LCD_8BIT_0_Pin 
                           LCD_8BIT_4_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_0_Pin|SPARE_GPIO_1_Pin|SPARE_GPIO_2_Pin|LCD_DC_Pin 
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	4a3f      	ldr	r2, [pc, #252]	; (8003f24 <MX_GPIO_Init+0x1bc>)
 8003e26:	601a      	str	r2, [r3, #0]
                          |LCD_CCS_Pin|LCD_8BIT_1_Pin|LCD_8BIT_5_Pin|LCD_8BIT_0_Pin 
                          |LCD_8BIT_4_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	2200      	movs	r2, #0
 8003e38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <MX_GPIO_Init+0x1c0>)
 8003e3e:	0019      	movs	r1, r3
 8003e40:	0010      	movs	r0, r2
 8003e42:	f001 f8c9 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPARE_GPIO_3_Pin */
  GPIO_InitStruct.Pin = SPARE_GPIO_3_Pin;
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	2201      	movs	r2, #1
 8003e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	193b      	adds	r3, r7, r4
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPARE_GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <MX_GPIO_Init+0x1c4>)
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f001 f8b7 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_1PPS_Pin */
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e70:	193b      	adds	r3, r7, r4
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	193a      	adds	r2, r7, r4
 8003e7e:	2390      	movs	r3, #144	; 0x90
 8003e80:	05db      	lsls	r3, r3, #23
 8003e82:	0011      	movs	r1, r2
 8003e84:	0018      	movs	r0, r3
 8003e86:	f001 f8a7 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_FORCE_ON_Pin LCD_SEL_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPS_FORCE_ON_Pin|LCD_SEL_Pin|LED_GREEN_Pin;
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <MX_GPIO_Init+0x1c8>)
 8003e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	2201      	movs	r2, #1
 8003e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea2:	193a      	adds	r2, r7, r4
 8003ea4:	2390      	movs	r3, #144	; 0x90
 8003ea6:	05db      	lsls	r3, r3, #23
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f001 f894 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_YP_Pin LCD_XM_Pin LCD_YM_Pin LCD_XP_Pin */
  GPIO_InitStruct.Pin = LCD_YP_Pin|LCD_XM_Pin|LCD_YM_Pin|LCD_XP_Pin;
 8003eb0:	193b      	adds	r3, r7, r4
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <MX_GPIO_Init+0x1d0>)
 8003eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	2203      	movs	r2, #3
 8003eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	193b      	adds	r3, r7, r4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <MX_GPIO_Init+0x1cc>)
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	f001 f885 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_8BIT_3_Pin LCD_8BIT_7_Pin LCD_8BIT_2_Pin LCD_8BIT_6_Pin */
  GPIO_InitStruct.Pin = LCD_8BIT_3_Pin|LCD_8BIT_7_Pin|LCD_8BIT_2_Pin|LCD_8BIT_6_Pin;
 8003ece:	0021      	movs	r1, r4
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	22f0      	movs	r2, #240	; 0xf0
 8003ed4:	0212      	lsls	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2201      	movs	r2, #1
 8003edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	000c      	movs	r4, r1
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <MX_GPIO_Init+0x1cc>)
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	f001 f870 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8003ef8:	0021      	movs	r1, r4
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2260      	movs	r2, #96	; 0x60
 8003efe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <MX_GPIO_Init+0x1d4>)
 8003f04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <MX_GPIO_Init+0x1cc>)
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f001 f860 	bl	8004fd8 <HAL_GPIO_Init>

}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b00b      	add	sp, #44	; 0x2c
 8003f1e:	bd90      	pop	{r4, r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	0000eff0 	.word	0x0000eff0
 8003f28:	48000800 	.word	0x48000800
 8003f2c:	48001400 	.word	0x48001400
 8003f30:	00008012 	.word	0x00008012
 8003f34:	48000400 	.word	0x48000400
 8003f38:	00000407 	.word	0x00000407
 8003f3c:	10110000 	.word	0x10110000

08003f40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_UART_RxCpltCallback+0x28>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_UART_RxCpltCallback+0x20>
		gps_Recieve_Half();
 8003f50:	f000 fc0c 	bl	800476c <gps_Recieve_Half>
		xSemaphoreGiveFromISR(gpsDataReady_s, NULL);
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_UART_RxCpltCallback+0x2c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fe fa6b 	bl	8002436 <xQueueGiveFromISR>
	}
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20001040 	.word	0x20001040
 8003f6c:	20000f58 	.word	0x20000f58

08003f70 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_UART_RxHalfCpltCallback+0x28>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_UART_RxHalfCpltCallback+0x20>
		gps_Recieve_Full();
 8003f80:	f000 fbde 	bl	8004740 <gps_Recieve_Full>
		xSemaphoreGiveFromISR(gpsDataReady_s, NULL);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_UART_RxHalfCpltCallback+0x2c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fe fa53 	bl	8002436 <xQueueGiveFromISR>
	}
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20001040 	.word	0x20001040
 8003f9c:	20000f58 	.word	0x20000f58

08003fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fb2:	f000 fd49 	bl	8004a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	40012c00 	.word	0x40012c00

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <RTOS_INIT>:
#include "racing_tasks.h"

void RTOS_INIT() {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	gpsDataReady_s = xSemaphoreCreateBinary();
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fe f914 	bl	8002206 <xQueueGenericCreate>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <RTOS_INIT+0x30>)
 8003fe2:	601a      	str	r2, [r3, #0]
	sendBlePacket_s = xSemaphoreCreateBinary();
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7fe f90c 	bl	8002206 <xQueueGenericCreate>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <RTOS_INIT+0x34>)
 8003ff2:	601a      	str	r2, [r3, #0]
	vTaskStartScheduler();
 8003ff4:	f7fe fdac 	bl	8002b50 <vTaskStartScheduler>
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	20000f58 	.word	0x20000f58
 8004004:	20000f54 	.word	0x20000f54

08004008 <RTOS_INIT_TASKS>:

void RTOS_INIT_TASKS() {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af02      	add	r7, sp, #8
	xTaskCreate(task_gps_packet_recieved, "gps_packet_recieved", 256, NULL, 0, gps_packet_recieved_handle);
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <RTOS_INIT_TASKS+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	0052      	lsls	r2, r2, #1
 8004016:	4906      	ldr	r1, [pc, #24]	; (8004030 <RTOS_INIT_TASKS+0x28>)
 8004018:	4806      	ldr	r0, [pc, #24]	; (8004034 <RTOS_INIT_TASKS+0x2c>)
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	f7fe fc6e 	bl	8002902 <xTaskCreate>
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000f64 	.word	0x20000f64
 8004030:	080097d0 	.word	0x080097d0
 8004034:	08004039 	.word	0x08004039

08004038 <task_gps_packet_recieved>:

void task_gps_packet_recieved() {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
	for(;;) {
        if( xSemaphoreTake( gpsDataReady_s, ( TickType_t ) 20 ) == pdTRUE )
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <task_gps_packet_recieved+0x28>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	2214      	movs	r2, #20
 8004044:	2100      	movs	r1, #0
 8004046:	f7fe fa5b 	bl	8002500 <xQueueGenericReceive>
 800404a:	0003      	movs	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d1f5      	bne.n	800403c <task_gps_packet_recieved+0x4>
        {
        	xSemaphoreGive(sendBlePacket_s);
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <task_gps_packet_recieved+0x2c>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	2200      	movs	r2, #0
 8004058:	2100      	movs	r1, #0
 800405a:	f7fe f928 	bl	80022ae <xQueueGenericSend>
        if( xSemaphoreTake( gpsDataReady_s, ( TickType_t ) 20 ) == pdTRUE )
 800405e:	e7ed      	b.n	800403c <task_gps_packet_recieved+0x4>
 8004060:	20000f58 	.word	0x20000f58
 8004064:	20000f54 	.word	0x20000f54

08004068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_MspInit+0x44>)
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_MspInit+0x44>)
 8004074:	2101      	movs	r1, #1
 8004076:	430a      	orrs	r2, r1
 8004078:	619a      	str	r2, [r3, #24]
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_MspInit+0x44>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2201      	movs	r2, #1
 8004080:	4013      	ands	r3, r2
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_MspInit+0x44>)
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_MspInit+0x44>)
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0549      	lsls	r1, r1, #21
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_MspInit+0x44>)
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	055b      	lsls	r3, r3, #21
 800409c:	4013      	ands	r3, r2
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	2314      	movs	r3, #20
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	0018      	movs	r0, r3
 80040be:	2314      	movs	r3, #20
 80040c0:	001a      	movs	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	f003 fe15 	bl	8007cf2 <memset>
  if(hi2c->Instance==I2C1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_I2C_MspInit+0x90>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d132      	bne.n	8004138 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <HAL_I2C_MspInit+0x94>)
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_I2C_MspInit+0x94>)
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	02c9      	lsls	r1, r1, #11
 80040dc:	430a      	orrs	r2, r1
 80040de:	615a      	str	r2, [r3, #20]
 80040e0:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_I2C_MspInit+0x94>)
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	02db      	lsls	r3, r3, #11
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = IMU_SDA_Pin|IMU_SCL_Pin;
 80040ee:	2114      	movs	r1, #20
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	22c0      	movs	r2, #192	; 0xc0
 80040f4:	0052      	lsls	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	2212      	movs	r2, #18
 80040fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	2201      	movs	r2, #1
 8004102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2203      	movs	r2, #3
 8004108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2201      	movs	r2, #1
 800410e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004110:	187b      	adds	r3, r7, r1
 8004112:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <HAL_I2C_MspInit+0x98>)
 8004114:	0019      	movs	r1, r3
 8004116:	0010      	movs	r0, r2
 8004118:	f000 ff5e 	bl	8004fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_I2C_MspInit+0x94>)
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_I2C_MspInit+0x94>)
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	0389      	lsls	r1, r1, #14
 8004126:	430a      	orrs	r2, r1
 8004128:	61da      	str	r2, [r3, #28]
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_I2C_MspInit+0x94>)
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	039b      	lsls	r3, r3, #14
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b00a      	add	sp, #40	; 0x28
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40005400 	.word	0x40005400
 8004144:	40021000 	.word	0x40021000
 8004148:	48000400 	.word	0x48000400

0800414c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	2314      	movs	r3, #20
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	0018      	movs	r0, r3
 800415a:	2314      	movs	r3, #20
 800415c:	001a      	movs	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f003 fdc7 	bl	8007cf2 <memset>
  if(hspi->Instance==SPI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <HAL_SPI_MspInit+0x90>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d132      	bne.n	80041d4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	0149      	lsls	r1, r1, #5
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0289      	lsls	r1, r1, #10
 8004194:	430a      	orrs	r2, r1
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_SPI_MspInit+0x94>)
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80041a6:	2114      	movs	r1, #20
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	22e0      	movs	r2, #224	; 0xe0
 80041ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2202      	movs	r2, #2
 80041b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	2203      	movs	r2, #3
 80041be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c6:	187a      	adds	r2, r7, r1
 80041c8:	2390      	movs	r3, #144	; 0x90
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	0011      	movs	r1, r2
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 ff02 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b00a      	add	sp, #40	; 0x28
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013000 	.word	0x40013000
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	231c      	movs	r3, #28
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	0018      	movs	r0, r3
 80041f2:	2314      	movs	r3, #20
 80041f4:	001a      	movs	r2, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	f003 fd7b 	bl	8007cf2 <memset>
  if(huart->Instance==USART1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a64      	ldr	r2, [pc, #400]	; (8004394 <HAL_UART_MspInit+0x1b0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d15b      	bne.n	80042be <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004206:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	01c9      	lsls	r1, r1, #7
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
 8004214:	4b60      	ldr	r3, [pc, #384]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004222:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0289      	lsls	r1, r1, #10
 800422c:	430a      	orrs	r2, r1
 800422e:	615a      	str	r2, [r3, #20]
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	4013      	ands	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800423e:	211c      	movs	r1, #28
 8004240:	187b      	adds	r3, r7, r1
 8004242:	22c0      	movs	r2, #192	; 0xc0
 8004244:	00d2      	lsls	r2, r2, #3
 8004246:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2202      	movs	r2, #2
 800424c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004254:	187b      	adds	r3, r7, r1
 8004256:	2203      	movs	r2, #3
 8004258:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800425a:	187b      	adds	r3, r7, r1
 800425c:	2201      	movs	r2, #1
 800425e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004260:	187a      	adds	r2, r7, r1
 8004262:	2390      	movs	r3, #144	; 0x90
 8004264:	05db      	lsls	r3, r3, #23
 8004266:	0011      	movs	r1, r2
 8004268:	0018      	movs	r0, r3
 800426a:	f000 feb5 	bl	8004fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800426e:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_UART_MspInit+0x1b8>)
 8004270:	4a4b      	ldr	r2, [pc, #300]	; (80043a0 <HAL_UART_MspInit+0x1bc>)
 8004272:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_UART_MspInit+0x1b8>)
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800427a:	4b48      	ldr	r3, [pc, #288]	; (800439c <HAL_UART_MspInit+0x1b8>)
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <HAL_UART_MspInit+0x1b8>)
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004286:	4b45      	ldr	r3, [pc, #276]	; (800439c <HAL_UART_MspInit+0x1b8>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_UART_MspInit+0x1b8>)
 800428e:	2200      	movs	r2, #0
 8004290:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004292:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_UART_MspInit+0x1b8>)
 8004294:	2220      	movs	r2, #32
 8004296:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004298:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_UART_MspInit+0x1b8>)
 800429a:	22c0      	movs	r2, #192	; 0xc0
 800429c:	0192      	lsls	r2, r2, #6
 800429e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042a0:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_UART_MspInit+0x1b8>)
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 fcae 	bl	8004c04 <HAL_DMA_Init>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80042ac:	f7ff fe8a 	bl	8003fc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <HAL_UART_MspInit+0x1b8>)
 80042b4:	665a      	str	r2, [r3, #100]	; 0x64
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_UART_MspInit+0x1b8>)
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042bc:	e066      	b.n	800438c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_UART_MspInit+0x1c0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d161      	bne.n	800438c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	0289      	lsls	r1, r1, #10
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	0289      	lsls	r1, r1, #10
 80042ee:	430a      	orrs	r2, r1
 80042f0:	615a      	str	r2, [r3, #20]
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_UART_MspInit+0x1b4>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	029b      	lsls	r3, r3, #10
 80042fa:	4013      	ands	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_RX_Pin|SERIAL_TX_Pin;
 8004300:	211c      	movs	r1, #28
 8004302:	187b      	adds	r3, r7, r1
 8004304:	220c      	movs	r2, #12
 8004306:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	187b      	adds	r3, r7, r1
 800430a:	2202      	movs	r2, #2
 800430c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	187b      	adds	r3, r7, r1
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004314:	187b      	adds	r3, r7, r1
 8004316:	2203      	movs	r2, #3
 8004318:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800431a:	187b      	adds	r3, r7, r1
 800431c:	2201      	movs	r2, #1
 800431e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004320:	187a      	adds	r2, r7, r1
 8004322:	2390      	movs	r3, #144	; 0x90
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	0011      	movs	r1, r2
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fe55 	bl	8004fd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <HAL_UART_MspInit+0x1c8>)
 8004332:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004336:	2210      	movs	r2, #16
 8004338:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	0152      	lsls	r2, r2, #5
 800435e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004362:	0018      	movs	r0, r3
 8004364:	f000 fc4e 	bl	8004c04 <HAL_DMA_Init>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800436c:	f7ff fe2a 	bl	8003fc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004374:	661a      	str	r2, [r3, #96]	; 0x60
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_UART_MspInit+0x1c4>)
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	201c      	movs	r0, #28
 8004382:	f000 fc19 	bl	8004bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004386:	201c      	movs	r0, #28
 8004388:	f000 fc2b 	bl	8004be2 <HAL_NVIC_EnableIRQ>
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b00c      	add	sp, #48	; 0x30
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	40021000 	.word	0x40021000
 800439c:	20000fb8 	.word	0x20000fb8
 80043a0:	40020030 	.word	0x40020030
 80043a4:	40004400 	.word	0x40004400
 80043a8:	20000ffc 	.word	0x20000ffc
 80043ac:	40020044 	.word	0x40020044

080043b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	0019      	movs	r1, r3
 80043c6:	200d      	movs	r0, #13
 80043c8:	f000 fbf6 	bl	8004bb8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80043cc:	200d      	movs	r0, #13
 80043ce:	f000 fc08 	bl	8004be2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80043d2:	4b21      	ldr	r3, [pc, #132]	; (8004458 <HAL_InitTick+0xa8>)
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_InitTick+0xa8>)
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	0109      	lsls	r1, r1, #4
 80043dc:	430a      	orrs	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_InitTick+0xa8>)
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043ee:	230c      	movs	r3, #12
 80043f0:	18fa      	adds	r2, r7, r3
 80043f2:	2310      	movs	r3, #16
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	0011      	movs	r1, r2
 80043f8:	0018      	movs	r0, r3
 80043fa:	f002 f9d3 	bl	80067a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043fe:	f002 f9bb 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8004402:	0003      	movs	r3, r0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	4914      	ldr	r1, [pc, #80]	; (800445c <HAL_InitTick+0xac>)
 800440a:	0018      	movs	r0, r3
 800440c:	f7fb fe8e 	bl	800012c <__udivsi3>
 8004410:	0003      	movs	r3, r0
 8004412:	3b01      	subs	r3, #1
 8004414:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_InitTick+0xb0>)
 8004418:	4a12      	ldr	r2, [pc, #72]	; (8004464 <HAL_InitTick+0xb4>)
 800441a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_InitTick+0xb0>)
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <HAL_InitTick+0xb8>)
 8004420:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_InitTick+0xb0>)
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_InitTick+0xb0>)
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_InitTick+0xb0>)
 8004430:	2200      	movs	r2, #0
 8004432:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_InitTick+0xb0>)
 8004436:	0018      	movs	r0, r3
 8004438:	f002 fb46 	bl	8006ac8 <HAL_TIM_Base_Init>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d105      	bne.n	800444c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_InitTick+0xb0>)
 8004442:	0018      	movs	r0, r3
 8004444:	f002 fb74 	bl	8006b30 <HAL_TIM_Base_Start_IT>
 8004448:	0003      	movs	r3, r0
 800444a:	e000      	b.n	800444e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b00a      	add	sp, #40	; 0x28
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40021000 	.word	0x40021000
 800445c:	000f4240 	.word	0x000f4240
 8004460:	20001184 	.word	0x20001184
 8004464:	40012c00 	.word	0x40012c00
 8004468:	000003e7 	.word	0x000003e7

0800446c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800447a:	e7fe      	b.n	800447a <HardFault_Handler+0x4>

0800447c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fcbe 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000fb8 	.word	0x20000fb8

08004494 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <DMA1_Channel4_5_IRQHandler+0x14>)
 800449a:	0018      	movs	r0, r3
 800449c:	f000 fcb2 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	20000ffc 	.word	0x20000ffc

080044ac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80044b2:	0018      	movs	r0, r3
 80044b4:	f002 fb55 	bl	8006b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20001184 	.word	0x20001184

080044c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <USART2_IRQHandler+0x14>)
 80044ca:	0018      	movs	r0, r3
 80044cc:	f002 fe8c 	bl	80071e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	20001114 	.word	0x20001114

080044dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <_sbrk+0x50>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <_sbrk+0x16>
		heap_end = &end;
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <_sbrk+0x50>)
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <_sbrk+0x54>)
 80044f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80044f2:	4b0e      	ldr	r3, [pc, #56]	; (800452c <_sbrk+0x50>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <_sbrk+0x50>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	18d3      	adds	r3, r2, r3
 8004500:	466a      	mov	r2, sp
 8004502:	4293      	cmp	r3, r2
 8004504:	d907      	bls.n	8004516 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004506:	f003 fbc1 	bl	8007c8c <__errno>
 800450a:	0003      	movs	r3, r0
 800450c:	220c      	movs	r2, #12
 800450e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004510:	2301      	movs	r3, #1
 8004512:	425b      	negs	r3, r3
 8004514:	e006      	b.n	8004524 <_sbrk+0x48>
	}

	heap_end += incr;
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <_sbrk+0x50>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	18d2      	adds	r2, r2, r3
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <_sbrk+0x50>)
 8004520:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b004      	add	sp, #16
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000f40 	.word	0x20000f40
 8004530:	20001350 	.word	0x20001350

08004534 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <SystemInit+0x70>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <SystemInit+0x70>)
 800453e:	2101      	movs	r1, #1
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <SystemInit+0x70>)
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <SystemInit+0x70>)
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <SystemInit+0x74>)
 800454c:	400a      	ands	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <SystemInit+0x70>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <SystemInit+0x70>)
 8004556:	4915      	ldr	r1, [pc, #84]	; (80045ac <SystemInit+0x78>)
 8004558:	400a      	ands	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <SystemInit+0x70>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <SystemInit+0x70>)
 8004562:	4913      	ldr	r1, [pc, #76]	; (80045b0 <SystemInit+0x7c>)
 8004564:	400a      	ands	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <SystemInit+0x70>)
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <SystemInit+0x70>)
 800456e:	4911      	ldr	r1, [pc, #68]	; (80045b4 <SystemInit+0x80>)
 8004570:	400a      	ands	r2, r1
 8004572:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <SystemInit+0x70>)
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <SystemInit+0x70>)
 800457a:	210f      	movs	r1, #15
 800457c:	438a      	bics	r2, r1
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <SystemInit+0x70>)
 8004582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <SystemInit+0x70>)
 8004586:	490c      	ldr	r1, [pc, #48]	; (80045b8 <SystemInit+0x84>)
 8004588:	400a      	ands	r2, r1
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <SystemInit+0x70>)
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <SystemInit+0x70>)
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <SystemInit+0x70>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]

}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08ffb80c 	.word	0x08ffb80c
 80045ac:	fef6ffff 	.word	0xfef6ffff
 80045b0:	fffbffff 	.word	0xfffbffff
 80045b4:	ffc0ffff 	.word	0xffc0ffff
 80045b8:	fffffeec 	.word	0xfffffeec

080045bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045bc:	480d      	ldr	r0, [pc, #52]	; (80045f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045c0:	480d      	ldr	r0, [pc, #52]	; (80045f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80045c2:	490e      	ldr	r1, [pc, #56]	; (80045fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80045c4:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <LoopForever+0xe>)
  movs r3, #0
 80045c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045c8:	e002      	b.n	80045d0 <LoopCopyDataInit>

080045ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ce:	3304      	adds	r3, #4

080045d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045d4:	d3f9      	bcc.n	80045ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045d6:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045d8:	4c0b      	ldr	r4, [pc, #44]	; (8004608 <LoopForever+0x16>)
  movs r3, #0
 80045da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045dc:	e001      	b.n	80045e2 <LoopFillZerobss>

080045de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e0:	3204      	adds	r2, #4

080045e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045e4:	d3fb      	bcc.n	80045de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80045e6:	f7ff ffa5 	bl	8004534 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80045ea:	f003 fb55 	bl	8007c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045ee:	f7ff fa35 	bl	8003a5c <main>

080045f2 <LoopForever>:

LoopForever:
    b LoopForever
 80045f2:	e7fe      	b.n	80045f2 <LoopForever>
  ldr   r0, =_estack
 80045f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80045f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004600:	08009b28 	.word	0x08009b28
  ldr r2, =_sbss
 8004604:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004608:	2000134c 	.word	0x2000134c

0800460c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800460c:	e7fe      	b.n	800460c <ADC1_IRQHandler>
	...

08004610 <ble_init>:
#include "BLE.h"

UART_HandleTypeDef * BLE_UART = &huart2; // huart2 externed in header - redefine if changing uarts - for debugging statements

void ble_init() {
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	HAL_UART_MspInit(BLE_UART);
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <ble_init+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff fde3 	bl	80041e4 <HAL_UART_MspInit>
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000008 	.word	0x20000008

08004628 <gps_init>:
uint8_t txReady = 0;

/*
 * Initialize the GPS module to a higher baud rate (9600 -> 57600), to only output GPRMC data, and to output at 10Hz rate
 */
uint8_t gps_init() {
 8004628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462a:	b099      	sub	sp, #100	; 0x64
 800462c:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800462e:	2064      	movs	r0, #100	; 0x64
 8004630:	f000 fa20 	bl	8004a74 <HAL_Delay>
	uint8_t command_baud_57600[GPS_BAUD_57600_SIZE] = GPS_BAUD_57600;
 8004634:	254c      	movs	r5, #76	; 0x4c
 8004636:	197b      	adds	r3, r7, r5
 8004638:	4a3c      	ldr	r2, [pc, #240]	; (800472c <gps_init+0x104>)
 800463a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800463c:	c313      	stmia	r3!, {r0, r1, r4}
 800463e:	6811      	ldr	r1, [r2, #0]
 8004640:	6019      	str	r1, [r3, #0]
 8004642:	8891      	ldrh	r1, [r2, #4]
 8004644:	8099      	strh	r1, [r3, #4]
 8004646:	7992      	ldrb	r2, [r2, #6]
 8004648:	719a      	strb	r2, [r3, #6]
	uint8_t command_gprmc[GPS_GPRMC_ONLY_SIZE] = GPS_GPRMC_ONLY;
 800464a:	2318      	movs	r3, #24
 800464c:	18fa      	adds	r2, r7, r3
 800464e:	4b38      	ldr	r3, [pc, #224]	; (8004730 <gps_init+0x108>)
 8004650:	0010      	movs	r0, r2
 8004652:	0019      	movs	r1, r3
 8004654:	2333      	movs	r3, #51	; 0x33
 8004656:	001a      	movs	r2, r3
 8004658:	f003 fb42 	bl	8007ce0 <memcpy>
	uint8_t command_10hz[GPS_10HZ_SIZE] = GPS_10HZ;
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	4a35      	ldr	r2, [pc, #212]	; (8004734 <gps_init+0x10c>)
 8004660:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004662:	c313      	stmia	r3!, {r0, r1, r4}
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	7912      	ldrb	r2, [r2, #4]
 800466a:	711a      	strb	r2, [r3, #4]
//	// uint8_t response[MAX_PACKET_LENGTH];
//
	HAL_StatusTypeDef result = HAL_UART_Transmit(GPS_UART, command_baud_57600, GPS_BAUD_57600_SIZE, GPS_UART_TIMEOUT);
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <gps_init+0x110>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	265f      	movs	r6, #95	; 0x5f
 8004672:	19bc      	adds	r4, r7, r6
 8004674:	23fa      	movs	r3, #250	; 0xfa
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1979      	adds	r1, r7, r5
 800467a:	2213      	movs	r2, #19
 800467c:	f002 fc88 	bl	8006f90 <HAL_UART_Transmit>
 8004680:	0003      	movs	r3, r0
 8004682:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 8004684:	19bb      	adds	r3, r7, r6
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <gps_init+0x68>
		return 0;
 800468c:	2300      	movs	r3, #0
 800468e:	e049      	b.n	8004724 <gps_init+0xfc>
	}

	GPS_UART->Init.BaudRate = 57600;
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <gps_init+0x110>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	22e1      	movs	r2, #225	; 0xe1
 8004696:	0212      	lsls	r2, r2, #8
 8004698:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(GPS_UART) != HAL_OK) {
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <gps_init+0x110>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	0018      	movs	r0, r3
 80046a0:	f002 fc1e 	bl	8006ee0 <HAL_UART_Init>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <gps_init+0x84>
		return 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e03b      	b.n	8004724 <gps_init+0xfc>
	}
//
	HAL_Delay(100);
 80046ac:	2064      	movs	r0, #100	; 0x64
 80046ae:	f000 f9e1 	bl	8004a74 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_gprmc, GPS_GPRMC_ONLY_SIZE, GPS_UART_TIMEOUT);
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <gps_init+0x110>)
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	255f      	movs	r5, #95	; 0x5f
 80046b8:	197c      	adds	r4, r7, r5
 80046ba:	23fa      	movs	r3, #250	; 0xfa
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	2218      	movs	r2, #24
 80046c0:	18b9      	adds	r1, r7, r2
 80046c2:	2233      	movs	r2, #51	; 0x33
 80046c4:	f002 fc64 	bl	8006f90 <HAL_UART_Transmit>
 80046c8:	0003      	movs	r3, r0
 80046ca:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80046cc:	197b      	adds	r3, r7, r5
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <gps_init+0xb0>
		return 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e025      	b.n	8004724 <gps_init+0xfc>
	}

	HAL_Delay(100);
 80046d8:	2064      	movs	r0, #100	; 0x64
 80046da:	f000 f9cb 	bl	8004a74 <HAL_Delay>

	result = HAL_UART_Transmit(GPS_UART, command_10hz, GPS_10HZ_SIZE, GPS_UART_TIMEOUT);
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <gps_init+0x110>)
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	255f      	movs	r5, #95	; 0x5f
 80046e4:	197c      	adds	r4, r7, r5
 80046e6:	23fa      	movs	r3, #250	; 0xfa
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1d39      	adds	r1, r7, #4
 80046ec:	2211      	movs	r2, #17
 80046ee:	f002 fc4f 	bl	8006f90 <HAL_UART_Transmit>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
	if (result != HAL_OK) {
 80046f6:	197b      	adds	r3, r7, r5
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <gps_init+0xda>
		return 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	e010      	b.n	8004724 <gps_init+0xfc>
	}

	HAL_Delay(100);
 8004702:	2064      	movs	r0, #100	; 0x64
 8004704:	f000 f9b6 	bl	8004a74 <HAL_Delay>

	// Initialize DMA for GPS_UART
	HAL_UART_MspInit(GPS_UART);
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <gps_init+0x110>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff fd69 	bl	80041e4 <HAL_UART_MspInit>

	// Begin Receiving DMA for GPS_UART
	HAL_UART_Receive_DMA(GPS_UART, rxBuffer, GPS_RX_BUFFER_SIZE);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <gps_init+0x110>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	005a      	lsls	r2, r3, #1
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <gps_init+0x114>)
 800471c:	0019      	movs	r1, r3
 800471e:	f002 fcdb 	bl	80070d8 <HAL_UART_Receive_DMA>
	return 1;
 8004722:	2301      	movs	r3, #1
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b019      	add	sp, #100	; 0x64
 800472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472c:	080097e4 	.word	0x080097e4
 8004730:	080097f8 	.word	0x080097f8
 8004734:	0800982c 	.word	0x0800982c
 8004738:	2000000c 	.word	0x2000000c
 800473c:	200011c4 	.word	0x200011c4

08004740 <gps_Recieve_Full>:
		#endif
	}

}

void gps_Recieve_Full() {
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
	memcpy(txBuffer, rxBuffer + GPS_RX_BUFFER_HALF_SIZE, GPS_TX_BUFFER_SIZE);
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <gps_Recieve_Full+0x20>)
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <gps_Recieve_Full+0x24>)
 8004748:	0010      	movs	r0, r2
 800474a:	0019      	movs	r1, r3
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	001a      	movs	r2, r3
 8004750:	f003 fac6 	bl	8007ce0 <memcpy>
	txReady = 1;
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <gps_Recieve_Full+0x28>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]


}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20001244 	.word	0x20001244
 8004764:	200012c4 	.word	0x200012c4
 8004768:	20000f44 	.word	0x20000f44

0800476c <gps_Recieve_Half>:

void gps_Recieve_Half() {
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	memcpy(txBuffer, rxBuffer, GPS_TX_BUFFER_SIZE);
 8004770:	4a06      	ldr	r2, [pc, #24]	; (800478c <gps_Recieve_Half+0x20>)
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <gps_Recieve_Half+0x24>)
 8004774:	0010      	movs	r0, r2
 8004776:	0019      	movs	r1, r3
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	001a      	movs	r2, r3
 800477c:	f003 fab0 	bl	8007ce0 <memcpy>
	txReady = 1;
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <gps_Recieve_Half+0x28>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200012c4 	.word	0x200012c4
 8004790:	200011c4 	.word	0x200011c4
 8004794:	20000f44 	.word	0x20000f44

08004798 <initMMA8452Q>:
#include "MMA8452Q.h"


// Initializes accelerometer
// returns 1 if successful else 0
uint8_t initMMA8452Q(uint8_t addr, MMA8452Q_Scale scale, MMA8452Q_Data_Rate rate){
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	0004      	movs	r4, r0
 80047a0:	0008      	movs	r0, r1
 80047a2:	0011      	movs	r1, r2
 80047a4:	1dfb      	adds	r3, r7, #7
 80047a6:	1c22      	adds	r2, r4, #0
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	1dbb      	adds	r3, r7, #6
 80047ac:	1c02      	adds	r2, r0, #0
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	1d7b      	adds	r3, r7, #5
 80047b2:	1c0a      	adds	r2, r1, #0
 80047b4:	701a      	strb	r2, [r3, #0]

	// verify device identity
	if (readRegister(WHO_AM_I) != 0x2a){
 80047b6:	200d      	movs	r0, #13
 80047b8:	f000 f8fe 	bl	80049b8 <readRegister>
 80047bc:	0003      	movs	r3, r0
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d001      	beq.n	80047c6 <initMMA8452Q+0x2e>
		return 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e00e      	b.n	80047e4 <initMMA8452Q+0x4c>
	}

	// switch to standby to change registers
	standby();
 80047c6:	f000 f87c 	bl	80048c2 <standby>

	// set the scale and data rate
	setScale(scale);
 80047ca:	1dbb      	adds	r3, r7, #6
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 f80c 	bl	80047ec <setScale>
	setDataRate(rate);
 80047d4:	1d7b      	adds	r3, r7, #5
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f83f 	bl	800485c <setDataRate>

	// set the device to active state and return successfully
	active();
 80047de:	f000 f886 	bl	80048ee <active>
	return 1;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b003      	add	sp, #12
 80047ea:	bd90      	pop	{r4, r7, pc}

080047ec <setScale>:

// sets the full-scale range of the accelerometers
// possible values for scale are SCALE_2G, SCALE_4G, SCALE_8G
void setScale(MMA8452Q_Scale scale){
 80047ec:	b5b0      	push	{r4, r5, r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	0002      	movs	r2, r0
 80047f4:	1dfb      	adds	r3, r7, #7
 80047f6:	701a      	strb	r2, [r3, #0]
	// set the global scale variable (used to calculate measured data)
	SCALE = scale;
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <setScale+0x6c>)
 80047fa:	1dfa      	adds	r2, r7, #7
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	701a      	strb	r2, [r3, #0]

	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8004800:	f000 f88b 	bl	800491a <isActive>
 8004804:	0003      	movs	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <setScale+0x22>
		standby();
 800480a:	f000 f85a 	bl	80048c2 <standby>
	}

	// read config, change scale bits, then re-write register
	uint8_t config = readRegister(XYZ_DATA_CFG);	// read current config
 800480e:	200f      	movs	r0, #15
 8004810:	0005      	movs	r5, r0
 8004812:	183c      	adds	r4, r7, r0
 8004814:	200e      	movs	r0, #14
 8004816:	f000 f8cf 	bl	80049b8 <readRegister>
 800481a:	0003      	movs	r3, r0
 800481c:	7023      	strb	r3, [r4, #0]
	config &= 0xFC;									// mask out the scale bits
 800481e:	0028      	movs	r0, r5
 8004820:	183b      	adds	r3, r7, r0
 8004822:	183a      	adds	r2, r7, r0
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	2103      	movs	r1, #3
 8004828:	438a      	bics	r2, r1
 800482a:	701a      	strb	r2, [r3, #0]
	config |= (scale >> 2);							// 00 = 2G, 01 = 4G, 10 = 8G
 800482c:	1dfb      	adds	r3, r7, #7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	b2d9      	uxtb	r1, r3
 8004834:	183b      	adds	r3, r7, r0
 8004836:	183a      	adds	r2, r7, r0
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	701a      	strb	r2, [r3, #0]
	writeRegister(XYZ_DATA_CFG, config);			// write config with new scale
 800483e:	183b      	adds	r3, r7, r0
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	0019      	movs	r1, r3
 8004844:	200e      	movs	r0, #14
 8004846:	f000 f8a3 	bl	8004990 <writeRegister>

	// return to active state once complete
	active();
 800484a:	f000 f850 	bl	80048ee <active>
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b004      	add	sp, #16
 8004854:	bdb0      	pop	{r4, r5, r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	20000f60 	.word	0x20000f60

0800485c <setDataRate>:

// sets the data rate
void setDataRate(MMA8452Q_Data_Rate data_rate){
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	0002      	movs	r2, r0
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	701a      	strb	r2, [r3, #0]
	// Must be in standby mode to make changes; change to standby if active
	if (isActive() == 1){
 8004868:	f000 f857 	bl	800491a <isActive>
 800486c:	0003      	movs	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <setDataRate+0x1a>
		standby();
 8004872:	f000 f826 	bl	80048c2 <standby>
	}

	// read control, change rate bits, then re-write register
	uint8_t control = readRegister(CTRL_REG1);		// read current settings
 8004876:	200f      	movs	r0, #15
 8004878:	0005      	movs	r5, r0
 800487a:	183c      	adds	r4, r7, r0
 800487c:	202a      	movs	r0, #42	; 0x2a
 800487e:	f000 f89b 	bl	80049b8 <readRegister>
 8004882:	0003      	movs	r3, r0
 8004884:	7023      	strb	r3, [r4, #0]
	control &= 0xC7;								// mask out the data rate bits
 8004886:	0028      	movs	r0, r5
 8004888:	183b      	adds	r3, r7, r0
 800488a:	183a      	adds	r2, r7, r0
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	2138      	movs	r1, #56	; 0x38
 8004890:	438a      	bics	r2, r1
 8004892:	701a      	strb	r2, [r3, #0]
	control |= (data_rate << 3);					// shift data rate bits
 8004894:	1dfb      	adds	r3, r7, #7
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	b25a      	sxtb	r2, r3
 800489c:	183b      	adds	r3, r7, r0
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b25a      	sxtb	r2, r3
 80048a6:	183b      	adds	r3, r7, r0
 80048a8:	701a      	strb	r2, [r3, #0]
	writeRegister(CTRL_REG1, control);				// write settings with new data rate
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	0019      	movs	r1, r3
 80048b0:	202a      	movs	r0, #42	; 0x2a
 80048b2:	f000 f86d 	bl	8004990 <writeRegister>

	// return to active state once complete
	active();
 80048b6:	f000 f81a 	bl	80048ee <active>
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bdb0      	pop	{r4, r5, r7, pc}

080048c2 <standby>:

// sets the MMA8452 to standby mode
void standby(void){
 80048c2:	b590      	push	{r4, r7, lr}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
	// clear the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 80048c8:	1dfc      	adds	r4, r7, #7
 80048ca:	202a      	movs	r0, #42	; 0x2a
 80048cc:	f000 f874 	bl	80049b8 <readRegister>
 80048d0:	0003      	movs	r3, r0
 80048d2:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control & ~(0x01)));
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2201      	movs	r2, #1
 80048da:	4393      	bics	r3, r2
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	0019      	movs	r1, r3
 80048e0:	202a      	movs	r0, #42	; 0x2a
 80048e2:	f000 f855 	bl	8004990 <writeRegister>
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b003      	add	sp, #12
 80048ec:	bd90      	pop	{r4, r7, pc}

080048ee <active>:

// sets the MMA8452 to active mode
void active(void){
 80048ee:	b590      	push	{r4, r7, lr}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
	// set the active bit of the control register
	uint8_t control = readRegister(CTRL_REG1);
 80048f4:	1dfc      	adds	r4, r7, #7
 80048f6:	202a      	movs	r0, #42	; 0x2a
 80048f8:	f000 f85e 	bl	80049b8 <readRegister>
 80048fc:	0003      	movs	r3, r0
 80048fe:	7023      	strb	r3, [r4, #0]
	writeRegister(CTRL_REG1, (control | 0x01));
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	4313      	orrs	r3, r2
 8004908:	b2db      	uxtb	r3, r3
 800490a:	0019      	movs	r1, r3
 800490c:	202a      	movs	r0, #42	; 0x2a
 800490e:	f000 f83f 	bl	8004990 <writeRegister>
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b003      	add	sp, #12
 8004918:	bd90      	pop	{r4, r7, pc}

0800491a <isActive>:

// returns 1 if in Active state, otherwise returns 0
uint8_t isActive(void){
 800491a:	b590      	push	{r4, r7, lr}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
	uint8_t currentState = readRegister(SYSMOD);
 8004920:	1dfc      	adds	r4, r7, #7
 8004922:	200b      	movs	r0, #11
 8004924:	f000 f848 	bl	80049b8 <readRegister>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
	currentState &= 0x03;
 800492c:	1dfb      	adds	r3, r7, #7
 800492e:	1dfa      	adds	r2, r7, #7
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	2103      	movs	r1, #3
 8004934:	400a      	ands	r2, r1
 8004936:	701a      	strb	r2, [r3, #0]

	// Wake and Sleep are both active SYSMOD states
	if (currentState == SYSMOD_STANDBY)
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <isActive+0x2a>
		return 0;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <isActive+0x2c>
	return 1;
 8004944:	2301      	movs	r3, #1
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b003      	add	sp, #12
 800494c:	bd90      	pop	{r4, r7, pc}
	...

08004950 <writeRegisters>:
	Y = (float)y / (float)(1 << 11) * (float)(SCALE);
	Z = (float)z / (float)(1 << 11) * (float)(SCALE);
}

// write an array of "len" bytes ("buffer")
void writeRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af04      	add	r7, sp, #16
 8004956:	6039      	str	r1, [r7, #0]
 8004958:	0011      	movs	r1, r2
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	1c02      	adds	r2, r0, #0
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	1c0a      	adds	r2, r1, #0
 8004964:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 8004966:	1dfb      	adds	r3, r7, #7
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	4807      	ldr	r0, [pc, #28]	; (800498c <writeRegisters+0x3c>)
 800496e:	230a      	movs	r3, #10
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2301      	movs	r3, #1
 800497e:	213a      	movs	r1, #58	; 0x3a
 8004980:	f000 fd52 	bl	8005428 <HAL_I2C_Mem_Write>
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b002      	add	sp, #8
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000f6c 	.word	0x20000f6c

08004990 <writeRegister>:

// write a single byte of data to a register in the MMA8452Q
void writeRegister(MMA8452Q_Register reg, uint8_t data){
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	0002      	movs	r2, r0
 8004998:	1dfb      	adds	r3, r7, #7
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	1dbb      	adds	r3, r7, #6
 800499e:	1c0a      	adds	r2, r1, #0
 80049a0:	701a      	strb	r2, [r3, #0]
	writeRegisters(reg, &data, 1);
 80049a2:	1db9      	adds	r1, r7, #6
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff ffd0 	bl	8004950 <writeRegisters>
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <readRegister>:

uint8_t readRegister(MMA8452Q_Register reg){
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	0002      	movs	r2, r0
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	readRegisters(reg, &buffer, 1);
 80049c4:	240f      	movs	r4, #15
 80049c6:	1939      	adds	r1, r7, r4
 80049c8:	1dfb      	adds	r3, r7, #7
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f806 	bl	80049e0 <readRegisters>
	return buffer;
 80049d4:	193b      	adds	r3, r7, r4
 80049d6:	781b      	ldrb	r3, [r3, #0]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b005      	add	sp, #20
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <readRegisters>:

void readRegisters(MMA8452Q_Register reg, uint8_t *buffer, uint16_t len){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af04      	add	r7, sp, #16
 80049e6:	6039      	str	r1, [r7, #0]
 80049e8:	0011      	movs	r1, r2
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	1c02      	adds	r2, r0, #0
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	1d3b      	adds	r3, r7, #4
 80049f2:	1c0a      	adds	r2, r1, #0
 80049f4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (MMA8452Q_Address << 1), reg, 1, buffer, len, 10);
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	4807      	ldr	r0, [pc, #28]	; (8004a1c <readRegisters+0x3c>)
 80049fe:	230a      	movs	r3, #10
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	213a      	movs	r1, #58	; 0x3a
 8004a10:	f000 fe4a 	bl	80056a8 <HAL_I2C_Mem_Read>
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000f6c 	.word	0x20000f6c

08004a20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_Init+0x24>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_Init+0x24>)
 8004a2a:	2110      	movs	r1, #16
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7ff fcbd 	bl	80043b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a36:	f7ff fb17 	bl	8004068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	40022000 	.word	0x40022000

08004a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  uwTick++;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <HAL_IncTick+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <HAL_IncTick+0x14>)
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20001344 	.word	0x20001344

08004a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  return uwTick;
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <HAL_GetTick+0x10>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	20001344 	.word	0x20001344

08004a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_GetTick>
 8004a80:	0003      	movs	r3, r0
 8004a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	d002      	beq.n	8004a94 <HAL_Delay+0x20>
  {
     wait++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	f7ff ffe3 	bl	8004a60 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d8f7      	bhi.n	8004a96 <HAL_Delay+0x22>
  {
  }
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	1dfb      	adds	r3, r7, #7
 8004aba:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	231f      	movs	r3, #31
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <NVIC_EnableIRQ+0x28>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4091      	lsls	r1, r2
 8004acc:	000a      	movs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000e100 	.word	0xe000e100

08004adc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004aea:	1dfb      	adds	r3, r7, #7
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b7f      	cmp	r3, #127	; 0x7f
 8004af0:	d932      	bls.n	8004b58 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004af2:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <NVIC_SetPriority+0xd4>)
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	0019      	movs	r1, r3
 8004afa:	230f      	movs	r3, #15
 8004afc:	400b      	ands	r3, r1
 8004afe:	3b08      	subs	r3, #8
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	3306      	adds	r3, #6
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18d3      	adds	r3, r2, r3
 8004b08:	3304      	adds	r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1dfa      	adds	r2, r7, #7
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	0011      	movs	r1, r2
 8004b12:	2203      	movs	r2, #3
 8004b14:	400a      	ands	r2, r1
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	21ff      	movs	r1, #255	; 0xff
 8004b1a:	4091      	lsls	r1, r2
 8004b1c:	000a      	movs	r2, r1
 8004b1e:	43d2      	mvns	r2, r2
 8004b20:	401a      	ands	r2, r3
 8004b22:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	019b      	lsls	r3, r3, #6
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	0018      	movs	r0, r3
 8004b32:	2303      	movs	r3, #3
 8004b34:	4003      	ands	r3, r0
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b3a:	481d      	ldr	r0, [pc, #116]	; (8004bb0 <NVIC_SetPriority+0xd4>)
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	001c      	movs	r4, r3
 8004b42:	230f      	movs	r3, #15
 8004b44:	4023      	ands	r3, r4
 8004b46:	3b08      	subs	r3, #8
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	3306      	adds	r3, #6
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	18c3      	adds	r3, r0, r3
 8004b52:	3304      	adds	r3, #4
 8004b54:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b56:	e027      	b.n	8004ba8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <NVIC_SetPriority+0xd8>)
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	33c0      	adds	r3, #192	; 0xc0
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	589b      	ldr	r3, [r3, r2]
 8004b68:	1dfa      	adds	r2, r7, #7
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	2203      	movs	r2, #3
 8004b70:	400a      	ands	r2, r1
 8004b72:	00d2      	lsls	r2, r2, #3
 8004b74:	21ff      	movs	r1, #255	; 0xff
 8004b76:	4091      	lsls	r1, r2
 8004b78:	000a      	movs	r2, r1
 8004b7a:	43d2      	mvns	r2, r2
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	019b      	lsls	r3, r3, #6
 8004b84:	22ff      	movs	r2, #255	; 0xff
 8004b86:	401a      	ands	r2, r3
 8004b88:	1dfb      	adds	r3, r7, #7
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	2303      	movs	r3, #3
 8004b90:	4003      	ands	r3, r0
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b96:	4807      	ldr	r0, [pc, #28]	; (8004bb4 <NVIC_SetPriority+0xd8>)
 8004b98:	1dfb      	adds	r3, r7, #7
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	33c0      	adds	r3, #192	; 0xc0
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	501a      	str	r2, [r3, r0]
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b003      	add	sp, #12
 8004bae:	bd90      	pop	{r4, r7, pc}
 8004bb0:	e000ed00 	.word	0xe000ed00
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	210f      	movs	r1, #15
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	1c02      	adds	r2, r0, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	0011      	movs	r1, r2
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff ff81 	bl	8004adc <NVIC_SetPriority>
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	0002      	movs	r2, r0
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bee:	1dfb      	adds	r3, r7, #7
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7ff ff5b 	bl	8004ab0 <NVIC_EnableIRQ>
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e042      	b.n	8004ca0 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	2102      	movs	r1, #2
 8004c20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_DMA_Init+0xa4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f998 	bl	8004fa0 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2221      	movs	r2, #33	; 0x21
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}  
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	ffffc00f 	.word	0xffffc00f

08004cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2317      	movs	r3, #23
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_DMA_Start_IT+0x24>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e04f      	b.n	8004d70 <HAL_DMA_Start_IT+0xc4>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2221      	movs	r2, #33	; 0x21
 8004cdc:	5c9b      	ldrb	r3, [r3, r2]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d13a      	bne.n	8004d5a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2221      	movs	r2, #33	; 0x21
 8004ce8:	2102      	movs	r1, #2
 8004cea:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	438a      	bics	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f91d 	bl	8004f48 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	210e      	movs	r1, #14
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e00f      	b.n	8004d48 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	210a      	movs	r1, #10
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2104      	movs	r1, #4
 8004d44:	438a      	bics	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2101      	movs	r1, #1
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e007      	b.n	8004d6a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004d62:	2317      	movs	r3, #23
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004d6a:	2317      	movs	r3, #23
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
} 
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b006      	add	sp, #24
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	230f      	movs	r3, #15
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2221      	movs	r2, #33	; 0x21
 8004d8c:	5c9b      	ldrb	r3, [r3, r2]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d007      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d9a:	230f      	movs	r3, #15
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e028      	b.n	8004df6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	210e      	movs	r1, #14
 8004db0:	438a      	bics	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4091      	lsls	r1, r2
 8004dd0:	000a      	movs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2221      	movs	r2, #33	; 0x21
 8004dd8:	2101      	movs	r1, #1
 8004dda:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	0010      	movs	r0, r2
 8004df4:	4798      	blx	r3
    } 
  }
  return status;
 8004df6:	230f      	movs	r3, #15
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b004      	add	sp, #16
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2204      	movs	r2, #4
 8004e22:	409a      	lsls	r2, r3
 8004e24:	0013      	movs	r3, r2
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d024      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x72>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	4013      	ands	r3, r2
 8004e32:	d020      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d107      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4091      	lsls	r1, r2
 8004e5c:	000a      	movs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d100      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x66>
 8004e68:	e06a      	b.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	0010      	movs	r0, r2
 8004e72:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004e74:	e064      	b.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	0013      	movs	r3, r2
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	d02b      	beq.n	8004ede <HAL_DMA_IRQHandler+0xda>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	4013      	ands	r3, r2
 8004e98:	d10b      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	210a      	movs	r1, #10
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4091      	lsls	r1, r2
 8004ebe:	000a      	movs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d036      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	0010      	movs	r0, r2
 8004eda:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004edc:	e030      	b.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	d028      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d024      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	210e      	movs	r1, #14
 8004f02:	438a      	bics	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4091      	lsls	r1, r2
 8004f12:	000a      	movs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	2101      	movs	r1, #1
 8004f22:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	2100      	movs	r1, #0
 8004f2a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	0010      	movs	r0, r2
 8004f3c:	4798      	blx	r3
    }
   }
}  
 8004f3e:	e7ff      	b.n	8004f40 <HAL_DMA_IRQHandler+0x13c>
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4091      	lsls	r1, r2
 8004f62:	000a      	movs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d108      	bne.n	8004f88 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f86:	e007      	b.n	8004f98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x30>)
 8004fae:	4694      	mov	ip, r2
 8004fb0:	4463      	add	r3, ip
 8004fb2:	2114      	movs	r1, #20
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7fb f8b9 	bl	800012c <__udivsi3>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a03      	ldr	r2, [pc, #12]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x34>)
 8004fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	bffdfff8 	.word	0xbffdfff8
 8004fd4:	40020000 	.word	0x40020000

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004fee:	e14f      	b.n	8005290 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4091      	lsls	r1, r2
 8004ffa:	000a      	movs	r2, r1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d100      	bne.n	8005008 <HAL_GPIO_Init+0x30>
 8005006:	e140      	b.n	800528a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d003      	beq.n	8005018 <HAL_GPIO_Init+0x40>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b12      	cmp	r3, #18
 8005016:	d123      	bne.n	8005060 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3208      	adds	r2, #8
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	58d3      	ldr	r3, [r2, r3]
 8005024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2207      	movs	r2, #7
 800502a:	4013      	ands	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	220f      	movs	r2, #15
 8005030:	409a      	lsls	r2, r3
 8005032:	0013      	movs	r3, r2
 8005034:	43da      	mvns	r2, r3
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2107      	movs	r1, #7
 8005044:	400b      	ands	r3, r1
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	409a      	lsls	r2, r3
 800504a:	0013      	movs	r3, r2
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	08da      	lsrs	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3208      	adds	r2, #8
 800505a:	0092      	lsls	r2, r2, #2
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2203      	movs	r2, #3
 800506c:	409a      	lsls	r2, r3
 800506e:	0013      	movs	r3, r2
 8005070:	43da      	mvns	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	401a      	ands	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	409a      	lsls	r2, r3
 8005086:	0013      	movs	r3, r2
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d00b      	beq.n	80050b4 <HAL_GPIO_Init+0xdc>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050a8:	2b11      	cmp	r3, #17
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b12      	cmp	r3, #18
 80050b2:	d130      	bne.n	8005116 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	409a      	lsls	r2, r3
 80050c2:	0013      	movs	r3, r2
 80050c4:	43da      	mvns	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	409a      	lsls	r2, r3
 80050d6:	0013      	movs	r3, r2
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80050ea:	2201      	movs	r2, #1
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	409a      	lsls	r2, r3
 80050f0:	0013      	movs	r3, r2
 80050f2:	43da      	mvns	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	2201      	movs	r2, #1
 8005102:	401a      	ands	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	409a      	lsls	r2, r3
 8005108:	0013      	movs	r3, r2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	2203      	movs	r2, #3
 8005122:	409a      	lsls	r2, r3
 8005124:	0013      	movs	r3, r2
 8005126:	43da      	mvns	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	0013      	movs	r3, r2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	055b      	lsls	r3, r3, #21
 800514e:	4013      	ands	r3, r2
 8005150:	d100      	bne.n	8005154 <HAL_GPIO_Init+0x17c>
 8005152:	e09a      	b.n	800528a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005154:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <HAL_GPIO_Init+0x2d0>)
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	4b53      	ldr	r3, [pc, #332]	; (80052a8 <HAL_GPIO_Init+0x2d0>)
 800515a:	2101      	movs	r1, #1
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]
 8005160:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <HAL_GPIO_Init+0x2d0>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2201      	movs	r2, #1
 8005166:	4013      	ands	r3, r2
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800516c:	4a4f      	ldr	r2, [pc, #316]	; (80052ac <HAL_GPIO_Init+0x2d4>)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	3302      	adds	r3, #2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	589b      	ldr	r3, [r3, r2]
 8005178:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2203      	movs	r2, #3
 800517e:	4013      	ands	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	220f      	movs	r2, #15
 8005184:	409a      	lsls	r2, r3
 8005186:	0013      	movs	r3, r2
 8005188:	43da      	mvns	r2, r3
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4013      	ands	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	2390      	movs	r3, #144	; 0x90
 8005194:	05db      	lsls	r3, r3, #23
 8005196:	429a      	cmp	r2, r3
 8005198:	d013      	beq.n	80051c2 <HAL_GPIO_Init+0x1ea>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a44      	ldr	r2, [pc, #272]	; (80052b0 <HAL_GPIO_Init+0x2d8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00d      	beq.n	80051be <HAL_GPIO_Init+0x1e6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a43      	ldr	r2, [pc, #268]	; (80052b4 <HAL_GPIO_Init+0x2dc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_Init+0x1e2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a42      	ldr	r2, [pc, #264]	; (80052b8 <HAL_GPIO_Init+0x2e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_GPIO_Init+0x1de>
 80051b2:	2303      	movs	r3, #3
 80051b4:	e006      	b.n	80051c4 <HAL_GPIO_Init+0x1ec>
 80051b6:	2305      	movs	r3, #5
 80051b8:	e004      	b.n	80051c4 <HAL_GPIO_Init+0x1ec>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e002      	b.n	80051c4 <HAL_GPIO_Init+0x1ec>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_GPIO_Init+0x1ec>
 80051c2:	2300      	movs	r3, #0
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	2103      	movs	r1, #3
 80051c8:	400a      	ands	r2, r1
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	4093      	lsls	r3, r2
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051d4:	4935      	ldr	r1, [pc, #212]	; (80052ac <HAL_GPIO_Init+0x2d4>)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	3302      	adds	r3, #2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	43da      	mvns	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	025b      	lsls	r3, r3, #9
 80051fa:	4013      	ands	r3, r2
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43da      	mvns	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	029b      	lsls	r3, r3, #10
 8005224:	4013      	ands	r3, r2
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43da      	mvns	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	035b      	lsls	r3, r3, #13
 800524e:	4013      	ands	r3, r2
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43da      	mvns	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	039b      	lsls	r3, r3, #14
 8005278:	4013      	ands	r3, r2
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005284:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_GPIO_Init+0x2e4>)
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	40da      	lsrs	r2, r3
 8005298:	1e13      	subs	r3, r2, #0
 800529a:	d000      	beq.n	800529e <HAL_GPIO_Init+0x2c6>
 800529c:	e6a8      	b.n	8004ff0 <HAL_GPIO_Init+0x18>
  } 
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b006      	add	sp, #24
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40010000 	.word	0x40010000
 80052b0:	48000400 	.word	0x48000400
 80052b4:	48000800 	.word	0x48000800
 80052b8:	48000c00 	.word	0x48000c00
 80052bc:	40010400 	.word	0x40010400

080052c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	0008      	movs	r0, r1
 80052ca:	0011      	movs	r1, r2
 80052cc:	1cbb      	adds	r3, r7, #2
 80052ce:	1c02      	adds	r2, r0, #0
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	1c7b      	adds	r3, r7, #1
 80052d4:	1c0a      	adds	r2, r1, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052d8:	1c7b      	adds	r3, r7, #1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052e0:	1cbb      	adds	r3, r7, #2
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052e8:	e003      	b.n	80052f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052ea:	1cbb      	adds	r3, r7, #2
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e082      	b.n	8005414 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2241      	movs	r2, #65	; 0x41
 8005312:	5c9b      	ldrb	r3, [r3, r2]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fec3 	bl	80040b0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2241      	movs	r2, #65	; 0x41
 800532e:	2124      	movs	r1, #36	; 0x24
 8005330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2101      	movs	r1, #1
 800533e:	438a      	bics	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4934      	ldr	r1, [pc, #208]	; (800541c <HAL_I2C_Init+0x120>)
 800534c:	400a      	ands	r2, r1
 800534e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4931      	ldr	r1, [pc, #196]	; (8005420 <HAL_I2C_Init+0x124>)
 800535c:	400a      	ands	r2, r1
 800535e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0209      	lsls	r1, r1, #8
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	e007      	b.n	800538a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2184      	movs	r1, #132	; 0x84
 8005384:	0209      	lsls	r1, r1, #8
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d104      	bne.n	800539c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2280      	movs	r2, #128	; 0x80
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	491f      	ldr	r1, [pc, #124]	; (8005424 <HAL_I2C_Init+0x128>)
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	491a      	ldr	r1, [pc, #104]	; (8005420 <HAL_I2C_Init+0x124>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	0011      	movs	r1, r2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69d9      	ldr	r1, [r3, #28]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2241      	movs	r2, #65	; 0x41
 8005400:	2120      	movs	r1, #32
 8005402:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2242      	movs	r2, #66	; 0x42
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b002      	add	sp, #8
 800541a:	bd80      	pop	{r7, pc}
 800541c:	f0ffffff 	.word	0xf0ffffff
 8005420:	ffff7fff 	.word	0xffff7fff
 8005424:	02008000 	.word	0x02008000

08005428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	000c      	movs	r4, r1
 8005432:	0010      	movs	r0, r2
 8005434:	0019      	movs	r1, r3
 8005436:	230a      	movs	r3, #10
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	1c22      	adds	r2, r4, #0
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	2308      	movs	r3, #8
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	1c02      	adds	r2, r0, #0
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	1dbb      	adds	r3, r7, #6
 8005448:	1c0a      	adds	r2, r1, #0
 800544a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2241      	movs	r2, #65	; 0x41
 8005454:	5c9b      	ldrb	r3, [r3, r2]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b20      	cmp	r3, #32
 800545a:	d000      	beq.n	800545e <HAL_I2C_Mem_Write+0x36>
 800545c:	e11c      	b.n	8005698 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_I2C_Mem_Write+0x46>
 8005464:	232c      	movs	r3, #44	; 0x2c
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e113      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	5c9b      	ldrb	r3, [r3, r2]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_I2C_Mem_Write+0x58>
 800547c:	2302      	movs	r3, #2
 800547e:	e10c      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	2101      	movs	r1, #1
 8005486:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005488:	f7ff faea 	bl	8004a60 <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	0219      	lsls	r1, r3, #8
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2319      	movs	r3, #25
 800549c:	2201      	movs	r2, #1
 800549e:	f000 fb3f 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0f7      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2241      	movs	r2, #65	; 0x41
 80054ae:	2121      	movs	r1, #33	; 0x21
 80054b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2242      	movs	r2, #66	; 0x42
 80054b6:	2140      	movs	r1, #64	; 0x40
 80054b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	222c      	movs	r2, #44	; 0x2c
 80054ca:	18ba      	adds	r2, r7, r2
 80054cc:	8812      	ldrh	r2, [r2, #0]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054d6:	1dbb      	adds	r3, r7, #6
 80054d8:	881c      	ldrh	r4, [r3, #0]
 80054da:	2308      	movs	r3, #8
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	230a      	movs	r3, #10
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	8819      	ldrh	r1, [r3, #0]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 fa19 	bl	8005928 <I2C_RequestMemoryWrite>
 80054f6:	1e03      	subs	r3, r0, #0
 80054f8:	d00f      	beq.n	800551a <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d105      	bne.n	800550e <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0c5      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	2100      	movs	r1, #0
 8005514:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e0bf      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2bff      	cmp	r3, #255	; 0xff
 8005522:	d911      	bls.n	8005548 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	22ff      	movs	r2, #255	; 0xff
 8005528:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	045c      	lsls	r4, r3, #17
 8005534:	230a      	movs	r3, #10
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	8819      	ldrh	r1, [r3, #0]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	2300      	movs	r3, #0
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	0023      	movs	r3, r4
 8005542:	f000 fbff 	bl	8005d44 <I2C_TransferConfig>
 8005546:	e012      	b.n	800556e <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	b2da      	uxtb	r2, r3
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	049c      	lsls	r4, r3, #18
 800555c:	230a      	movs	r3, #10
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	8819      	ldrh	r1, [r3, #0]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	0023      	movs	r3, r4
 800556a:	f000 fbeb 	bl	8005d44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fb0c 	bl	8005b92 <I2C_WaitOnTXISFlagUntilTimeout>
 800557a:	1e03      	subs	r3, r0, #0
 800557c:	d007      	beq.n	800558e <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	2b04      	cmp	r3, #4
 8005584:	d101      	bne.n	800558a <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e087      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e085      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	6251      	str	r1, [r2, #36]	; 0x24
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d13b      	bne.n	800563a <HAL_I2C_Mem_Write+0x212>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d036      	beq.n	800563a <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	0013      	movs	r3, r2
 80055d6:	2200      	movs	r2, #0
 80055d8:	2180      	movs	r1, #128	; 0x80
 80055da:	f000 faa1 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 80055de:	1e03      	subs	r3, r0, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e059      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2bff      	cmp	r3, #255	; 0xff
 80055ee:	d911      	bls.n	8005614 <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	22ff      	movs	r2, #255	; 0xff
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	045c      	lsls	r4, r3, #17
 8005600:	230a      	movs	r3, #10
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	8819      	ldrh	r1, [r3, #0]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	2300      	movs	r3, #0
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	0023      	movs	r3, r4
 800560e:	f000 fb99 	bl	8005d44 <I2C_TransferConfig>
 8005612:	e012      	b.n	800563a <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	b2da      	uxtb	r2, r3
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	049c      	lsls	r4, r3, #18
 8005628:	230a      	movs	r3, #10
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	8819      	ldrh	r1, [r3, #0]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	2300      	movs	r3, #0
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	0023      	movs	r3, r4
 8005636:	f000 fb85 	bl	8005d44 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d194      	bne.n	800556e <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fae0 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d007      	beq.n	8005664 <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	2b04      	cmp	r3, #4
 800565a:	d101      	bne.n	8005660 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e01c      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e01a      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2220      	movs	r2, #32
 800566a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	490b      	ldr	r1, [pc, #44]	; (80056a4 <HAL_I2C_Mem_Write+0x27c>)
 8005678:	400a      	ands	r2, r1
 800567a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2241      	movs	r2, #65	; 0x41
 8005680:	2120      	movs	r1, #32
 8005682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2242      	movs	r2, #66	; 0x42
 8005688:	2100      	movs	r1, #0
 800568a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	2100      	movs	r1, #0
 8005692:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b007      	add	sp, #28
 80056a0:	bd90      	pop	{r4, r7, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	fe00e800 	.word	0xfe00e800

080056a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	000c      	movs	r4, r1
 80056b2:	0010      	movs	r0, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	230a      	movs	r3, #10
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	1c22      	adds	r2, r4, #0
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	2308      	movs	r3, #8
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	1c02      	adds	r2, r0, #0
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	1dbb      	adds	r3, r7, #6
 80056c8:	1c0a      	adds	r2, r1, #0
 80056ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2241      	movs	r2, #65	; 0x41
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d000      	beq.n	80056de <HAL_I2C_Mem_Read+0x36>
 80056dc:	e11c      	b.n	8005918 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_I2C_Mem_Read+0x46>
 80056e4:	232c      	movs	r3, #44	; 0x2c
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e113      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	5c9b      	ldrb	r3, [r3, r2]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_I2C_Mem_Read+0x58>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e10c      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	2101      	movs	r1, #1
 8005706:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005708:	f7ff f9aa 	bl	8004a60 <HAL_GetTick>
 800570c:	0003      	movs	r3, r0
 800570e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	0219      	lsls	r1, r3, #8
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	2319      	movs	r3, #25
 800571c:	2201      	movs	r2, #1
 800571e:	f000 f9ff 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0f7      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2241      	movs	r2, #65	; 0x41
 800572e:	2122      	movs	r1, #34	; 0x22
 8005730:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2242      	movs	r2, #66	; 0x42
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	222c      	movs	r2, #44	; 0x2c
 800574a:	18ba      	adds	r2, r7, r2
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005756:	1dbb      	adds	r3, r7, #6
 8005758:	881c      	ldrh	r4, [r3, #0]
 800575a:	2308      	movs	r3, #8
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	230a      	movs	r3, #10
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	8819      	ldrh	r1, [r3, #0]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	0023      	movs	r3, r4
 8005772:	f000 f947 	bl	8005a04 <I2C_RequestMemoryRead>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d00f      	beq.n	800579a <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	2b04      	cmp	r3, #4
 8005780:	d105      	bne.n	800578e <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2240      	movs	r2, #64	; 0x40
 8005786:	2100      	movs	r1, #0
 8005788:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e0c5      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2240      	movs	r2, #64	; 0x40
 8005792:	2100      	movs	r1, #0
 8005794:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0bf      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2bff      	cmp	r3, #255	; 0xff
 80057a2:	d912      	bls.n	80057ca <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	045c      	lsls	r4, r3, #17
 80057b4:	230a      	movs	r3, #10
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	8819      	ldrh	r1, [r3, #0]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	2390      	movs	r3, #144	; 0x90
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	0023      	movs	r3, r4
 80057c4:	f000 fabe 	bl	8005d44 <I2C_TransferConfig>
 80057c8:	e013      	b.n	80057f2 <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	049c      	lsls	r4, r3, #18
 80057de:	230a      	movs	r3, #10
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	8819      	ldrh	r1, [r3, #0]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	2390      	movs	r3, #144	; 0x90
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	0023      	movs	r3, r4
 80057ee:	f000 faa9 	bl	8005d44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	0013      	movs	r3, r2
 80057fc:	2200      	movs	r2, #0
 80057fe:	2104      	movs	r1, #4
 8005800:	f000 f98e 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d001      	beq.n	800580c <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e086      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6251      	str	r1, [r2, #36]	; 0x24
 800581c:	b2c2      	uxtb	r2, r0
 800581e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d13b      	bne.n	80058ba <HAL_I2C_Mem_Read+0x212>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d036      	beq.n	80058ba <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800584c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0013      	movs	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	f000 f961 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e059      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2bff      	cmp	r3, #255	; 0xff
 800586e:	d911      	bls.n	8005894 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	22ff      	movs	r2, #255	; 0xff
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	045c      	lsls	r4, r3, #17
 8005880:	230a      	movs	r3, #10
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	8819      	ldrh	r1, [r3, #0]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	0023      	movs	r3, r4
 800588e:	f000 fa59 	bl	8005d44 <I2C_TransferConfig>
 8005892:	e012      	b.n	80058ba <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	049c      	lsls	r4, r3, #18
 80058a8:	230a      	movs	r3, #10
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	8819      	ldrh	r1, [r3, #0]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	0023      	movs	r3, r4
 80058b6:	f000 fa45 	bl	8005d44 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d196      	bne.n	80057f2 <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f000 f9a0 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d007      	beq.n	80058e4 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d101      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e01c      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01a      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2220      	movs	r2, #32
 80058ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	490b      	ldr	r1, [pc, #44]	; (8005924 <HAL_I2C_Mem_Read+0x27c>)
 80058f8:	400a      	ands	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2241      	movs	r2, #65	; 0x41
 8005900:	2120      	movs	r1, #32
 8005902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2242      	movs	r2, #66	; 0x42
 8005908:	2100      	movs	r1, #0
 800590a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	2100      	movs	r1, #0
 8005912:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b007      	add	sp, #28
 8005920:	bd90      	pop	{r4, r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	fe00e800 	.word	0xfe00e800

08005928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b5b0      	push	{r4, r5, r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	000c      	movs	r4, r1
 8005932:	0010      	movs	r0, r2
 8005934:	0019      	movs	r1, r3
 8005936:	250a      	movs	r5, #10
 8005938:	197b      	adds	r3, r7, r5
 800593a:	1c22      	adds	r2, r4, #0
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	2308      	movs	r3, #8
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	1c02      	adds	r2, r0, #0
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	1dbb      	adds	r3, r7, #6
 8005948:	1c0a      	adds	r2, r1, #0
 800594a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800594c:	1dbb      	adds	r3, r7, #6
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	045c      	lsls	r4, r3, #17
 8005956:	197b      	adds	r3, r7, r5
 8005958:	8819      	ldrh	r1, [r3, #0]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	019b      	lsls	r3, r3, #6
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	0023      	movs	r3, r4
 8005964:	f000 f9ee 	bl	8005d44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	6a39      	ldr	r1, [r7, #32]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 f90f 	bl	8005b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005974:	1e03      	subs	r3, r0, #0
 8005976:	d007      	beq.n	8005988 <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	2b04      	cmp	r3, #4
 800597e:	d101      	bne.n	8005984 <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e03b      	b.n	80059fc <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e039      	b.n	80059fc <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005988:	1dbb      	adds	r3, r7, #6
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005990:	2308      	movs	r3, #8
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
 800599e:	e01f      	b.n	80059e0 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059a0:	2308      	movs	r3, #8
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b4:	6a39      	ldr	r1, [r7, #32]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 f8ea 	bl	8005b92 <I2C_WaitOnTXISFlagUntilTimeout>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d007      	beq.n	80059d2 <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d101      	bne.n	80059ce <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e016      	b.n	80059fc <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e014      	b.n	80059fc <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059d2:	2308      	movs	r3, #8
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	6a3a      	ldr	r2, [r7, #32]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	0013      	movs	r3, r2
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	f000 f897 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 80059f2:	1e03      	subs	r3, r0, #0
 80059f4:	d001      	beq.n	80059fa <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e000      	b.n	80059fc <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b004      	add	sp, #16
 8005a02:	bdb0      	pop	{r4, r5, r7, pc}

08005a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	000c      	movs	r4, r1
 8005a0e:	0010      	movs	r0, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	250a      	movs	r5, #10
 8005a14:	197b      	adds	r3, r7, r5
 8005a16:	1c22      	adds	r2, r4, #0
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	1c02      	adds	r2, r0, #0
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	1dbb      	adds	r3, r7, #6
 8005a24:	1c0a      	adds	r2, r1, #0
 8005a26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a28:	1dbb      	adds	r3, r7, #6
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	197b      	adds	r3, r7, r5
 8005a30:	8819      	ldrh	r1, [r3, #0]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	019b      	lsls	r3, r3, #6
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f000 f982 	bl	8005d44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	6a39      	ldr	r1, [r7, #32]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 f8a3 	bl	8005b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a4c:	1e03      	subs	r3, r0, #0
 8005a4e:	d007      	beq.n	8005a60 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d101      	bne.n	8005a5c <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e03b      	b.n	8005ad4 <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e039      	b.n	8005ad4 <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a60:	1dbb      	adds	r3, r7, #6
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d107      	bne.n	8005a78 <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a68:	2308      	movs	r3, #8
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	629a      	str	r2, [r3, #40]	; 0x28
 8005a76:	e01f      	b.n	8005ab8 <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a78:	2308      	movs	r3, #8
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 f87e 	bl	8005b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a96:	1e03      	subs	r3, r0, #0
 8005a98:	d007      	beq.n	8005aaa <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d101      	bne.n	8005aa6 <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e016      	b.n	8005ad4 <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e014      	b.n	8005ad4 <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aaa:	2308      	movs	r3, #8
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	0013      	movs	r3, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2140      	movs	r1, #64	; 0x40
 8005ac6:	f000 f82b 	bl	8005b20 <I2C_WaitOnFlagUntilTimeout>
 8005aca:	1e03      	subs	r3, r0, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e000      	b.n	8005ad4 <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b004      	add	sp, #16
 8005ada:	bdb0      	pop	{r4, r5, r7, pc}

08005adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2202      	movs	r2, #2
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d103      	bne.n	8005afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2201      	movs	r2, #1
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d007      	beq.n	8005b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2101      	movs	r1, #1
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
  }
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	1dfb      	adds	r3, r7, #7
 8005b2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b30:	e01b      	b.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	d018      	beq.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005b3e:	f7fe ff8f 	bl	8004a60 <HAL_GetTick>
 8005b42:	0002      	movs	r2, r0
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d20d      	bcs.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2241      	movs	r2, #65	; 0x41
 8005b52:	2120      	movs	r1, #32
 8005b54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2242      	movs	r2, #66	; 0x42
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	2100      	movs	r1, #0
 8005b64:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e00f      	b.n	8005b8a <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	425a      	negs	r2, r3
 8005b7a:	4153      	adcs	r3, r2
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	001a      	movs	r2, r3
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d0d4      	beq.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b004      	add	sp, #16
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b9e:	e02b      	b.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 f86e 	bl	8005c88 <I2C_IsAcknowledgeFailed>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d001      	beq.n	8005bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e029      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	d01e      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005bc0:	f7fe ff4e 	bl	8004a60 <HAL_GetTick>
 8005bc4:	0002      	movs	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d213      	bcs.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2241      	movs	r2, #65	; 0x41
 8005be0:	2120      	movs	r1, #32
 8005be2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2242      	movs	r2, #66	; 0x42
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2240      	movs	r2, #64	; 0x40
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e007      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d1cc      	bne.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b004      	add	sp, #16
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1c:	e028      	b.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 f82f 	bl	8005c88 <I2C_IsAcknowledgeFailed>
 8005c2a:	1e03      	subs	r3, r0, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e026      	b.n	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c38:	f7fe ff12 	bl	8004a60 <HAL_GetTick>
 8005c3c:	0002      	movs	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d213      	bcs.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2241      	movs	r2, #65	; 0x41
 8005c58:	2120      	movs	r1, #32
 8005c5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2242      	movs	r2, #66	; 0x42
 8005c60:	2100      	movs	r1, #0
 8005c62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2240      	movs	r2, #64	; 0x40
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e007      	b.n	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2220      	movs	r2, #32
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d1cf      	bne.n	8005c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b004      	add	sp, #16
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d148      	bne.n	8005d34 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca2:	e01b      	b.n	8005cdc <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d018      	beq.n	8005cdc <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <I2C_IsAcknowledgeFailed+0x38>
 8005cb0:	f7fe fed6 	bl	8004a60 <HAL_GetTick>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d20d      	bcs.n	8005cdc <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2241      	movs	r2, #65	; 0x41
 8005cc4:	2120      	movs	r1, #32
 8005cc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2242      	movs	r2, #66	; 0x42
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e02c      	b.n	8005d36 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d1dc      	bne.n	8005ca4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7ff feed 	bl	8005adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <I2C_IsAcknowledgeFailed+0xb8>)
 8005d0e:	400a      	ands	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2204      	movs	r2, #4
 8005d16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2241      	movs	r2, #65	; 0x41
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2242      	movs	r2, #66	; 0x42
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b004      	add	sp, #16
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	fe00e800 	.word	0xfe00e800

08005d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	0008      	movs	r0, r1
 8005d4e:	0011      	movs	r1, r2
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	240a      	movs	r4, #10
 8005d54:	193b      	adds	r3, r7, r4
 8005d56:	1c02      	adds	r2, r0, #0
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	2009      	movs	r0, #9
 8005d5c:	183b      	adds	r3, r7, r0
 8005d5e:	1c0a      	adds	r2, r1, #0
 8005d60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <I2C_TransferConfig+0x68>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8005d76:	193b      	adds	r3, r7, r4
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	059b      	lsls	r3, r3, #22
 8005d7c:	0d9a      	lsrs	r2, r3, #22
 8005d7e:	183b      	adds	r3, r7, r0
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	0419      	lsls	r1, r3, #16
 8005d84:	23ff      	movs	r3, #255	; 0xff
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	400b      	ands	r3, r1
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	4313      	orrs	r3, r2
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]
}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b007      	add	sp, #28
 8005da8:	bd90      	pop	{r4, r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	fc009800 	.word	0xfc009800

08005db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2241      	movs	r2, #65	; 0x41
 8005dbe:	5c9b      	ldrb	r3, [r3, r2]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d138      	bne.n	8005e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	5c9b      	ldrb	r3, [r3, r2]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e032      	b.n	8005e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	2101      	movs	r1, #1
 8005dda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2241      	movs	r2, #65	; 0x41
 8005de0:	2124      	movs	r1, #36	; 0x24
 8005de2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2101      	movs	r1, #1
 8005df0:	438a      	bics	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4911      	ldr	r1, [pc, #68]	; (8005e44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005e00:	400a      	ands	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2241      	movs	r2, #65	; 0x41
 8005e28:	2120      	movs	r1, #32
 8005e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2240      	movs	r2, #64	; 0x40
 8005e30:	2100      	movs	r1, #0
 8005e32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	ffffefff 	.word	0xffffefff

08005e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2241      	movs	r2, #65	; 0x41
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d139      	bne.n	8005ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	5c9b      	ldrb	r3, [r3, r2]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e033      	b.n	8005ed8 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2240      	movs	r2, #64	; 0x40
 8005e74:	2101      	movs	r1, #1
 8005e76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2241      	movs	r2, #65	; 0x41
 8005e7c:	2124      	movs	r1, #36	; 0x24
 8005e7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	438a      	bics	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4a11      	ldr	r2, [pc, #68]	; (8005ee0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2241      	movs	r2, #65	; 0x41
 8005ec6:	2120      	movs	r1, #32
 8005ec8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2240      	movs	r2, #64	; 0x40
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e000      	b.n	8005ed8 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
  }
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b004      	add	sp, #16
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	fffff0ff 	.word	0xfffff0ff

08005ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d100      	bne.n	8005efc <HAL_RCC_OscConfig+0x18>
 8005efa:	e08d      	b.n	8006018 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005efc:	4bc3      	ldr	r3, [pc, #780]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	220c      	movs	r2, #12
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d00e      	beq.n	8005f26 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f08:	4bc0      	ldr	r3, [pc, #768]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	220c      	movs	r2, #12
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d116      	bne.n	8005f42 <HAL_RCC_OscConfig+0x5e>
 8005f14:	4bbd      	ldr	r3, [pc, #756]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	025b      	lsls	r3, r3, #9
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	025b      	lsls	r3, r3, #9
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d10d      	bne.n	8005f42 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f26:	4bb9      	ldr	r3, [pc, #740]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d100      	bne.n	8005f34 <HAL_RCC_OscConfig+0x50>
 8005f32:	e070      	b.n	8006016 <HAL_RCC_OscConfig+0x132>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d000      	beq.n	8005f3e <HAL_RCC_OscConfig+0x5a>
 8005f3c:	e06b      	b.n	8006016 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e2b6      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_OscConfig+0x76>
 8005f4a:	4bb0      	ldr	r3, [pc, #704]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4baf      	ldr	r3, [pc, #700]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	0249      	lsls	r1, r1, #9
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e02f      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x98>
 8005f62:	4baa      	ldr	r3, [pc, #680]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4ba9      	ldr	r3, [pc, #676]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f68:	49a9      	ldr	r1, [pc, #676]	; (8006210 <HAL_RCC_OscConfig+0x32c>)
 8005f6a:	400a      	ands	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	4ba7      	ldr	r3, [pc, #668]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4ba6      	ldr	r3, [pc, #664]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f74:	49a7      	ldr	r1, [pc, #668]	; (8006214 <HAL_RCC_OscConfig+0x330>)
 8005f76:	400a      	ands	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e01e      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d10e      	bne.n	8005fa2 <HAL_RCC_OscConfig+0xbe>
 8005f84:	4ba1      	ldr	r3, [pc, #644]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4ba0      	ldr	r3, [pc, #640]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	02c9      	lsls	r1, r1, #11
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4b9e      	ldr	r3, [pc, #632]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b9d      	ldr	r3, [pc, #628]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	0249      	lsls	r1, r1, #9
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e00b      	b.n	8005fba <HAL_RCC_OscConfig+0xd6>
 8005fa2:	4b9a      	ldr	r3, [pc, #616]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b99      	ldr	r3, [pc, #612]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005fa8:	4999      	ldr	r1, [pc, #612]	; (8006210 <HAL_RCC_OscConfig+0x32c>)
 8005faa:	400a      	ands	r2, r1
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	4b97      	ldr	r3, [pc, #604]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b96      	ldr	r3, [pc, #600]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005fb4:	4997      	ldr	r1, [pc, #604]	; (8006214 <HAL_RCC_OscConfig+0x330>)
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d014      	beq.n	8005fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc2:	f7fe fd4d 	bl	8004a60 <HAL_GetTick>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fcc:	f7fe fd48 	bl	8004a60 <HAL_GetTick>
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b64      	cmp	r3, #100	; 0x64
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e268      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fde:	4b8b      	ldr	r3, [pc, #556]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0xe8>
 8005fea:	e015      	b.n	8006018 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fe fd38 	bl	8004a60 <HAL_GetTick>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ff6:	f7fe fd33 	bl	8004a60 <HAL_GetTick>
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b64      	cmp	r3, #100	; 0x64
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e253      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006008:	4b80      	ldr	r3, [pc, #512]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	029b      	lsls	r3, r3, #10
 8006010:	4013      	ands	r3, r2
 8006012:	d1f0      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x112>
 8006014:	e000      	b.n	8006018 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006016:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2202      	movs	r2, #2
 800601e:	4013      	ands	r3, r2
 8006020:	d100      	bne.n	8006024 <HAL_RCC_OscConfig+0x140>
 8006022:	e069      	b.n	80060f8 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006024:	4b79      	ldr	r3, [pc, #484]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	220c      	movs	r2, #12
 800602a:	4013      	ands	r3, r2
 800602c:	d00b      	beq.n	8006046 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800602e:	4b77      	ldr	r3, [pc, #476]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	220c      	movs	r2, #12
 8006034:	4013      	ands	r3, r2
 8006036:	2b08      	cmp	r3, #8
 8006038:	d11c      	bne.n	8006074 <HAL_RCC_OscConfig+0x190>
 800603a:	4b74      	ldr	r3, [pc, #464]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	025b      	lsls	r3, r3, #9
 8006042:	4013      	ands	r3, r2
 8006044:	d116      	bne.n	8006074 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006046:	4b71      	ldr	r3, [pc, #452]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2202      	movs	r2, #2
 800604c:	4013      	ands	r3, r2
 800604e:	d005      	beq.n	800605c <HAL_RCC_OscConfig+0x178>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e229      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605c:	4b6b      	ldr	r3, [pc, #428]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	22f8      	movs	r2, #248	; 0xf8
 8006062:	4393      	bics	r3, r2
 8006064:	0019      	movs	r1, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	00da      	lsls	r2, r3, #3
 800606c:	4b67      	ldr	r3, [pc, #412]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006072:	e041      	b.n	80060f8 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d024      	beq.n	80060c6 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800607c:	4b63      	ldr	r3, [pc, #396]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b62      	ldr	r3, [pc, #392]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006082:	2101      	movs	r1, #1
 8006084:	430a      	orrs	r2, r1
 8006086:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fe fcea 	bl	8004a60 <HAL_GetTick>
 800608c:	0003      	movs	r3, r0
 800608e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006092:	f7fe fce5 	bl	8004a60 <HAL_GetTick>
 8006096:	0002      	movs	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e205      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a4:	4b59      	ldr	r3, [pc, #356]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	4013      	ands	r3, r2
 80060ac:	d0f1      	beq.n	8006092 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	4b57      	ldr	r3, [pc, #348]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	22f8      	movs	r2, #248	; 0xf8
 80060b4:	4393      	bics	r3, r2
 80060b6:	0019      	movs	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	00da      	lsls	r2, r3, #3
 80060be:	4b53      	ldr	r3, [pc, #332]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e018      	b.n	80060f8 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c6:	4b51      	ldr	r3, [pc, #324]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b50      	ldr	r3, [pc, #320]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060cc:	2101      	movs	r1, #1
 80060ce:	438a      	bics	r2, r1
 80060d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fe fcc5 	bl	8004a60 <HAL_GetTick>
 80060d6:	0003      	movs	r3, r0
 80060d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060dc:	f7fe fcc0 	bl	8004a60 <HAL_GetTick>
 80060e0:	0002      	movs	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1e0      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ee:	4b47      	ldr	r3, [pc, #284]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2202      	movs	r2, #2
 80060f4:	4013      	ands	r3, r2
 80060f6:	d1f1      	bne.n	80060dc <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2208      	movs	r2, #8
 80060fe:	4013      	ands	r3, r2
 8006100:	d036      	beq.n	8006170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d019      	beq.n	800613e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610a:	4b40      	ldr	r3, [pc, #256]	; (800620c <HAL_RCC_OscConfig+0x328>)
 800610c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800610e:	4b3f      	ldr	r3, [pc, #252]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006110:	2101      	movs	r1, #1
 8006112:	430a      	orrs	r2, r1
 8006114:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006116:	f7fe fca3 	bl	8004a60 <HAL_GetTick>
 800611a:	0003      	movs	r3, r0
 800611c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006120:	f7fe fc9e 	bl	8004a60 <HAL_GetTick>
 8006124:	0002      	movs	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e1be      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2202      	movs	r2, #2
 8006138:	4013      	ands	r3, r2
 800613a:	d0f1      	beq.n	8006120 <HAL_RCC_OscConfig+0x23c>
 800613c:	e018      	b.n	8006170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800613e:	4b33      	ldr	r3, [pc, #204]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006142:	4b32      	ldr	r3, [pc, #200]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006144:	2101      	movs	r1, #1
 8006146:	438a      	bics	r2, r1
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614a:	f7fe fc89 	bl	8004a60 <HAL_GetTick>
 800614e:	0003      	movs	r3, r0
 8006150:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006154:	f7fe fc84 	bl	8004a60 <HAL_GetTick>
 8006158:	0002      	movs	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1a4      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006166:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2202      	movs	r2, #2
 800616c:	4013      	ands	r3, r2
 800616e:	d1f1      	bne.n	8006154 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2204      	movs	r2, #4
 8006176:	4013      	ands	r3, r2
 8006178:	d100      	bne.n	800617c <HAL_RCC_OscConfig+0x298>
 800617a:	e0b5      	b.n	80062e8 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 800617c:	2317      	movs	r3, #23
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	055b      	lsls	r3, r3, #21
 800618c:	4013      	ands	r3, r2
 800618e:	d111      	bne.n	80061b4 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006190:	4b1e      	ldr	r3, [pc, #120]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	4b1d      	ldr	r3, [pc, #116]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	0549      	lsls	r1, r1, #21
 800619a:	430a      	orrs	r2, r1
 800619c:	61da      	str	r2, [r3, #28]
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_RCC_OscConfig+0x328>)
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	055b      	lsls	r3, r3, #21
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061ac:	2317      	movs	r3, #23
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <HAL_RCC_OscConfig+0x334>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4013      	ands	r3, r2
 80061be:	d11a      	bne.n	80061f6 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061c0:	4b15      	ldr	r3, [pc, #84]	; (8006218 <HAL_RCC_OscConfig+0x334>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b14      	ldr	r3, [pc, #80]	; (8006218 <HAL_RCC_OscConfig+0x334>)
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	0049      	lsls	r1, r1, #1
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ce:	f7fe fc47 	bl	8004a60 <HAL_GetTick>
 80061d2:	0003      	movs	r3, r0
 80061d4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d8:	f7fe fc42 	bl	8004a60 <HAL_GetTick>
 80061dc:	0002      	movs	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b64      	cmp	r3, #100	; 0x64
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e162      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_RCC_OscConfig+0x334>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10e      	bne.n	800621c <HAL_RCC_OscConfig+0x338>
 80061fe:	4b03      	ldr	r3, [pc, #12]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006200:	6a1a      	ldr	r2, [r3, #32]
 8006202:	4b02      	ldr	r3, [pc, #8]	; (800620c <HAL_RCC_OscConfig+0x328>)
 8006204:	2101      	movs	r1, #1
 8006206:	430a      	orrs	r2, r1
 8006208:	621a      	str	r2, [r3, #32]
 800620a:	e035      	b.n	8006278 <HAL_RCC_OscConfig+0x394>
 800620c:	40021000 	.word	0x40021000
 8006210:	fffeffff 	.word	0xfffeffff
 8006214:	fffbffff 	.word	0xfffbffff
 8006218:	40007000 	.word	0x40007000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <HAL_RCC_OscConfig+0x35a>
 8006224:	4ba4      	ldr	r3, [pc, #656]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	4ba3      	ldr	r3, [pc, #652]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800622a:	2101      	movs	r1, #1
 800622c:	438a      	bics	r2, r1
 800622e:	621a      	str	r2, [r3, #32]
 8006230:	4ba1      	ldr	r3, [pc, #644]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	4ba0      	ldr	r3, [pc, #640]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006236:	2104      	movs	r1, #4
 8006238:	438a      	bics	r2, r1
 800623a:	621a      	str	r2, [r3, #32]
 800623c:	e01c      	b.n	8006278 <HAL_RCC_OscConfig+0x394>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b05      	cmp	r3, #5
 8006244:	d10c      	bne.n	8006260 <HAL_RCC_OscConfig+0x37c>
 8006246:	4b9c      	ldr	r3, [pc, #624]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	4b9b      	ldr	r3, [pc, #620]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800624c:	2104      	movs	r1, #4
 800624e:	430a      	orrs	r2, r1
 8006250:	621a      	str	r2, [r3, #32]
 8006252:	4b99      	ldr	r3, [pc, #612]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	4b98      	ldr	r3, [pc, #608]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006258:	2101      	movs	r1, #1
 800625a:	430a      	orrs	r2, r1
 800625c:	621a      	str	r2, [r3, #32]
 800625e:	e00b      	b.n	8006278 <HAL_RCC_OscConfig+0x394>
 8006260:	4b95      	ldr	r3, [pc, #596]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	4b94      	ldr	r3, [pc, #592]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006266:	2101      	movs	r1, #1
 8006268:	438a      	bics	r2, r1
 800626a:	621a      	str	r2, [r3, #32]
 800626c:	4b92      	ldr	r3, [pc, #584]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	4b91      	ldr	r3, [pc, #580]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006272:	2104      	movs	r1, #4
 8006274:	438a      	bics	r2, r1
 8006276:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d014      	beq.n	80062aa <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006280:	f7fe fbee 	bl	8004a60 <HAL_GetTick>
 8006284:	0003      	movs	r3, r0
 8006286:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006288:	e009      	b.n	800629e <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628a:	f7fe fbe9 	bl	8004a60 <HAL_GetTick>
 800628e:	0002      	movs	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	4a89      	ldr	r2, [pc, #548]	; (80064bc <HAL_RCC_OscConfig+0x5d8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e108      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629e:	4b86      	ldr	r3, [pc, #536]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	2202      	movs	r2, #2
 80062a4:	4013      	ands	r3, r2
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x3a6>
 80062a8:	e013      	b.n	80062d2 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062aa:	f7fe fbd9 	bl	8004a60 <HAL_GetTick>
 80062ae:	0003      	movs	r3, r0
 80062b0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b2:	e009      	b.n	80062c8 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fe fbd4 	bl	8004a60 <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	4a7f      	ldr	r2, [pc, #508]	; (80064bc <HAL_RCC_OscConfig+0x5d8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0f3      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c8:	4b7b      	ldr	r3, [pc, #492]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	2202      	movs	r2, #2
 80062ce:	4013      	ands	r3, r2
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062d2:	2317      	movs	r3, #23
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062dc:	4b76      	ldr	r3, [pc, #472]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	4b75      	ldr	r3, [pc, #468]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80062e2:	4977      	ldr	r1, [pc, #476]	; (80064c0 <HAL_RCC_OscConfig+0x5dc>)
 80062e4:	400a      	ands	r2, r1
 80062e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2210      	movs	r2, #16
 80062ee:	4013      	ands	r3, r2
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d12a      	bne.n	8006350 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80062fa:	4b6f      	ldr	r3, [pc, #444]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80062fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fe:	4b6e      	ldr	r3, [pc, #440]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006300:	2104      	movs	r1, #4
 8006302:	430a      	orrs	r2, r1
 8006304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006306:	4b6c      	ldr	r3, [pc, #432]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630a:	4b6b      	ldr	r3, [pc, #428]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800630c:	2101      	movs	r1, #1
 800630e:	430a      	orrs	r2, r1
 8006310:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006312:	f7fe fba5 	bl	8004a60 <HAL_GetTick>
 8006316:	0003      	movs	r3, r0
 8006318:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800631c:	f7fe fba0 	bl	8004a60 <HAL_GetTick>
 8006320:	0002      	movs	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e0c0      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800632e:	4b62      	ldr	r3, [pc, #392]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	2202      	movs	r2, #2
 8006334:	4013      	ands	r3, r2
 8006336:	d0f1      	beq.n	800631c <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006338:	4b5f      	ldr	r3, [pc, #380]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	22f8      	movs	r2, #248	; 0xf8
 800633e:	4393      	bics	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800634a:	430a      	orrs	r2, r1
 800634c:	635a      	str	r2, [r3, #52]	; 0x34
 800634e:	e034      	b.n	80063ba <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	3305      	adds	r3, #5
 8006356:	d111      	bne.n	800637c <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006358:	4b57      	ldr	r3, [pc, #348]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800635a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635c:	4b56      	ldr	r3, [pc, #344]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800635e:	2104      	movs	r1, #4
 8006360:	438a      	bics	r2, r1
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006364:	4b54      	ldr	r3, [pc, #336]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	22f8      	movs	r2, #248	; 0xf8
 800636a:	4393      	bics	r3, r2
 800636c:	0019      	movs	r1, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006376:	430a      	orrs	r2, r1
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
 800637a:	e01e      	b.n	80063ba <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800637c:	4b4e      	ldr	r3, [pc, #312]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800637e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006380:	4b4d      	ldr	r3, [pc, #308]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006382:	2104      	movs	r1, #4
 8006384:	430a      	orrs	r2, r1
 8006386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006388:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800638a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638c:	4b4a      	ldr	r3, [pc, #296]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800638e:	2101      	movs	r1, #1
 8006390:	438a      	bics	r2, r1
 8006392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006394:	f7fe fb64 	bl	8004a60 <HAL_GetTick>
 8006398:	0003      	movs	r3, r0
 800639a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800639e:	f7fe fb5f 	bl	8004a60 <HAL_GetTick>
 80063a2:	0002      	movs	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e07f      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80063b0:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	2202      	movs	r2, #2
 80063b6:	4013      	ands	r3, r2
 80063b8:	d1f1      	bne.n	800639e <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d100      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4e0>
 80063c2:	e074      	b.n	80064ae <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c4:	4b3c      	ldr	r3, [pc, #240]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	220c      	movs	r2, #12
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d100      	bne.n	80063d2 <HAL_RCC_OscConfig+0x4ee>
 80063d0:	e06b      	b.n	80064aa <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d14c      	bne.n	8006474 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 80063e0:	4938      	ldr	r1, [pc, #224]	; (80064c4 <HAL_RCC_OscConfig+0x5e0>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e6:	f7fe fb3b 	bl	8004a60 <HAL_GetTick>
 80063ea:	0003      	movs	r3, r0
 80063ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fe fb36 	bl	8004a60 <HAL_GetTick>
 80063f4:	0002      	movs	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e056      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006402:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	2380      	movs	r3, #128	; 0x80
 8006408:	049b      	lsls	r3, r3, #18
 800640a:	4013      	ands	r3, r2
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640e:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	220f      	movs	r2, #15
 8006414:	4393      	bics	r3, r2
 8006416:	0019      	movs	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b26      	ldr	r3, [pc, #152]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800641e:	430a      	orrs	r2, r1
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c
 8006422:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <HAL_RCC_OscConfig+0x5e4>)
 8006428:	4013      	ands	r3, r2
 800642a:	0019      	movs	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	431a      	orrs	r2, r3
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006442:	2180      	movs	r1, #128	; 0x80
 8006444:	0449      	lsls	r1, r1, #17
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644a:	f7fe fb09 	bl	8004a60 <HAL_GetTick>
 800644e:	0003      	movs	r3, r0
 8006450:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006454:	f7fe fb04 	bl	8004a60 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e024      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	049b      	lsls	r3, r3, #18
 800646e:	4013      	ands	r3, r2
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x570>
 8006472:	e01c      	b.n	80064ae <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800647a:	4912      	ldr	r1, [pc, #72]	; (80064c4 <HAL_RCC_OscConfig+0x5e0>)
 800647c:	400a      	ands	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fe faee 	bl	8004a60 <HAL_GetTick>
 8006484:	0003      	movs	r3, r0
 8006486:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800648a:	f7fe fae9 	bl	8004a60 <HAL_GetTick>
 800648e:	0002      	movs	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e009      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <HAL_RCC_OscConfig+0x5d4>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	049b      	lsls	r3, r3, #18
 80064a4:	4013      	ands	r3, r2
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0x5a6>
 80064a8:	e001      	b.n	80064ae <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b006      	add	sp, #24
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40021000 	.word	0x40021000
 80064bc:	00001388 	.word	0x00001388
 80064c0:	efffffff 	.word	0xefffffff
 80064c4:	feffffff 	.word	0xfeffffff
 80064c8:	ffc2ffff 	.word	0xffc2ffff

080064cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80064da:	4b6a      	ldr	r3, [pc, #424]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2201      	movs	r2, #1
 80064e0:	4013      	ands	r3, r2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d911      	bls.n	800650c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e8:	4b66      	ldr	r3, [pc, #408]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	4393      	bics	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	4b64      	ldr	r3, [pc, #400]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064fa:	4b62      	ldr	r3, [pc, #392]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2201      	movs	r2, #1
 8006500:	4013      	ands	r3, r2
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0b6      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2202      	movs	r2, #2
 8006512:	4013      	ands	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006516:	4b5c      	ldr	r3, [pc, #368]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	22f0      	movs	r2, #240	; 0xf0
 800651c:	4393      	bics	r3, r2
 800651e:	0019      	movs	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	4b58      	ldr	r3, [pc, #352]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d100      	bne.n	8006536 <HAL_RCC_ClockConfig+0x6a>
 8006534:	e067      	b.n	8006606 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d107      	bne.n	800654e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653e:	4b52      	ldr	r3, [pc, #328]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	4013      	ands	r3, r2
 8006548:	d114      	bne.n	8006574 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e095      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d107      	bne.n	8006566 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006556:	4b4c      	ldr	r3, [pc, #304]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	049b      	lsls	r3, r3, #18
 800655e:	4013      	ands	r3, r2
 8006560:	d108      	bne.n	8006574 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e089      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006566:	4b48      	ldr	r3, [pc, #288]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2202      	movs	r2, #2
 800656c:	4013      	ands	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e082      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006574:	4b44      	ldr	r3, [pc, #272]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2203      	movs	r2, #3
 800657a:	4393      	bics	r3, r2
 800657c:	0019      	movs	r1, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	4b41      	ldr	r3, [pc, #260]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006588:	f7fe fa6a 	bl	8004a60 <HAL_GetTick>
 800658c:	0003      	movs	r3, r0
 800658e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d111      	bne.n	80065bc <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006598:	e009      	b.n	80065ae <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659a:	f7fe fa61 	bl	8004a60 <HAL_GetTick>
 800659e:	0002      	movs	r2, r0
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	4a39      	ldr	r2, [pc, #228]	; (800668c <HAL_RCC_ClockConfig+0x1c0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e065      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80065ae:	4b36      	ldr	r3, [pc, #216]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	220c      	movs	r2, #12
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d1ef      	bne.n	800659a <HAL_RCC_ClockConfig+0xce>
 80065ba:	e024      	b.n	8006606 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d11b      	bne.n	80065fc <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c4:	e009      	b.n	80065da <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c6:	f7fe fa4b 	bl	8004a60 <HAL_GetTick>
 80065ca:	0002      	movs	r2, r0
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	4a2e      	ldr	r2, [pc, #184]	; (800668c <HAL_RCC_ClockConfig+0x1c0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e04f      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	220c      	movs	r2, #12
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d1ef      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xfa>
 80065e6:	e00e      	b.n	8006606 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fe fa3a 	bl	8004a60 <HAL_GetTick>
 80065ec:	0002      	movs	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4a26      	ldr	r2, [pc, #152]	; (800668c <HAL_RCC_ClockConfig+0x1c0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e03e      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	220c      	movs	r2, #12
 8006602:	4013      	ands	r3, r2
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	4013      	ands	r3, r2
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d211      	bcs.n	8006638 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	4393      	bics	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2201      	movs	r2, #1
 800662c:	4013      	ands	r3, r2
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e020      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2204      	movs	r2, #4
 800663e:	4013      	ands	r3, r2
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4a12      	ldr	r2, [pc, #72]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 8006648:	4013      	ands	r3, r2
 800664a:	0019      	movs	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006656:	f000 f821 	bl	800669c <HAL_RCC_GetSysClockFreq>
 800665a:	0001      	movs	r1, r0
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	220f      	movs	r2, #15
 8006664:	4013      	ands	r3, r2
 8006666:	4a0b      	ldr	r2, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006668:	5cd3      	ldrb	r3, [r2, r3]
 800666a:	000a      	movs	r2, r1
 800666c:	40da      	lsrs	r2, r3
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1cc>)
 8006670:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006672:	2000      	movs	r0, #0
 8006674:	f7fd fe9c 	bl	80043b0 <HAL_InitTick>
  
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	40022000 	.word	0x40022000
 8006688:	40021000 	.word	0x40021000
 800668c:	00001388 	.word	0x00001388
 8006690:	fffff8ff 	.word	0xfffff8ff
 8006694:	080098e0 	.word	0x080098e0
 8006698:	20000004 	.word	0x20000004

0800669c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b08f      	sub	sp, #60	; 0x3c
 80066a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80066a2:	2314      	movs	r3, #20
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	4a2b      	ldr	r2, [pc, #172]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066aa:	c313      	stmia	r3!, {r0, r1, r4}
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80066b0:	1d3b      	adds	r3, r7, #4
 80066b2:	4a29      	ldr	r2, [pc, #164]	; (8006758 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066b6:	c313      	stmia	r3!, {r0, r1, r4}
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c0:	2300      	movs	r3, #0
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c4:	2300      	movs	r3, #0
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34
 80066c8:	2300      	movs	r3, #0
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <HAL_RCC_GetSysClockFreq+0xc0>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	220c      	movs	r2, #12
 80066da:	4013      	ands	r3, r2
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d002      	beq.n	80066e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d003      	beq.n	80066ec <HAL_RCC_GetSysClockFreq+0x50>
 80066e4:	e02d      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066ea:	e02d      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	0c9b      	lsrs	r3, r3, #18
 80066f0:	220f      	movs	r2, #15
 80066f2:	4013      	ands	r3, r2
 80066f4:	2214      	movs	r2, #20
 80066f6:	18ba      	adds	r2, r7, r2
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80066fc:	4b17      	ldr	r3, [pc, #92]	; (800675c <HAL_RCC_GetSysClockFreq+0xc0>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	220f      	movs	r2, #15
 8006702:	4013      	ands	r3, r2
 8006704:	1d3a      	adds	r2, r7, #4
 8006706:	5cd3      	ldrb	r3, [r2, r3]
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	025b      	lsls	r3, r3, #9
 8006710:	4013      	ands	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8006714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006716:	4812      	ldr	r0, [pc, #72]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006718:	f7f9 fd08 	bl	800012c <__udivsi3>
 800671c:	0003      	movs	r3, r0
 800671e:	001a      	movs	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	4353      	muls	r3, r2
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
 8006726:	e009      	b.n	800673c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8006728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800672a:	000a      	movs	r2, r1
 800672c:	0152      	lsls	r2, r2, #5
 800672e:	1a52      	subs	r2, r2, r1
 8006730:	0193      	lsls	r3, r2, #6
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	185b      	adds	r3, r3, r1
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006740:	e002      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006746:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b00f      	add	sp, #60	; 0x3c
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	08009840 	.word	0x08009840
 8006758:	08009850 	.word	0x08009850
 800675c:	40021000 	.word	0x40021000
 8006760:	007a1200 	.word	0x007a1200

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <HAL_RCC_GetHCLKFreq+0x10>)
 800676a:	681b      	ldr	r3, [r3, #0]
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000004 	.word	0x20000004

08006778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800677c:	f7ff fff2 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006780:	0001      	movs	r1, r0
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	2207      	movs	r2, #7
 800678a:	4013      	ands	r3, r2
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800678e:	5cd3      	ldrb	r3, [r2, r3]
 8006790:	40d9      	lsrs	r1, r3
 8006792:	000b      	movs	r3, r1
}    
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	40021000 	.word	0x40021000
 80067a0:	080098f0 	.word	0x080098f0

080067a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2207      	movs	r2, #7
 80067b2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <HAL_RCC_GetClockConfig+0x4c>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2203      	movs	r2, #3
 80067ba:	401a      	ands	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCC_GetClockConfig+0x4c>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	22f0      	movs	r2, #240	; 0xf0
 80067c6:	401a      	ands	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <HAL_RCC_GetClockConfig+0x4c>)
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	23e0      	movs	r3, #224	; 0xe0
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	401a      	ands	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_RCC_GetClockConfig+0x50>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	401a      	ands	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40022000 	.word	0x40022000

080067f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	4013      	ands	r3, r2
 8006812:	d100      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006814:	e08f      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006816:	2317      	movs	r3, #23
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	2200      	movs	r2, #0
 800681c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681e:	4b57      	ldr	r3, [pc, #348]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006820:	69da      	ldr	r2, [r3, #28]
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	055b      	lsls	r3, r3, #21
 8006826:	4013      	ands	r3, r2
 8006828:	d111      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	4b54      	ldr	r3, [pc, #336]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	4b53      	ldr	r3, [pc, #332]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006830:	2180      	movs	r1, #128	; 0x80
 8006832:	0549      	lsls	r1, r1, #21
 8006834:	430a      	orrs	r2, r1
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	4b50      	ldr	r3, [pc, #320]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	055b      	lsls	r3, r3, #21
 8006840:	4013      	ands	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2317      	movs	r3, #23
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684e:	4b4c      	ldr	r3, [pc, #304]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4013      	ands	r3, r2
 8006858:	d11a      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800685a:	4b49      	ldr	r3, [pc, #292]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b48      	ldr	r3, [pc, #288]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	0049      	lsls	r1, r1, #1
 8006864:	430a      	orrs	r2, r1
 8006866:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006868:	f7fe f8fa 	bl	8004a60 <HAL_GetTick>
 800686c:	0003      	movs	r3, r0
 800686e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006870:	e008      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fe f8f5 	bl	8004a60 <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b64      	cmp	r3, #100	; 0x64
 800687e:	d901      	bls.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e077      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d0f0      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006890:	4b3a      	ldr	r3, [pc, #232]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	23c0      	movs	r3, #192	; 0xc0
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4013      	ands	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d034      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	23c0      	movs	r3, #192	; 0xc0
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4013      	ands	r3, r2
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d02c      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068b2:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	4a33      	ldr	r2, [pc, #204]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068bc:	4b2f      	ldr	r3, [pc, #188]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	4b2e      	ldr	r3, [pc, #184]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	0249      	lsls	r1, r1, #9
 80068c6:	430a      	orrs	r2, r1
 80068c8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068ca:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	4b2b      	ldr	r3, [pc, #172]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068d0:	492d      	ldr	r1, [pc, #180]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80068d2:	400a      	ands	r2, r1
 80068d4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068d6:	4b29      	ldr	r3, [pc, #164]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	4013      	ands	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e4:	f7fe f8bc 	bl	8004a60 <HAL_GetTick>
 80068e8:	0003      	movs	r3, r0
 80068ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	e009      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ee:	f7fe f8b7 	bl	8004a60 <HAL_GetTick>
 80068f2:	0002      	movs	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	4a24      	ldr	r2, [pc, #144]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e038      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006902:	4b1e      	ldr	r3, [pc, #120]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	2202      	movs	r2, #2
 8006908:	4013      	ands	r3, r2
 800690a:	d0f0      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	4a1c      	ldr	r2, [pc, #112]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006912:	4013      	ands	r3, r2
 8006914:	0019      	movs	r1, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4b18      	ldr	r3, [pc, #96]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800691c:	430a      	orrs	r2, r1
 800691e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006920:	2317      	movs	r3, #23
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006930:	4917      	ldr	r1, [pc, #92]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006932:	400a      	ands	r2, r1
 8006934:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	4013      	ands	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006940:	4b0e      	ldr	r3, [pc, #56]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	2203      	movs	r2, #3
 8006946:	4393      	bics	r3, r2
 8006948:	0019      	movs	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	4b0b      	ldr	r3, [pc, #44]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006950:	430a      	orrs	r2, r1
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2220      	movs	r2, #32
 800695a:	4013      	ands	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	2210      	movs	r2, #16
 8006964:	4393      	bics	r3, r2
 8006966:	0019      	movs	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	4b03      	ldr	r3, [pc, #12]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800696e:	430a      	orrs	r2, r1
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b006      	add	sp, #24
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
 8006984:	fffffcff 	.word	0xfffffcff
 8006988:	fffeffff 	.word	0xfffeffff
 800698c:	00001388 	.word	0x00001388
 8006990:	efffffff 	.word	0xefffffff

08006994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e08a      	b.n	8006abc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	225d      	movs	r2, #93	; 0x5d
 80069b0:	5c9b      	ldrb	r3, [r3, r2]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d107      	bne.n	80069c8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	225c      	movs	r2, #92	; 0x5c
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7fd fbc2 	bl	800414c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	225d      	movs	r2, #93	; 0x5d
 80069cc:	2102      	movs	r1, #2
 80069ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2140      	movs	r1, #64	; 0x40
 80069dc:	438a      	bics	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	23e0      	movs	r3, #224	; 0xe0
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d902      	bls.n	80069f2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e002      	b.n	80069f8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	23f0      	movs	r3, #240	; 0xf0
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d008      	beq.n	8006a16 <HAL_SPI_Init+0x82>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	23e0      	movs	r3, #224	; 0xe0
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	23e0      	movs	r3, #224	; 0xe0
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d903      	bls.n	8006a32 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a30:	e002      	b.n	8006a38 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6999      	ldr	r1, [r3, #24]
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	400b      	ands	r3, r1
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	0011      	movs	r1, r2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	0011      	movs	r1, r2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4907      	ldr	r1, [pc, #28]	; (8006ac4 <HAL_SPI_Init+0x130>)
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	225d      	movs	r2, #93	; 0x5d
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b004      	add	sp, #16
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	fffff7ff 	.word	0xfffff7ff

08006ac8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e01e      	b.n	8006b18 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	223d      	movs	r2, #61	; 0x3d
 8006ade:	5c9b      	ldrb	r3, [r3, r2]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	223c      	movs	r2, #60	; 0x3c
 8006aea:	2100      	movs	r1, #0
 8006aec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 f815 	bl	8006b20 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	223d      	movs	r2, #61	; 0x3d
 8006afa:	2102      	movs	r1, #2
 8006afc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3304      	adds	r3, #4
 8006b06:	0019      	movs	r1, r3
 8006b08:	0010      	movs	r0, r2
 8006b0a:	f000 f961 	bl	8006dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	223d      	movs	r2, #61	; 0x3d
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b002      	add	sp, #8
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2101      	movs	r1, #1
 8006b44:	430a      	orrs	r2, r1
 8006b46:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2101      	movs	r1, #1
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b002      	add	sp, #8
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2202      	movs	r2, #2
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d124      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d11d      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	4252      	negs	r2, r2
 8006b8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 f8fa 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006baa:	e007      	b.n	8006bbc <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f000 f8ed 	bl	8006d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 f8f9 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d125      	bne.n	8006c1c <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d11e      	bne.n	8006c1c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2205      	movs	r2, #5
 8006be4:	4252      	negs	r2, r2
 8006be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	23c0      	movs	r3, #192	; 0xc0
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f000 f8cd 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006c04:	e007      	b.n	8006c16 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 f8c0 	bl	8006d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f000 f8cc 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2208      	movs	r2, #8
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d124      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d11d      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2209      	movs	r2, #9
 8006c3e:	4252      	negs	r2, r2
 8006c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2204      	movs	r2, #4
 8006c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	4013      	ands	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0018      	movs	r0, r3
 8006c58:	f000 f8a1 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e007      	b.n	8006c6e <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 f894 	bl	8006d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f8a0 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d125      	bne.n	8006cce <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d11e      	bne.n	8006cce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2211      	movs	r2, #17
 8006c96:	4252      	negs	r2, r2
 8006c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69da      	ldr	r2, [r3, #28]
 8006ca6:	23c0      	movs	r3, #192	; 0xc0
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4013      	ands	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f874 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006cb6:	e007      	b.n	8006cc8 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f000 f867 	bl	8006d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f000 f873 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d10f      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d108      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4252      	negs	r2, r2
 8006cf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7fd f952 	bl	8003fa0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2280      	movs	r2, #128	; 0x80
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b80      	cmp	r3, #128	; 0x80
 8006d08:	d10f      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d108      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2281      	movs	r2, #129	; 0x81
 8006d1e:	4252      	negs	r2, r2
 8006d20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f8d3 	bl	8006ed0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2240      	movs	r2, #64	; 0x40
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d10f      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d108      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2241      	movs	r2, #65	; 0x41
 8006d4c:	4252      	negs	r2, r2
 8006d4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f000 f833 	bl	8006dbe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d10f      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d108      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	4252      	negs	r2, r2
 8006d7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f89d 	bl	8006ec0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b002      	add	sp, #8
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b002      	add	sp, #8
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	46bd      	mov	sp, r7
 8006daa:	b002      	add	sp, #8
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46bd      	mov	sp, r7
 8006dba:	b002      	add	sp, #8
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b002      	add	sp, #8
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a2f      	ldr	r2, [pc, #188]	; (8006ea4 <TIM_Base_SetConfig+0xd4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0x24>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a2e      	ldr	r2, [pc, #184]	; (8006ea8 <TIM_Base_SetConfig+0xd8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d108      	bne.n	8006e06 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2270      	movs	r2, #112	; 0x70
 8006df8:	4393      	bics	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <TIM_Base_SetConfig+0xd4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <TIM_Base_SetConfig+0x66>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a25      	ldr	r2, [pc, #148]	; (8006ea8 <TIM_Base_SetConfig+0xd8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00f      	beq.n	8006e36 <TIM_Base_SetConfig+0x66>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a24      	ldr	r2, [pc, #144]	; (8006eac <TIM_Base_SetConfig+0xdc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_Base_SetConfig+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a23      	ldr	r2, [pc, #140]	; (8006eb0 <TIM_Base_SetConfig+0xe0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_Base_SetConfig+0x66>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <TIM_Base_SetConfig+0xe4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_Base_SetConfig+0x66>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a21      	ldr	r2, [pc, #132]	; (8006eb8 <TIM_Base_SetConfig+0xe8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d108      	bne.n	8006e48 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <TIM_Base_SetConfig+0xec>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	4393      	bics	r3, r2
 8006e4e:	001a      	movs	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a0c      	ldr	r2, [pc, #48]	; (8006ea4 <TIM_Base_SetConfig+0xd4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_Base_SetConfig+0xbe>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <TIM_Base_SetConfig+0xe0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <TIM_Base_SetConfig+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a0c      	ldr	r2, [pc, #48]	; (8006eb4 <TIM_Base_SetConfig+0xe4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_Base_SetConfig+0xbe>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a0b      	ldr	r2, [pc, #44]	; (8006eb8 <TIM_Base_SetConfig+0xe8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d103      	bne.n	8006e96 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	615a      	str	r2, [r3, #20]
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b004      	add	sp, #16
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40002000 	.word	0x40002000
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800
 8006ebc:	fffffcff 	.word	0xfffffcff

08006ec0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006ec8:	46c0      	nop			; (mov r8, r8)
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed8:	46c0      	nop			; (mov r8, r8)
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b002      	add	sp, #8
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e047      	b.n	8006f82 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2269      	movs	r2, #105	; 0x69
 8006ef6:	5c9b      	ldrb	r3, [r3, r2]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d107      	bne.n	8006f0e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2268      	movs	r2, #104	; 0x68
 8006f02:	2100      	movs	r1, #0
 8006f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7fd f96b 	bl	80041e4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2269      	movs	r2, #105	; 0x69
 8006f12:	2124      	movs	r1, #36	; 0x24
 8006f14:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2101      	movs	r1, #1
 8006f22:	438a      	bics	r2, r1
 8006f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f000 fa67 	bl	80073fc <UART_SetConfig>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e024      	b.n	8006f82 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	0018      	movs	r0, r3
 8006f44:	f000 fbd0 	bl	80076e8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_UART_Init+0xac>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2108      	movs	r1, #8
 8006f64:	438a      	bics	r2, r1
 8006f66:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2101      	movs	r1, #1
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 fc68 	bl	8007850 <UART_CheckIdleState>
 8006f80:	0003      	movs	r3, r0
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b002      	add	sp, #8
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	fffff7ff 	.word	0xfffff7ff

08006f90 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	1dbb      	adds	r3, r7, #6
 8006f9e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2269      	movs	r2, #105	; 0x69
 8006fa8:	5c9b      	ldrb	r3, [r3, r2]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d000      	beq.n	8006fb2 <HAL_UART_Transmit+0x22>
 8006fb0:	e08c      	b.n	80070cc <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_UART_Transmit+0x30>
 8006fb8:	1dbb      	adds	r3, r7, #6
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e084      	b.n	80070ce <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	015b      	lsls	r3, r3, #5
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d109      	bne.n	8006fe4 <HAL_UART_Transmit+0x54>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d001      	beq.n	8006fe4 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e074      	b.n	80070ce <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2268      	movs	r2, #104	; 0x68
 8006fe8:	5c9b      	ldrb	r3, [r3, r2]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Transmit+0x62>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e06d      	b.n	80070ce <HAL_UART_Transmit+0x13e>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2268      	movs	r2, #104	; 0x68
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2269      	movs	r2, #105	; 0x69
 8007004:	2121      	movs	r1, #33	; 0x21
 8007006:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007008:	f7fd fd2a 	bl	8004a60 <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	1dba      	adds	r2, r7, #6
 8007014:	2150      	movs	r1, #80	; 0x50
 8007016:	8812      	ldrh	r2, [r2, #0]
 8007018:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1dba      	adds	r2, r7, #6
 800701e:	2152      	movs	r1, #82	; 0x52
 8007020:	8812      	ldrh	r2, [r2, #0]
 8007022:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8007024:	e035      	b.n	8007092 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2252      	movs	r2, #82	; 0x52
 800702a:	5a9b      	ldrh	r3, [r3, r2]
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b299      	uxth	r1, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2252      	movs	r2, #82	; 0x52
 8007036:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	0013      	movs	r3, r2
 8007042:	2200      	movs	r2, #0
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	f000 fc1b 	bl	8007880 <UART_WaitOnFlagUntilTimeout>
 800704a:	1e03      	subs	r3, r0, #0
 800704c:	d001      	beq.n	8007052 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e03d      	b.n	80070ce <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	015b      	lsls	r3, r3, #5
 800705a:	429a      	cmp	r2, r3
 800705c:	d111      	bne.n	8007082 <HAL_UART_Transmit+0xf2>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	881a      	ldrh	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	05d2      	lsls	r2, r2, #23
 8007074:	0dd2      	lsrs	r2, r2, #23
 8007076:	b292      	uxth	r2, r2
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3302      	adds	r3, #2
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	e007      	b.n	8007092 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	60ba      	str	r2, [r7, #8]
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	b292      	uxth	r2, r2
 8007090:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2252      	movs	r2, #82	; 0x52
 8007096:	5a9b      	ldrh	r3, [r3, r2]
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1c3      	bne.n	8007026 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	0013      	movs	r3, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	2140      	movs	r1, #64	; 0x40
 80070ac:	f000 fbe8 	bl	8007880 <UART_WaitOnFlagUntilTimeout>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e00a      	b.n	80070ce <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2269      	movs	r2, #105	; 0x69
 80070bc:	2120      	movs	r1, #32
 80070be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2268      	movs	r2, #104	; 0x68
 80070c4:	2100      	movs	r1, #0
 80070c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	0018      	movs	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b006      	add	sp, #24
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_UART_Receive_DMA>:
  *         (as received data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	1dbb      	adds	r3, r7, #6
 80070e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	226a      	movs	r2, #106	; 0x6a
 80070ea:	5c9b      	ldrb	r3, [r3, r2]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d000      	beq.n	80070f4 <HAL_UART_Receive_DMA+0x1c>
 80070f2:	e06e      	b.n	80071d2 <HAL_UART_Receive_DMA+0xfa>
  {
    if((pData == NULL ) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_Receive_DMA+0x2a>
 80070fa:	1dbb      	adds	r3, r7, #6
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_UART_Receive_DMA+0x2e>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e066      	b.n	80071d4 <HAL_UART_Receive_DMA+0xfc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy from RDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	015b      	lsls	r3, r3, #5
 800710e:	429a      	cmp	r2, r3
 8007110:	d109      	bne.n	8007126 <HAL_UART_Receive_DMA+0x4e>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_Receive_DMA+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2201      	movs	r2, #1
 800711e:	4013      	ands	r3, r2
 8007120:	d001      	beq.n	8007126 <HAL_UART_Receive_DMA+0x4e>
      {
        return  HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e056      	b.n	80071d4 <HAL_UART_Receive_DMA+0xfc>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2268      	movs	r2, #104	; 0x68
 800712a:	5c9b      	ldrb	r3, [r3, r2]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UART_Receive_DMA+0x5c>
 8007130:	2302      	movs	r3, #2
 8007132:	e04f      	b.n	80071d4 <HAL_UART_Receive_DMA+0xfc>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2268      	movs	r2, #104	; 0x68
 8007138:	2101      	movs	r1, #1
 800713a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1dba      	adds	r2, r7, #6
 8007146:	2158      	movs	r1, #88	; 0x58
 8007148:	8812      	ldrh	r2, [r2, #0]
 800714a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	226a      	movs	r2, #106	; 0x6a
 8007156:	2122      	movs	r1, #34	; 0x22
 8007158:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800715e:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <HAL_UART_Receive_DMA+0x104>)
 8007160:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007166:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <HAL_UART_Receive_DMA+0x108>)
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_UART_Receive_DMA+0x10c>)
 8007170:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007176:	2200      	movs	r2, #0
 8007178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	0019      	movs	r1, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	001a      	movs	r2, r3
 800718c:	1dbb      	adds	r3, r7, #6
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	f7fd fd8c 	bl	8004cac <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2268      	movs	r2, #104	; 0x68
 8007198:	2100      	movs	r1, #0
 800719a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	0049      	lsls	r1, r1, #1
 80071aa:	430a      	orrs	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2101      	movs	r1, #1
 80071ba:	430a      	orrs	r2, r1
 80071bc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	430a      	orrs	r2, r1
 80071cc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e000      	b.n	80071d4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80071d2:	2302      	movs	r3, #2
  }
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b004      	add	sp, #16
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	0800797d 	.word	0x0800797d
 80071e0:	080079ed 	.word	0x080079ed
 80071e4:	08007a0b 	.word	0x08007a0b

080071e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	220f      	movs	r2, #15
 8007204:	4013      	ands	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10c      	bne.n	8007228 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2220      	movs	r2, #32
 8007212:	4013      	ands	r3, r2
 8007214:	d008      	beq.n	8007228 <HAL_UART_IRQHandler+0x40>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2220      	movs	r2, #32
 800721a:	4013      	ands	r3, r2
 800721c:	d004      	beq.n	8007228 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fcb7 	bl	8007b94 <UART_Receive_IT>
      return;
 8007226:	e0d3      	b.n	80073d0 <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d100      	bne.n	8007238 <HAL_UART_IRQHandler+0x50>
 8007236:	e0af      	b.n	8007398 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2201      	movs	r2, #1
 800723c:	4013      	ands	r3, r2
 800723e:	d105      	bne.n	800724c <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	2390      	movs	r3, #144	; 0x90
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4013      	ands	r3, r2
 8007248:	d100      	bne.n	800724c <HAL_UART_IRQHandler+0x64>
 800724a:	e0a5      	b.n	8007398 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2201      	movs	r2, #1
 8007250:	4013      	ands	r3, r2
 8007252:	d00e      	beq.n	8007272 <HAL_UART_IRQHandler+0x8a>
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4013      	ands	r3, r2
 800725c:	d009      	beq.n	8007272 <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2201      	movs	r2, #1
 8007264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800726a:	2201      	movs	r2, #1
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2202      	movs	r2, #2
 8007276:	4013      	ands	r3, r2
 8007278:	d00d      	beq.n	8007296 <HAL_UART_IRQHandler+0xae>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2201      	movs	r2, #1
 800727e:	4013      	ands	r3, r2
 8007280:	d009      	beq.n	8007296 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2202      	movs	r2, #2
 8007288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728e:	2204      	movs	r2, #4
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2204      	movs	r2, #4
 800729a:	4013      	ands	r3, r2
 800729c:	d00d      	beq.n	80072ba <HAL_UART_IRQHandler+0xd2>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2201      	movs	r2, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2204      	movs	r2, #4
 80072ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b2:	2202      	movs	r2, #2
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2208      	movs	r2, #8
 80072be:	4013      	ands	r3, r2
 80072c0:	d011      	beq.n	80072e6 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2220      	movs	r2, #32
 80072c6:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80072c8:	d103      	bne.n	80072d2 <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2201      	movs	r2, #1
 80072ce:	4013      	ands	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2208      	movs	r2, #8
 80072d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072de:	2208      	movs	r2, #8
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d100      	bne.n	80072f0 <HAL_UART_IRQHandler+0x108>
 80072ee:	e06e      	b.n	80073ce <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2220      	movs	r2, #32
 80072f4:	4013      	ands	r3, r2
 80072f6:	d007      	beq.n	8007308 <HAL_UART_IRQHandler+0x120>
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2220      	movs	r2, #32
 80072fc:	4013      	ands	r3, r2
 80072fe:	d003      	beq.n	8007308 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0018      	movs	r0, r3
 8007304:	f000 fc46 	bl	8007b94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	2208      	movs	r2, #8
 800730e:	4013      	ands	r3, r2
 8007310:	d105      	bne.n	800731e <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2240      	movs	r2, #64	; 0x40
 800731a:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800731c:	d032      	beq.n	8007384 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f000 fb0d 	bl	8007940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2240      	movs	r2, #64	; 0x40
 800732e:	4013      	ands	r3, r2
 8007330:	d023      	beq.n	800737a <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2140      	movs	r1, #64	; 0x40
 800733e:	438a      	bics	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007346:	2b00      	cmp	r3, #0
 8007348:	d012      	beq.n	8007370 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_UART_IRQHandler+0x1f0>)
 8007350:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007356:	0018      	movs	r0, r3
 8007358:	f7fd fd0e 	bl	8004d78 <HAL_DMA_Abort_IT>
 800735c:	1e03      	subs	r3, r0, #0
 800735e:	d019      	beq.n	8007394 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800736a:	0018      	movs	r0, r3
 800736c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736e:	e011      	b.n	8007394 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0018      	movs	r0, r3
 8007374:	f000 f83a 	bl	80073ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00c      	b.n	8007394 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	0018      	movs	r0, r3
 800737e:	f000 f835 	bl	80073ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007382:	e007      	b.n	8007394 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	0018      	movs	r0, r3
 8007388:	f000 f830 	bl	80073ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8007392:	e01c      	b.n	80073ce <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	46c0      	nop			; (mov r8, r8)
    return;
 8007396:	e01a      	b.n	80073ce <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	4013      	ands	r3, r2
 800739e:	d008      	beq.n	80073b2 <HAL_UART_IRQHandler+0x1ca>
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	4013      	ands	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0018      	movs	r0, r3
 80073ac:	f000 fb81 	bl	8007ab2 <UART_Transmit_IT>
    return;
 80073b0:	e00e      	b.n	80073d0 <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2240      	movs	r2, #64	; 0x40
 80073b6:	4013      	ands	r3, r2
 80073b8:	d00a      	beq.n	80073d0 <HAL_UART_IRQHandler+0x1e8>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2240      	movs	r2, #64	; 0x40
 80073be:	4013      	ands	r3, r2
 80073c0:	d006      	beq.n	80073d0 <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 fbcb 	bl	8007b60 <UART_EndTransmit_IT>
    return;
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	e000      	b.n	80073d0 <HAL_UART_IRQHandler+0x1e8>
    return;
 80073ce:	46c0      	nop			; (mov r8, r8)
  }

}
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b006      	add	sp, #24
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	08007a85 	.word	0x08007a85

080073dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073e4:	46c0      	nop			; (mov r8, r8)
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b002      	add	sp, #8
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b002      	add	sp, #8
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007408:	2317      	movs	r3, #23
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	2210      	movs	r2, #16
 800740e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8007410:	230a      	movs	r3, #10
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	2200      	movs	r2, #0
 8007416:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8007418:	2314      	movs	r3, #20
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2200      	movs	r2, #0
 800741e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007420:	2313      	movs	r3, #19
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4aa0      	ldr	r2, [pc, #640]	; (80076c8 <UART_SetConfig+0x2cc>)
 8007448:	4013      	ands	r3, r2
 800744a:	0019      	movs	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	430a      	orrs	r2, r1
 8007454:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a9b      	ldr	r2, [pc, #620]	; (80076cc <UART_SetConfig+0x2d0>)
 800745e:	4013      	ands	r3, r2
 8007460:	0019      	movs	r1, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	4a93      	ldr	r2, [pc, #588]	; (80076d0 <UART_SetConfig+0x2d4>)
 8007482:	4013      	ands	r3, r2
 8007484:	0019      	movs	r1, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a8f      	ldr	r2, [pc, #572]	; (80076d4 <UART_SetConfig+0x2d8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d125      	bne.n	80074e6 <UART_SetConfig+0xea>
 800749a:	4b8f      	ldr	r3, [pc, #572]	; (80076d8 <UART_SetConfig+0x2dc>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	2203      	movs	r2, #3
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d00f      	beq.n	80074c6 <UART_SetConfig+0xca>
 80074a6:	d304      	bcc.n	80074b2 <UART_SetConfig+0xb6>
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d011      	beq.n	80074d0 <UART_SetConfig+0xd4>
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d005      	beq.n	80074bc <UART_SetConfig+0xc0>
 80074b0:	e013      	b.n	80074da <UART_SetConfig+0xde>
 80074b2:	2317      	movs	r3, #23
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e022      	b.n	8007502 <UART_SetConfig+0x106>
 80074bc:	2317      	movs	r3, #23
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2202      	movs	r2, #2
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e01d      	b.n	8007502 <UART_SetConfig+0x106>
 80074c6:	2317      	movs	r3, #23
 80074c8:	18fb      	adds	r3, r7, r3
 80074ca:	2204      	movs	r2, #4
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e018      	b.n	8007502 <UART_SetConfig+0x106>
 80074d0:	2317      	movs	r3, #23
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	2208      	movs	r2, #8
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e013      	b.n	8007502 <UART_SetConfig+0x106>
 80074da:	2317      	movs	r3, #23
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	2210      	movs	r2, #16
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0x106>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a7c      	ldr	r2, [pc, #496]	; (80076dc <UART_SetConfig+0x2e0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d104      	bne.n	80074fa <UART_SetConfig+0xfe>
 80074f0:	2317      	movs	r3, #23
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e003      	b.n	8007502 <UART_SetConfig+0x106>
 80074fa:	2317      	movs	r3, #23
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	2210      	movs	r2, #16
 8007500:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	429a      	cmp	r2, r3
 800750c:	d000      	beq.n	8007510 <UART_SetConfig+0x114>
 800750e:	e077      	b.n	8007600 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8007510:	2317      	movs	r3, #23
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d01c      	beq.n	8007554 <UART_SetConfig+0x158>
 800751a:	dc02      	bgt.n	8007522 <UART_SetConfig+0x126>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <UART_SetConfig+0x130>
 8007520:	e04f      	b.n	80075c2 <UART_SetConfig+0x1c6>
 8007522:	2b04      	cmp	r3, #4
 8007524:	d027      	beq.n	8007576 <UART_SetConfig+0x17a>
 8007526:	2b08      	cmp	r3, #8
 8007528:	d039      	beq.n	800759e <UART_SetConfig+0x1a2>
 800752a:	e04a      	b.n	80075c2 <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800752c:	f7ff f924 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8007530:	0003      	movs	r3, r0
 8007532:	005a      	lsls	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	18d2      	adds	r2, r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	0019      	movs	r1, r3
 8007542:	0010      	movs	r0, r2
 8007544:	f7f8 fdf2 	bl	800012c <__udivsi3>
 8007548:	0003      	movs	r3, r0
 800754a:	001a      	movs	r2, r3
 800754c:	2314      	movs	r3, #20
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	801a      	strh	r2, [r3, #0]
        break;
 8007552:	e03b      	b.n	80075cc <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	4a61      	ldr	r2, [pc, #388]	; (80076e0 <UART_SetConfig+0x2e4>)
 800755c:	189a      	adds	r2, r3, r2
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	0019      	movs	r1, r3
 8007564:	0010      	movs	r0, r2
 8007566:	f7f8 fde1 	bl	800012c <__udivsi3>
 800756a:	0003      	movs	r3, r0
 800756c:	001a      	movs	r2, r3
 800756e:	2314      	movs	r3, #20
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	801a      	strh	r2, [r3, #0]
        break;
 8007574:	e02a      	b.n	80075cc <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007576:	f7ff f891 	bl	800669c <HAL_RCC_GetSysClockFreq>
 800757a:	0003      	movs	r3, r0
 800757c:	005a      	lsls	r2, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	18d2      	adds	r2, r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	0019      	movs	r1, r3
 800758c:	0010      	movs	r0, r2
 800758e:	f7f8 fdcd 	bl	800012c <__udivsi3>
 8007592:	0003      	movs	r3, r0
 8007594:	001a      	movs	r2, r3
 8007596:	2314      	movs	r3, #20
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	801a      	strh	r2, [r3, #0]
        break;
 800759c:	e016      	b.n	80075cc <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	2280      	movs	r2, #128	; 0x80
 80075a6:	0252      	lsls	r2, r2, #9
 80075a8:	189a      	adds	r2, r3, r2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	0019      	movs	r1, r3
 80075b0:	0010      	movs	r0, r2
 80075b2:	f7f8 fdbb 	bl	800012c <__udivsi3>
 80075b6:	0003      	movs	r3, r0
 80075b8:	001a      	movs	r2, r3
 80075ba:	2314      	movs	r3, #20
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	801a      	strh	r2, [r3, #0]
        break;
 80075c0:	e004      	b.n	80075cc <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80075c2:	2313      	movs	r3, #19
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
        break;
 80075ca:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80075cc:	200a      	movs	r0, #10
 80075ce:	183b      	adds	r3, r7, r0
 80075d0:	2414      	movs	r4, #20
 80075d2:	193a      	adds	r2, r7, r4
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	210f      	movs	r1, #15
 80075d8:	438a      	bics	r2, r1
 80075da:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	105b      	asrs	r3, r3, #1
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2207      	movs	r2, #7
 80075e6:	4013      	ands	r3, r2
 80075e8:	b299      	uxth	r1, r3
 80075ea:	183b      	adds	r3, r7, r0
 80075ec:	183a      	adds	r2, r7, r0
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	183a      	adds	r2, r7, r0
 80075fa:	8812      	ldrh	r2, [r2, #0]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	e05b      	b.n	80076b8 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8007600:	2317      	movs	r3, #23
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d01b      	beq.n	8007642 <UART_SetConfig+0x246>
 800760a:	dc02      	bgt.n	8007612 <UART_SetConfig+0x216>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <UART_SetConfig+0x220>
 8007610:	e04d      	b.n	80076ae <UART_SetConfig+0x2b2>
 8007612:	2b04      	cmp	r3, #4
 8007614:	d026      	beq.n	8007664 <UART_SetConfig+0x268>
 8007616:	2b08      	cmp	r3, #8
 8007618:	d037      	beq.n	800768a <UART_SetConfig+0x28e>
 800761a:	e048      	b.n	80076ae <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800761c:	f7ff f8ac 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8007620:	0002      	movs	r2, r0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	18d2      	adds	r2, r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	0019      	movs	r1, r3
 8007630:	0010      	movs	r0, r2
 8007632:	f7f8 fd7b 	bl	800012c <__udivsi3>
 8007636:	0003      	movs	r3, r0
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
        break;
 8007640:	e03a      	b.n	80076b8 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <UART_SetConfig+0x2e8>)
 800764a:	189a      	adds	r2, r3, r2
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	0019      	movs	r1, r3
 8007652:	0010      	movs	r0, r2
 8007654:	f7f8 fd6a 	bl	800012c <__udivsi3>
 8007658:	0003      	movs	r3, r0
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60da      	str	r2, [r3, #12]
        break;
 8007662:	e029      	b.n	80076b8 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007664:	f7ff f81a 	bl	800669c <HAL_RCC_GetSysClockFreq>
 8007668:	0002      	movs	r2, r0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	18d2      	adds	r2, r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	0019      	movs	r1, r3
 8007678:	0010      	movs	r0, r2
 800767a:	f7f8 fd57 	bl	800012c <__udivsi3>
 800767e:	0003      	movs	r3, r0
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
        break;
 8007688:	e016      	b.n	80076b8 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	0212      	lsls	r2, r2, #8
 8007694:	189a      	adds	r2, r3, r2
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	0019      	movs	r1, r3
 800769c:	0010      	movs	r0, r2
 800769e:	f7f8 fd45 	bl	800012c <__udivsi3>
 80076a2:	0003      	movs	r3, r0
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60da      	str	r2, [r3, #12]
        break;
 80076ac:	e004      	b.n	80076b8 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80076ae:	2313      	movs	r3, #19
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	2201      	movs	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
        break;
 80076b6:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80076b8:	2313      	movs	r3, #19
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	781b      	ldrb	r3, [r3, #0]

}
 80076be:	0018      	movs	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b007      	add	sp, #28
 80076c4:	bd90      	pop	{r4, r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	ffff69f3 	.word	0xffff69f3
 80076cc:	ffffcfff 	.word	0xffffcfff
 80076d0:	fffff4ff 	.word	0xfffff4ff
 80076d4:	40013800 	.word	0x40013800
 80076d8:	40021000 	.word	0x40021000
 80076dc:	40004400 	.word	0x40004400
 80076e0:	00f42400 	.word	0x00f42400
 80076e4:	007a1200 	.word	0x007a1200

080076e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2201      	movs	r2, #1
 80076f6:	4013      	ands	r3, r2
 80076f8:	d00b      	beq.n	8007712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4a4a      	ldr	r2, [pc, #296]	; (800782c <UART_AdvFeatureConfig+0x144>)
 8007702:	4013      	ands	r3, r2
 8007704:	0019      	movs	r1, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	2202      	movs	r2, #2
 8007718:	4013      	ands	r3, r2
 800771a:	d00b      	beq.n	8007734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	4a43      	ldr	r2, [pc, #268]	; (8007830 <UART_AdvFeatureConfig+0x148>)
 8007724:	4013      	ands	r3, r2
 8007726:	0019      	movs	r1, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2204      	movs	r2, #4
 800773a:	4013      	ands	r3, r2
 800773c:	d00b      	beq.n	8007756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <UART_AdvFeatureConfig+0x14c>)
 8007746:	4013      	ands	r3, r2
 8007748:	0019      	movs	r1, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	2208      	movs	r2, #8
 800775c:	4013      	ands	r3, r2
 800775e:	d00b      	beq.n	8007778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4a34      	ldr	r2, [pc, #208]	; (8007838 <UART_AdvFeatureConfig+0x150>)
 8007768:	4013      	ands	r3, r2
 800776a:	0019      	movs	r1, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2210      	movs	r2, #16
 800777e:	4013      	ands	r3, r2
 8007780:	d00b      	beq.n	800779a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4a2c      	ldr	r2, [pc, #176]	; (800783c <UART_AdvFeatureConfig+0x154>)
 800778a:	4013      	ands	r3, r2
 800778c:	0019      	movs	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2220      	movs	r2, #32
 80077a0:	4013      	ands	r3, r2
 80077a2:	d00b      	beq.n	80077bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4a25      	ldr	r2, [pc, #148]	; (8007840 <UART_AdvFeatureConfig+0x158>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	0019      	movs	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2240      	movs	r2, #64	; 0x40
 80077c2:	4013      	ands	r3, r2
 80077c4:	d01d      	beq.n	8007802 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <UART_AdvFeatureConfig+0x15c>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	0019      	movs	r1, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e2:	2380      	movs	r3, #128	; 0x80
 80077e4:	035b      	lsls	r3, r3, #13
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d10b      	bne.n	8007802 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <UART_AdvFeatureConfig+0x160>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	0019      	movs	r1, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2280      	movs	r2, #128	; 0x80
 8007808:	4013      	ands	r3, r2
 800780a:	d00b      	beq.n	8007824 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	4a0e      	ldr	r2, [pc, #56]	; (800784c <UART_AdvFeatureConfig+0x164>)
 8007814:	4013      	ands	r3, r2
 8007816:	0019      	movs	r1, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b002      	add	sp, #8
 800782a:	bd80      	pop	{r7, pc}
 800782c:	fffdffff 	.word	0xfffdffff
 8007830:	fffeffff 	.word	0xfffeffff
 8007834:	fffbffff 	.word	0xfffbffff
 8007838:	ffff7fff 	.word	0xffff7fff
 800783c:	ffffefff 	.word	0xffffefff
 8007840:	ffffdfff 	.word	0xffffdfff
 8007844:	ffefffff 	.word	0xffefffff
 8007848:	ff9fffff 	.word	0xff9fffff
 800784c:	fff7ffff 	.word	0xfff7ffff

08007850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2269      	movs	r2, #105	; 0x69
 8007862:	2120      	movs	r1, #32
 8007864:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	226a      	movs	r2, #106	; 0x6a
 800786a:	2120      	movs	r1, #32
 800786c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2268      	movs	r2, #104	; 0x68
 8007872:	2100      	movs	r1, #0
 8007874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	0018      	movs	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	b002      	add	sp, #8
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	1dfb      	adds	r3, r7, #7
 800788e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007890:	e02b      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	3301      	adds	r3, #1
 8007896:	d028      	beq.n	80078ea <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0x2e>
 800789e:	f7fd f8df 	bl	8004a60 <HAL_GetTick>
 80078a2:	0002      	movs	r2, r0
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d21d      	bcs.n	80078ea <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4916      	ldr	r1, [pc, #88]	; (8007914 <UART_WaitOnFlagUntilTimeout+0x94>)
 80078ba:	400a      	ands	r2, r1
 80078bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2101      	movs	r1, #1
 80078ca:	438a      	bics	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2269      	movs	r2, #105	; 0x69
 80078d2:	2120      	movs	r1, #32
 80078d4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	226a      	movs	r2, #106	; 0x6a
 80078da:	2120      	movs	r1, #32
 80078dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2268      	movs	r2, #104	; 0x68
 80078e2:	2100      	movs	r1, #0
 80078e4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e00f      	b.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4013      	ands	r3, r2
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	425a      	negs	r2, r3
 80078fa:	4153      	adcs	r3, r2
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	001a      	movs	r2, r3
 8007900:	1dfb      	adds	r3, r7, #7
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d0c4      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	0018      	movs	r0, r3
 800790c:	46bd      	mov	sp, r7
 800790e:	b004      	add	sp, #16
 8007910:	bd80      	pop	{r7, pc}
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	fffffe5f 	.word	0xfffffe5f

08007918 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	21c0      	movs	r1, #192	; 0xc0
 800792c:	438a      	bics	r2, r1
 800792e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2269      	movs	r2, #105	; 0x69
 8007934:	2120      	movs	r1, #32
 8007936:	5499      	strb	r1, [r3, r2]
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b002      	add	sp, #8
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4909      	ldr	r1, [pc, #36]	; (8007978 <UART_EndRxTransfer+0x38>)
 8007954:	400a      	ands	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2101      	movs	r1, #1
 8007964:	438a      	bics	r2, r1
 8007966:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	226a      	movs	r2, #106	; 0x6a
 800796c:	2120      	movs	r1, #32
 800796e:	5499      	strb	r1, [r3, r2]
}
 8007970:	46c0      	nop			; (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b002      	add	sp, #8
 8007976:	bd80      	pop	{r7, pc}
 8007978:	fffffedf 	.word	0xfffffedf

0800797c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2220      	movs	r2, #32
 8007992:	4013      	ands	r3, r2
 8007994:	d11f      	bne.n	80079d6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	225a      	movs	r2, #90	; 0x5a
 800799a:	2100      	movs	r1, #0
 800799c:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	490f      	ldr	r1, [pc, #60]	; (80079e8 <UART_DMAReceiveCplt+0x6c>)
 80079aa:	400a      	ands	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2101      	movs	r1, #1
 80079ba:	438a      	bics	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2140      	movs	r1, #64	; 0x40
 80079ca:	438a      	bics	r2, r1
 80079cc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	226a      	movs	r2, #106	; 0x6a
 80079d2:	2120      	movs	r1, #32
 80079d4:	5499      	strb	r1, [r3, r2]
  }

  HAL_UART_RxCpltCallback(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	0018      	movs	r0, r3
 80079da:	f7fc fab1 	bl	8003f40 <HAL_UART_RxCpltCallback>
}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b004      	add	sp, #16
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	fffffeff 	.word	0xfffffeff

080079ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7fc fab7 	bl	8003f70 <HAL_UART_RxHalfCpltCallback>
}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b004      	add	sp, #16
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2269      	movs	r2, #105	; 0x69
 8007a1c:	5c9b      	ldrb	r3, [r3, r2]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b21      	cmp	r3, #33	; 0x21
 8007a22:	d10d      	bne.n	8007a40 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d007      	beq.n	8007a40 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2252      	movs	r2, #82	; 0x52
 8007a34:	2100      	movs	r1, #0
 8007a36:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7ff ff6c 	bl	8007918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	226a      	movs	r2, #106	; 0x6a
 8007a44:	5c9b      	ldrb	r3, [r3, r2]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b22      	cmp	r3, #34	; 0x22
 8007a4a:	d10d      	bne.n	8007a68 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2240      	movs	r2, #64	; 0x40
 8007a54:	4013      	ands	r3, r2
 8007a56:	d007      	beq.n	8007a68 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	225a      	movs	r2, #90	; 0x5a
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7ff ff6c 	bl	8007940 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0018      	movs	r0, r3
 8007a78:	f7ff fcb8 	bl	80073ec <HAL_UART_ErrorCallback>
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b004      	add	sp, #16
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	225a      	movs	r2, #90	; 0x5a
 8007a96:	2100      	movs	r1, #0
 8007a98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2252      	movs	r2, #82	; 0x52
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7ff fca1 	bl	80073ec <HAL_UART_ErrorCallback>
}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b004      	add	sp, #16
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2269      	movs	r2, #105	; 0x69
 8007abe:	5c9b      	ldrb	r3, [r3, r2]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b21      	cmp	r3, #33	; 0x21
 8007ac4:	d147      	bne.n	8007b56 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2252      	movs	r2, #82	; 0x52
 8007aca:	5a9b      	ldrh	r3, [r3, r2]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d111      	bne.n	8007af6 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2180      	movs	r1, #128	; 0x80
 8007ade:	438a      	bics	r2, r1
 8007ae0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	430a      	orrs	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e030      	b.n	8007b58 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	2380      	movs	r3, #128	; 0x80
 8007afc:	015b      	lsls	r3, r3, #5
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d114      	bne.n	8007b2c <UART_Transmit_IT+0x7a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d110      	bne.n	8007b2c <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0e:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	881a      	ldrh	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	05d2      	lsls	r2, r2, #23
 8007b1a:	0dd2      	lsrs	r2, r2, #23
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	64da      	str	r2, [r3, #76]	; 0x4c
 8007b2a:	e009      	b.n	8007b40 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b30:	1c59      	adds	r1, r3, #1
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	64d1      	str	r1, [r2, #76]	; 0x4c
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2252      	movs	r2, #82	; 0x52
 8007b44:	5a9b      	ldrh	r3, [r3, r2]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b299      	uxth	r1, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2252      	movs	r2, #82	; 0x52
 8007b50:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2140      	movs	r1, #64	; 0x40
 8007b74:	438a      	bics	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2269      	movs	r2, #105	; 0x69
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0018      	movs	r0, r3
 8007b84:	f7ff fc2a 	bl	80073dc <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b002      	add	sp, #8
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8007b9c:	230e      	movs	r3, #14
 8007b9e:	18fb      	adds	r3, r7, r3
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	215c      	movs	r1, #92	; 0x5c
 8007ba4:	5a52      	ldrh	r2, [r2, r1]
 8007ba6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	226a      	movs	r2, #106	; 0x6a
 8007bac:	5c9b      	ldrb	r3, [r3, r2]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b22      	cmp	r3, #34	; 0x22
 8007bb2:	d15b      	bne.n	8007c6c <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	230c      	movs	r3, #12
 8007bba:	18fb      	adds	r3, r7, r3
 8007bbc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007bbe:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	2380      	movs	r3, #128	; 0x80
 8007bc6:	015b      	lsls	r3, r3, #5
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d116      	bne.n	8007bfa <UART_Receive_IT+0x66>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d112      	bne.n	8007bfa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd8:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007bda:	230c      	movs	r3, #12
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	220e      	movs	r2, #14
 8007be0:	18ba      	adds	r2, r7, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	8812      	ldrh	r2, [r2, #0]
 8007be6:	4013      	ands	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54
 8007bf8:	e010      	b.n	8007c1c <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b2d9      	uxtb	r1, r3
 8007c02:	230e      	movs	r3, #14
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b2d8      	uxtb	r0, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	1c5c      	adds	r4, r3, #1
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6554      	str	r4, [r2, #84]	; 0x54
 8007c14:	0002      	movs	r2, r0
 8007c16:	400a      	ands	r2, r1
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	225a      	movs	r2, #90	; 0x5a
 8007c20:	5a9b      	ldrh	r3, [r3, r2]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	215a      	movs	r1, #90	; 0x5a
 8007c2c:	1c18      	adds	r0, r3, #0
 8007c2e:	5250      	strh	r0, [r2, r1]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d119      	bne.n	8007c68 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4912      	ldr	r1, [pc, #72]	; (8007c88 <UART_Receive_IT+0xf4>)
 8007c40:	400a      	ands	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2101      	movs	r1, #1
 8007c50:	438a      	bics	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	226a      	movs	r2, #106	; 0x6a
 8007c58:	2120      	movs	r1, #32
 8007c5a:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f7fc f96e 	bl	8003f40 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e00a      	b.n	8007c7e <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e008      	b.n	8007c7e <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2108      	movs	r1, #8
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8007c7c:	2302      	movs	r3, #2
  }
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b005      	add	sp, #20
 8007c84:	bd90      	pop	{r4, r7, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	fffffedf 	.word	0xfffffedf

08007c8c <__errno>:
 8007c8c:	4b01      	ldr	r3, [pc, #4]	; (8007c94 <__errno+0x8>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	4770      	bx	lr
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	20000010 	.word	0x20000010

08007c98 <__libc_init_array>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	4d0c      	ldr	r5, [pc, #48]	; (8007cd0 <__libc_init_array+0x38>)
 8007c9e:	4c0d      	ldr	r4, [pc, #52]	; (8007cd4 <__libc_init_array+0x3c>)
 8007ca0:	1b64      	subs	r4, r4, r5
 8007ca2:	10a4      	asrs	r4, r4, #2
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	d109      	bne.n	8007cbc <__libc_init_array+0x24>
 8007ca8:	2600      	movs	r6, #0
 8007caa:	f001 fd81 	bl	80097b0 <_init>
 8007cae:	4d0a      	ldr	r5, [pc, #40]	; (8007cd8 <__libc_init_array+0x40>)
 8007cb0:	4c0a      	ldr	r4, [pc, #40]	; (8007cdc <__libc_init_array+0x44>)
 8007cb2:	1b64      	subs	r4, r4, r5
 8007cb4:	10a4      	asrs	r4, r4, #2
 8007cb6:	42a6      	cmp	r6, r4
 8007cb8:	d105      	bne.n	8007cc6 <__libc_init_array+0x2e>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	00b3      	lsls	r3, r6, #2
 8007cbe:	58eb      	ldr	r3, [r5, r3]
 8007cc0:	4798      	blx	r3
 8007cc2:	3601      	adds	r6, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__libc_init_array+0xc>
 8007cc6:	00b3      	lsls	r3, r6, #2
 8007cc8:	58eb      	ldr	r3, [r5, r3]
 8007cca:	4798      	blx	r3
 8007ccc:	3601      	adds	r6, #1
 8007cce:	e7f2      	b.n	8007cb6 <__libc_init_array+0x1e>
 8007cd0:	08009b20 	.word	0x08009b20
 8007cd4:	08009b20 	.word	0x08009b20
 8007cd8:	08009b20 	.word	0x08009b20
 8007cdc:	08009b24 	.word	0x08009b24

08007ce0 <memcpy>:
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d100      	bne.n	8007cea <memcpy+0xa>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	5ccc      	ldrb	r4, [r1, r3]
 8007cec:	54c4      	strb	r4, [r0, r3]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7f8      	b.n	8007ce4 <memcpy+0x4>

08007cf2 <memset>:
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	1812      	adds	r2, r2, r0
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d100      	bne.n	8007cfc <memset+0xa>
 8007cfa:	4770      	bx	lr
 8007cfc:	7019      	strb	r1, [r3, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	e7f9      	b.n	8007cf6 <memset+0x4>

08007d02 <__cvt>:
 8007d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d04:	b08b      	sub	sp, #44	; 0x2c
 8007d06:	0014      	movs	r4, r2
 8007d08:	1e1d      	subs	r5, r3, #0
 8007d0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d0c:	da53      	bge.n	8007db6 <__cvt+0xb4>
 8007d0e:	2480      	movs	r4, #128	; 0x80
 8007d10:	0624      	lsls	r4, r4, #24
 8007d12:	191b      	adds	r3, r3, r4
 8007d14:	001d      	movs	r5, r3
 8007d16:	0014      	movs	r4, r2
 8007d18:	232d      	movs	r3, #45	; 0x2d
 8007d1a:	700b      	strb	r3, [r1, #0]
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007d20:	2203      	movs	r2, #3
 8007d22:	439e      	bics	r6, r3
 8007d24:	2e46      	cmp	r6, #70	; 0x46
 8007d26:	d007      	beq.n	8007d38 <__cvt+0x36>
 8007d28:	0033      	movs	r3, r6
 8007d2a:	3b45      	subs	r3, #69	; 0x45
 8007d2c:	4259      	negs	r1, r3
 8007d2e:	414b      	adcs	r3, r1
 8007d30:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d32:	3a01      	subs	r2, #1
 8007d34:	18cb      	adds	r3, r1, r3
 8007d36:	9310      	str	r3, [sp, #64]	; 0x40
 8007d38:	ab09      	add	r3, sp, #36	; 0x24
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	ab08      	add	r3, sp, #32
 8007d3e:	9303      	str	r3, [sp, #12]
 8007d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d42:	9200      	str	r2, [sp, #0]
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d48:	0022      	movs	r2, r4
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	002b      	movs	r3, r5
 8007d4e:	f000 fbb5 	bl	80084bc <_dtoa_r>
 8007d52:	0007      	movs	r7, r0
 8007d54:	2e47      	cmp	r6, #71	; 0x47
 8007d56:	d102      	bne.n	8007d5e <__cvt+0x5c>
 8007d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d524      	bpl.n	8007da8 <__cvt+0xa6>
 8007d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	9307      	str	r3, [sp, #28]
 8007d64:	2e46      	cmp	r6, #70	; 0x46
 8007d66:	d114      	bne.n	8007d92 <__cvt+0x90>
 8007d68:	783b      	ldrb	r3, [r7, #0]
 8007d6a:	2b30      	cmp	r3, #48	; 0x30
 8007d6c:	d10c      	bne.n	8007d88 <__cvt+0x86>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	0020      	movs	r0, r4
 8007d74:	0029      	movs	r1, r5
 8007d76:	f7f8 fb5f 	bl	8000438 <__aeabi_dcmpeq>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d104      	bne.n	8007d88 <__cvt+0x86>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d8a:	9a07      	ldr	r2, [sp, #28]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	18d3      	adds	r3, r2, r3
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	0020      	movs	r0, r4
 8007d98:	0029      	movs	r1, r5
 8007d9a:	f7f8 fb4d 	bl	8000438 <__aeabi_dcmpeq>
 8007d9e:	2230      	movs	r2, #48	; 0x30
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d00d      	beq.n	8007dc0 <__cvt+0xbe>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	0038      	movs	r0, r7
 8007daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007dae:	1bdb      	subs	r3, r3, r7
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	b00b      	add	sp, #44	; 0x2c
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	2300      	movs	r3, #0
 8007db8:	e7af      	b.n	8007d1a <__cvt+0x18>
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	9907      	ldr	r1, [sp, #28]
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	d3f8      	bcc.n	8007dba <__cvt+0xb8>
 8007dc8:	e7ee      	b.n	8007da8 <__cvt+0xa6>

08007dca <__exponent>:
 8007dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dcc:	1c83      	adds	r3, r0, #2
 8007dce:	b085      	sub	sp, #20
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	0006      	movs	r6, r0
 8007dd4:	000c      	movs	r4, r1
 8007dd6:	7002      	strb	r2, [r0, #0]
 8007dd8:	232b      	movs	r3, #43	; 0x2b
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	da01      	bge.n	8007de2 <__exponent+0x18>
 8007dde:	232d      	movs	r3, #45	; 0x2d
 8007de0:	424c      	negs	r4, r1
 8007de2:	7073      	strb	r3, [r6, #1]
 8007de4:	2c09      	cmp	r4, #9
 8007de6:	dd22      	ble.n	8007e2e <__exponent+0x64>
 8007de8:	ab02      	add	r3, sp, #8
 8007dea:	1ddd      	adds	r5, r3, #7
 8007dec:	0020      	movs	r0, r4
 8007dee:	210a      	movs	r1, #10
 8007df0:	f7f8 fb0c 	bl	800040c <__aeabi_idivmod>
 8007df4:	1e6f      	subs	r7, r5, #1
 8007df6:	3130      	adds	r1, #48	; 0x30
 8007df8:	7039      	strb	r1, [r7, #0]
 8007dfa:	0020      	movs	r0, r4
 8007dfc:	210a      	movs	r1, #10
 8007dfe:	f7f8 fa1f 	bl	8000240 <__divsi3>
 8007e02:	0004      	movs	r4, r0
 8007e04:	2809      	cmp	r0, #9
 8007e06:	dc0b      	bgt.n	8007e20 <__exponent+0x56>
 8007e08:	3d02      	subs	r5, #2
 8007e0a:	3430      	adds	r4, #48	; 0x30
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	702c      	strb	r4, [r5, #0]
 8007e10:	aa02      	add	r2, sp, #8
 8007e12:	3207      	adds	r2, #7
 8007e14:	0018      	movs	r0, r3
 8007e16:	42aa      	cmp	r2, r5
 8007e18:	d804      	bhi.n	8007e24 <__exponent+0x5a>
 8007e1a:	1b80      	subs	r0, r0, r6
 8007e1c:	b005      	add	sp, #20
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	003d      	movs	r5, r7
 8007e22:	e7e3      	b.n	8007dec <__exponent+0x22>
 8007e24:	782a      	ldrb	r2, [r5, #0]
 8007e26:	3501      	adds	r5, #1
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	e7f0      	b.n	8007e10 <__exponent+0x46>
 8007e2e:	2330      	movs	r3, #48	; 0x30
 8007e30:	18e4      	adds	r4, r4, r3
 8007e32:	70b3      	strb	r3, [r6, #2]
 8007e34:	1d30      	adds	r0, r6, #4
 8007e36:	70f4      	strb	r4, [r6, #3]
 8007e38:	e7ef      	b.n	8007e1a <__exponent+0x50>
	...

08007e3c <_printf_float>:
 8007e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3e:	b095      	sub	sp, #84	; 0x54
 8007e40:	000c      	movs	r4, r1
 8007e42:	920a      	str	r2, [sp, #40]	; 0x28
 8007e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e46:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e48:	9009      	str	r0, [sp, #36]	; 0x24
 8007e4a:	f001 f917 	bl	800907c <_localeconv_r>
 8007e4e:	6803      	ldr	r3, [r0, #0]
 8007e50:	0018      	movs	r0, r3
 8007e52:	930c      	str	r3, [sp, #48]	; 0x30
 8007e54:	f7f8 f958 	bl	8000108 <strlen>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	900e      	str	r0, [sp, #56]	; 0x38
 8007e60:	930d      	str	r3, [sp, #52]	; 0x34
 8007e62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e64:	7e27      	ldrb	r7, [r4, #24]
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	2207      	movs	r2, #7
 8007e6a:	05c9      	lsls	r1, r1, #23
 8007e6c:	d545      	bpl.n	8007efa <_printf_float+0xbe>
 8007e6e:	189b      	adds	r3, r3, r2
 8007e70:	4393      	bics	r3, r2
 8007e72:	001a      	movs	r2, r3
 8007e74:	3208      	adds	r2, #8
 8007e76:	602a      	str	r2, [r5, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	64a2      	str	r2, [r4, #72]	; 0x48
 8007e7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e80:	2201      	movs	r2, #1
 8007e82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007e84:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8007e86:	006b      	lsls	r3, r5, #1
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e8c:	4252      	negs	r2, r2
 8007e8e:	4bac      	ldr	r3, [pc, #688]	; (8008140 <_printf_float+0x304>)
 8007e90:	0030      	movs	r0, r6
 8007e92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e94:	f7f9 ffde 	bl	8001e54 <__aeabi_dcmpun>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d130      	bne.n	8007efe <_printf_float+0xc2>
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4ba8      	ldr	r3, [pc, #672]	; (8008140 <_printf_float+0x304>)
 8007ea0:	4252      	negs	r2, r2
 8007ea2:	0030      	movs	r0, r6
 8007ea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ea6:	f7f8 fad7 	bl	8000458 <__aeabi_dcmple>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d127      	bne.n	8007efe <_printf_float+0xc2>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	0030      	movs	r0, r6
 8007eb4:	0029      	movs	r1, r5
 8007eb6:	f7f8 fac5 	bl	8000444 <__aeabi_dcmplt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d003      	beq.n	8007ec6 <_printf_float+0x8a>
 8007ebe:	0023      	movs	r3, r4
 8007ec0:	222d      	movs	r2, #45	; 0x2d
 8007ec2:	3343      	adds	r3, #67	; 0x43
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	4d9f      	ldr	r5, [pc, #636]	; (8008144 <_printf_float+0x308>)
 8007ec8:	2f47      	cmp	r7, #71	; 0x47
 8007eca:	d800      	bhi.n	8007ece <_printf_float+0x92>
 8007ecc:	4d9e      	ldr	r5, [pc, #632]	; (8008148 <_printf_float+0x30c>)
 8007ece:	2303      	movs	r3, #3
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	439a      	bics	r2, r3
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ede:	aa13      	add	r2, sp, #76	; 0x4c
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	0021      	movs	r1, r4
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee8:	f000 f9f4 	bl	80082d4 <_printf_common>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d000      	beq.n	8007ef2 <_printf_float+0xb6>
 8007ef0:	e093      	b.n	800801a <_printf_float+0x1de>
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	4240      	negs	r0, r0
 8007ef6:	b015      	add	sp, #84	; 0x54
 8007ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efa:	3307      	adds	r3, #7
 8007efc:	e7b8      	b.n	8007e70 <_printf_float+0x34>
 8007efe:	0032      	movs	r2, r6
 8007f00:	002b      	movs	r3, r5
 8007f02:	0030      	movs	r0, r6
 8007f04:	0029      	movs	r1, r5
 8007f06:	f7f9 ffa5 	bl	8001e54 <__aeabi_dcmpun>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d004      	beq.n	8007f18 <_printf_float+0xdc>
 8007f0e:	4d8f      	ldr	r5, [pc, #572]	; (800814c <_printf_float+0x310>)
 8007f10:	2f47      	cmp	r7, #71	; 0x47
 8007f12:	d8dc      	bhi.n	8007ece <_printf_float+0x92>
 8007f14:	4d8e      	ldr	r5, [pc, #568]	; (8008150 <_printf_float+0x314>)
 8007f16:	e7da      	b.n	8007ece <_printf_float+0x92>
 8007f18:	2380      	movs	r3, #128	; 0x80
 8007f1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f1c:	6862      	ldr	r2, [r4, #4]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	430b      	orrs	r3, r1
 8007f22:	1c51      	adds	r1, r2, #1
 8007f24:	d143      	bne.n	8007fae <_printf_float+0x172>
 8007f26:	3207      	adds	r2, #7
 8007f28:	6062      	str	r2, [r4, #4]
 8007f2a:	aa12      	add	r2, sp, #72	; 0x48
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	aa11      	add	r2, sp, #68	; 0x44
 8007f32:	9203      	str	r2, [sp, #12]
 8007f34:	2223      	movs	r2, #35	; 0x23
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	9106      	str	r1, [sp, #24]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	a908      	add	r1, sp, #32
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	1852      	adds	r2, r2, r1
 8007f42:	9202      	str	r2, [sp, #8]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	0032      	movs	r2, r6
 8007f48:	002b      	movs	r3, r5
 8007f4a:	9704      	str	r7, [sp, #16]
 8007f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f4e:	f7ff fed8 	bl	8007d02 <__cvt>
 8007f52:	2320      	movs	r3, #32
 8007f54:	003a      	movs	r2, r7
 8007f56:	0005      	movs	r5, r0
 8007f58:	439a      	bics	r2, r3
 8007f5a:	2a47      	cmp	r2, #71	; 0x47
 8007f5c:	d107      	bne.n	8007f6e <_printf_float+0x132>
 8007f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f60:	1cda      	adds	r2, r3, #3
 8007f62:	db02      	blt.n	8007f6a <_printf_float+0x12e>
 8007f64:	6862      	ldr	r2, [r4, #4]
 8007f66:	4293      	cmp	r3, r2
 8007f68:	dd45      	ble.n	8007ff6 <_printf_float+0x1ba>
 8007f6a:	3f02      	subs	r7, #2
 8007f6c:	b2ff      	uxtb	r7, r7
 8007f6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f70:	2f65      	cmp	r7, #101	; 0x65
 8007f72:	d825      	bhi.n	8007fc0 <_printf_float+0x184>
 8007f74:	0020      	movs	r0, r4
 8007f76:	3901      	subs	r1, #1
 8007f78:	003a      	movs	r2, r7
 8007f7a:	3050      	adds	r0, #80	; 0x50
 8007f7c:	9111      	str	r1, [sp, #68]	; 0x44
 8007f7e:	f7ff ff24 	bl	8007dca <__exponent>
 8007f82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f84:	0006      	movs	r6, r0
 8007f86:	1813      	adds	r3, r2, r0
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	dc02      	bgt.n	8007f94 <_printf_float+0x158>
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	07d2      	lsls	r2, r2, #31
 8007f92:	d501      	bpl.n	8007f98 <_printf_float+0x15c>
 8007f94:	3301      	adds	r3, #1
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2323      	movs	r3, #35	; 0x23
 8007f9a:	aa08      	add	r2, sp, #32
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d09b      	beq.n	8007edc <_printf_float+0xa0>
 8007fa4:	0023      	movs	r3, r4
 8007fa6:	222d      	movs	r2, #45	; 0x2d
 8007fa8:	3343      	adds	r3, #67	; 0x43
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e796      	b.n	8007edc <_printf_float+0xa0>
 8007fae:	2f67      	cmp	r7, #103	; 0x67
 8007fb0:	d100      	bne.n	8007fb4 <_printf_float+0x178>
 8007fb2:	e176      	b.n	80082a2 <_printf_float+0x466>
 8007fb4:	2f47      	cmp	r7, #71	; 0x47
 8007fb6:	d1b8      	bne.n	8007f2a <_printf_float+0xee>
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d1b6      	bne.n	8007f2a <_printf_float+0xee>
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	e7b3      	b.n	8007f28 <_printf_float+0xec>
 8007fc0:	2f66      	cmp	r7, #102	; 0x66
 8007fc2:	d119      	bne.n	8007ff8 <_printf_float+0x1bc>
 8007fc4:	6863      	ldr	r3, [r4, #4]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	dd0c      	ble.n	8007fe4 <_printf_float+0x1a8>
 8007fca:	6121      	str	r1, [r4, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <_printf_float+0x19a>
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	07d2      	lsls	r2, r2, #31
 8007fd4:	d502      	bpl.n	8007fdc <_printf_float+0x1a0>
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	185b      	adds	r3, r3, r1
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fde:	2600      	movs	r6, #0
 8007fe0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fe2:	e7d9      	b.n	8007f98 <_printf_float+0x15c>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <_printf_float+0x1b4>
 8007fe8:	2201      	movs	r2, #1
 8007fea:	6821      	ldr	r1, [r4, #0]
 8007fec:	4211      	tst	r1, r2
 8007fee:	d000      	beq.n	8007ff2 <_printf_float+0x1b6>
 8007ff0:	1c9a      	adds	r2, r3, #2
 8007ff2:	6122      	str	r2, [r4, #16]
 8007ff4:	e7f2      	b.n	8007fdc <_printf_float+0x1a0>
 8007ff6:	2767      	movs	r7, #103	; 0x67
 8007ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ffa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	db05      	blt.n	800800c <_printf_float+0x1d0>
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	07d2      	lsls	r2, r2, #31
 8008006:	d5e9      	bpl.n	8007fdc <_printf_float+0x1a0>
 8008008:	3301      	adds	r3, #1
 800800a:	e7e6      	b.n	8007fda <_printf_float+0x19e>
 800800c:	2101      	movs	r1, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	dc01      	bgt.n	8008016 <_printf_float+0x1da>
 8008012:	1849      	adds	r1, r1, r1
 8008014:	1ac9      	subs	r1, r1, r3
 8008016:	1852      	adds	r2, r2, r1
 8008018:	e7eb      	b.n	8007ff2 <_printf_float+0x1b6>
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	0553      	lsls	r3, r2, #21
 800801e:	d408      	bmi.n	8008032 <_printf_float+0x1f6>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	002a      	movs	r2, r5
 8008024:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008028:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800802a:	47a8      	blx	r5
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d129      	bne.n	8008084 <_printf_float+0x248>
 8008030:	e75f      	b.n	8007ef2 <_printf_float+0xb6>
 8008032:	2f65      	cmp	r7, #101	; 0x65
 8008034:	d800      	bhi.n	8008038 <_printf_float+0x1fc>
 8008036:	e0e0      	b.n	80081fa <_printf_float+0x3be>
 8008038:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800803a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	f7f8 f9fa 	bl	8000438 <__aeabi_dcmpeq>
 8008044:	2800      	cmp	r0, #0
 8008046:	d034      	beq.n	80080b2 <_printf_float+0x276>
 8008048:	2301      	movs	r3, #1
 800804a:	4a42      	ldr	r2, [pc, #264]	; (8008154 <_printf_float+0x318>)
 800804c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800804e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008052:	47a8      	blx	r5
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d100      	bne.n	800805a <_printf_float+0x21e>
 8008058:	e74b      	b.n	8007ef2 <_printf_float+0xb6>
 800805a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800805c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800805e:	4293      	cmp	r3, r2
 8008060:	db02      	blt.n	8008068 <_printf_float+0x22c>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	07db      	lsls	r3, r3, #31
 8008066:	d50d      	bpl.n	8008084 <_printf_float+0x248>
 8008068:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800806a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800806c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800806e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008072:	47a8      	blx	r5
 8008074:	2500      	movs	r5, #0
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d100      	bne.n	800807c <_printf_float+0x240>
 800807a:	e73a      	b.n	8007ef2 <_printf_float+0xb6>
 800807c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800807e:	3b01      	subs	r3, #1
 8008080:	42ab      	cmp	r3, r5
 8008082:	dc0a      	bgt.n	800809a <_printf_float+0x25e>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	079b      	lsls	r3, r3, #30
 8008088:	d500      	bpl.n	800808c <_printf_float+0x250>
 800808a:	e108      	b.n	800829e <_printf_float+0x462>
 800808c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800808e:	68e0      	ldr	r0, [r4, #12]
 8008090:	4298      	cmp	r0, r3
 8008092:	db00      	blt.n	8008096 <_printf_float+0x25a>
 8008094:	e72f      	b.n	8007ef6 <_printf_float+0xba>
 8008096:	0018      	movs	r0, r3
 8008098:	e72d      	b.n	8007ef6 <_printf_float+0xba>
 800809a:	0022      	movs	r2, r4
 800809c:	2301      	movs	r3, #1
 800809e:	321a      	adds	r2, #26
 80080a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080a6:	47b0      	blx	r6
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d100      	bne.n	80080ae <_printf_float+0x272>
 80080ac:	e721      	b.n	8007ef2 <_printf_float+0xb6>
 80080ae:	3501      	adds	r5, #1
 80080b0:	e7e4      	b.n	800807c <_printf_float+0x240>
 80080b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc2d      	bgt.n	8008114 <_printf_float+0x2d8>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4a26      	ldr	r2, [pc, #152]	; (8008154 <_printf_float+0x318>)
 80080bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080c2:	47b0      	blx	r6
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d100      	bne.n	80080ca <_printf_float+0x28e>
 80080c8:	e713      	b.n	8007ef2 <_printf_float+0xb6>
 80080ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <_printf_float+0x2a0>
 80080d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <_printf_float+0x2a0>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	07db      	lsls	r3, r3, #31
 80080da:	d5d3      	bpl.n	8008084 <_printf_float+0x248>
 80080dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e6:	47b0      	blx	r6
 80080e8:	2600      	movs	r6, #0
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d100      	bne.n	80080f0 <_printf_float+0x2b4>
 80080ee:	e700      	b.n	8007ef2 <_printf_float+0xb6>
 80080f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f2:	425b      	negs	r3, r3
 80080f4:	42b3      	cmp	r3, r6
 80080f6:	dc01      	bgt.n	80080fc <_printf_float+0x2c0>
 80080f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080fa:	e792      	b.n	8008022 <_printf_float+0x1e6>
 80080fc:	0022      	movs	r2, r4
 80080fe:	2301      	movs	r3, #1
 8008100:	321a      	adds	r2, #26
 8008102:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008106:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008108:	47b8      	blx	r7
 800810a:	1c43      	adds	r3, r0, #1
 800810c:	d100      	bne.n	8008110 <_printf_float+0x2d4>
 800810e:	e6f0      	b.n	8007ef2 <_printf_float+0xb6>
 8008110:	3601      	adds	r6, #1
 8008112:	e7ed      	b.n	80080f0 <_printf_float+0x2b4>
 8008114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008116:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008118:	429f      	cmp	r7, r3
 800811a:	dd00      	ble.n	800811e <_printf_float+0x2e2>
 800811c:	001f      	movs	r7, r3
 800811e:	2f00      	cmp	r7, #0
 8008120:	dd08      	ble.n	8008134 <_printf_float+0x2f8>
 8008122:	003b      	movs	r3, r7
 8008124:	002a      	movs	r2, r5
 8008126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800812a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800812c:	47b0      	blx	r6
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d100      	bne.n	8008134 <_printf_float+0x2f8>
 8008132:	e6de      	b.n	8007ef2 <_printf_float+0xb6>
 8008134:	2300      	movs	r3, #0
 8008136:	930d      	str	r3, [sp, #52]	; 0x34
 8008138:	43fb      	mvns	r3, r7
 800813a:	17db      	asrs	r3, r3, #31
 800813c:	930f      	str	r3, [sp, #60]	; 0x3c
 800813e:	e018      	b.n	8008172 <_printf_float+0x336>
 8008140:	7fefffff 	.word	0x7fefffff
 8008144:	080098fc 	.word	0x080098fc
 8008148:	080098f8 	.word	0x080098f8
 800814c:	08009904 	.word	0x08009904
 8008150:	08009900 	.word	0x08009900
 8008154:	08009908 	.word	0x08009908
 8008158:	0022      	movs	r2, r4
 800815a:	2301      	movs	r3, #1
 800815c:	321a      	adds	r2, #26
 800815e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008162:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008164:	47b0      	blx	r6
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d100      	bne.n	800816c <_printf_float+0x330>
 800816a:	e6c2      	b.n	8007ef2 <_printf_float+0xb6>
 800816c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816e:	3301      	adds	r3, #1
 8008170:	930d      	str	r3, [sp, #52]	; 0x34
 8008172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008174:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8008176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008178:	403b      	ands	r3, r7
 800817a:	1af3      	subs	r3, r6, r3
 800817c:	4293      	cmp	r3, r2
 800817e:	dceb      	bgt.n	8008158 <_printf_float+0x31c>
 8008180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008184:	19ad      	adds	r5, r5, r6
 8008186:	4293      	cmp	r3, r2
 8008188:	db10      	blt.n	80081ac <_printf_float+0x370>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	07db      	lsls	r3, r3, #31
 800818e:	d40d      	bmi.n	80081ac <_printf_float+0x370>
 8008190:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008194:	1bbe      	subs	r6, r7, r6
 8008196:	1aff      	subs	r7, r7, r3
 8008198:	42b7      	cmp	r7, r6
 800819a:	dd00      	ble.n	800819e <_printf_float+0x362>
 800819c:	0037      	movs	r7, r6
 800819e:	2f00      	cmp	r7, #0
 80081a0:	dc0d      	bgt.n	80081be <_printf_float+0x382>
 80081a2:	43fe      	mvns	r6, r7
 80081a4:	17f3      	asrs	r3, r6, #31
 80081a6:	2500      	movs	r5, #0
 80081a8:	930c      	str	r3, [sp, #48]	; 0x30
 80081aa:	e01c      	b.n	80081e6 <_printf_float+0x3aa>
 80081ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80081b6:	47b8      	blx	r7
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d1e9      	bne.n	8008190 <_printf_float+0x354>
 80081bc:	e699      	b.n	8007ef2 <_printf_float+0xb6>
 80081be:	003b      	movs	r3, r7
 80081c0:	002a      	movs	r2, r5
 80081c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80081c8:	47a8      	blx	r5
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d1e9      	bne.n	80081a2 <_printf_float+0x366>
 80081ce:	e690      	b.n	8007ef2 <_printf_float+0xb6>
 80081d0:	0022      	movs	r2, r4
 80081d2:	2301      	movs	r3, #1
 80081d4:	321a      	adds	r2, #26
 80081d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80081dc:	47b0      	blx	r6
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d100      	bne.n	80081e4 <_printf_float+0x3a8>
 80081e2:	e686      	b.n	8007ef2 <_printf_float+0xb6>
 80081e4:	3501      	adds	r5, #1
 80081e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	003a      	movs	r2, r7
 80081f0:	400a      	ands	r2, r1
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	dceb      	bgt.n	80081d0 <_printf_float+0x394>
 80081f8:	e744      	b.n	8008084 <_printf_float+0x248>
 80081fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	dc02      	bgt.n	8008206 <_printf_float+0x3ca>
 8008200:	2301      	movs	r3, #1
 8008202:	421a      	tst	r2, r3
 8008204:	d032      	beq.n	800826c <_printf_float+0x430>
 8008206:	2301      	movs	r3, #1
 8008208:	002a      	movs	r2, r5
 800820a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800820c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008210:	47b8      	blx	r7
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d100      	bne.n	8008218 <_printf_float+0x3dc>
 8008216:	e66c      	b.n	8007ef2 <_printf_float+0xb6>
 8008218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800821a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800821c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800821e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008220:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008222:	3501      	adds	r5, #1
 8008224:	47b8      	blx	r7
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d100      	bne.n	800822c <_printf_float+0x3f0>
 800822a:	e662      	b.n	8007ef2 <_printf_float+0xb6>
 800822c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800822e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008232:	2200      	movs	r2, #0
 8008234:	1e5f      	subs	r7, r3, #1
 8008236:	2300      	movs	r3, #0
 8008238:	f7f8 f8fe 	bl	8000438 <__aeabi_dcmpeq>
 800823c:	003b      	movs	r3, r7
 800823e:	2800      	cmp	r0, #0
 8008240:	d014      	beq.n	800826c <_printf_float+0x430>
 8008242:	2500      	movs	r5, #0
 8008244:	e00a      	b.n	800825c <_printf_float+0x420>
 8008246:	0022      	movs	r2, r4
 8008248:	2301      	movs	r3, #1
 800824a:	321a      	adds	r2, #26
 800824c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800824e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008250:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008252:	47b8      	blx	r7
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d100      	bne.n	800825a <_printf_float+0x41e>
 8008258:	e64b      	b.n	8007ef2 <_printf_float+0xb6>
 800825a:	3501      	adds	r5, #1
 800825c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800825e:	3b01      	subs	r3, #1
 8008260:	42ab      	cmp	r3, r5
 8008262:	dcf0      	bgt.n	8008246 <_printf_float+0x40a>
 8008264:	0022      	movs	r2, r4
 8008266:	0033      	movs	r3, r6
 8008268:	3250      	adds	r2, #80	; 0x50
 800826a:	e6db      	b.n	8008024 <_printf_float+0x1e8>
 800826c:	002a      	movs	r2, r5
 800826e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008272:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008274:	47a8      	blx	r5
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d1f4      	bne.n	8008264 <_printf_float+0x428>
 800827a:	e63a      	b.n	8007ef2 <_printf_float+0xb6>
 800827c:	0022      	movs	r2, r4
 800827e:	2301      	movs	r3, #1
 8008280:	3219      	adds	r2, #25
 8008282:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008286:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008288:	47b0      	blx	r6
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d100      	bne.n	8008290 <_printf_float+0x454>
 800828e:	e630      	b.n	8007ef2 <_printf_float+0xb6>
 8008290:	3501      	adds	r5, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	42ab      	cmp	r3, r5
 800829a:	dcef      	bgt.n	800827c <_printf_float+0x440>
 800829c:	e6f6      	b.n	800808c <_printf_float+0x250>
 800829e:	2500      	movs	r5, #0
 80082a0:	e7f7      	b.n	8008292 <_printf_float+0x456>
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	d100      	bne.n	80082a8 <_printf_float+0x46c>
 80082a6:	e689      	b.n	8007fbc <_printf_float+0x180>
 80082a8:	2100      	movs	r1, #0
 80082aa:	9106      	str	r1, [sp, #24]
 80082ac:	a912      	add	r1, sp, #72	; 0x48
 80082ae:	9105      	str	r1, [sp, #20]
 80082b0:	a911      	add	r1, sp, #68	; 0x44
 80082b2:	9103      	str	r1, [sp, #12]
 80082b4:	2123      	movs	r1, #35	; 0x23
 80082b6:	a808      	add	r0, sp, #32
 80082b8:	1809      	adds	r1, r1, r0
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	9200      	str	r2, [sp, #0]
 80082c0:	002b      	movs	r3, r5
 80082c2:	9704      	str	r7, [sp, #16]
 80082c4:	9102      	str	r1, [sp, #8]
 80082c6:	0032      	movs	r2, r6
 80082c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ca:	f7ff fd1a 	bl	8007d02 <__cvt>
 80082ce:	0005      	movs	r5, r0
 80082d0:	e645      	b.n	8007f5e <_printf_float+0x122>
 80082d2:	46c0      	nop			; (mov r8, r8)

080082d4 <_printf_common>:
 80082d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d6:	0015      	movs	r5, r2
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	688a      	ldr	r2, [r1, #8]
 80082dc:	690b      	ldr	r3, [r1, #16]
 80082de:	9000      	str	r0, [sp, #0]
 80082e0:	000c      	movs	r4, r1
 80082e2:	4293      	cmp	r3, r2
 80082e4:	da00      	bge.n	80082e8 <_printf_common+0x14>
 80082e6:	0013      	movs	r3, r2
 80082e8:	0022      	movs	r2, r4
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	3243      	adds	r2, #67	; 0x43
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d001      	beq.n	80082f8 <_printf_common+0x24>
 80082f4:	3301      	adds	r3, #1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	069b      	lsls	r3, r3, #26
 80082fc:	d502      	bpl.n	8008304 <_printf_common+0x30>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	3302      	adds	r3, #2
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	2706      	movs	r7, #6
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	401f      	ands	r7, r3
 800830a:	d027      	beq.n	800835c <_printf_common+0x88>
 800830c:	0023      	movs	r3, r4
 800830e:	3343      	adds	r3, #67	; 0x43
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	1e5a      	subs	r2, r3, #1
 8008314:	4193      	sbcs	r3, r2
 8008316:	6822      	ldr	r2, [r4, #0]
 8008318:	0692      	lsls	r2, r2, #26
 800831a:	d430      	bmi.n	800837e <_printf_common+0xaa>
 800831c:	0022      	movs	r2, r4
 800831e:	9901      	ldr	r1, [sp, #4]
 8008320:	3243      	adds	r2, #67	; 0x43
 8008322:	9800      	ldr	r0, [sp, #0]
 8008324:	9e08      	ldr	r6, [sp, #32]
 8008326:	47b0      	blx	r6
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d025      	beq.n	8008378 <_printf_common+0xa4>
 800832c:	2306      	movs	r3, #6
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	682a      	ldr	r2, [r5, #0]
 8008332:	68e1      	ldr	r1, [r4, #12]
 8008334:	4003      	ands	r3, r0
 8008336:	2500      	movs	r5, #0
 8008338:	2b04      	cmp	r3, #4
 800833a:	d103      	bne.n	8008344 <_printf_common+0x70>
 800833c:	1a8d      	subs	r5, r1, r2
 800833e:	43eb      	mvns	r3, r5
 8008340:	17db      	asrs	r3, r3, #31
 8008342:	401d      	ands	r5, r3
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	6922      	ldr	r2, [r4, #16]
 8008348:	4293      	cmp	r3, r2
 800834a:	dd01      	ble.n	8008350 <_printf_common+0x7c>
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	18ed      	adds	r5, r5, r3
 8008350:	2700      	movs	r7, #0
 8008352:	42bd      	cmp	r5, r7
 8008354:	d120      	bne.n	8008398 <_printf_common+0xc4>
 8008356:	2000      	movs	r0, #0
 8008358:	e010      	b.n	800837c <_printf_common+0xa8>
 800835a:	3701      	adds	r7, #1
 800835c:	68e3      	ldr	r3, [r4, #12]
 800835e:	682a      	ldr	r2, [r5, #0]
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	42bb      	cmp	r3, r7
 8008364:	ddd2      	ble.n	800830c <_printf_common+0x38>
 8008366:	0022      	movs	r2, r4
 8008368:	2301      	movs	r3, #1
 800836a:	3219      	adds	r2, #25
 800836c:	9901      	ldr	r1, [sp, #4]
 800836e:	9800      	ldr	r0, [sp, #0]
 8008370:	9e08      	ldr	r6, [sp, #32]
 8008372:	47b0      	blx	r6
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d1f0      	bne.n	800835a <_printf_common+0x86>
 8008378:	2001      	movs	r0, #1
 800837a:	4240      	negs	r0, r0
 800837c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800837e:	2030      	movs	r0, #48	; 0x30
 8008380:	18e1      	adds	r1, r4, r3
 8008382:	3143      	adds	r1, #67	; 0x43
 8008384:	7008      	strb	r0, [r1, #0]
 8008386:	0021      	movs	r1, r4
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	3145      	adds	r1, #69	; 0x45
 800838c:	7809      	ldrb	r1, [r1, #0]
 800838e:	18a2      	adds	r2, r4, r2
 8008390:	3243      	adds	r2, #67	; 0x43
 8008392:	3302      	adds	r3, #2
 8008394:	7011      	strb	r1, [r2, #0]
 8008396:	e7c1      	b.n	800831c <_printf_common+0x48>
 8008398:	0022      	movs	r2, r4
 800839a:	2301      	movs	r3, #1
 800839c:	321a      	adds	r2, #26
 800839e:	9901      	ldr	r1, [sp, #4]
 80083a0:	9800      	ldr	r0, [sp, #0]
 80083a2:	9e08      	ldr	r6, [sp, #32]
 80083a4:	47b0      	blx	r6
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d0e6      	beq.n	8008378 <_printf_common+0xa4>
 80083aa:	3701      	adds	r7, #1
 80083ac:	e7d1      	b.n	8008352 <_printf_common+0x7e>

080083ae <quorem>:
 80083ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b0:	6903      	ldr	r3, [r0, #16]
 80083b2:	690c      	ldr	r4, [r1, #16]
 80083b4:	b089      	sub	sp, #36	; 0x24
 80083b6:	0007      	movs	r7, r0
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	2600      	movs	r6, #0
 80083bc:	42a3      	cmp	r3, r4
 80083be:	db65      	blt.n	800848c <quorem+0xde>
 80083c0:	000b      	movs	r3, r1
 80083c2:	3c01      	subs	r4, #1
 80083c4:	3314      	adds	r3, #20
 80083c6:	00a5      	lsls	r5, r4, #2
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	195b      	adds	r3, r3, r5
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	0003      	movs	r3, r0
 80083d0:	3314      	adds	r3, #20
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	195d      	adds	r5, r3, r5
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	6828      	ldr	r0, [r5, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	1c59      	adds	r1, r3, #1
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	f7f7 fea4 	bl	800012c <__udivsi3>
 80083e4:	9001      	str	r0, [sp, #4]
 80083e6:	42b0      	cmp	r0, r6
 80083e8:	d029      	beq.n	800843e <quorem+0x90>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	9802      	ldr	r0, [sp, #8]
 80083ee:	469c      	mov	ip, r3
 80083f0:	9606      	str	r6, [sp, #24]
 80083f2:	4662      	mov	r2, ip
 80083f4:	ca08      	ldmia	r2!, {r3}
 80083f6:	4694      	mov	ip, r2
 80083f8:	9a01      	ldr	r2, [sp, #4]
 80083fa:	b299      	uxth	r1, r3
 80083fc:	4351      	muls	r1, r2
 80083fe:	0c1b      	lsrs	r3, r3, #16
 8008400:	4353      	muls	r3, r2
 8008402:	1989      	adds	r1, r1, r6
 8008404:	0c0a      	lsrs	r2, r1, #16
 8008406:	189b      	adds	r3, r3, r2
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	0c1e      	lsrs	r6, r3, #16
 800840c:	6803      	ldr	r3, [r0, #0]
 800840e:	b289      	uxth	r1, r1
 8008410:	b29a      	uxth	r2, r3
 8008412:	9b06      	ldr	r3, [sp, #24]
 8008414:	18d2      	adds	r2, r2, r3
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	1a52      	subs	r2, r2, r1
 800841a:	0c19      	lsrs	r1, r3, #16
 800841c:	466b      	mov	r3, sp
 800841e:	8b9b      	ldrh	r3, [r3, #28]
 8008420:	1acb      	subs	r3, r1, r3
 8008422:	1411      	asrs	r1, r2, #16
 8008424:	185b      	adds	r3, r3, r1
 8008426:	1419      	asrs	r1, r3, #16
 8008428:	b292      	uxth	r2, r2
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	431a      	orrs	r2, r3
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	9106      	str	r1, [sp, #24]
 8008432:	c004      	stmia	r0!, {r2}
 8008434:	4563      	cmp	r3, ip
 8008436:	d2dc      	bcs.n	80083f2 <quorem+0x44>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02d      	beq.n	800849a <quorem+0xec>
 800843e:	9905      	ldr	r1, [sp, #20]
 8008440:	0038      	movs	r0, r7
 8008442:	f001 f845 	bl	80094d0 <__mcmp>
 8008446:	2800      	cmp	r0, #0
 8008448:	db1f      	blt.n	800848a <quorem+0xdc>
 800844a:	2500      	movs	r5, #0
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	9802      	ldr	r0, [sp, #8]
 8008450:	3301      	adds	r3, #1
 8008452:	9903      	ldr	r1, [sp, #12]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	6802      	ldr	r2, [r0, #0]
 8008458:	c908      	ldmia	r1!, {r3}
 800845a:	b292      	uxth	r2, r2
 800845c:	1955      	adds	r5, r2, r5
 800845e:	b29a      	uxth	r2, r3
 8008460:	1aaa      	subs	r2, r5, r2
 8008462:	6805      	ldr	r5, [r0, #0]
 8008464:	0c1b      	lsrs	r3, r3, #16
 8008466:	0c2d      	lsrs	r5, r5, #16
 8008468:	1aeb      	subs	r3, r5, r3
 800846a:	1415      	asrs	r5, r2, #16
 800846c:	195b      	adds	r3, r3, r5
 800846e:	141d      	asrs	r5, r3, #16
 8008470:	b292      	uxth	r2, r2
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	4313      	orrs	r3, r2
 8008476:	c008      	stmia	r0!, {r3}
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	428b      	cmp	r3, r1
 800847c:	d2eb      	bcs.n	8008456 <quorem+0xa8>
 800847e:	9a02      	ldr	r2, [sp, #8]
 8008480:	00a3      	lsls	r3, r4, #2
 8008482:	18d3      	adds	r3, r2, r3
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	2a00      	cmp	r2, #0
 8008488:	d011      	beq.n	80084ae <quorem+0x100>
 800848a:	9e01      	ldr	r6, [sp, #4]
 800848c:	0030      	movs	r0, r6
 800848e:	b009      	add	sp, #36	; 0x24
 8008490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <quorem+0xf4>
 8008498:	3c01      	subs	r4, #1
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	3d04      	subs	r5, #4
 800849e:	42ab      	cmp	r3, r5
 80084a0:	d3f7      	bcc.n	8008492 <quorem+0xe4>
 80084a2:	613c      	str	r4, [r7, #16]
 80084a4:	e7cb      	b.n	800843e <quorem+0x90>
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	d104      	bne.n	80084b6 <quorem+0x108>
 80084ac:	3c01      	subs	r4, #1
 80084ae:	9a02      	ldr	r2, [sp, #8]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d3f7      	bcc.n	80084a6 <quorem+0xf8>
 80084b6:	613c      	str	r4, [r7, #16]
 80084b8:	e7e7      	b.n	800848a <quorem+0xdc>
	...

080084bc <_dtoa_r>:
 80084bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084be:	0016      	movs	r6, r2
 80084c0:	001f      	movs	r7, r3
 80084c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084c4:	b09b      	sub	sp, #108	; 0x6c
 80084c6:	9002      	str	r0, [sp, #8]
 80084c8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80084ca:	9606      	str	r6, [sp, #24]
 80084cc:	9707      	str	r7, [sp, #28]
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d108      	bne.n	80084e4 <_dtoa_r+0x28>
 80084d2:	2010      	movs	r0, #16
 80084d4:	f000 fdde 	bl	8009094 <malloc>
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	6258      	str	r0, [r3, #36]	; 0x24
 80084dc:	6044      	str	r4, [r0, #4]
 80084de:	6084      	str	r4, [r0, #8]
 80084e0:	6004      	str	r4, [r0, #0]
 80084e2:	60c4      	str	r4, [r0, #12]
 80084e4:	9b02      	ldr	r3, [sp, #8]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	2900      	cmp	r1, #0
 80084ec:	d00b      	beq.n	8008506 <_dtoa_r+0x4a>
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	2301      	movs	r3, #1
 80084f2:	4093      	lsls	r3, r2
 80084f4:	604a      	str	r2, [r1, #4]
 80084f6:	608b      	str	r3, [r1, #8]
 80084f8:	9802      	ldr	r0, [sp, #8]
 80084fa:	f000 fe0d 	bl	8009118 <_Bfree>
 80084fe:	2200      	movs	r2, #0
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	2f00      	cmp	r7, #0
 8008508:	da20      	bge.n	800854c <_dtoa_r+0x90>
 800850a:	2301      	movs	r3, #1
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	007b      	lsls	r3, r7, #1
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	9c07      	ldr	r4, [sp, #28]
 8008516:	4bb2      	ldr	r3, [pc, #712]	; (80087e0 <_dtoa_r+0x324>)
 8008518:	0022      	movs	r2, r4
 800851a:	9317      	str	r3, [sp, #92]	; 0x5c
 800851c:	401a      	ands	r2, r3
 800851e:	429a      	cmp	r2, r3
 8008520:	d117      	bne.n	8008552 <_dtoa_r+0x96>
 8008522:	4bb0      	ldr	r3, [pc, #704]	; (80087e4 <_dtoa_r+0x328>)
 8008524:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <_dtoa_r+0x7a>
 800852e:	0324      	lsls	r4, r4, #12
 8008530:	d101      	bne.n	8008536 <_dtoa_r+0x7a>
 8008532:	f000 fd87 	bl	8009044 <_dtoa_r+0xb88>
 8008536:	4bac      	ldr	r3, [pc, #688]	; (80087e8 <_dtoa_r+0x32c>)
 8008538:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	2a00      	cmp	r2, #0
 800853e:	d002      	beq.n	8008546 <_dtoa_r+0x8a>
 8008540:	4baa      	ldr	r3, [pc, #680]	; (80087ec <_dtoa_r+0x330>)
 8008542:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	9808      	ldr	r0, [sp, #32]
 8008548:	b01b      	add	sp, #108	; 0x6c
 800854a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854c:	2300      	movs	r3, #0
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	e7e0      	b.n	8008514 <_dtoa_r+0x58>
 8008552:	9e06      	ldr	r6, [sp, #24]
 8008554:	9f07      	ldr	r7, [sp, #28]
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	0030      	movs	r0, r6
 800855c:	0039      	movs	r1, r7
 800855e:	f7f7 ff6b 	bl	8000438 <__aeabi_dcmpeq>
 8008562:	1e05      	subs	r5, r0, #0
 8008564:	d00b      	beq.n	800857e <_dtoa_r+0xc2>
 8008566:	2301      	movs	r3, #1
 8008568:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4ba0      	ldr	r3, [pc, #640]	; (80087f0 <_dtoa_r+0x334>)
 800856e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	2a00      	cmp	r2, #0
 8008574:	d0e7      	beq.n	8008546 <_dtoa_r+0x8a>
 8008576:	4a9f      	ldr	r2, [pc, #636]	; (80087f4 <_dtoa_r+0x338>)
 8008578:	9924      	ldr	r1, [sp, #144]	; 0x90
 800857a:	600a      	str	r2, [r1, #0]
 800857c:	e7e3      	b.n	8008546 <_dtoa_r+0x8a>
 800857e:	ab18      	add	r3, sp, #96	; 0x60
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	ab19      	add	r3, sp, #100	; 0x64
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	0032      	movs	r2, r6
 8008588:	003b      	movs	r3, r7
 800858a:	9802      	ldr	r0, [sp, #8]
 800858c:	f001 f81e 	bl	80095cc <__d2b>
 8008590:	0063      	lsls	r3, r4, #1
 8008592:	9003      	str	r0, [sp, #12]
 8008594:	0d5b      	lsrs	r3, r3, #21
 8008596:	d074      	beq.n	8008682 <_dtoa_r+0x1c6>
 8008598:	033a      	lsls	r2, r7, #12
 800859a:	4c97      	ldr	r4, [pc, #604]	; (80087f8 <_dtoa_r+0x33c>)
 800859c:	0b12      	lsrs	r2, r2, #12
 800859e:	4314      	orrs	r4, r2
 80085a0:	0021      	movs	r1, r4
 80085a2:	4a96      	ldr	r2, [pc, #600]	; (80087fc <_dtoa_r+0x340>)
 80085a4:	0030      	movs	r0, r6
 80085a6:	9516      	str	r5, [sp, #88]	; 0x58
 80085a8:	189e      	adds	r6, r3, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b94      	ldr	r3, [pc, #592]	; (8008800 <_dtoa_r+0x344>)
 80085ae:	f7f9 f909 	bl	80017c4 <__aeabi_dsub>
 80085b2:	4a94      	ldr	r2, [pc, #592]	; (8008804 <_dtoa_r+0x348>)
 80085b4:	4b94      	ldr	r3, [pc, #592]	; (8008808 <_dtoa_r+0x34c>)
 80085b6:	f7f8 fe93 	bl	80012e0 <__aeabi_dmul>
 80085ba:	4a94      	ldr	r2, [pc, #592]	; (800880c <_dtoa_r+0x350>)
 80085bc:	4b94      	ldr	r3, [pc, #592]	; (8008810 <_dtoa_r+0x354>)
 80085be:	f7f7 ff69 	bl	8000494 <__aeabi_dadd>
 80085c2:	0004      	movs	r4, r0
 80085c4:	0030      	movs	r0, r6
 80085c6:	000d      	movs	r5, r1
 80085c8:	f7f9 fc96 	bl	8001ef8 <__aeabi_i2d>
 80085cc:	4a91      	ldr	r2, [pc, #580]	; (8008814 <_dtoa_r+0x358>)
 80085ce:	4b92      	ldr	r3, [pc, #584]	; (8008818 <_dtoa_r+0x35c>)
 80085d0:	f7f8 fe86 	bl	80012e0 <__aeabi_dmul>
 80085d4:	0002      	movs	r2, r0
 80085d6:	000b      	movs	r3, r1
 80085d8:	0020      	movs	r0, r4
 80085da:	0029      	movs	r1, r5
 80085dc:	f7f7 ff5a 	bl	8000494 <__aeabi_dadd>
 80085e0:	0004      	movs	r4, r0
 80085e2:	000d      	movs	r5, r1
 80085e4:	f7f9 fc52 	bl	8001e8c <__aeabi_d2iz>
 80085e8:	2200      	movs	r2, #0
 80085ea:	0007      	movs	r7, r0
 80085ec:	2300      	movs	r3, #0
 80085ee:	0020      	movs	r0, r4
 80085f0:	0029      	movs	r1, r5
 80085f2:	f7f7 ff27 	bl	8000444 <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d009      	beq.n	800860e <_dtoa_r+0x152>
 80085fa:	0038      	movs	r0, r7
 80085fc:	f7f9 fc7c 	bl	8001ef8 <__aeabi_i2d>
 8008600:	002b      	movs	r3, r5
 8008602:	0022      	movs	r2, r4
 8008604:	f7f7 ff18 	bl	8000438 <__aeabi_dcmpeq>
 8008608:	4243      	negs	r3, r0
 800860a:	4158      	adcs	r0, r3
 800860c:	1a3f      	subs	r7, r7, r0
 800860e:	2301      	movs	r3, #1
 8008610:	9314      	str	r3, [sp, #80]	; 0x50
 8008612:	2f16      	cmp	r7, #22
 8008614:	d80d      	bhi.n	8008632 <_dtoa_r+0x176>
 8008616:	4981      	ldr	r1, [pc, #516]	; (800881c <_dtoa_r+0x360>)
 8008618:	00fb      	lsls	r3, r7, #3
 800861a:	18c9      	adds	r1, r1, r3
 800861c:	6808      	ldr	r0, [r1, #0]
 800861e:	6849      	ldr	r1, [r1, #4]
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	f7f7 ff22 	bl	800046c <__aeabi_dcmpgt>
 8008628:	2800      	cmp	r0, #0
 800862a:	d046      	beq.n	80086ba <_dtoa_r+0x1fe>
 800862c:	2300      	movs	r3, #0
 800862e:	3f01      	subs	r7, #1
 8008630:	9314      	str	r3, [sp, #80]	; 0x50
 8008632:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008634:	1b9e      	subs	r6, r3, r6
 8008636:	2300      	movs	r3, #0
 8008638:	930a      	str	r3, [sp, #40]	; 0x28
 800863a:	0033      	movs	r3, r6
 800863c:	3b01      	subs	r3, #1
 800863e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008640:	d504      	bpl.n	800864c <_dtoa_r+0x190>
 8008642:	2301      	movs	r3, #1
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	930a      	str	r3, [sp, #40]	; 0x28
 8008648:	2300      	movs	r3, #0
 800864a:	930b      	str	r3, [sp, #44]	; 0x2c
 800864c:	2f00      	cmp	r7, #0
 800864e:	db36      	blt.n	80086be <_dtoa_r+0x202>
 8008650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008652:	9711      	str	r7, [sp, #68]	; 0x44
 8008654:	19db      	adds	r3, r3, r7
 8008656:	930b      	str	r3, [sp, #44]	; 0x2c
 8008658:	2300      	movs	r3, #0
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800865e:	2401      	movs	r4, #1
 8008660:	2b09      	cmp	r3, #9
 8008662:	d900      	bls.n	8008666 <_dtoa_r+0x1aa>
 8008664:	e084      	b.n	8008770 <_dtoa_r+0x2b4>
 8008666:	2b05      	cmp	r3, #5
 8008668:	dd02      	ble.n	8008670 <_dtoa_r+0x1b4>
 800866a:	2400      	movs	r4, #0
 800866c:	3b04      	subs	r3, #4
 800866e:	9320      	str	r3, [sp, #128]	; 0x80
 8008670:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008672:	1e98      	subs	r0, r3, #2
 8008674:	2803      	cmp	r0, #3
 8008676:	d900      	bls.n	800867a <_dtoa_r+0x1be>
 8008678:	e084      	b.n	8008784 <_dtoa_r+0x2c8>
 800867a:	f7f7 fd4d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800867e:	7775      	.short	0x7775
 8008680:	6a28      	.short	0x6a28
 8008682:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008684:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008686:	189e      	adds	r6, r3, r2
 8008688:	4b65      	ldr	r3, [pc, #404]	; (8008820 <_dtoa_r+0x364>)
 800868a:	18f2      	adds	r2, r6, r3
 800868c:	2a20      	cmp	r2, #32
 800868e:	dd0f      	ble.n	80086b0 <_dtoa_r+0x1f4>
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	409c      	lsls	r4, r3
 8008696:	4b63      	ldr	r3, [pc, #396]	; (8008824 <_dtoa_r+0x368>)
 8008698:	9806      	ldr	r0, [sp, #24]
 800869a:	18f3      	adds	r3, r6, r3
 800869c:	40d8      	lsrs	r0, r3
 800869e:	4320      	orrs	r0, r4
 80086a0:	f7f9 fc64 	bl	8001f6c <__aeabi_ui2d>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4c60      	ldr	r4, [pc, #384]	; (8008828 <_dtoa_r+0x36c>)
 80086a8:	3e01      	subs	r6, #1
 80086aa:	1909      	adds	r1, r1, r4
 80086ac:	9316      	str	r3, [sp, #88]	; 0x58
 80086ae:	e77c      	b.n	80085aa <_dtoa_r+0xee>
 80086b0:	2320      	movs	r3, #32
 80086b2:	9806      	ldr	r0, [sp, #24]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	4098      	lsls	r0, r3
 80086b8:	e7f2      	b.n	80086a0 <_dtoa_r+0x1e4>
 80086ba:	9014      	str	r0, [sp, #80]	; 0x50
 80086bc:	e7b9      	b.n	8008632 <_dtoa_r+0x176>
 80086be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c0:	1bdb      	subs	r3, r3, r7
 80086c2:	930a      	str	r3, [sp, #40]	; 0x28
 80086c4:	427b      	negs	r3, r7
 80086c6:	9304      	str	r3, [sp, #16]
 80086c8:	2300      	movs	r3, #0
 80086ca:	9311      	str	r3, [sp, #68]	; 0x44
 80086cc:	e7c6      	b.n	800865c <_dtoa_r+0x1a0>
 80086ce:	2301      	movs	r3, #1
 80086d0:	930d      	str	r3, [sp, #52]	; 0x34
 80086d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd59      	ble.n	800878c <_dtoa_r+0x2d0>
 80086d8:	930c      	str	r3, [sp, #48]	; 0x30
 80086da:	9309      	str	r3, [sp, #36]	; 0x24
 80086dc:	9a02      	ldr	r2, [sp, #8]
 80086de:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80086e0:	2200      	movs	r2, #0
 80086e2:	606a      	str	r2, [r5, #4]
 80086e4:	3204      	adds	r2, #4
 80086e6:	0010      	movs	r0, r2
 80086e8:	3014      	adds	r0, #20
 80086ea:	6869      	ldr	r1, [r5, #4]
 80086ec:	4298      	cmp	r0, r3
 80086ee:	d952      	bls.n	8008796 <_dtoa_r+0x2da>
 80086f0:	9802      	ldr	r0, [sp, #8]
 80086f2:	f000 fcd9 	bl	80090a8 <_Balloc>
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	6028      	str	r0, [r5, #0]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	9308      	str	r3, [sp, #32]
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	2b0e      	cmp	r3, #14
 8008704:	d900      	bls.n	8008708 <_dtoa_r+0x24c>
 8008706:	e10a      	b.n	800891e <_dtoa_r+0x462>
 8008708:	2c00      	cmp	r4, #0
 800870a:	d100      	bne.n	800870e <_dtoa_r+0x252>
 800870c:	e107      	b.n	800891e <_dtoa_r+0x462>
 800870e:	9b06      	ldr	r3, [sp, #24]
 8008710:	9c07      	ldr	r4, [sp, #28]
 8008712:	9312      	str	r3, [sp, #72]	; 0x48
 8008714:	9413      	str	r4, [sp, #76]	; 0x4c
 8008716:	2f00      	cmp	r7, #0
 8008718:	dc00      	bgt.n	800871c <_dtoa_r+0x260>
 800871a:	e089      	b.n	8008830 <_dtoa_r+0x374>
 800871c:	210f      	movs	r1, #15
 800871e:	003a      	movs	r2, r7
 8008720:	4b3e      	ldr	r3, [pc, #248]	; (800881c <_dtoa_r+0x360>)
 8008722:	400a      	ands	r2, r1
 8008724:	00d2      	lsls	r2, r2, #3
 8008726:	189b      	adds	r3, r3, r2
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	685e      	ldr	r6, [r3, #4]
 800872c:	2302      	movs	r3, #2
 800872e:	113c      	asrs	r4, r7, #4
 8008730:	930e      	str	r3, [sp, #56]	; 0x38
 8008732:	06e3      	lsls	r3, r4, #27
 8008734:	d50b      	bpl.n	800874e <_dtoa_r+0x292>
 8008736:	4b3d      	ldr	r3, [pc, #244]	; (800882c <_dtoa_r+0x370>)
 8008738:	400c      	ands	r4, r1
 800873a:	6a1a      	ldr	r2, [r3, #32]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008740:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008742:	f7f8 f9c3 	bl	8000acc <__aeabi_ddiv>
 8008746:	2303      	movs	r3, #3
 8008748:	9006      	str	r0, [sp, #24]
 800874a:	9107      	str	r1, [sp, #28]
 800874c:	930e      	str	r3, [sp, #56]	; 0x38
 800874e:	2300      	movs	r3, #0
 8008750:	e03a      	b.n	80087c8 <_dtoa_r+0x30c>
 8008752:	2301      	movs	r3, #1
 8008754:	930d      	str	r3, [sp, #52]	; 0x34
 8008756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008758:	18fb      	adds	r3, r7, r3
 800875a:	930c      	str	r3, [sp, #48]	; 0x30
 800875c:	3301      	adds	r3, #1
 800875e:	9309      	str	r3, [sp, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	dcbb      	bgt.n	80086dc <_dtoa_r+0x220>
 8008764:	2301      	movs	r3, #1
 8008766:	e7b9      	b.n	80086dc <_dtoa_r+0x220>
 8008768:	2300      	movs	r3, #0
 800876a:	e7b1      	b.n	80086d0 <_dtoa_r+0x214>
 800876c:	2300      	movs	r3, #0
 800876e:	e7f1      	b.n	8008754 <_dtoa_r+0x298>
 8008770:	2300      	movs	r3, #0
 8008772:	940d      	str	r4, [sp, #52]	; 0x34
 8008774:	9320      	str	r3, [sp, #128]	; 0x80
 8008776:	3b01      	subs	r3, #1
 8008778:	2200      	movs	r2, #0
 800877a:	930c      	str	r3, [sp, #48]	; 0x30
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	3313      	adds	r3, #19
 8008780:	9221      	str	r2, [sp, #132]	; 0x84
 8008782:	e7ab      	b.n	80086dc <_dtoa_r+0x220>
 8008784:	2301      	movs	r3, #1
 8008786:	930d      	str	r3, [sp, #52]	; 0x34
 8008788:	3b02      	subs	r3, #2
 800878a:	e7f5      	b.n	8008778 <_dtoa_r+0x2bc>
 800878c:	2301      	movs	r3, #1
 800878e:	930c      	str	r3, [sp, #48]	; 0x30
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	001a      	movs	r2, r3
 8008794:	e7f4      	b.n	8008780 <_dtoa_r+0x2c4>
 8008796:	3101      	adds	r1, #1
 8008798:	6069      	str	r1, [r5, #4]
 800879a:	0052      	lsls	r2, r2, #1
 800879c:	e7a3      	b.n	80086e6 <_dtoa_r+0x22a>
 800879e:	2301      	movs	r3, #1
 80087a0:	421c      	tst	r4, r3
 80087a2:	d00e      	beq.n	80087c2 <_dtoa_r+0x306>
 80087a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a6:	4a21      	ldr	r2, [pc, #132]	; (800882c <_dtoa_r+0x370>)
 80087a8:	3301      	adds	r3, #1
 80087aa:	930e      	str	r3, [sp, #56]	; 0x38
 80087ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ae:	0028      	movs	r0, r5
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	0031      	movs	r1, r6
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f7f8 fd91 	bl	80012e0 <__aeabi_dmul>
 80087be:	0005      	movs	r5, r0
 80087c0:	000e      	movs	r6, r1
 80087c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087c4:	1064      	asrs	r4, r4, #1
 80087c6:	3301      	adds	r3, #1
 80087c8:	9310      	str	r3, [sp, #64]	; 0x40
 80087ca:	2c00      	cmp	r4, #0
 80087cc:	d1e7      	bne.n	800879e <_dtoa_r+0x2e2>
 80087ce:	9806      	ldr	r0, [sp, #24]
 80087d0:	9907      	ldr	r1, [sp, #28]
 80087d2:	002a      	movs	r2, r5
 80087d4:	0033      	movs	r3, r6
 80087d6:	f7f8 f979 	bl	8000acc <__aeabi_ddiv>
 80087da:	9006      	str	r0, [sp, #24]
 80087dc:	9107      	str	r1, [sp, #28]
 80087de:	e042      	b.n	8008866 <_dtoa_r+0x3aa>
 80087e0:	7ff00000 	.word	0x7ff00000
 80087e4:	0000270f 	.word	0x0000270f
 80087e8:	08009913 	.word	0x08009913
 80087ec:	08009916 	.word	0x08009916
 80087f0:	08009908 	.word	0x08009908
 80087f4:	08009909 	.word	0x08009909
 80087f8:	3ff00000 	.word	0x3ff00000
 80087fc:	fffffc01 	.word	0xfffffc01
 8008800:	3ff80000 	.word	0x3ff80000
 8008804:	636f4361 	.word	0x636f4361
 8008808:	3fd287a7 	.word	0x3fd287a7
 800880c:	8b60c8b3 	.word	0x8b60c8b3
 8008810:	3fc68a28 	.word	0x3fc68a28
 8008814:	509f79fb 	.word	0x509f79fb
 8008818:	3fd34413 	.word	0x3fd34413
 800881c:	08009940 	.word	0x08009940
 8008820:	00000432 	.word	0x00000432
 8008824:	00000412 	.word	0x00000412
 8008828:	fe100000 	.word	0xfe100000
 800882c:	08009918 	.word	0x08009918
 8008830:	2302      	movs	r3, #2
 8008832:	930e      	str	r3, [sp, #56]	; 0x38
 8008834:	2f00      	cmp	r7, #0
 8008836:	d016      	beq.n	8008866 <_dtoa_r+0x3aa>
 8008838:	9812      	ldr	r0, [sp, #72]	; 0x48
 800883a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800883c:	427c      	negs	r4, r7
 800883e:	330d      	adds	r3, #13
 8008840:	4023      	ands	r3, r4
 8008842:	4ace      	ldr	r2, [pc, #824]	; (8008b7c <_dtoa_r+0x6c0>)
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	18d3      	adds	r3, r2, r3
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f7f8 fd48 	bl	80012e0 <__aeabi_dmul>
 8008850:	2300      	movs	r3, #0
 8008852:	2601      	movs	r6, #1
 8008854:	001d      	movs	r5, r3
 8008856:	9006      	str	r0, [sp, #24]
 8008858:	9107      	str	r1, [sp, #28]
 800885a:	1124      	asrs	r4, r4, #4
 800885c:	2c00      	cmp	r4, #0
 800885e:	d000      	beq.n	8008862 <_dtoa_r+0x3a6>
 8008860:	e08c      	b.n	800897c <_dtoa_r+0x4c0>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1b9      	bne.n	80087da <_dtoa_r+0x31e>
 8008866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008868:	2b00      	cmp	r3, #0
 800886a:	d100      	bne.n	800886e <_dtoa_r+0x3b2>
 800886c:	e096      	b.n	800899c <_dtoa_r+0x4e0>
 800886e:	9c06      	ldr	r4, [sp, #24]
 8008870:	9d07      	ldr	r5, [sp, #28]
 8008872:	2200      	movs	r2, #0
 8008874:	4bc2      	ldr	r3, [pc, #776]	; (8008b80 <_dtoa_r+0x6c4>)
 8008876:	0020      	movs	r0, r4
 8008878:	0029      	movs	r1, r5
 800887a:	f7f7 fde3 	bl	8000444 <__aeabi_dcmplt>
 800887e:	2800      	cmp	r0, #0
 8008880:	d100      	bne.n	8008884 <_dtoa_r+0x3c8>
 8008882:	e08b      	b.n	800899c <_dtoa_r+0x4e0>
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d100      	bne.n	800888c <_dtoa_r+0x3d0>
 800888a:	e087      	b.n	800899c <_dtoa_r+0x4e0>
 800888c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd41      	ble.n	8008916 <_dtoa_r+0x45a>
 8008892:	4bbc      	ldr	r3, [pc, #752]	; (8008b84 <_dtoa_r+0x6c8>)
 8008894:	2200      	movs	r2, #0
 8008896:	0020      	movs	r0, r4
 8008898:	0029      	movs	r1, r5
 800889a:	f7f8 fd21 	bl	80012e0 <__aeabi_dmul>
 800889e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088a0:	9006      	str	r0, [sp, #24]
 80088a2:	9107      	str	r1, [sp, #28]
 80088a4:	3301      	adds	r3, #1
 80088a6:	930e      	str	r3, [sp, #56]	; 0x38
 80088a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088aa:	1e7e      	subs	r6, r7, #1
 80088ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80088ae:	9310      	str	r3, [sp, #64]	; 0x40
 80088b0:	f7f9 fb22 	bl	8001ef8 <__aeabi_i2d>
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	f7f8 fd12 	bl	80012e0 <__aeabi_dmul>
 80088bc:	2200      	movs	r2, #0
 80088be:	4bb2      	ldr	r3, [pc, #712]	; (8008b88 <_dtoa_r+0x6cc>)
 80088c0:	f7f7 fde8 	bl	8000494 <__aeabi_dadd>
 80088c4:	4ab1      	ldr	r2, [pc, #708]	; (8008b8c <_dtoa_r+0x6d0>)
 80088c6:	900e      	str	r0, [sp, #56]	; 0x38
 80088c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80088ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80088cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088ce:	4694      	mov	ip, r2
 80088d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088d2:	4463      	add	r3, ip
 80088d4:	9315      	str	r3, [sp, #84]	; 0x54
 80088d6:	001d      	movs	r5, r3
 80088d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d161      	bne.n	80089a2 <_dtoa_r+0x4e6>
 80088de:	9806      	ldr	r0, [sp, #24]
 80088e0:	9907      	ldr	r1, [sp, #28]
 80088e2:	2200      	movs	r2, #0
 80088e4:	4baa      	ldr	r3, [pc, #680]	; (8008b90 <_dtoa_r+0x6d4>)
 80088e6:	f7f8 ff6d 	bl	80017c4 <__aeabi_dsub>
 80088ea:	0022      	movs	r2, r4
 80088ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ee:	9006      	str	r0, [sp, #24]
 80088f0:	9107      	str	r1, [sp, #28]
 80088f2:	f7f7 fdbb 	bl	800046c <__aeabi_dcmpgt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d000      	beq.n	80088fc <_dtoa_r+0x440>
 80088fa:	e2a8      	b.n	8008e4e <_dtoa_r+0x992>
 80088fc:	48a5      	ldr	r0, [pc, #660]	; (8008b94 <_dtoa_r+0x6d8>)
 80088fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008900:	4684      	mov	ip, r0
 8008902:	4461      	add	r1, ip
 8008904:	000b      	movs	r3, r1
 8008906:	9806      	ldr	r0, [sp, #24]
 8008908:	9907      	ldr	r1, [sp, #28]
 800890a:	0022      	movs	r2, r4
 800890c:	f7f7 fd9a 	bl	8000444 <__aeabi_dcmplt>
 8008910:	2800      	cmp	r0, #0
 8008912:	d000      	beq.n	8008916 <_dtoa_r+0x45a>
 8008914:	e295      	b.n	8008e42 <_dtoa_r+0x986>
 8008916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008918:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800891a:	9306      	str	r3, [sp, #24]
 800891c:	9407      	str	r4, [sp, #28]
 800891e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008920:	2b00      	cmp	r3, #0
 8008922:	da00      	bge.n	8008926 <_dtoa_r+0x46a>
 8008924:	e15c      	b.n	8008be0 <_dtoa_r+0x724>
 8008926:	2f0e      	cmp	r7, #14
 8008928:	dd00      	ble.n	800892c <_dtoa_r+0x470>
 800892a:	e159      	b.n	8008be0 <_dtoa_r+0x724>
 800892c:	4b93      	ldr	r3, [pc, #588]	; (8008b7c <_dtoa_r+0x6c0>)
 800892e:	00fa      	lsls	r2, r7, #3
 8008930:	189b      	adds	r3, r3, r2
 8008932:	685c      	ldr	r4, [r3, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	9405      	str	r4, [sp, #20]
 800893a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800893c:	2b00      	cmp	r3, #0
 800893e:	db00      	blt.n	8008942 <_dtoa_r+0x486>
 8008940:	e0d8      	b.n	8008af4 <_dtoa_r+0x638>
 8008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	dd00      	ble.n	800894a <_dtoa_r+0x48e>
 8008948:	e0d4      	b.n	8008af4 <_dtoa_r+0x638>
 800894a:	d000      	beq.n	800894e <_dtoa_r+0x492>
 800894c:	e27d      	b.n	8008e4a <_dtoa_r+0x98e>
 800894e:	9804      	ldr	r0, [sp, #16]
 8008950:	9905      	ldr	r1, [sp, #20]
 8008952:	2200      	movs	r2, #0
 8008954:	4b8e      	ldr	r3, [pc, #568]	; (8008b90 <_dtoa_r+0x6d4>)
 8008956:	f7f8 fcc3 	bl	80012e0 <__aeabi_dmul>
 800895a:	9a06      	ldr	r2, [sp, #24]
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	f7f7 fd8f 	bl	8000480 <__aeabi_dcmpge>
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	001e      	movs	r6, r3
 8008968:	2800      	cmp	r0, #0
 800896a:	d000      	beq.n	800896e <_dtoa_r+0x4b2>
 800896c:	e24f      	b.n	8008e0e <_dtoa_r+0x952>
 800896e:	9b08      	ldr	r3, [sp, #32]
 8008970:	9a08      	ldr	r2, [sp, #32]
 8008972:	1c5d      	adds	r5, r3, #1
 8008974:	2331      	movs	r3, #49	; 0x31
 8008976:	3701      	adds	r7, #1
 8008978:	7013      	strb	r3, [r2, #0]
 800897a:	e24b      	b.n	8008e14 <_dtoa_r+0x958>
 800897c:	4234      	tst	r4, r6
 800897e:	d00a      	beq.n	8008996 <_dtoa_r+0x4da>
 8008980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008982:	4a85      	ldr	r2, [pc, #532]	; (8008b98 <_dtoa_r+0x6dc>)
 8008984:	3301      	adds	r3, #1
 8008986:	930e      	str	r3, [sp, #56]	; 0x38
 8008988:	00eb      	lsls	r3, r5, #3
 800898a:	189b      	adds	r3, r3, r2
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f7f8 fca6 	bl	80012e0 <__aeabi_dmul>
 8008994:	0033      	movs	r3, r6
 8008996:	1064      	asrs	r4, r4, #1
 8008998:	3501      	adds	r5, #1
 800899a:	e75f      	b.n	800885c <_dtoa_r+0x3a0>
 800899c:	003e      	movs	r6, r7
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	e784      	b.n	80088ac <_dtoa_r+0x3f0>
 80089a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	4b74      	ldr	r3, [pc, #464]	; (8008b7c <_dtoa_r+0x6c0>)
 80089aa:	00d2      	lsls	r2, r2, #3
 80089ac:	189b      	adds	r3, r3, r2
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d049      	beq.n	8008a4a <_dtoa_r+0x58e>
 80089b6:	2000      	movs	r0, #0
 80089b8:	4978      	ldr	r1, [pc, #480]	; (8008b9c <_dtoa_r+0x6e0>)
 80089ba:	f7f8 f887 	bl	8000acc <__aeabi_ddiv>
 80089be:	002b      	movs	r3, r5
 80089c0:	0022      	movs	r2, r4
 80089c2:	f7f8 feff 	bl	80017c4 <__aeabi_dsub>
 80089c6:	9b08      	ldr	r3, [sp, #32]
 80089c8:	900e      	str	r0, [sp, #56]	; 0x38
 80089ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80089cc:	9315      	str	r3, [sp, #84]	; 0x54
 80089ce:	9806      	ldr	r0, [sp, #24]
 80089d0:	9907      	ldr	r1, [sp, #28]
 80089d2:	f7f9 fa5b 	bl	8001e8c <__aeabi_d2iz>
 80089d6:	0004      	movs	r4, r0
 80089d8:	f7f9 fa8e 	bl	8001ef8 <__aeabi_i2d>
 80089dc:	0002      	movs	r2, r0
 80089de:	000b      	movs	r3, r1
 80089e0:	9806      	ldr	r0, [sp, #24]
 80089e2:	9907      	ldr	r1, [sp, #28]
 80089e4:	f7f8 feee 	bl	80017c4 <__aeabi_dsub>
 80089e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ea:	3430      	adds	r4, #48	; 0x30
 80089ec:	1c5d      	adds	r5, r3, #1
 80089ee:	701c      	strb	r4, [r3, #0]
 80089f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f4:	9006      	str	r0, [sp, #24]
 80089f6:	9107      	str	r1, [sp, #28]
 80089f8:	f7f7 fd24 	bl	8000444 <__aeabi_dcmplt>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d16c      	bne.n	8008ada <_dtoa_r+0x61e>
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	9b07      	ldr	r3, [sp, #28]
 8008a04:	2000      	movs	r0, #0
 8008a06:	495e      	ldr	r1, [pc, #376]	; (8008b80 <_dtoa_r+0x6c4>)
 8008a08:	f7f8 fedc 	bl	80017c4 <__aeabi_dsub>
 8008a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a10:	f7f7 fd18 	bl	8000444 <__aeabi_dcmplt>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d000      	beq.n	8008a1a <_dtoa_r+0x55e>
 8008a18:	e0c3      	b.n	8008ba2 <_dtoa_r+0x6e6>
 8008a1a:	9b08      	ldr	r3, [sp, #32]
 8008a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a1e:	1aeb      	subs	r3, r5, r3
 8008a20:	429a      	cmp	r2, r3
 8008a22:	dc00      	bgt.n	8008a26 <_dtoa_r+0x56a>
 8008a24:	e777      	b.n	8008916 <_dtoa_r+0x45a>
 8008a26:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4b55      	ldr	r3, [pc, #340]	; (8008b84 <_dtoa_r+0x6c8>)
 8008a2e:	f7f8 fc57 	bl	80012e0 <__aeabi_dmul>
 8008a32:	2200      	movs	r2, #0
 8008a34:	900e      	str	r0, [sp, #56]	; 0x38
 8008a36:	910f      	str	r1, [sp, #60]	; 0x3c
 8008a38:	9806      	ldr	r0, [sp, #24]
 8008a3a:	9907      	ldr	r1, [sp, #28]
 8008a3c:	4b51      	ldr	r3, [pc, #324]	; (8008b84 <_dtoa_r+0x6c8>)
 8008a3e:	f7f8 fc4f 	bl	80012e0 <__aeabi_dmul>
 8008a42:	9515      	str	r5, [sp, #84]	; 0x54
 8008a44:	9006      	str	r0, [sp, #24]
 8008a46:	9107      	str	r1, [sp, #28]
 8008a48:	e7c1      	b.n	80089ce <_dtoa_r+0x512>
 8008a4a:	0020      	movs	r0, r4
 8008a4c:	0029      	movs	r1, r5
 8008a4e:	f7f8 fc47 	bl	80012e0 <__aeabi_dmul>
 8008a52:	9c08      	ldr	r4, [sp, #32]
 8008a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a56:	0023      	movs	r3, r4
 8008a58:	4694      	mov	ip, r2
 8008a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a5c:	910f      	str	r1, [sp, #60]	; 0x3c
 8008a5e:	4463      	add	r3, ip
 8008a60:	9315      	str	r3, [sp, #84]	; 0x54
 8008a62:	9806      	ldr	r0, [sp, #24]
 8008a64:	9907      	ldr	r1, [sp, #28]
 8008a66:	f7f9 fa11 	bl	8001e8c <__aeabi_d2iz>
 8008a6a:	0005      	movs	r5, r0
 8008a6c:	f7f9 fa44 	bl	8001ef8 <__aeabi_i2d>
 8008a70:	000b      	movs	r3, r1
 8008a72:	0002      	movs	r2, r0
 8008a74:	9806      	ldr	r0, [sp, #24]
 8008a76:	9907      	ldr	r1, [sp, #28]
 8008a78:	f7f8 fea4 	bl	80017c4 <__aeabi_dsub>
 8008a7c:	3530      	adds	r5, #48	; 0x30
 8008a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a80:	7025      	strb	r5, [r4, #0]
 8008a82:	3401      	adds	r4, #1
 8008a84:	9006      	str	r0, [sp, #24]
 8008a86:	9107      	str	r1, [sp, #28]
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d12a      	bne.n	8008ae2 <_dtoa_r+0x626>
 8008a8c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a90:	9a08      	ldr	r2, [sp, #32]
 8008a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a94:	4694      	mov	ip, r2
 8008a96:	4463      	add	r3, ip
 8008a98:	2200      	movs	r2, #0
 8008a9a:	001d      	movs	r5, r3
 8008a9c:	4b3f      	ldr	r3, [pc, #252]	; (8008b9c <_dtoa_r+0x6e0>)
 8008a9e:	f7f7 fcf9 	bl	8000494 <__aeabi_dadd>
 8008aa2:	0002      	movs	r2, r0
 8008aa4:	000b      	movs	r3, r1
 8008aa6:	9806      	ldr	r0, [sp, #24]
 8008aa8:	9907      	ldr	r1, [sp, #28]
 8008aaa:	f7f7 fcdf 	bl	800046c <__aeabi_dcmpgt>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d000      	beq.n	8008ab4 <_dtoa_r+0x5f8>
 8008ab2:	e076      	b.n	8008ba2 <_dtoa_r+0x6e6>
 8008ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab8:	2000      	movs	r0, #0
 8008aba:	4938      	ldr	r1, [pc, #224]	; (8008b9c <_dtoa_r+0x6e0>)
 8008abc:	f7f8 fe82 	bl	80017c4 <__aeabi_dsub>
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	000b      	movs	r3, r1
 8008ac4:	9806      	ldr	r0, [sp, #24]
 8008ac6:	9907      	ldr	r1, [sp, #28]
 8008ac8:	f7f7 fcbc 	bl	8000444 <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d100      	bne.n	8008ad2 <_dtoa_r+0x616>
 8008ad0:	e721      	b.n	8008916 <_dtoa_r+0x45a>
 8008ad2:	1e6b      	subs	r3, r5, #1
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	2a30      	cmp	r2, #48	; 0x30
 8008ad8:	d001      	beq.n	8008ade <_dtoa_r+0x622>
 8008ada:	0037      	movs	r7, r6
 8008adc:	e03f      	b.n	8008b5e <_dtoa_r+0x6a2>
 8008ade:	001d      	movs	r5, r3
 8008ae0:	e7f7      	b.n	8008ad2 <_dtoa_r+0x616>
 8008ae2:	9806      	ldr	r0, [sp, #24]
 8008ae4:	9907      	ldr	r1, [sp, #28]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <_dtoa_r+0x6c8>)
 8008aea:	f7f8 fbf9 	bl	80012e0 <__aeabi_dmul>
 8008aee:	9006      	str	r0, [sp, #24]
 8008af0:	9107      	str	r1, [sp, #28]
 8008af2:	e7b6      	b.n	8008a62 <_dtoa_r+0x5a6>
 8008af4:	9e08      	ldr	r6, [sp, #32]
 8008af6:	9a04      	ldr	r2, [sp, #16]
 8008af8:	9b05      	ldr	r3, [sp, #20]
 8008afa:	9806      	ldr	r0, [sp, #24]
 8008afc:	9907      	ldr	r1, [sp, #28]
 8008afe:	f7f7 ffe5 	bl	8000acc <__aeabi_ddiv>
 8008b02:	f7f9 f9c3 	bl	8001e8c <__aeabi_d2iz>
 8008b06:	0004      	movs	r4, r0
 8008b08:	f7f9 f9f6 	bl	8001ef8 <__aeabi_i2d>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	f7f8 fbe6 	bl	80012e0 <__aeabi_dmul>
 8008b14:	0002      	movs	r2, r0
 8008b16:	000b      	movs	r3, r1
 8008b18:	9806      	ldr	r0, [sp, #24]
 8008b1a:	9907      	ldr	r1, [sp, #28]
 8008b1c:	f7f8 fe52 	bl	80017c4 <__aeabi_dsub>
 8008b20:	0023      	movs	r3, r4
 8008b22:	3330      	adds	r3, #48	; 0x30
 8008b24:	7033      	strb	r3, [r6, #0]
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	9b08      	ldr	r3, [sp, #32]
 8008b2a:	1c75      	adds	r5, r6, #1
 8008b2c:	1aeb      	subs	r3, r5, r3
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d148      	bne.n	8008bc4 <_dtoa_r+0x708>
 8008b32:	0002      	movs	r2, r0
 8008b34:	000b      	movs	r3, r1
 8008b36:	f7f7 fcad 	bl	8000494 <__aeabi_dadd>
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	9006      	str	r0, [sp, #24]
 8008b40:	9107      	str	r1, [sp, #28]
 8008b42:	f7f7 fc93 	bl	800046c <__aeabi_dcmpgt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d12a      	bne.n	8008ba0 <_dtoa_r+0x6e4>
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	9b05      	ldr	r3, [sp, #20]
 8008b4e:	9806      	ldr	r0, [sp, #24]
 8008b50:	9907      	ldr	r1, [sp, #28]
 8008b52:	f7f7 fc71 	bl	8000438 <__aeabi_dcmpeq>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d001      	beq.n	8008b5e <_dtoa_r+0x6a2>
 8008b5a:	07e3      	lsls	r3, r4, #31
 8008b5c:	d420      	bmi.n	8008ba0 <_dtoa_r+0x6e4>
 8008b5e:	9903      	ldr	r1, [sp, #12]
 8008b60:	9802      	ldr	r0, [sp, #8]
 8008b62:	f000 fad9 	bl	8009118 <_Bfree>
 8008b66:	2300      	movs	r3, #0
 8008b68:	702b      	strb	r3, [r5, #0]
 8008b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b6c:	3701      	adds	r7, #1
 8008b6e:	601f      	str	r7, [r3, #0]
 8008b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d100      	bne.n	8008b78 <_dtoa_r+0x6bc>
 8008b76:	e4e6      	b.n	8008546 <_dtoa_r+0x8a>
 8008b78:	601d      	str	r5, [r3, #0]
 8008b7a:	e4e4      	b.n	8008546 <_dtoa_r+0x8a>
 8008b7c:	08009940 	.word	0x08009940
 8008b80:	3ff00000 	.word	0x3ff00000
 8008b84:	40240000 	.word	0x40240000
 8008b88:	401c0000 	.word	0x401c0000
 8008b8c:	fcc00000 	.word	0xfcc00000
 8008b90:	40140000 	.word	0x40140000
 8008b94:	7cc00000 	.word	0x7cc00000
 8008b98:	08009918 	.word	0x08009918
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	003e      	movs	r6, r7
 8008ba2:	1e6b      	subs	r3, r5, #1
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	2a39      	cmp	r2, #57	; 0x39
 8008ba8:	d106      	bne.n	8008bb8 <_dtoa_r+0x6fc>
 8008baa:	9a08      	ldr	r2, [sp, #32]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d107      	bne.n	8008bc0 <_dtoa_r+0x704>
 8008bb0:	2330      	movs	r3, #48	; 0x30
 8008bb2:	7013      	strb	r3, [r2, #0]
 8008bb4:	0013      	movs	r3, r2
 8008bb6:	3601      	adds	r6, #1
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	3201      	adds	r2, #1
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e78c      	b.n	8008ada <_dtoa_r+0x61e>
 8008bc0:	001d      	movs	r5, r3
 8008bc2:	e7ee      	b.n	8008ba2 <_dtoa_r+0x6e6>
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4ba4      	ldr	r3, [pc, #656]	; (8008e58 <_dtoa_r+0x99c>)
 8008bc8:	f7f8 fb8a 	bl	80012e0 <__aeabi_dmul>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9006      	str	r0, [sp, #24]
 8008bd2:	9107      	str	r1, [sp, #28]
 8008bd4:	002e      	movs	r6, r5
 8008bd6:	f7f7 fc2f 	bl	8000438 <__aeabi_dcmpeq>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d08b      	beq.n	8008af6 <_dtoa_r+0x63a>
 8008bde:	e7be      	b.n	8008b5e <_dtoa_r+0x6a2>
 8008be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d100      	bne.n	8008be8 <_dtoa_r+0x72c>
 8008be6:	e0da      	b.n	8008d9e <_dtoa_r+0x8e2>
 8008be8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bea:	2a01      	cmp	r2, #1
 8008bec:	dd00      	ble.n	8008bf0 <_dtoa_r+0x734>
 8008bee:	e0bd      	b.n	8008d6c <_dtoa_r+0x8b0>
 8008bf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d100      	bne.n	8008bf8 <_dtoa_r+0x73c>
 8008bf6:	e0b5      	b.n	8008d64 <_dtoa_r+0x8a8>
 8008bf8:	4a98      	ldr	r2, [pc, #608]	; (8008e5c <_dtoa_r+0x9a0>)
 8008bfa:	189b      	adds	r3, r3, r2
 8008bfc:	9d04      	ldr	r5, [sp, #16]
 8008bfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c02:	2101      	movs	r1, #1
 8008c04:	18d2      	adds	r2, r2, r3
 8008c06:	920a      	str	r2, [sp, #40]	; 0x28
 8008c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c0a:	9802      	ldr	r0, [sp, #8]
 8008c0c:	18d3      	adds	r3, r2, r3
 8008c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c10:	f000 fb22 	bl	8009258 <__i2b>
 8008c14:	0006      	movs	r6, r0
 8008c16:	2c00      	cmp	r4, #0
 8008c18:	dd0e      	ble.n	8008c38 <_dtoa_r+0x77c>
 8008c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd0b      	ble.n	8008c38 <_dtoa_r+0x77c>
 8008c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c22:	0023      	movs	r3, r4
 8008c24:	4294      	cmp	r4, r2
 8008c26:	dd00      	ble.n	8008c2a <_dtoa_r+0x76e>
 8008c28:	0013      	movs	r3, r2
 8008c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2c:	1ae4      	subs	r4, r4, r3
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	920a      	str	r2, [sp, #40]	; 0x28
 8008c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c38:	9b04      	ldr	r3, [sp, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01f      	beq.n	8008c7e <_dtoa_r+0x7c2>
 8008c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d100      	bne.n	8008c46 <_dtoa_r+0x78a>
 8008c44:	e0af      	b.n	8008da6 <_dtoa_r+0x8ea>
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	d011      	beq.n	8008c6e <_dtoa_r+0x7b2>
 8008c4a:	0031      	movs	r1, r6
 8008c4c:	002a      	movs	r2, r5
 8008c4e:	9802      	ldr	r0, [sp, #8]
 8008c50:	f000 fb9a 	bl	8009388 <__pow5mult>
 8008c54:	9a03      	ldr	r2, [sp, #12]
 8008c56:	0001      	movs	r1, r0
 8008c58:	0006      	movs	r6, r0
 8008c5a:	9802      	ldr	r0, [sp, #8]
 8008c5c:	f000 fb05 	bl	800926a <__multiply>
 8008c60:	9903      	ldr	r1, [sp, #12]
 8008c62:	9010      	str	r0, [sp, #64]	; 0x40
 8008c64:	9802      	ldr	r0, [sp, #8]
 8008c66:	f000 fa57 	bl	8009118 <_Bfree>
 8008c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	1b5a      	subs	r2, r3, r5
 8008c72:	d004      	beq.n	8008c7e <_dtoa_r+0x7c2>
 8008c74:	9903      	ldr	r1, [sp, #12]
 8008c76:	9802      	ldr	r0, [sp, #8]
 8008c78:	f000 fb86 	bl	8009388 <__pow5mult>
 8008c7c:	9003      	str	r0, [sp, #12]
 8008c7e:	2101      	movs	r1, #1
 8008c80:	9802      	ldr	r0, [sp, #8]
 8008c82:	f000 fae9 	bl	8009258 <__i2b>
 8008c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c88:	9004      	str	r0, [sp, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d100      	bne.n	8008c90 <_dtoa_r+0x7d4>
 8008c8e:	e1e3      	b.n	8009058 <_dtoa_r+0xb9c>
 8008c90:	001a      	movs	r2, r3
 8008c92:	0001      	movs	r1, r0
 8008c94:	9802      	ldr	r0, [sp, #8]
 8008c96:	f000 fb77 	bl	8009388 <__pow5mult>
 8008c9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c9c:	9004      	str	r0, [sp, #16]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	dd00      	ble.n	8008ca4 <_dtoa_r+0x7e8>
 8008ca2:	e082      	b.n	8008daa <_dtoa_r+0x8ee>
 8008ca4:	2500      	movs	r5, #0
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	d10e      	bne.n	8008cca <_dtoa_r+0x80e>
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	031b      	lsls	r3, r3, #12
 8008cb0:	42ab      	cmp	r3, r5
 8008cb2:	d10a      	bne.n	8008cca <_dtoa_r+0x80e>
 8008cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cb6:	9a07      	ldr	r2, [sp, #28]
 8008cb8:	4213      	tst	r3, r2
 8008cba:	d006      	beq.n	8008cca <_dtoa_r+0x80e>
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	3501      	adds	r5, #1
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ccc:	2001      	movs	r0, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d16c      	bne.n	8008dac <_dtoa_r+0x8f0>
 8008cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd4:	1818      	adds	r0, r3, r0
 8008cd6:	231f      	movs	r3, #31
 8008cd8:	4018      	ands	r0, r3
 8008cda:	d07e      	beq.n	8008dda <_dtoa_r+0x91e>
 8008cdc:	3301      	adds	r3, #1
 8008cde:	1a1b      	subs	r3, r3, r0
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	dd70      	ble.n	8008dc6 <_dtoa_r+0x90a>
 8008ce4:	231c      	movs	r3, #28
 8008ce6:	1a18      	subs	r0, r3, r0
 8008ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cea:	1824      	adds	r4, r4, r0
 8008cec:	181b      	adds	r3, r3, r0
 8008cee:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf2:	181b      	adds	r3, r3, r0
 8008cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd05      	ble.n	8008d08 <_dtoa_r+0x84c>
 8008cfc:	001a      	movs	r2, r3
 8008cfe:	9903      	ldr	r1, [sp, #12]
 8008d00:	9802      	ldr	r0, [sp, #8]
 8008d02:	f000 fb93 	bl	800942c <__lshift>
 8008d06:	9003      	str	r0, [sp, #12]
 8008d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd05      	ble.n	8008d1a <_dtoa_r+0x85e>
 8008d0e:	001a      	movs	r2, r3
 8008d10:	9904      	ldr	r1, [sp, #16]
 8008d12:	9802      	ldr	r0, [sp, #8]
 8008d14:	f000 fb8a 	bl	800942c <__lshift>
 8008d18:	9004      	str	r0, [sp, #16]
 8008d1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d05e      	beq.n	8008dde <_dtoa_r+0x922>
 8008d20:	9904      	ldr	r1, [sp, #16]
 8008d22:	9803      	ldr	r0, [sp, #12]
 8008d24:	f000 fbd4 	bl	80094d0 <__mcmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	da58      	bge.n	8008dde <_dtoa_r+0x922>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	220a      	movs	r2, #10
 8008d30:	9903      	ldr	r1, [sp, #12]
 8008d32:	9802      	ldr	r0, [sp, #8]
 8008d34:	f000 fa09 	bl	800914a <__multadd>
 8008d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d3a:	3f01      	subs	r7, #1
 8008d3c:	9003      	str	r0, [sp, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d100      	bne.n	8008d44 <_dtoa_r+0x888>
 8008d42:	e190      	b.n	8009066 <_dtoa_r+0xbaa>
 8008d44:	2300      	movs	r3, #0
 8008d46:	0031      	movs	r1, r6
 8008d48:	220a      	movs	r2, #10
 8008d4a:	9802      	ldr	r0, [sp, #8]
 8008d4c:	f000 f9fd 	bl	800914a <__multadd>
 8008d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d52:	0006      	movs	r6, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd00      	ble.n	8008d5a <_dtoa_r+0x89e>
 8008d58:	e088      	b.n	8008e6c <_dtoa_r+0x9b0>
 8008d5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	dc00      	bgt.n	8008d62 <_dtoa_r+0x8a6>
 8008d60:	e084      	b.n	8008e6c <_dtoa_r+0x9b0>
 8008d62:	e044      	b.n	8008dee <_dtoa_r+0x932>
 8008d64:	2336      	movs	r3, #54	; 0x36
 8008d66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	e747      	b.n	8008bfc <_dtoa_r+0x740>
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	1e5d      	subs	r5, r3, #1
 8008d70:	9b04      	ldr	r3, [sp, #16]
 8008d72:	42ab      	cmp	r3, r5
 8008d74:	db08      	blt.n	8008d88 <_dtoa_r+0x8cc>
 8008d76:	1b5d      	subs	r5, r3, r5
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da0c      	bge.n	8008d98 <_dtoa_r+0x8dc>
 8008d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d82:	1a9c      	subs	r4, r3, r2
 8008d84:	2300      	movs	r3, #0
 8008d86:	e73b      	b.n	8008c00 <_dtoa_r+0x744>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	9504      	str	r5, [sp, #16]
 8008d8c:	1aea      	subs	r2, r5, r3
 8008d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d90:	2500      	movs	r5, #0
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	9311      	str	r3, [sp, #68]	; 0x44
 8008d96:	e7ef      	b.n	8008d78 <_dtoa_r+0x8bc>
 8008d98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9c:	e730      	b.n	8008c00 <_dtoa_r+0x744>
 8008d9e:	9d04      	ldr	r5, [sp, #16]
 8008da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008da2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008da4:	e737      	b.n	8008c16 <_dtoa_r+0x75a>
 8008da6:	9a04      	ldr	r2, [sp, #16]
 8008da8:	e764      	b.n	8008c74 <_dtoa_r+0x7b8>
 8008daa:	2500      	movs	r5, #0
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	9310      	str	r3, [sp, #64]	; 0x40
 8008db4:	3303      	adds	r3, #3
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	6858      	ldr	r0, [r3, #4]
 8008dbc:	f000 fa03 	bl	80091c6 <__hi0bits>
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	1a18      	subs	r0, r3, r0
 8008dc4:	e785      	b.n	8008cd2 <_dtoa_r+0x816>
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d095      	beq.n	8008cf6 <_dtoa_r+0x83a>
 8008dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dcc:	331c      	adds	r3, #28
 8008dce:	18d2      	adds	r2, r2, r3
 8008dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dd4:	18e4      	adds	r4, r4, r3
 8008dd6:	18d3      	adds	r3, r2, r3
 8008dd8:	e78c      	b.n	8008cf4 <_dtoa_r+0x838>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	e7f5      	b.n	8008dca <_dtoa_r+0x90e>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dc3d      	bgt.n	8008e60 <_dtoa_r+0x9a4>
 8008de4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	dd3a      	ble.n	8008e60 <_dtoa_r+0x9a4>
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	930c      	str	r3, [sp, #48]	; 0x30
 8008dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10c      	bne.n	8008e0e <_dtoa_r+0x952>
 8008df4:	9904      	ldr	r1, [sp, #16]
 8008df6:	2205      	movs	r2, #5
 8008df8:	9802      	ldr	r0, [sp, #8]
 8008dfa:	f000 f9a6 	bl	800914a <__multadd>
 8008dfe:	9004      	str	r0, [sp, #16]
 8008e00:	0001      	movs	r1, r0
 8008e02:	9803      	ldr	r0, [sp, #12]
 8008e04:	f000 fb64 	bl	80094d0 <__mcmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	dd00      	ble.n	8008e0e <_dtoa_r+0x952>
 8008e0c:	e5af      	b.n	800896e <_dtoa_r+0x4b2>
 8008e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e10:	9d08      	ldr	r5, [sp, #32]
 8008e12:	43df      	mvns	r7, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	9904      	ldr	r1, [sp, #16]
 8008e1a:	9802      	ldr	r0, [sp, #8]
 8008e1c:	f000 f97c 	bl	8009118 <_Bfree>
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	d100      	bne.n	8008e26 <_dtoa_r+0x96a>
 8008e24:	e69b      	b.n	8008b5e <_dtoa_r+0x6a2>
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <_dtoa_r+0x97c>
 8008e2c:	42b3      	cmp	r3, r6
 8008e2e:	d003      	beq.n	8008e38 <_dtoa_r+0x97c>
 8008e30:	0019      	movs	r1, r3
 8008e32:	9802      	ldr	r0, [sp, #8]
 8008e34:	f000 f970 	bl	8009118 <_Bfree>
 8008e38:	0031      	movs	r1, r6
 8008e3a:	9802      	ldr	r0, [sp, #8]
 8008e3c:	f000 f96c 	bl	8009118 <_Bfree>
 8008e40:	e68d      	b.n	8008b5e <_dtoa_r+0x6a2>
 8008e42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	001e      	movs	r6, r3
 8008e48:	e7e1      	b.n	8008e0e <_dtoa_r+0x952>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e7fa      	b.n	8008e44 <_dtoa_r+0x988>
 8008e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e50:	0037      	movs	r7, r6
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	001e      	movs	r6, r3
 8008e56:	e58a      	b.n	800896e <_dtoa_r+0x4b2>
 8008e58:	40240000 	.word	0x40240000
 8008e5c:	00000433 	.word	0x00000433
 8008e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d100      	bne.n	8008e68 <_dtoa_r+0x9ac>
 8008e66:	e0b2      	b.n	8008fce <_dtoa_r+0xb12>
 8008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e6c:	2c00      	cmp	r4, #0
 8008e6e:	dd05      	ble.n	8008e7c <_dtoa_r+0x9c0>
 8008e70:	0031      	movs	r1, r6
 8008e72:	0022      	movs	r2, r4
 8008e74:	9802      	ldr	r0, [sp, #8]
 8008e76:	f000 fad9 	bl	800942c <__lshift>
 8008e7a:	0006      	movs	r6, r0
 8008e7c:	0030      	movs	r0, r6
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	d011      	beq.n	8008ea6 <_dtoa_r+0x9ea>
 8008e82:	6871      	ldr	r1, [r6, #4]
 8008e84:	9802      	ldr	r0, [sp, #8]
 8008e86:	f000 f90f 	bl	80090a8 <_Balloc>
 8008e8a:	0031      	movs	r1, r6
 8008e8c:	0004      	movs	r4, r0
 8008e8e:	6933      	ldr	r3, [r6, #16]
 8008e90:	310c      	adds	r1, #12
 8008e92:	1c9a      	adds	r2, r3, #2
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	300c      	adds	r0, #12
 8008e98:	f7fe ff22 	bl	8007ce0 <memcpy>
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	0021      	movs	r1, r4
 8008ea0:	9802      	ldr	r0, [sp, #8]
 8008ea2:	f000 fac3 	bl	800942c <__lshift>
 8008ea6:	9609      	str	r6, [sp, #36]	; 0x24
 8008ea8:	0006      	movs	r6, r0
 8008eaa:	9b08      	ldr	r3, [sp, #32]
 8008eac:	930a      	str	r3, [sp, #40]	; 0x28
 8008eae:	9904      	ldr	r1, [sp, #16]
 8008eb0:	9803      	ldr	r0, [sp, #12]
 8008eb2:	f7ff fa7c 	bl	80083ae <quorem>
 8008eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eb8:	900d      	str	r0, [sp, #52]	; 0x34
 8008eba:	0004      	movs	r4, r0
 8008ebc:	9803      	ldr	r0, [sp, #12]
 8008ebe:	f000 fb07 	bl	80094d0 <__mcmp>
 8008ec2:	0032      	movs	r2, r6
 8008ec4:	9010      	str	r0, [sp, #64]	; 0x40
 8008ec6:	9904      	ldr	r1, [sp, #16]
 8008ec8:	9802      	ldr	r0, [sp, #8]
 8008eca:	f000 fb1b 	bl	8009504 <__mdiff>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed2:	68c3      	ldr	r3, [r0, #12]
 8008ed4:	3430      	adds	r4, #48	; 0x30
 8008ed6:	0005      	movs	r5, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <_dtoa_r+0xa2a>
 8008edc:	0001      	movs	r1, r0
 8008ede:	9803      	ldr	r0, [sp, #12]
 8008ee0:	f000 faf6 	bl	80094d0 <__mcmp>
 8008ee4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ee6:	0029      	movs	r1, r5
 8008ee8:	9802      	ldr	r0, [sp, #8]
 8008eea:	f000 f915 	bl	8009118 <_Bfree>
 8008eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	d10e      	bne.n	8008f14 <_dtoa_r+0xa58>
 8008ef6:	9a06      	ldr	r2, [sp, #24]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	4213      	tst	r3, r2
 8008efc:	d10a      	bne.n	8008f14 <_dtoa_r+0xa58>
 8008efe:	2c39      	cmp	r4, #57	; 0x39
 8008f00:	d026      	beq.n	8008f50 <_dtoa_r+0xa94>
 8008f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dd01      	ble.n	8008f0c <_dtoa_r+0xa50>
 8008f08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008f0a:	3431      	adds	r4, #49	; 0x31
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0e:	1c5d      	adds	r5, r3, #1
 8008f10:	701c      	strb	r4, [r3, #0]
 8008f12:	e781      	b.n	8008e18 <_dtoa_r+0x95c>
 8008f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	db07      	blt.n	8008f2a <_dtoa_r+0xa6e>
 8008f1a:	001d      	movs	r5, r3
 8008f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f1e:	431d      	orrs	r5, r3
 8008f20:	d122      	bne.n	8008f68 <_dtoa_r+0xaac>
 8008f22:	2301      	movs	r3, #1
 8008f24:	9a06      	ldr	r2, [sp, #24]
 8008f26:	4213      	tst	r3, r2
 8008f28:	d11e      	bne.n	8008f68 <_dtoa_r+0xaac>
 8008f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dded      	ble.n	8008f0c <_dtoa_r+0xa50>
 8008f30:	9903      	ldr	r1, [sp, #12]
 8008f32:	2201      	movs	r2, #1
 8008f34:	9802      	ldr	r0, [sp, #8]
 8008f36:	f000 fa79 	bl	800942c <__lshift>
 8008f3a:	9904      	ldr	r1, [sp, #16]
 8008f3c:	9003      	str	r0, [sp, #12]
 8008f3e:	f000 fac7 	bl	80094d0 <__mcmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	dc02      	bgt.n	8008f4c <_dtoa_r+0xa90>
 8008f46:	d1e1      	bne.n	8008f0c <_dtoa_r+0xa50>
 8008f48:	07e3      	lsls	r3, r4, #31
 8008f4a:	d5df      	bpl.n	8008f0c <_dtoa_r+0xa50>
 8008f4c:	2c39      	cmp	r4, #57	; 0x39
 8008f4e:	d1db      	bne.n	8008f08 <_dtoa_r+0xa4c>
 8008f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f54:	1c5d      	adds	r5, r3, #1
 8008f56:	2339      	movs	r3, #57	; 0x39
 8008f58:	7013      	strb	r3, [r2, #0]
 8008f5a:	1e6b      	subs	r3, r5, #1
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	2a39      	cmp	r2, #57	; 0x39
 8008f60:	d067      	beq.n	8009032 <_dtoa_r+0xb76>
 8008f62:	3201      	adds	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e757      	b.n	8008e18 <_dtoa_r+0x95c>
 8008f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6a:	1c5d      	adds	r5, r3, #1
 8008f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd04      	ble.n	8008f7c <_dtoa_r+0xac0>
 8008f72:	2c39      	cmp	r4, #57	; 0x39
 8008f74:	d0ec      	beq.n	8008f50 <_dtoa_r+0xa94>
 8008f76:	3401      	adds	r4, #1
 8008f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7a:	e7c9      	b.n	8008f10 <_dtoa_r+0xa54>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f80:	701c      	strb	r4, [r3, #0]
 8008f82:	9b08      	ldr	r3, [sp, #32]
 8008f84:	1aeb      	subs	r3, r5, r3
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d03e      	beq.n	8009008 <_dtoa_r+0xb4c>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	9903      	ldr	r1, [sp, #12]
 8008f90:	9802      	ldr	r0, [sp, #8]
 8008f92:	f000 f8da 	bl	800914a <__multadd>
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	9003      	str	r0, [sp, #12]
 8008f9a:	42b3      	cmp	r3, r6
 8008f9c:	d109      	bne.n	8008fb2 <_dtoa_r+0xaf6>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa4:	9802      	ldr	r0, [sp, #8]
 8008fa6:	f000 f8d0 	bl	800914a <__multadd>
 8008faa:	9009      	str	r0, [sp, #36]	; 0x24
 8008fac:	0006      	movs	r6, r0
 8008fae:	950a      	str	r5, [sp, #40]	; 0x28
 8008fb0:	e77d      	b.n	8008eae <_dtoa_r+0x9f2>
 8008fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	9802      	ldr	r0, [sp, #8]
 8008fba:	f000 f8c6 	bl	800914a <__multadd>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9009      	str	r0, [sp, #36]	; 0x24
 8008fc2:	220a      	movs	r2, #10
 8008fc4:	0031      	movs	r1, r6
 8008fc6:	9802      	ldr	r0, [sp, #8]
 8008fc8:	f000 f8bf 	bl	800914a <__multadd>
 8008fcc:	e7ee      	b.n	8008fac <_dtoa_r+0xaf0>
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	9306      	str	r3, [sp, #24]
 8008fd6:	9904      	ldr	r1, [sp, #16]
 8008fd8:	9803      	ldr	r0, [sp, #12]
 8008fda:	f7ff f9e8 	bl	80083ae <quorem>
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	3030      	adds	r0, #48	; 0x30
 8008fe2:	1c5d      	adds	r5, r3, #1
 8008fe4:	7018      	strb	r0, [r3, #0]
 8008fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	0004      	movs	r4, r0
 8008fec:	1aeb      	subs	r3, r5, r3
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	dd08      	ble.n	8009004 <_dtoa_r+0xb48>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	220a      	movs	r2, #10
 8008ff6:	9903      	ldr	r1, [sp, #12]
 8008ff8:	9802      	ldr	r0, [sp, #8]
 8008ffa:	f000 f8a6 	bl	800914a <__multadd>
 8008ffe:	9506      	str	r5, [sp, #24]
 8009000:	9003      	str	r0, [sp, #12]
 8009002:	e7e8      	b.n	8008fd6 <_dtoa_r+0xb1a>
 8009004:	2300      	movs	r3, #0
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	9802      	ldr	r0, [sp, #8]
 800900e:	f000 fa0d 	bl	800942c <__lshift>
 8009012:	9904      	ldr	r1, [sp, #16]
 8009014:	9003      	str	r0, [sp, #12]
 8009016:	f000 fa5b 	bl	80094d0 <__mcmp>
 800901a:	2800      	cmp	r0, #0
 800901c:	dc9d      	bgt.n	8008f5a <_dtoa_r+0xa9e>
 800901e:	d101      	bne.n	8009024 <_dtoa_r+0xb68>
 8009020:	07e3      	lsls	r3, r4, #31
 8009022:	d49a      	bmi.n	8008f5a <_dtoa_r+0xa9e>
 8009024:	1e6b      	subs	r3, r5, #1
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	2a30      	cmp	r2, #48	; 0x30
 800902a:	d000      	beq.n	800902e <_dtoa_r+0xb72>
 800902c:	e6f4      	b.n	8008e18 <_dtoa_r+0x95c>
 800902e:	001d      	movs	r5, r3
 8009030:	e7f8      	b.n	8009024 <_dtoa_r+0xb68>
 8009032:	9a08      	ldr	r2, [sp, #32]
 8009034:	429a      	cmp	r2, r3
 8009036:	d103      	bne.n	8009040 <_dtoa_r+0xb84>
 8009038:	2331      	movs	r3, #49	; 0x31
 800903a:	3701      	adds	r7, #1
 800903c:	7013      	strb	r3, [r2, #0]
 800903e:	e6eb      	b.n	8008e18 <_dtoa_r+0x95c>
 8009040:	001d      	movs	r5, r3
 8009042:	e78a      	b.n	8008f5a <_dtoa_r+0xa9e>
 8009044:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <_dtoa_r+0xbb8>)
 8009046:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009048:	9308      	str	r3, [sp, #32]
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <_dtoa_r+0xbbc>)
 800904c:	2a00      	cmp	r2, #0
 800904e:	d001      	beq.n	8009054 <_dtoa_r+0xb98>
 8009050:	f7ff fa77 	bl	8008542 <_dtoa_r+0x86>
 8009054:	f7ff fa77 	bl	8008546 <_dtoa_r+0x8a>
 8009058:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800905a:	2b01      	cmp	r3, #1
 800905c:	dc00      	bgt.n	8009060 <_dtoa_r+0xba4>
 800905e:	e621      	b.n	8008ca4 <_dtoa_r+0x7e8>
 8009060:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009062:	2001      	movs	r0, #1
 8009064:	e635      	b.n	8008cd2 <_dtoa_r+0x816>
 8009066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	dcb2      	bgt.n	8008fd2 <_dtoa_r+0xb16>
 800906c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800906e:	2b02      	cmp	r3, #2
 8009070:	ddaf      	ble.n	8008fd2 <_dtoa_r+0xb16>
 8009072:	e6bc      	b.n	8008dee <_dtoa_r+0x932>
 8009074:	0800990a 	.word	0x0800990a
 8009078:	08009912 	.word	0x08009912

0800907c <_localeconv_r>:
 800907c:	4b03      	ldr	r3, [pc, #12]	; (800908c <_localeconv_r+0x10>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a18      	ldr	r0, [r3, #32]
 8009082:	2800      	cmp	r0, #0
 8009084:	d100      	bne.n	8009088 <_localeconv_r+0xc>
 8009086:	4802      	ldr	r0, [pc, #8]	; (8009090 <_localeconv_r+0x14>)
 8009088:	30f0      	adds	r0, #240	; 0xf0
 800908a:	4770      	bx	lr
 800908c:	20000010 	.word	0x20000010
 8009090:	20000074 	.word	0x20000074

08009094 <malloc>:
 8009094:	b510      	push	{r4, lr}
 8009096:	4b03      	ldr	r3, [pc, #12]	; (80090a4 <malloc+0x10>)
 8009098:	0001      	movs	r1, r0
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	f000 faf8 	bl	8009690 <_malloc_r>
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	20000010 	.word	0x20000010

080090a8 <_Balloc>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090ac:	0004      	movs	r4, r0
 80090ae:	000d      	movs	r5, r1
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d107      	bne.n	80090c4 <_Balloc+0x1c>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7ff ffed 	bl	8009094 <malloc>
 80090ba:	6260      	str	r0, [r4, #36]	; 0x24
 80090bc:	6046      	str	r6, [r0, #4]
 80090be:	6086      	str	r6, [r0, #8]
 80090c0:	6006      	str	r6, [r0, #0]
 80090c2:	60c6      	str	r6, [r0, #12]
 80090c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090c6:	68f3      	ldr	r3, [r6, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d013      	beq.n	80090f4 <_Balloc+0x4c>
 80090cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ce:	00aa      	lsls	r2, r5, #2
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	189b      	adds	r3, r3, r2
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d118      	bne.n	800910c <_Balloc+0x64>
 80090da:	2101      	movs	r1, #1
 80090dc:	000e      	movs	r6, r1
 80090de:	40ae      	lsls	r6, r5
 80090e0:	1d72      	adds	r2, r6, #5
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	0020      	movs	r0, r4
 80090e6:	f000 fac5 	bl	8009674 <_calloc_r>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d00c      	beq.n	8009108 <_Balloc+0x60>
 80090ee:	6045      	str	r5, [r0, #4]
 80090f0:	6086      	str	r6, [r0, #8]
 80090f2:	e00d      	b.n	8009110 <_Balloc+0x68>
 80090f4:	2221      	movs	r2, #33	; 0x21
 80090f6:	2104      	movs	r1, #4
 80090f8:	0020      	movs	r0, r4
 80090fa:	f000 fabb 	bl	8009674 <_calloc_r>
 80090fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009100:	60f0      	str	r0, [r6, #12]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e1      	bne.n	80090cc <_Balloc+0x24>
 8009108:	2000      	movs	r0, #0
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	6802      	ldr	r2, [r0, #0]
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	2300      	movs	r3, #0
 8009112:	6103      	str	r3, [r0, #16]
 8009114:	60c3      	str	r3, [r0, #12]
 8009116:	e7f8      	b.n	800910a <_Balloc+0x62>

08009118 <_Bfree>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800911c:	0006      	movs	r6, r0
 800911e:	000d      	movs	r5, r1
 8009120:	2c00      	cmp	r4, #0
 8009122:	d107      	bne.n	8009134 <_Bfree+0x1c>
 8009124:	2010      	movs	r0, #16
 8009126:	f7ff ffb5 	bl	8009094 <malloc>
 800912a:	6270      	str	r0, [r6, #36]	; 0x24
 800912c:	6044      	str	r4, [r0, #4]
 800912e:	6084      	str	r4, [r0, #8]
 8009130:	6004      	str	r4, [r0, #0]
 8009132:	60c4      	str	r4, [r0, #12]
 8009134:	2d00      	cmp	r5, #0
 8009136:	d007      	beq.n	8009148 <_Bfree+0x30>
 8009138:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800913a:	686a      	ldr	r2, [r5, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	0092      	lsls	r2, r2, #2
 8009140:	189b      	adds	r3, r3, r2
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	602a      	str	r2, [r5, #0]
 8009146:	601d      	str	r5, [r3, #0]
 8009148:	bd70      	pop	{r4, r5, r6, pc}

0800914a <__multadd>:
 800914a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914c:	001e      	movs	r6, r3
 800914e:	2314      	movs	r3, #20
 8009150:	469c      	mov	ip, r3
 8009152:	0007      	movs	r7, r0
 8009154:	000c      	movs	r4, r1
 8009156:	2000      	movs	r0, #0
 8009158:	690d      	ldr	r5, [r1, #16]
 800915a:	448c      	add	ip, r1
 800915c:	4663      	mov	r3, ip
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3001      	adds	r0, #1
 8009162:	b299      	uxth	r1, r3
 8009164:	4663      	mov	r3, ip
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4351      	muls	r1, r2
 800916a:	0c1b      	lsrs	r3, r3, #16
 800916c:	4353      	muls	r3, r2
 800916e:	1989      	adds	r1, r1, r6
 8009170:	0c0e      	lsrs	r6, r1, #16
 8009172:	199b      	adds	r3, r3, r6
 8009174:	b289      	uxth	r1, r1
 8009176:	0c1e      	lsrs	r6, r3, #16
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	185b      	adds	r3, r3, r1
 800917c:	4661      	mov	r1, ip
 800917e:	c108      	stmia	r1!, {r3}
 8009180:	468c      	mov	ip, r1
 8009182:	4285      	cmp	r5, r0
 8009184:	dcea      	bgt.n	800915c <__multadd+0x12>
 8009186:	2e00      	cmp	r6, #0
 8009188:	d01b      	beq.n	80091c2 <__multadd+0x78>
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	42ab      	cmp	r3, r5
 800918e:	dc12      	bgt.n	80091b6 <__multadd+0x6c>
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	0038      	movs	r0, r7
 8009194:	1c59      	adds	r1, r3, #1
 8009196:	f7ff ff87 	bl	80090a8 <_Balloc>
 800919a:	0021      	movs	r1, r4
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	9001      	str	r0, [sp, #4]
 80091a0:	1c9a      	adds	r2, r3, #2
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	310c      	adds	r1, #12
 80091a6:	300c      	adds	r0, #12
 80091a8:	f7fe fd9a 	bl	8007ce0 <memcpy>
 80091ac:	0021      	movs	r1, r4
 80091ae:	0038      	movs	r0, r7
 80091b0:	f7ff ffb2 	bl	8009118 <_Bfree>
 80091b4:	9c01      	ldr	r4, [sp, #4]
 80091b6:	1d2b      	adds	r3, r5, #4
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	18e3      	adds	r3, r4, r3
 80091bc:	3501      	adds	r5, #1
 80091be:	605e      	str	r6, [r3, #4]
 80091c0:	6125      	str	r5, [r4, #16]
 80091c2:	0020      	movs	r0, r4
 80091c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080091c6 <__hi0bits>:
 80091c6:	0003      	movs	r3, r0
 80091c8:	0c02      	lsrs	r2, r0, #16
 80091ca:	2000      	movs	r0, #0
 80091cc:	4282      	cmp	r2, r0
 80091ce:	d101      	bne.n	80091d4 <__hi0bits+0xe>
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	3010      	adds	r0, #16
 80091d4:	0e1a      	lsrs	r2, r3, #24
 80091d6:	d101      	bne.n	80091dc <__hi0bits+0x16>
 80091d8:	3008      	adds	r0, #8
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	0f1a      	lsrs	r2, r3, #28
 80091de:	d101      	bne.n	80091e4 <__hi0bits+0x1e>
 80091e0:	3004      	adds	r0, #4
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	0f9a      	lsrs	r2, r3, #30
 80091e6:	d101      	bne.n	80091ec <__hi0bits+0x26>
 80091e8:	3002      	adds	r0, #2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db03      	blt.n	80091f8 <__hi0bits+0x32>
 80091f0:	3001      	adds	r0, #1
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	d400      	bmi.n	80091f8 <__hi0bits+0x32>
 80091f6:	2020      	movs	r0, #32
 80091f8:	4770      	bx	lr

080091fa <__lo0bits>:
 80091fa:	2207      	movs	r2, #7
 80091fc:	6803      	ldr	r3, [r0, #0]
 80091fe:	b510      	push	{r4, lr}
 8009200:	0001      	movs	r1, r0
 8009202:	401a      	ands	r2, r3
 8009204:	d00d      	beq.n	8009222 <__lo0bits+0x28>
 8009206:	2401      	movs	r4, #1
 8009208:	2000      	movs	r0, #0
 800920a:	4223      	tst	r3, r4
 800920c:	d105      	bne.n	800921a <__lo0bits+0x20>
 800920e:	3002      	adds	r0, #2
 8009210:	4203      	tst	r3, r0
 8009212:	d003      	beq.n	800921c <__lo0bits+0x22>
 8009214:	40e3      	lsrs	r3, r4
 8009216:	0020      	movs	r0, r4
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	bd10      	pop	{r4, pc}
 800921c:	089b      	lsrs	r3, r3, #2
 800921e:	600b      	str	r3, [r1, #0]
 8009220:	e7fb      	b.n	800921a <__lo0bits+0x20>
 8009222:	b29c      	uxth	r4, r3
 8009224:	0010      	movs	r0, r2
 8009226:	2c00      	cmp	r4, #0
 8009228:	d101      	bne.n	800922e <__lo0bits+0x34>
 800922a:	2010      	movs	r0, #16
 800922c:	0c1b      	lsrs	r3, r3, #16
 800922e:	b2da      	uxtb	r2, r3
 8009230:	2a00      	cmp	r2, #0
 8009232:	d101      	bne.n	8009238 <__lo0bits+0x3e>
 8009234:	3008      	adds	r0, #8
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	071a      	lsls	r2, r3, #28
 800923a:	d101      	bne.n	8009240 <__lo0bits+0x46>
 800923c:	3004      	adds	r0, #4
 800923e:	091b      	lsrs	r3, r3, #4
 8009240:	079a      	lsls	r2, r3, #30
 8009242:	d101      	bne.n	8009248 <__lo0bits+0x4e>
 8009244:	3002      	adds	r0, #2
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	07da      	lsls	r2, r3, #31
 800924a:	d4e8      	bmi.n	800921e <__lo0bits+0x24>
 800924c:	085b      	lsrs	r3, r3, #1
 800924e:	d001      	beq.n	8009254 <__lo0bits+0x5a>
 8009250:	3001      	adds	r0, #1
 8009252:	e7e4      	b.n	800921e <__lo0bits+0x24>
 8009254:	2020      	movs	r0, #32
 8009256:	e7e0      	b.n	800921a <__lo0bits+0x20>

08009258 <__i2b>:
 8009258:	b510      	push	{r4, lr}
 800925a:	000c      	movs	r4, r1
 800925c:	2101      	movs	r1, #1
 800925e:	f7ff ff23 	bl	80090a8 <_Balloc>
 8009262:	2301      	movs	r3, #1
 8009264:	6144      	str	r4, [r0, #20]
 8009266:	6103      	str	r3, [r0, #16]
 8009268:	bd10      	pop	{r4, pc}

0800926a <__multiply>:
 800926a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926c:	690b      	ldr	r3, [r1, #16]
 800926e:	0014      	movs	r4, r2
 8009270:	6912      	ldr	r2, [r2, #16]
 8009272:	b089      	sub	sp, #36	; 0x24
 8009274:	000d      	movs	r5, r1
 8009276:	4293      	cmp	r3, r2
 8009278:	da01      	bge.n	800927e <__multiply+0x14>
 800927a:	0025      	movs	r5, r4
 800927c:	000c      	movs	r4, r1
 800927e:	692f      	ldr	r7, [r5, #16]
 8009280:	6926      	ldr	r6, [r4, #16]
 8009282:	6869      	ldr	r1, [r5, #4]
 8009284:	19bb      	adds	r3, r7, r6
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	68ab      	ldr	r3, [r5, #8]
 800928a:	19ba      	adds	r2, r7, r6
 800928c:	4293      	cmp	r3, r2
 800928e:	da00      	bge.n	8009292 <__multiply+0x28>
 8009290:	3101      	adds	r1, #1
 8009292:	f7ff ff09 	bl	80090a8 <_Balloc>
 8009296:	0002      	movs	r2, r0
 8009298:	19bb      	adds	r3, r7, r6
 800929a:	3214      	adds	r2, #20
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	18d3      	adds	r3, r2, r3
 80092a0:	469c      	mov	ip, r3
 80092a2:	2100      	movs	r1, #0
 80092a4:	0013      	movs	r3, r2
 80092a6:	9004      	str	r0, [sp, #16]
 80092a8:	4563      	cmp	r3, ip
 80092aa:	d31d      	bcc.n	80092e8 <__multiply+0x7e>
 80092ac:	3514      	adds	r5, #20
 80092ae:	00bf      	lsls	r7, r7, #2
 80092b0:	19eb      	adds	r3, r5, r7
 80092b2:	3414      	adds	r4, #20
 80092b4:	00b6      	lsls	r6, r6, #2
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	19a3      	adds	r3, r4, r6
 80092ba:	9503      	str	r5, [sp, #12]
 80092bc:	9401      	str	r4, [sp, #4]
 80092be:	9307      	str	r3, [sp, #28]
 80092c0:	9b07      	ldr	r3, [sp, #28]
 80092c2:	9901      	ldr	r1, [sp, #4]
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d311      	bcc.n	80092ec <__multiply+0x82>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dd06      	ble.n	80092dc <__multiply+0x72>
 80092ce:	2304      	movs	r3, #4
 80092d0:	425b      	negs	r3, r3
 80092d2:	449c      	add	ip, r3
 80092d4:	4663      	mov	r3, ip
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d051      	beq.n	8009380 <__multiply+0x116>
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	9a02      	ldr	r2, [sp, #8]
 80092e0:	0018      	movs	r0, r3
 80092e2:	611a      	str	r2, [r3, #16]
 80092e4:	b009      	add	sp, #36	; 0x24
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e8:	c302      	stmia	r3!, {r1}
 80092ea:	e7dd      	b.n	80092a8 <__multiply+0x3e>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	b298      	uxth	r0, r3
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d01c      	beq.n	8009330 <__multiply+0xc6>
 80092f6:	0015      	movs	r5, r2
 80092f8:	2600      	movs	r6, #0
 80092fa:	9f03      	ldr	r7, [sp, #12]
 80092fc:	cf02      	ldmia	r7!, {r1}
 80092fe:	682c      	ldr	r4, [r5, #0]
 8009300:	b28b      	uxth	r3, r1
 8009302:	4343      	muls	r3, r0
 8009304:	0c09      	lsrs	r1, r1, #16
 8009306:	4341      	muls	r1, r0
 8009308:	b2a4      	uxth	r4, r4
 800930a:	191b      	adds	r3, r3, r4
 800930c:	199b      	adds	r3, r3, r6
 800930e:	000e      	movs	r6, r1
 8009310:	6829      	ldr	r1, [r5, #0]
 8009312:	9506      	str	r5, [sp, #24]
 8009314:	0c09      	lsrs	r1, r1, #16
 8009316:	1871      	adds	r1, r6, r1
 8009318:	0c1e      	lsrs	r6, r3, #16
 800931a:	1989      	adds	r1, r1, r6
 800931c:	0c0e      	lsrs	r6, r1, #16
 800931e:	b29b      	uxth	r3, r3
 8009320:	0409      	lsls	r1, r1, #16
 8009322:	430b      	orrs	r3, r1
 8009324:	c508      	stmia	r5!, {r3}
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	42bb      	cmp	r3, r7
 800932a:	d8e7      	bhi.n	80092fc <__multiply+0x92>
 800932c:	9b06      	ldr	r3, [sp, #24]
 800932e:	605e      	str	r6, [r3, #4]
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	0c1d      	lsrs	r5, r3, #16
 8009336:	d01e      	beq.n	8009376 <__multiply+0x10c>
 8009338:	0010      	movs	r0, r2
 800933a:	2700      	movs	r7, #0
 800933c:	6813      	ldr	r3, [r2, #0]
 800933e:	9e03      	ldr	r6, [sp, #12]
 8009340:	6831      	ldr	r1, [r6, #0]
 8009342:	6804      	ldr	r4, [r0, #0]
 8009344:	b289      	uxth	r1, r1
 8009346:	4369      	muls	r1, r5
 8009348:	0c24      	lsrs	r4, r4, #16
 800934a:	1909      	adds	r1, r1, r4
 800934c:	19c9      	adds	r1, r1, r7
 800934e:	040f      	lsls	r7, r1, #16
 8009350:	b29b      	uxth	r3, r3
 8009352:	433b      	orrs	r3, r7
 8009354:	6003      	str	r3, [r0, #0]
 8009356:	ce80      	ldmia	r6!, {r7}
 8009358:	6843      	ldr	r3, [r0, #4]
 800935a:	0c3f      	lsrs	r7, r7, #16
 800935c:	436f      	muls	r7, r5
 800935e:	b29b      	uxth	r3, r3
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	0c09      	lsrs	r1, r1, #16
 8009364:	185b      	adds	r3, r3, r1
 8009366:	9905      	ldr	r1, [sp, #20]
 8009368:	9006      	str	r0, [sp, #24]
 800936a:	0c1f      	lsrs	r7, r3, #16
 800936c:	3004      	adds	r0, #4
 800936e:	42b1      	cmp	r1, r6
 8009370:	d8e6      	bhi.n	8009340 <__multiply+0xd6>
 8009372:	9906      	ldr	r1, [sp, #24]
 8009374:	604b      	str	r3, [r1, #4]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	3204      	adds	r2, #4
 800937a:	3304      	adds	r3, #4
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	e79f      	b.n	80092c0 <__multiply+0x56>
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	3b01      	subs	r3, #1
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	e79f      	b.n	80092c8 <__multiply+0x5e>

08009388 <__pow5mult>:
 8009388:	2303      	movs	r3, #3
 800938a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800938c:	4013      	ands	r3, r2
 800938e:	0005      	movs	r5, r0
 8009390:	000e      	movs	r6, r1
 8009392:	0014      	movs	r4, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d008      	beq.n	80093aa <__pow5mult+0x22>
 8009398:	4922      	ldr	r1, [pc, #136]	; (8009424 <__pow5mult+0x9c>)
 800939a:	3b01      	subs	r3, #1
 800939c:	009a      	lsls	r2, r3, #2
 800939e:	5852      	ldr	r2, [r2, r1]
 80093a0:	2300      	movs	r3, #0
 80093a2:	0031      	movs	r1, r6
 80093a4:	f7ff fed1 	bl	800914a <__multadd>
 80093a8:	0006      	movs	r6, r0
 80093aa:	10a3      	asrs	r3, r4, #2
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	d036      	beq.n	800941e <__pow5mult+0x96>
 80093b0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	d107      	bne.n	80093c6 <__pow5mult+0x3e>
 80093b6:	2010      	movs	r0, #16
 80093b8:	f7ff fe6c 	bl	8009094 <malloc>
 80093bc:	6268      	str	r0, [r5, #36]	; 0x24
 80093be:	6044      	str	r4, [r0, #4]
 80093c0:	6084      	str	r4, [r0, #8]
 80093c2:	6004      	str	r4, [r0, #0]
 80093c4:	60c4      	str	r4, [r0, #12]
 80093c6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80093c8:	68bc      	ldr	r4, [r7, #8]
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	d107      	bne.n	80093de <__pow5mult+0x56>
 80093ce:	4916      	ldr	r1, [pc, #88]	; (8009428 <__pow5mult+0xa0>)
 80093d0:	0028      	movs	r0, r5
 80093d2:	f7ff ff41 	bl	8009258 <__i2b>
 80093d6:	2300      	movs	r3, #0
 80093d8:	0004      	movs	r4, r0
 80093da:	60b8      	str	r0, [r7, #8]
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	2201      	movs	r2, #1
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	4213      	tst	r3, r2
 80093e4:	d00a      	beq.n	80093fc <__pow5mult+0x74>
 80093e6:	0031      	movs	r1, r6
 80093e8:	0022      	movs	r2, r4
 80093ea:	0028      	movs	r0, r5
 80093ec:	f7ff ff3d 	bl	800926a <__multiply>
 80093f0:	0007      	movs	r7, r0
 80093f2:	0031      	movs	r1, r6
 80093f4:	0028      	movs	r0, r5
 80093f6:	f7ff fe8f 	bl	8009118 <_Bfree>
 80093fa:	003e      	movs	r6, r7
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	105b      	asrs	r3, r3, #1
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	d00c      	beq.n	800941e <__pow5mult+0x96>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	2800      	cmp	r0, #0
 8009408:	d107      	bne.n	800941a <__pow5mult+0x92>
 800940a:	0022      	movs	r2, r4
 800940c:	0021      	movs	r1, r4
 800940e:	0028      	movs	r0, r5
 8009410:	f7ff ff2b 	bl	800926a <__multiply>
 8009414:	2300      	movs	r3, #0
 8009416:	6020      	str	r0, [r4, #0]
 8009418:	6003      	str	r3, [r0, #0]
 800941a:	0004      	movs	r4, r0
 800941c:	e7df      	b.n	80093de <__pow5mult+0x56>
 800941e:	0030      	movs	r0, r6
 8009420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	08009a08 	.word	0x08009a08
 8009428:	00000271 	.word	0x00000271

0800942c <__lshift>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	000d      	movs	r5, r1
 8009430:	0017      	movs	r7, r2
 8009432:	692b      	ldr	r3, [r5, #16]
 8009434:	1154      	asrs	r4, r2, #5
 8009436:	b085      	sub	sp, #20
 8009438:	18e3      	adds	r3, r4, r3
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	3301      	adds	r3, #1
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	6849      	ldr	r1, [r1, #4]
 8009442:	68ab      	ldr	r3, [r5, #8]
 8009444:	9002      	str	r0, [sp, #8]
 8009446:	9a00      	ldr	r2, [sp, #0]
 8009448:	4293      	cmp	r3, r2
 800944a:	db35      	blt.n	80094b8 <__lshift+0x8c>
 800944c:	9802      	ldr	r0, [sp, #8]
 800944e:	f7ff fe2b 	bl	80090a8 <_Balloc>
 8009452:	2300      	movs	r3, #0
 8009454:	0002      	movs	r2, r0
 8009456:	0006      	movs	r6, r0
 8009458:	0019      	movs	r1, r3
 800945a:	3214      	adds	r2, #20
 800945c:	42a3      	cmp	r3, r4
 800945e:	db2e      	blt.n	80094be <__lshift+0x92>
 8009460:	43e3      	mvns	r3, r4
 8009462:	17db      	asrs	r3, r3, #31
 8009464:	401c      	ands	r4, r3
 8009466:	002b      	movs	r3, r5
 8009468:	00a4      	lsls	r4, r4, #2
 800946a:	1914      	adds	r4, r2, r4
 800946c:	692a      	ldr	r2, [r5, #16]
 800946e:	3314      	adds	r3, #20
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	189a      	adds	r2, r3, r2
 8009474:	4694      	mov	ip, r2
 8009476:	221f      	movs	r2, #31
 8009478:	4017      	ands	r7, r2
 800947a:	d024      	beq.n	80094c6 <__lshift+0x9a>
 800947c:	3201      	adds	r2, #1
 800947e:	1bd2      	subs	r2, r2, r7
 8009480:	9203      	str	r2, [sp, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	0020      	movs	r0, r4
 8009488:	40b9      	lsls	r1, r7
 800948a:	430a      	orrs	r2, r1
 800948c:	c404      	stmia	r4!, {r2}
 800948e:	cb04      	ldmia	r3!, {r2}
 8009490:	9903      	ldr	r1, [sp, #12]
 8009492:	40ca      	lsrs	r2, r1
 8009494:	459c      	cmp	ip, r3
 8009496:	d8f5      	bhi.n	8009484 <__lshift+0x58>
 8009498:	6042      	str	r2, [r0, #4]
 800949a:	2a00      	cmp	r2, #0
 800949c:	d002      	beq.n	80094a4 <__lshift+0x78>
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	3302      	adds	r3, #2
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	9802      	ldr	r0, [sp, #8]
 80094a8:	3b01      	subs	r3, #1
 80094aa:	6133      	str	r3, [r6, #16]
 80094ac:	0029      	movs	r1, r5
 80094ae:	f7ff fe33 	bl	8009118 <_Bfree>
 80094b2:	0030      	movs	r0, r6
 80094b4:	b005      	add	sp, #20
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	3101      	adds	r1, #1
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	e7c3      	b.n	8009446 <__lshift+0x1a>
 80094be:	0098      	lsls	r0, r3, #2
 80094c0:	5011      	str	r1, [r2, r0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	e7ca      	b.n	800945c <__lshift+0x30>
 80094c6:	cb04      	ldmia	r3!, {r2}
 80094c8:	c404      	stmia	r4!, {r2}
 80094ca:	459c      	cmp	ip, r3
 80094cc:	d8fb      	bhi.n	80094c6 <__lshift+0x9a>
 80094ce:	e7e9      	b.n	80094a4 <__lshift+0x78>

080094d0 <__mcmp>:
 80094d0:	690a      	ldr	r2, [r1, #16]
 80094d2:	6903      	ldr	r3, [r0, #16]
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	d10d      	bne.n	80094f6 <__mcmp+0x26>
 80094da:	0092      	lsls	r2, r2, #2
 80094dc:	3014      	adds	r0, #20
 80094de:	3114      	adds	r1, #20
 80094e0:	1884      	adds	r4, r0, r2
 80094e2:	1889      	adds	r1, r1, r2
 80094e4:	3c04      	subs	r4, #4
 80094e6:	3904      	subs	r1, #4
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	680a      	ldr	r2, [r1, #0]
 80094ec:	4295      	cmp	r5, r2
 80094ee:	d004      	beq.n	80094fa <__mcmp+0x2a>
 80094f0:	2301      	movs	r3, #1
 80094f2:	4295      	cmp	r5, r2
 80094f4:	d304      	bcc.n	8009500 <__mcmp+0x30>
 80094f6:	0018      	movs	r0, r3
 80094f8:	bd30      	pop	{r4, r5, pc}
 80094fa:	42a0      	cmp	r0, r4
 80094fc:	d3f2      	bcc.n	80094e4 <__mcmp+0x14>
 80094fe:	e7fa      	b.n	80094f6 <__mcmp+0x26>
 8009500:	425b      	negs	r3, r3
 8009502:	e7f8      	b.n	80094f6 <__mcmp+0x26>

08009504 <__mdiff>:
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	000d      	movs	r5, r1
 8009508:	b085      	sub	sp, #20
 800950a:	0007      	movs	r7, r0
 800950c:	0011      	movs	r1, r2
 800950e:	0028      	movs	r0, r5
 8009510:	0014      	movs	r4, r2
 8009512:	f7ff ffdd 	bl	80094d0 <__mcmp>
 8009516:	1e06      	subs	r6, r0, #0
 8009518:	d108      	bne.n	800952c <__mdiff+0x28>
 800951a:	0001      	movs	r1, r0
 800951c:	0038      	movs	r0, r7
 800951e:	f7ff fdc3 	bl	80090a8 <_Balloc>
 8009522:	2301      	movs	r3, #1
 8009524:	6146      	str	r6, [r0, #20]
 8009526:	6103      	str	r3, [r0, #16]
 8009528:	b005      	add	sp, #20
 800952a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952c:	2301      	movs	r3, #1
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	2800      	cmp	r0, #0
 8009532:	db04      	blt.n	800953e <__mdiff+0x3a>
 8009534:	0023      	movs	r3, r4
 8009536:	002c      	movs	r4, r5
 8009538:	001d      	movs	r5, r3
 800953a:	2300      	movs	r3, #0
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	6861      	ldr	r1, [r4, #4]
 8009540:	0038      	movs	r0, r7
 8009542:	f7ff fdb1 	bl	80090a8 <_Balloc>
 8009546:	002f      	movs	r7, r5
 8009548:	2200      	movs	r2, #0
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	6926      	ldr	r6, [r4, #16]
 800954e:	60c3      	str	r3, [r0, #12]
 8009550:	3414      	adds	r4, #20
 8009552:	00b3      	lsls	r3, r6, #2
 8009554:	18e3      	adds	r3, r4, r3
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	692b      	ldr	r3, [r5, #16]
 800955a:	3714      	adds	r7, #20
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	9303      	str	r3, [sp, #12]
 8009562:	0003      	movs	r3, r0
 8009564:	4694      	mov	ip, r2
 8009566:	3314      	adds	r3, #20
 8009568:	cc20      	ldmia	r4!, {r5}
 800956a:	cf04      	ldmia	r7!, {r2}
 800956c:	9201      	str	r2, [sp, #4]
 800956e:	b2aa      	uxth	r2, r5
 8009570:	4494      	add	ip, r2
 8009572:	466a      	mov	r2, sp
 8009574:	4661      	mov	r1, ip
 8009576:	8892      	ldrh	r2, [r2, #4]
 8009578:	0c2d      	lsrs	r5, r5, #16
 800957a:	1a8a      	subs	r2, r1, r2
 800957c:	9901      	ldr	r1, [sp, #4]
 800957e:	0c09      	lsrs	r1, r1, #16
 8009580:	1a69      	subs	r1, r5, r1
 8009582:	1415      	asrs	r5, r2, #16
 8009584:	1949      	adds	r1, r1, r5
 8009586:	140d      	asrs	r5, r1, #16
 8009588:	b292      	uxth	r2, r2
 800958a:	0409      	lsls	r1, r1, #16
 800958c:	430a      	orrs	r2, r1
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	9a03      	ldr	r2, [sp, #12]
 8009592:	46ac      	mov	ip, r5
 8009594:	3304      	adds	r3, #4
 8009596:	42ba      	cmp	r2, r7
 8009598:	d8e6      	bhi.n	8009568 <__mdiff+0x64>
 800959a:	9902      	ldr	r1, [sp, #8]
 800959c:	001a      	movs	r2, r3
 800959e:	428c      	cmp	r4, r1
 80095a0:	d305      	bcc.n	80095ae <__mdiff+0xaa>
 80095a2:	3a04      	subs	r2, #4
 80095a4:	6813      	ldr	r3, [r2, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00e      	beq.n	80095c8 <__mdiff+0xc4>
 80095aa:	6106      	str	r6, [r0, #16]
 80095ac:	e7bc      	b.n	8009528 <__mdiff+0x24>
 80095ae:	cc04      	ldmia	r4!, {r2}
 80095b0:	b291      	uxth	r1, r2
 80095b2:	4461      	add	r1, ip
 80095b4:	140d      	asrs	r5, r1, #16
 80095b6:	0c12      	lsrs	r2, r2, #16
 80095b8:	1952      	adds	r2, r2, r5
 80095ba:	1415      	asrs	r5, r2, #16
 80095bc:	b289      	uxth	r1, r1
 80095be:	0412      	lsls	r2, r2, #16
 80095c0:	430a      	orrs	r2, r1
 80095c2:	46ac      	mov	ip, r5
 80095c4:	c304      	stmia	r3!, {r2}
 80095c6:	e7e8      	b.n	800959a <__mdiff+0x96>
 80095c8:	3e01      	subs	r6, #1
 80095ca:	e7ea      	b.n	80095a2 <__mdiff+0x9e>

080095cc <__d2b>:
 80095cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ce:	001d      	movs	r5, r3
 80095d0:	2101      	movs	r1, #1
 80095d2:	0014      	movs	r4, r2
 80095d4:	9f08      	ldr	r7, [sp, #32]
 80095d6:	f7ff fd67 	bl	80090a8 <_Balloc>
 80095da:	032b      	lsls	r3, r5, #12
 80095dc:	006d      	lsls	r5, r5, #1
 80095de:	0006      	movs	r6, r0
 80095e0:	0b1b      	lsrs	r3, r3, #12
 80095e2:	0d6d      	lsrs	r5, r5, #21
 80095e4:	d124      	bne.n	8009630 <__d2b+0x64>
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d027      	beq.n	800963c <__d2b+0x70>
 80095ec:	4668      	mov	r0, sp
 80095ee:	9400      	str	r4, [sp, #0]
 80095f0:	f7ff fe03 	bl	80091fa <__lo0bits>
 80095f4:	9c00      	ldr	r4, [sp, #0]
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d01e      	beq.n	8009638 <__d2b+0x6c>
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	2120      	movs	r1, #32
 80095fe:	001a      	movs	r2, r3
 8009600:	1a09      	subs	r1, r1, r0
 8009602:	408a      	lsls	r2, r1
 8009604:	40c3      	lsrs	r3, r0
 8009606:	4322      	orrs	r2, r4
 8009608:	6172      	str	r2, [r6, #20]
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	9c01      	ldr	r4, [sp, #4]
 800960e:	61b4      	str	r4, [r6, #24]
 8009610:	1e63      	subs	r3, r4, #1
 8009612:	419c      	sbcs	r4, r3
 8009614:	3401      	adds	r4, #1
 8009616:	6134      	str	r4, [r6, #16]
 8009618:	2d00      	cmp	r5, #0
 800961a:	d018      	beq.n	800964e <__d2b+0x82>
 800961c:	4b12      	ldr	r3, [pc, #72]	; (8009668 <__d2b+0x9c>)
 800961e:	18ed      	adds	r5, r5, r3
 8009620:	2335      	movs	r3, #53	; 0x35
 8009622:	182d      	adds	r5, r5, r0
 8009624:	603d      	str	r5, [r7, #0]
 8009626:	1a18      	subs	r0, r3, r0
 8009628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962a:	6018      	str	r0, [r3, #0]
 800962c:	0030      	movs	r0, r6
 800962e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	0352      	lsls	r2, r2, #13
 8009634:	4313      	orrs	r3, r2
 8009636:	e7d6      	b.n	80095e6 <__d2b+0x1a>
 8009638:	6174      	str	r4, [r6, #20]
 800963a:	e7e7      	b.n	800960c <__d2b+0x40>
 800963c:	a801      	add	r0, sp, #4
 800963e:	f7ff fddc 	bl	80091fa <__lo0bits>
 8009642:	2401      	movs	r4, #1
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	6134      	str	r4, [r6, #16]
 8009648:	6173      	str	r3, [r6, #20]
 800964a:	3020      	adds	r0, #32
 800964c:	e7e4      	b.n	8009618 <__d2b+0x4c>
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <__d2b+0xa0>)
 8009650:	18c0      	adds	r0, r0, r3
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <__d2b+0xa4>)
 8009654:	6038      	str	r0, [r7, #0]
 8009656:	18e3      	adds	r3, r4, r3
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	18f3      	adds	r3, r6, r3
 800965c:	6958      	ldr	r0, [r3, #20]
 800965e:	f7ff fdb2 	bl	80091c6 <__hi0bits>
 8009662:	0164      	lsls	r4, r4, #5
 8009664:	1a20      	subs	r0, r4, r0
 8009666:	e7df      	b.n	8009628 <__d2b+0x5c>
 8009668:	fffffbcd 	.word	0xfffffbcd
 800966c:	fffffbce 	.word	0xfffffbce
 8009670:	3fffffff 	.word	0x3fffffff

08009674 <_calloc_r>:
 8009674:	434a      	muls	r2, r1
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	0011      	movs	r1, r2
 800967a:	0014      	movs	r4, r2
 800967c:	f000 f808 	bl	8009690 <_malloc_r>
 8009680:	1e05      	subs	r5, r0, #0
 8009682:	d003      	beq.n	800968c <_calloc_r+0x18>
 8009684:	0022      	movs	r2, r4
 8009686:	2100      	movs	r1, #0
 8009688:	f7fe fb33 	bl	8007cf2 <memset>
 800968c:	0028      	movs	r0, r5
 800968e:	bd70      	pop	{r4, r5, r6, pc}

08009690 <_malloc_r>:
 8009690:	2303      	movs	r3, #3
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	1ccd      	adds	r5, r1, #3
 8009696:	439d      	bics	r5, r3
 8009698:	3508      	adds	r5, #8
 800969a:	0006      	movs	r6, r0
 800969c:	2d0c      	cmp	r5, #12
 800969e:	d21e      	bcs.n	80096de <_malloc_r+0x4e>
 80096a0:	250c      	movs	r5, #12
 80096a2:	42a9      	cmp	r1, r5
 80096a4:	d81d      	bhi.n	80096e2 <_malloc_r+0x52>
 80096a6:	0030      	movs	r0, r6
 80096a8:	f000 f874 	bl	8009794 <__malloc_lock>
 80096ac:	4a25      	ldr	r2, [pc, #148]	; (8009744 <_malloc_r+0xb4>)
 80096ae:	6814      	ldr	r4, [r2, #0]
 80096b0:	0021      	movs	r1, r4
 80096b2:	2900      	cmp	r1, #0
 80096b4:	d119      	bne.n	80096ea <_malloc_r+0x5a>
 80096b6:	4c24      	ldr	r4, [pc, #144]	; (8009748 <_malloc_r+0xb8>)
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <_malloc_r+0x36>
 80096be:	0030      	movs	r0, r6
 80096c0:	f000 f844 	bl	800974c <_sbrk_r>
 80096c4:	6020      	str	r0, [r4, #0]
 80096c6:	0029      	movs	r1, r5
 80096c8:	0030      	movs	r0, r6
 80096ca:	f000 f83f 	bl	800974c <_sbrk_r>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d12b      	bne.n	800972a <_malloc_r+0x9a>
 80096d2:	230c      	movs	r3, #12
 80096d4:	0030      	movs	r0, r6
 80096d6:	6033      	str	r3, [r6, #0]
 80096d8:	f000 f85d 	bl	8009796 <__malloc_unlock>
 80096dc:	e003      	b.n	80096e6 <_malloc_r+0x56>
 80096de:	2d00      	cmp	r5, #0
 80096e0:	dadf      	bge.n	80096a2 <_malloc_r+0x12>
 80096e2:	230c      	movs	r3, #12
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	2000      	movs	r0, #0
 80096e8:	bd70      	pop	{r4, r5, r6, pc}
 80096ea:	680b      	ldr	r3, [r1, #0]
 80096ec:	1b5b      	subs	r3, r3, r5
 80096ee:	d419      	bmi.n	8009724 <_malloc_r+0x94>
 80096f0:	2b0b      	cmp	r3, #11
 80096f2:	d903      	bls.n	80096fc <_malloc_r+0x6c>
 80096f4:	600b      	str	r3, [r1, #0]
 80096f6:	18cc      	adds	r4, r1, r3
 80096f8:	6025      	str	r5, [r4, #0]
 80096fa:	e003      	b.n	8009704 <_malloc_r+0x74>
 80096fc:	684b      	ldr	r3, [r1, #4]
 80096fe:	428c      	cmp	r4, r1
 8009700:	d10d      	bne.n	800971e <_malloc_r+0x8e>
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	0030      	movs	r0, r6
 8009706:	f000 f846 	bl	8009796 <__malloc_unlock>
 800970a:	0020      	movs	r0, r4
 800970c:	2207      	movs	r2, #7
 800970e:	300b      	adds	r0, #11
 8009710:	1d23      	adds	r3, r4, #4
 8009712:	4390      	bics	r0, r2
 8009714:	1ac3      	subs	r3, r0, r3
 8009716:	d0e7      	beq.n	80096e8 <_malloc_r+0x58>
 8009718:	425a      	negs	r2, r3
 800971a:	50e2      	str	r2, [r4, r3]
 800971c:	e7e4      	b.n	80096e8 <_malloc_r+0x58>
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	000c      	movs	r4, r1
 8009722:	e7ef      	b.n	8009704 <_malloc_r+0x74>
 8009724:	000c      	movs	r4, r1
 8009726:	6849      	ldr	r1, [r1, #4]
 8009728:	e7c3      	b.n	80096b2 <_malloc_r+0x22>
 800972a:	2303      	movs	r3, #3
 800972c:	1cc4      	adds	r4, r0, #3
 800972e:	439c      	bics	r4, r3
 8009730:	42a0      	cmp	r0, r4
 8009732:	d0e1      	beq.n	80096f8 <_malloc_r+0x68>
 8009734:	1a21      	subs	r1, r4, r0
 8009736:	0030      	movs	r0, r6
 8009738:	f000 f808 	bl	800974c <_sbrk_r>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d1db      	bne.n	80096f8 <_malloc_r+0x68>
 8009740:	e7c7      	b.n	80096d2 <_malloc_r+0x42>
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	20000f48 	.word	0x20000f48
 8009748:	20000f4c 	.word	0x20000f4c

0800974c <_sbrk_r>:
 800974c:	2300      	movs	r3, #0
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	4c06      	ldr	r4, [pc, #24]	; (800976c <_sbrk_r+0x20>)
 8009752:	0005      	movs	r5, r0
 8009754:	0008      	movs	r0, r1
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	f7fa fec0 	bl	80044dc <_sbrk>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d103      	bne.n	8009768 <_sbrk_r+0x1c>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d000      	beq.n	8009768 <_sbrk_r+0x1c>
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	bd70      	pop	{r4, r5, r6, pc}
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	20001348 	.word	0x20001348

08009770 <__ascii_mbtowc>:
 8009770:	b082      	sub	sp, #8
 8009772:	2900      	cmp	r1, #0
 8009774:	d100      	bne.n	8009778 <__ascii_mbtowc+0x8>
 8009776:	a901      	add	r1, sp, #4
 8009778:	1e10      	subs	r0, r2, #0
 800977a:	d006      	beq.n	800978a <__ascii_mbtowc+0x1a>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <__ascii_mbtowc+0x1e>
 8009780:	7813      	ldrb	r3, [r2, #0]
 8009782:	600b      	str	r3, [r1, #0]
 8009784:	7810      	ldrb	r0, [r2, #0]
 8009786:	1e43      	subs	r3, r0, #1
 8009788:	4198      	sbcs	r0, r3
 800978a:	b002      	add	sp, #8
 800978c:	4770      	bx	lr
 800978e:	2002      	movs	r0, #2
 8009790:	4240      	negs	r0, r0
 8009792:	e7fa      	b.n	800978a <__ascii_mbtowc+0x1a>

08009794 <__malloc_lock>:
 8009794:	4770      	bx	lr

08009796 <__malloc_unlock>:
 8009796:	4770      	bx	lr

08009798 <__ascii_wctomb>:
 8009798:	1e0b      	subs	r3, r1, #0
 800979a:	d004      	beq.n	80097a6 <__ascii_wctomb+0xe>
 800979c:	2aff      	cmp	r2, #255	; 0xff
 800979e:	d904      	bls.n	80097aa <__ascii_wctomb+0x12>
 80097a0:	238a      	movs	r3, #138	; 0x8a
 80097a2:	6003      	str	r3, [r0, #0]
 80097a4:	3b8b      	subs	r3, #139	; 0x8b
 80097a6:	0018      	movs	r0, r3
 80097a8:	4770      	bx	lr
 80097aa:	700a      	strb	r2, [r1, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7fa      	b.n	80097a6 <__ascii_wctomb+0xe>

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
